<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/memjournal.c"><comment type="block">/*
** 2008 October 7
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains code use to implement an in-memory rollback journal.
** The in-memory rollback journal is used to journal transactions for
** ":memory:" databases and when the journal_mode=MEMORY pragma is used.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<comment type="block">/* Forward references to internal structures */</comment>
<typedef>typedef <type><name><name>struct</name> <name>MemJournal</name></name></type> <name>MemJournal</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>FilePoint</name></name></type> <name>FilePoint</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>FileChunk</name></name></type> <name>FileChunk</name>;</typedef>

<comment type="block">/* Space to hold the rollback journal is allocated in increments of
** this many bytes.
**
** The size chosen is a little less than a power of two.  That way,
** the FileChunk object will have a size that almost exactly fills
** a power-of-two allocation.  This minimizes wasted space in power-of-two
** memory allocators.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JOURNAL_CHUNKSIZE</name></cpp:macro> <cpp:value>((int)(1024-sizeof(FileChunk*)))</cpp:value></cpp:define>

<comment type="block">/*
** The rollback journal is composed of a linked list of these structures.
*/</comment>
<struct>struct <name>FileChunk</name> <block>{
  <decl_stmt><decl><type><name>FileChunk</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>               <comment type="block">/* Next chunk in the journal */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>zChunk</name><index>[<expr><name>JOURNAL_CHUNKSIZE</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* Content of this chunk */</comment>
}</block>;</struct>

<comment type="block">/*
** An instance of this object serves as a cursor into the rollback journal.
** The cursor can be either for reading or writing.
*/</comment>
<struct>struct <name>FilePoint</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iOffset</name></decl>;</decl_stmt>          <comment type="block">/* Offset from the beginning of the file */</comment>
  <decl_stmt><decl><type><name>FileChunk</name> <modifier>*</modifier></type><name>pChunk</name></decl>;</decl_stmt>              <comment type="block">/* Specific chunk into which cursor points */</comment>
}</block>;</struct>

<comment type="block">/*
** This subclass is a subclass of sqlite3_file.  Each open memory-journal
** is an instance of this class.
*/</comment>
<struct>struct <name>MemJournal</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_io_methods</name> <modifier>*</modifier></type><name>pMethod</name></decl>;</decl_stmt>    <comment type="block">/* Parent class. MUST BE FIRST */</comment>
  <decl_stmt><decl><type><name>FileChunk</name> <modifier>*</modifier></type><name>pFirst</name></decl>;</decl_stmt>              <comment type="block">/* Head of in-memory chunk-list */</comment>
  <decl_stmt><decl><type><name>FilePoint</name></type> <name>endpoint</name></decl>;</decl_stmt>             <comment type="block">/* Pointer to the end of the file */</comment>
  <decl_stmt><decl><type><name>FilePoint</name></type> <name>readpoint</name></decl>;</decl_stmt>            <comment type="block">/* Pointer to the end of the last xRead() */</comment>
}</block>;</struct>

<comment type="block">/*
** Read data from the in-memory journal file.  This is the implementation
** of the sqlite3_vfs.xRead method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memjrnlRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>,    <comment type="block">/* The journal file from which to read */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,            <comment type="block">/* Put the results here */</comment>
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,              <comment type="block">/* Number of bytes to read */</comment>
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>     <comment type="block">/* Begin reading at this offset */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemJournal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemJournal</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zOut</name> <init>= <expr><name>zBuf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRead</name> <init>= <expr><name>iAmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iChunkOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FileChunk</name> <modifier>*</modifier></type><name>pChunk</name></decl>;</decl_stmt>

  <comment type="block">/* SQLite never tries to read past the end of a rollback journal file */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>iOffset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>readpoint</name><operator>.</operator><name>iOffset</name></name><operator>!=</operator><name>iOfst</name> <operator>||</operator> <name>iOfst</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>pChunk</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pFirst</name></name></expr>;</init> 
        <condition><expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>pChunk</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>iOff</name><operator>+</operator><name>JOURNAL_CHUNKSIZE</name><operator>)</operator><operator>&lt;=</operator><name>iOfst</name></expr>;</condition>
        <incr><expr><name>pChunk</name><operator>=</operator><name><name>pChunk</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>
    )</control><block>{<block_content>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>JOURNAL_CHUNKSIZE</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>pChunk</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>readpoint</name><operator>.</operator><name>pChunk</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>iChunkOffset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iOfst</name><operator>%</operator><name>JOURNAL_CHUNKSIZE</name><operator>)</operator></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iSpace</name> <init>= <expr><name>JOURNAL_CHUNKSIZE</name> <operator>-</operator> <name>iChunkOffset</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCopy</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>nRead</name></expr></argument>, <argument><expr><operator>(</operator><name>JOURNAL_CHUNKSIZE</name> <operator>-</operator> <name>iChunkOffset</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pChunk</name><operator>-&gt;</operator><name>zChunk</name><index>[<expr><name>iChunkOffset</name></expr>]</index></name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zOut</name> <operator>+=</operator> <name>nCopy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nRead</name> <operator>-=</operator> <name>iSpace</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iChunkOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block> while<condition>( <expr><name>nRead</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>pChunk</name><operator>=</operator><name><name>pChunk</name><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nRead</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition>;</do>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>readpoint</name><operator>.</operator><name>iOffset</name></name> <operator>=</operator> <name>iOfst</name><operator>+</operator><name>iAmt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>readpoint</name><operator>.</operator><name>pChunk</name></name> <operator>=</operator> <name>pChunk</name></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memjrnlWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>,    <comment type="block">/* The journal file into which to write */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,      <comment type="block">/* Take data to be written from here */</comment>
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,              <comment type="block">/* Number of bytes to write */</comment>
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>     <comment type="block">/* Begin writing at this offset into the file */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemJournal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemJournal</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name> <init>= <expr><name>iAmt</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zWrite</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>zBuf</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* An in-memory journal file should only ever be appended to. Random
  ** access writes are not required by sqlite.
  */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iOfst</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>iOffset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>( <expr><name>nWrite</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>FileChunk</name> <modifier>*</modifier></type><name>pChunk</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>pChunk</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iChunkOffset</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>iOffset</name></name><operator>%</operator><name>JOURNAL_CHUNKSIZE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iSpace</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>nWrite</name></expr></argument>, <argument><expr><name>JOURNAL_CHUNKSIZE</name> <operator>-</operator> <name>iChunkOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>iChunkOffset</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* New chunk is required to extend the file. */</comment>
      <decl_stmt><decl><type><name>FileChunk</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FileChunk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pNew</name></expr> )</condition><block>{<block_content>
        <return>return <expr><name>SQLITE_IOERR_NOMEM</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pChunk</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFirst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pChunk</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>pFirst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFirst</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>pChunk</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>pChunk</name><operator>-&gt;</operator><name>zChunk</name><index>[<expr><name>iChunkOffset</name></expr>]</index></name></expr></argument>, <argument><expr><name>zWrite</name></expr></argument>, <argument><expr><name>iSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zWrite</name> <operator>+=</operator> <name>iSpace</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nWrite</name> <operator>-=</operator> <name>iSpace</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>iOffset</name></name> <operator>+=</operator> <name>iSpace</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memjrnlTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemJournal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemJournal</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FileChunk</name> <modifier>*</modifier></type><name>pChunk</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pChunk</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pFirst</name></name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>pChunk</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>FileChunk</name> <modifier>*</modifier></type><name>pTmp</name> <init>= <expr><name>pChunk</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pChunk</name> <operator>=</operator> <name><name>pChunk</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3MemJournalOpen</name><argument_list>(<argument><expr><name>pJfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memjrnlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memjrnlTruncate</name><argument_list>(<argument><expr><name>pJfd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Sync the file.
**
** Syncing an in-memory journal is a no-op.  And, in fact, this routine
** is never called in a working implementation.  This implementation
** exists purely as a contingency, in case some malfunction in some other
** part of SQLite causes Sync to be called by mistake.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memjrnlSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>NotUsed2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER2</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>, <argument><expr><name>NotUsed2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Query the size of the file in bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memjrnlFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemJournal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemJournal</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <operator>(</operator><name>sqlite_int64</name><operator>)</operator> <name><name>p</name><operator>-&gt;</operator><name>endpoint</name><operator>.</operator><name>iOffset</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Table of methods for MemJournal sqlite3_file object.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>sqlite3_io_methods</name></name></type> <name>MemJournalMethods</name> <init>= <expr><block>{
  <expr><literal type="number">1</literal></expr>,                <comment type="block">/* iVersion */</comment>
  <expr><name>memjrnlClose</name></expr>,     <comment type="block">/* xClose */</comment>
  <expr><name>memjrnlRead</name></expr>,      <comment type="block">/* xRead */</comment>
  <expr><name>memjrnlWrite</name></expr>,     <comment type="block">/* xWrite */</comment>
  <expr><name>memjrnlTruncate</name></expr>,  <comment type="block">/* xTruncate */</comment>
  <expr><name>memjrnlSync</name></expr>,      <comment type="block">/* xSync */</comment>
  <expr><name>memjrnlFileSize</name></expr>,  <comment type="block">/* xFileSize */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xLock */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xUnlock */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xCheckReservedLock */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xSectorSize */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xShmMap */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xShmLock */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xShmBarrier */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xShmUnmap */</comment>
  <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xFetch */</comment>
  <expr><literal type="number">0</literal></expr>                 <comment type="block">/* xUnfetch */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* 
** Open a journal file.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3MemJournalOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MemJournal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>MemJournal</name> <operator>*</operator><operator>)</operator><name>pJfd</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>EIGHT_BYTE_ALIGNMENT</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>sqlite3MemJournalSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMethod</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_io_methods</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>MemJournalMethods</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return true if the file-handle passed as an argument is 
** an in-memory journal 
*/</comment>
<function><type><name>int</name></type> <name>sqlite3IsMemJournal</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pJfd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>pJfd</name><operator>-&gt;</operator><name>pMethods</name></name><operator>==</operator><operator>&amp;</operator><name>MemJournalMethods</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Return the number of bytes required to store a MemJournal file descriptor.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MemJournalSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemJournal</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>
</unit>
