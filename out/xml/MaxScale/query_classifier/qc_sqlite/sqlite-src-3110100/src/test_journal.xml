<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/test_journal.c"><comment type="block">/*
** 2008 Jan 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains code for a VFS layer that acts as a wrapper around
** an existing VFS. The code in this file attempts to verify that SQLite
** correctly populates and syncs a journal file before writing to a
** corresponding database file.
**
** INTERFACE
**
**   The public interface to this wrapper VFS is two functions:
**
**     jt_register()
**     jt_unregister()
**
**   See header comments associated with those two functions below for 
**   details.
**
** LIMITATIONS
**
**   This wrapper will not work if "PRAGMA synchronous = off" is used.
**
** OPERATION
**
**  Starting a Transaction:
**
**   When a write-transaction is started, the contents of the database is
**   inspected and the following data stored as part of the database file 
**   handle (type struct jt_file):
**
**     a) The page-size of the database file.
**     b) The number of pages that are in the database file.
**     c) The set of page numbers corresponding to free-list leaf pages.
**     d) A check-sum for every page in the database file.
**
**   The start of a write-transaction is deemed to have occurred when a 
**   28-byte journal header is written to byte offset 0 of the journal 
**   file.
**
**  Syncing the Journal File:
**
**   Whenever the xSync method is invoked to sync a journal-file, the
**   contents of the journal file are read. For each page written to
**   the journal file, a check-sum is calculated and compared to the  
**   check-sum calculated for the corresponding database page when the
**   write-transaction was initialized. The success of the comparison
**   is assert()ed. So if SQLite has written something other than the
**   original content to the database file, an assert() will fail.
**
**   Additionally, the set of page numbers for which records exist in
**   the journal file is added to (unioned with) the set of page numbers
**   corresponding to free-list leaf pages collected when the 
**   write-transaction was initialized. This set comprises the page-numbers 
**   corresponding to those pages that SQLite may now safely modify.
**
**  Writing to the Database File:
**
**   When a block of data is written to a database file, the following
**   invariants are asserted:
**
**     a) That the block of data is an aligned block of page-size bytes.
**
**     b) That if the page being written did not exist when the 
**        transaction was started (i.e. the database file is growing), then
**        the journal-file must have been synced at least once since
**        the start of the transaction.
**
**     c) That if the page being written did exist when the transaction 
**        was started, then the page must have either been a free-list
**        leaf page at the start of the transaction, or else must have
**        been stored in the journal file prior to the most recent sync.
**
**  Closing a Transaction:
**
**   When a transaction is closed, all data collected at the start of
**   the transaction, or following an xSync of a journal-file, is 
**   discarded. The end of a transaction is recognized when any one 
**   of the following occur:
**
**     a) A block of zeroes (or anything else that is not a valid 
**        journal-header) is written to the start of the journal file.
**
**     b) A journal file is truncated to zero bytes in size using xTruncate.
**
**     c) The journal file is deleted using xDelete.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_TEST</name></expr></cpp:if>          <comment type="block">/* This file is used for testing only */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** Maximum pathname length supported by the jt backend.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JT_MAX_PATHNAME</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<comment type="block">/*
** Name used to identify this VFS.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JT_VFS_NAME</name></cpp:macro> <cpp:value>"jt"</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>jt_file</name></name></type> <name>jt_file</name>;</typedef>
<struct>struct <name>jt_file</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>       <comment type="block">/* Name of open file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>               <comment type="block">/* Flags the file was opened with */</comment>

  <comment type="block">/* The following are only used by database file file handles */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eLock</name></decl>;</decl_stmt>               <comment type="block">/* Current lock held on the file */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>nPage</name></decl>;</decl_stmt>               <comment type="block">/* Size of file in pages when transaction started */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>nPagesize</name></decl>;</decl_stmt>           <comment type="block">/* Page size when transaction started */</comment>
  <decl_stmt><decl><type><name>Bitvec</name> <modifier>*</modifier></type><name>pWritable</name></decl>;</decl_stmt>       <comment type="block">/* Bitvec of pages that may be written to the file */</comment>
  <decl_stmt><decl><type><name>u32</name> <modifier>*</modifier></type><name>aCksum</name></decl>;</decl_stmt>             <comment type="block">/* Checksum for first nPage pages */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSync</name></decl>;</decl_stmt>               <comment type="block">/* Number of times journal file has been synced */</comment>

  <comment type="block">/* Only used by journal file-handles */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iMaxOff</name></decl>;</decl_stmt>   <comment type="block">/* Maximum offset written to this transaction */</comment>

  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>          <comment type="block">/* All files are stored in a linked list */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name></decl>;</decl_stmt>     <comment type="block">/* The file handle for the underlying vfs */</comment>
}</block>;</struct>

<comment type="block">/*
** Method declarations for jt_file.
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtRead</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtWrite</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Method declarations for jt_vfs.
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtAccess</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtFullPathname</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>jtDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jtDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><name>jtDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name><operator>*</operator></expr></argument>,<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>zSymbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>jtDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>jtCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name></type> <name>jt_vfs</name> <init>= <expr><block>{
  <expr><literal type="number">2</literal></expr>,                             <comment type="block">/* iVersion */</comment>
  <expr><sizeof>sizeof<argument_list>(<argument><expr><name>jt_file</name></expr></argument>)</argument_list></sizeof></expr>,               <comment type="block">/* szOsFile */</comment>
  <expr><name>JT_MAX_PATHNAME</name></expr>,               <comment type="block">/* mxPathname */</comment>
  <expr><literal type="number">0</literal></expr>,                             <comment type="block">/* pNext */</comment>
  <expr><name>JT_VFS_NAME</name></expr>,                   <comment type="block">/* zName */</comment>
  <expr><literal type="number">0</literal></expr>,                             <comment type="block">/* pAppData */</comment>
  <expr><name>jtOpen</name></expr>,                        <comment type="block">/* xOpen */</comment>
  <expr><name>jtDelete</name></expr>,                      <comment type="block">/* xDelete */</comment>
  <expr><name>jtAccess</name></expr>,                      <comment type="block">/* xAccess */</comment>
  <expr><name>jtFullPathname</name></expr>,                <comment type="block">/* xFullPathname */</comment>
  <expr><name>jtDlOpen</name></expr>,                      <comment type="block">/* xDlOpen */</comment>
  <expr><name>jtDlError</name></expr>,                     <comment type="block">/* xDlError */</comment>
  <expr><name>jtDlSym</name></expr>,                       <comment type="block">/* xDlSym */</comment>
  <expr><name>jtDlClose</name></expr>,                     <comment type="block">/* xDlClose */</comment>
  <expr><name>jtRandomness</name></expr>,                  <comment type="block">/* xRandomness */</comment>
  <expr><name>jtSleep</name></expr>,                       <comment type="block">/* xSleep */</comment>
  <expr><name>jtCurrentTime</name></expr>,                 <comment type="block">/* xCurrentTime */</comment>
  <expr><literal type="number">0</literal></expr>,                             <comment type="block">/* xGetLastError */</comment>
  <expr><name>jtCurrentTimeInt64</name></expr>             <comment type="block">/* xCurrentTimeInt64 */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_io_methods</name></type> <name>jt_io_methods</name> <init>= <expr><block>{
  <expr><literal type="number">1</literal></expr>,                             <comment type="block">/* iVersion */</comment>
  <expr><name>jtClose</name></expr>,                       <comment type="block">/* xClose */</comment>
  <expr><name>jtRead</name></expr>,                        <comment type="block">/* xRead */</comment>
  <expr><name>jtWrite</name></expr>,                       <comment type="block">/* xWrite */</comment>
  <expr><name>jtTruncate</name></expr>,                    <comment type="block">/* xTruncate */</comment>
  <expr><name>jtSync</name></expr>,                        <comment type="block">/* xSync */</comment>
  <expr><name>jtFileSize</name></expr>,                    <comment type="block">/* xFileSize */</comment>
  <expr><name>jtLock</name></expr>,                        <comment type="block">/* xLock */</comment>
  <expr><name>jtUnlock</name></expr>,                      <comment type="block">/* xUnlock */</comment>
  <expr><name>jtCheckReservedLock</name></expr>,           <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>jtFileControl</name></expr>,                 <comment type="block">/* xFileControl */</comment>
  <expr><name>jtSectorSize</name></expr>,                  <comment type="block">/* xSectorSize */</comment>
  <expr><name>jtDeviceCharacteristics</name></expr>        <comment type="block">/* xDeviceCharacteristics */</comment>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>JtGlobal</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>             <comment type="block">/* Parent VFS */</comment>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pList</name></decl>;</decl_stmt>                <comment type="block">/* List of all open files */</comment>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>JtGlobal</name></name></type> <name>g</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Functions to obtain and relinquish a mutex to protect g.pList. The
** STATIC_PRNG mutex is reused, purely for the sake of convenience.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>enterJtMutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlite3_mutex_alloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_PRNG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>leaveJtMutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlite3_mutex_alloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_PRNG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sqlite3_io_error_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sqlite3_io_error_hit</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stop_ioerr_simulation</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piSave</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piSave2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>piSave</name> <operator>=</operator> <name>sqlite3_io_error_pending</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piSave2</name> <operator>=</operator> <name>sqlite3_io_error_hit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3_io_error_pending</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3_io_error_hit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>start_ioerr_simulation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iSave</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSave2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>sqlite3_io_error_pending</name> <operator>=</operator> <name>iSave</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3_io_error_hit</name> <operator>=</operator> <name>iSave2</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The jt_file pointed to by the argument may or may not be a file-handle
** open on a main database file. If it is, and a transaction is currently
** opened on the file, then discard all transaction related data.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>closeTransaction</name><parameter_list>(<parameter><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3BitvecDestroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWritable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aCksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pWritable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aCksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nSync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Close an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>closeTransaction</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>enterJtMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>pList</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name><operator>!=</operator><name>p</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>leaveJtMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3OsClose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Parameter zJournal is the name of a journal file that is currently 
** open. This function locates and returns the handle opened on the
** corresponding database file by the pager that currently has the
** journal file opened. This file-handle is identified by the 
** following properties:
**
**   a) SQLITE_OPEN_MAIN_DB was specified when the file was opened.
**
**   b) The file-name specified when the file was opened matches
**      all but the final 8 characters of the journal file name.
**
**   c) There is currently a reserved lock on the file.
**/</comment>
<function><type><specifier>static</specifier> <name>jt_file</name> <modifier>*</modifier></type><name>locateDatabaseHandle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zJournal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pMain</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>enterJtMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pMain</name><operator>=</operator><name><name>g</name><operator>.</operator><name>pList</name></name></expr>;</init> <condition><expr><name>pMain</name></expr>;</condition> <incr><expr><name>pMain</name><operator>=</operator><name><name>pMain</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nName</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zJournal</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"-journal"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pMain</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_OPEN_MAIN_DB</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call><operator>==</operator><name>nName</name><operator>)</operator>
     <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zJournal</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call>
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pMain</name><operator>-&gt;</operator><name>eLock</name></name><operator>&gt;=</operator><name>SQLITE_LOCK_RESERVED</name><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>leaveJtMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pMain</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Parameter z points to a buffer of 4 bytes in size containing a 
** unsigned 32-bit integer stored in big-endian format. Decode the 
** integer and return its value.
*/</comment>
<function><type><specifier>static</specifier> <name>u32</name></type> <name>decodeUint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>z</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Calculate a checksum from the buffer of length n bytes pointed to
** by parameter z.
*/</comment>
<function><type><specifier>static</specifier> <name>u32</name></type> <name>genCksum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>cksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>cksum</name> <operator>=</operator> <name>cksum</name> <operator>+</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>cksum</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>cksum</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The first argument, zBuf, points to a buffer containing a 28 byte
** serialized journal header. This function deserializes four of the
** integer fields contained in the journal header and writes their
** values to the output variables.
**
** SQLITE_OK is returned if the journal-header is successfully 
** decoded. Otherwise, SQLITE_ERROR.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>decodeJournalHdr</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,         <comment type="block">/* Input: 28 byte journal header */</comment>
  <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>pnRec</name></decl></parameter>,                        <comment type="block">/* Out: Number of journalled records */</comment>
  <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>pnPage</name></decl></parameter>,                       <comment type="block">/* Out: Original database page count */</comment>
  <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>pnSector</name></decl></parameter>,                     <comment type="block">/* Out: Sector size in bytes */</comment>
  <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>pnPagesize</name></decl></parameter>                    <comment type="block">/* Out: Page size in bytes */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aMagic</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xd7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>aMagic</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pnRec</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pnRec</name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pnPage</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pnPage</name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pnSector</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pnSector</name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pnPagesize</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pnPagesize</name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is called when a new transaction is opened, just after
** the first journal-header is written to the journal file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>openTransaction</name><parameter_list>(<parameter><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pMain</name></decl></parameter>, <parameter><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pJournal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pMain</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>closeTransaction</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMain</name><operator>-&gt;</operator><name>pWritable</name></name> <operator>=</operator> <call><name>sqlite3BitvecCreate</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMain</name><operator>-&gt;</operator><name>aCksum</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pMain</name><operator>-&gt;</operator><name>nPage</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pJournal</name><operator>-&gt;</operator><name>iMaxOff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pMain</name><operator>-&gt;</operator><name>pWritable</name></name> <operator>||</operator> <operator>!</operator><name><name>pMain</name><operator>-&gt;</operator><name>aCksum</name></name> <operator>||</operator> <operator>!</operator><name>aData</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pMain</name><operator>-&gt;</operator><name>nPage</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>iTrunk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iSave</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iSave2</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>stop_ioerr_simulation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iSave</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSave2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Read the database free-list. Add the page-number for each free-list
    ** leaf to the jt_file.pWritable bitvec.
    */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>u32</name></type> <name>nDbsize</name> <init>= <expr><call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>nDbsize</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><literal type="number">92</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>u32</name></type> <name>iPg</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>iPg</name><operator>=</operator><name>nDbsize</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iPg</name><operator>&lt;=</operator><name><name>pMain</name><operator>-&gt;</operator><name>nPage</name></name></expr>;</condition> <incr><expr><name>iPg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3BitvecSet</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>pWritable</name></name></expr></argument>, <argument><expr><name>iPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iTrunk</name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iTrunk</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>u32</name></type> <name>nLeaf</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u32</name></type> <name>iLeaf</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iOff</name> <init>= <expr><operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name>iTrunk</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLeaf</name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>iLeaf</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iLeaf</name><operator>&lt;</operator><name>nLeaf</name></expr>;</condition> <incr><expr><name>iLeaf</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>u32</name></type> <name>pgno</name> <init>= <expr><call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><literal type="number">8</literal><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>iLeaf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3BitvecSet</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>pWritable</name></name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>iTrunk</name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Calculate and store a checksum for each page in the database file. */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>pMain</name><operator>-&gt;</operator><name>nPage</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name> <init>= <expr><operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i64</name><operator>)</operator><name>ii</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>==</operator><name>PENDING_BYTE</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pMain</name><operator>-&gt;</operator><name>aCksum</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <call><name>genCksum</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ii</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>pMain</name><operator>-&gt;</operator><name>nPage</name></name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_IOERR_SHORT_READ</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>start_ioerr_simulation</name><argument_list>(<argument><expr><name>iSave</name></expr></argument>, <argument><expr><name>iSave2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The first argument to this function is a handle open on a journal file.
** This function reads the journal file and adds the page number for each
** page in the journal to the Bitvec object passed as the second argument.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>readJournalFile</name><parameter_list>(<parameter><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pMain</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iSize</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>iMaxOff</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSave</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSave2</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>aPage</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>aPage</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_IOERR_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>stop_ioerr_simulation</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iSave</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSave2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&lt;</operator><name>iSize</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>nRec</name></decl>, <decl><type ref="prev"/><name>nPage</name></decl>, <decl><type ref="prev"/><name>nSector</name></decl>, <decl><type ref="prev"/><name>nPagesize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u32</name></type> <name>ii</name></decl>;</decl_stmt>

    <comment type="block">/* Read and decode the next journal-header from the journal file. */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> 
     <operator>||</operator> <call><name>decodeJournalHdr</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nSector</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPagesize</name></expr></argument>)</argument_list></call></expr> 
    )</condition><block>{<block_content>
      <goto>goto <name>finish_rjf</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nSector</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>nRec</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* A trick. There might be another journal-header immediately 
      ** following this one. In this case, 0 records means 0 records, 
      ** not "read until the end of the file". See also ticket #2565.
      */</comment>
      <if_stmt><if>if<condition>( <expr><name>iSize</name><operator>&gt;=</operator><operator>(</operator><name>iOff</name><operator>+</operator><name>nSector</name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <literal type="number">0</literal><operator>==</operator><call><name>decodeJournalHdr</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>nRec</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>iSize</name><operator>-</operator><name>iOff</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Read all the records that follow the journal-header just read. */</comment>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><name>nRec</name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&lt;</operator><name>iSize</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>u32</name></type> <name>pgno</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pgno</name><operator>&lt;=</operator><name><name>pMain</name><operator>-&gt;</operator><name>nPage</name></name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3BitvecTest</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>pWritable</name></name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>aPage</name></expr></argument>, <argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></argument>, <argument><expr><name>iOff</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
              <decl_stmt><decl><type><name>u32</name></type> <name>cksum</name> <init>= <expr><call><name>genCksum</name><argument_list>(<argument><expr><name>aPage</name></expr></argument>, <argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>cksum</name><operator>==</operator><name><name>pMain</name><operator>-&gt;</operator><name>aCksum</name><index>[<expr><name>pgno</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>sqlite3BitvecSet</name><argument_list>(<argument><expr><name><name>pMain</name><operator>-&gt;</operator><name>pWritable</name></name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>+</operator> <name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>iOff</name> <operator>+</operator> <operator>(</operator><name>nSector</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>nSector</name><operator>)</operator> <operator>*</operator> <name>nSector</name></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>finish_rjf</name>:</label>
  <expr_stmt><expr><call><name>start_ioerr_simulation</name><argument_list>(<argument><expr><name>iSave</name></expr></argument>, <argument><expr><name>iSave2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_IOERR_SHORT_READ</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_OPEN_MAIN_JOURNAL</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pMain</name> <init>= <expr><call><name>locateDatabaseHandle</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pMain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  
      <if_stmt><if>if<condition>( <expr><name>iAmt</name><operator>==</operator><literal type="number">28</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* Zeroing the first journal-file header. This is the end of a
        ** transaction. */</comment>
        <expr_stmt><expr><call><name>closeTransaction</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iAmt</name><operator>!=</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* Writing the first journal header to a journal file. This happens
        ** when a transaction is first started.  */</comment>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>zBuf</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPage</name></name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pMain</name><operator>-&gt;</operator><name>nPagesize</name></name> <operator>=</operator> <call><name>decodeUint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><operator>(</operator><name>rc</name><operator>=</operator><call><name>openTransaction</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
          <return>return <expr><name>rc</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iMaxOff</name></name><operator>&lt;</operator><operator>(</operator><name>iOfst</name> <operator>+</operator> <name>iAmt</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iMaxOff</name></name> <operator>=</operator> <name>iOfst</name> <operator>+</operator> <name>iAmt</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_OPEN_MAIN_DB</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pWritable</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iAmt</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nPagesize</name></name> 
     <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nPagesize</name></name><operator>%</operator><name>iAmt</name><operator>==</operator><literal type="number">0</literal> 
     <operator>&amp;&amp;</operator> <name>iOfst</name><operator>&gt;=</operator><operator>(</operator><name>PENDING_BYTE</name><operator>+</operator><literal type="number">512</literal><operator>)</operator> 
     <operator>&amp;&amp;</operator> <name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&lt;=</operator><name>PENDING_BYTE</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nPagesize</name></name></expr>
    )</condition><block>{<block_content>
      <comment type="block">/* No-op. This special case is hit when the backup code is copying a
      ** to a database with a larger page-size than the source database and
      ** it needs to fill in the non-locking-region part of the original
      ** pending-byte page.
      */</comment>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>u32</name></type> <name>pgno</name> <init>= <expr><operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name>iOfst</name><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>nPagesize</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>iAmt</name><operator>==</operator><literal type="number">1</literal><operator>||</operator><name>iAmt</name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nPagesize</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
              <operator>(</operator><operator>(</operator><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>)</operator><operator>%</operator><name><name>p</name><operator>-&gt;</operator><name>nPagesize</name></name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pgno</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nPage</name></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>nSync</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pgno</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>nPage</name></name> <operator>||</operator> <call><name>sqlite3BitvecTest</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWritable</name></name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_OPEN_MAIN_JOURNAL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>iAmt</name><operator>==</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pMain</name> <init>= <expr><call><name>locateDatabaseHandle</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc2</name> <init>= <expr><call><name>readJournalFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_OPEN_MAIN_JOURNAL</name> <operator>&amp;&amp;</operator> <name>size</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Truncating a journal file. This is the end of a transaction. */</comment>
    <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pMain</name> <init>= <expr><call><name>locateDatabaseHandle</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>closeTransaction</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_OPEN_MAIN_DB</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pWritable</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>pgno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u32</name></type> <name>locking_page</name> <init>= <expr><operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name>PENDING_BYTE</name><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>nPagesize</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>pgno</name><operator>=</operator><operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><name>size</name><operator>/</operator><name><name>p</name><operator>-&gt;</operator><name>nPagesize</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</init> <condition><expr><name>pgno</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nPage</name></name></expr>;</condition> <incr><expr><name>pgno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pgno</name><operator>==</operator><name>locking_page</name> <operator>||</operator> <call><name>sqlite3BitvecTest</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWritable</name></name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsTruncate</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_OPEN_MAIN_JOURNAL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pMain</name></decl>;</decl_stmt>                   <comment type="block">/* The associated database file */</comment>

    <comment type="block">/* The journal file is being synced. At this point, we inspect the 
    ** contents of the file up to this point and set each bit in the 
    ** jt_file.pWritable bitvec of the main database file associated with
    ** this journal file.
    */</comment>
    <expr_stmt><expr><name>pMain</name> <operator>=</operator> <call><name>locateDatabaseHandle</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set the bitvec values */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pMain</name><operator>-&gt;</operator><name>pWritable</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pMain</name><operator>-&gt;</operator><name>nSync</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>readJournalFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>sqlite3OsSync</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Lock an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsLock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>eLock</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>eLock</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eLock</name></name> <operator>=</operator> <name>eLock</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsUnlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>eLock</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>eLock</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eLock</name></name> <operator>=</operator> <name>eLock</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsCheckReservedLock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileControl</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsSectorSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an jt-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsDeviceCharacteristics</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open an jt file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>jt_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_file</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsOpen</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>jt_io_methods</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <name>zName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pWritable</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aCksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>enterJtMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zName</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>pList</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pList</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>leaveJtMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nPath</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>nPath</name><operator>&gt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"-journal"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zPath</name><index>[<expr><name>nPath</name><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <comment type="block">/* Deleting a journal file. The end of a transaction. */</comment>
    <decl_stmt><decl><type><name>jt_file</name> <modifier>*</modifier></type><name>pMain</name> <init>= <expr><call><name>locateDatabaseHandle</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pMain</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>closeTransaction</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>sqlite3OsDelete</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsAccess</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (JT_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsFullPathname</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>jtDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>xDlOpen</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jtDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>xDlError</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*jtDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <return>return <expr><call><name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>xDlSym</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jtDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>xDlClose</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsRandomness</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsSleep</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jtCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**************************************************************************
** Start of public API.
*/</comment>

<comment type="block">/*
** Configure the jt VFS as a wrapper around the VFS named by parameter 
** zWrap. If the isDefault parameter is true, then the jt VFS is installed
** as the new default VFS for SQLite connections. If isDefault is not
** true, then the jt VFS is installed as non-default. In this case it
** is available via its name, "jt".
*/</comment>
<function><type><name>int</name></type> <name>jt_register</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zWrap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isDefault</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pVfs</name></name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name>zWrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>pVfs</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>jt_vfs</name><operator>.</operator><name>szOsFile</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jt_file</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>szOsFile</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>iVersion</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>jt_vfs</name><operator>.</operator><name>iVersion</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>g</name><operator>.</operator><name>pVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>jt_vfs</name><operator>.</operator><name>xCurrentTimeInt64</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jt_vfs</name></expr></argument>, <argument><expr><name>isDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Uninstall the jt VFS, if it is installed.
*/</comment>
<function><type><name>void</name></type> <name>jt_unregister</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jt_vfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
