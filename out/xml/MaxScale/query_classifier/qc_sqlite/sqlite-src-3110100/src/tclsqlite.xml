<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/query_classifier/qc_sqlite/sqlite-src-3110100/src/tclsqlite.c"><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** A TCL Interface to SQLite.  Append this file to sqlite3.c and
** compile the whole thing to build a TCL-enabled version of SQLite.
**
** Compile-time options:
**
**  -DTCLSH=1             Add a "main()" routine that works as a tclsh.
**
**  -DSQLITE_TCLMD5       When used in conjuction with -DTCLSH=1, add
**                        four new commands to the TCL interpreter for
**                        generating MD5 checksums:  md5, md5file,
**                        md5-10x8, and md5file-10x8.
**
**  -DSQLITE_TEST         When used in conjuction with -DTCLSH=1, add
**                        hundreds of new commands used for testing
**                        SQLite.  This option implies -DSQLITE_TCLMD5.
*/</comment>

<comment type="block">/*
** If requested, include the SQLite compiler options file for MSVC.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_MSVC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"msvc.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Some additional include files are needed if this file is not
** appended to the amalgamation.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
  <typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Used to get the current process ID */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>GETPID</name></cpp:macro> <cpp:value>getpid</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>SQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>GETPID</name></cpp:macro> <cpp:value>(int)GetCurrentProcessId</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Windows needs to know which symbols to export.  Unix does not.
 * BUILD_sqlite should be undefined for Unix.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUILD_sqlite</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TCL_STORAGE_CLASS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCL_STORAGE_CLASS</name></cpp:macro> <cpp:value>DLLEXPORT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* BUILD_sqlite */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_PREPARED_STMTS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PREPARED_STMTS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<comment type="block">/* Forward declaration */</comment>
<typedef>typedef <type><name><name>struct</name> <name>SqliteDb</name></name></type> <name>SqliteDb</name>;</typedef>

<comment type="block">/*
** New SQL functions can be created as TCL scripts.  Each such function
** is described by an instance of the following structure.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>SqlFunc</name></name></type> <name>SqlFunc</name>;</typedef>
<struct>struct <name>SqlFunc</name> <block>{
  <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl>;</decl_stmt>   <comment type="block">/* The TCL interpret to execute the function */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pScript</name></decl>;</decl_stmt>     <comment type="block">/* The Tcl_Obj representation of the script */</comment>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>        <comment type="block">/* Database connection that owns this function */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>useEvalObjv</name></decl>;</decl_stmt>      <comment type="block">/* True if it is safe to use Tcl_EvalObjv */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>          <comment type="block">/* Name of this function */</comment>
  <decl_stmt><decl><type><name>SqlFunc</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>       <comment type="block">/* Next function on the list of them all */</comment>
}</block>;</struct>

<comment type="block">/*
** New collation sequences function can be created as TCL scripts.  Each such
** function is described by an instance of the following structure.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>SqlCollate</name></name></type> <name>SqlCollate</name>;</typedef>
<struct>struct <name>SqlCollate</name> <block>{
  <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl>;</decl_stmt>   <comment type="block">/* The TCL interpret to execute the function */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zScript</name></decl>;</decl_stmt>        <comment type="block">/* The script to be run */</comment>
  <decl_stmt><decl><type><name>SqlCollate</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>    <comment type="block">/* Next function on the list of them all */</comment>
}</block>;</struct>

<comment type="block">/*
** Prepared statements are cached for faster execution.  Each prepared
** statement is described by an instance of the following structure.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>SqlPreparedStmt</name></name></type> <name>SqlPreparedStmt</name>;</typedef>
<struct>struct <name>SqlPreparedStmt</name> <block>{
  <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>  <comment type="block">/* Next in linked list */</comment>
  <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pPrev</name></decl>;</decl_stmt>  <comment type="block">/* Previous on the list */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>     <comment type="block">/* The prepared statement */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSql</name></decl>;</decl_stmt>                <comment type="block">/* chars in zSql[] */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>        <comment type="block">/* Text of the SQL statement */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nParm</name></decl>;</decl_stmt>               <comment type="block">/* Size of apParm array */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>apParm</name></decl>;</decl_stmt>        <comment type="block">/* Array of referenced object pointers */</comment>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>IncrblobChannel</name></name></type> <name>IncrblobChannel</name>;</typedef>

<comment type="block">/*
** There is one instance of this structure for each SQLite database
** that has been opened by the SQLite TCL interface.
**
** If this module is built with SQLITE_TEST defined (to create the SQLite
** testfixture executable), then it may be configured to use either
** sqlite3_prepare_v2() or sqlite3_prepare() to prepare SQL statements.
** If SqliteDb.bLegacyPrepare is true, sqlite3_prepare() is used.
*/</comment>
<struct>struct <name>SqliteDb</name> <block>{
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>               <comment type="block">/* The "real" database structure. MUST BE FIRST */</comment>
  <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl>;</decl_stmt>        <comment type="block">/* The interpreter used for this database */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBusy</name></decl>;</decl_stmt>               <comment type="block">/* The busy callback routine */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zCommit</name></decl>;</decl_stmt>             <comment type="block">/* The commit hook callback routine */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTrace</name></decl>;</decl_stmt>              <comment type="block">/* The trace callback routine */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zProfile</name></decl>;</decl_stmt>            <comment type="block">/* The profile callback routine */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zProgress</name></decl>;</decl_stmt>           <comment type="block">/* The progress callback routine */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zAuth</name></decl>;</decl_stmt>               <comment type="block">/* The authorization callback routine */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>disableAuth</name></decl>;</decl_stmt>           <comment type="block">/* Disable the authorizer if it exists */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNull</name></decl>;</decl_stmt>               <comment type="block">/* Text to substitute for an SQL NULL value */</comment>
  <decl_stmt><decl><type><name>SqlFunc</name> <modifier>*</modifier></type><name>pFunc</name></decl>;</decl_stmt>            <comment type="block">/* List of SQL functions */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pUpdateHook</name></decl>;</decl_stmt>      <comment type="block">/* Update hook script (if any) */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pRollbackHook</name></decl>;</decl_stmt>    <comment type="block">/* Rollback hook script (if any) */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pWalHook</name></decl>;</decl_stmt>         <comment type="block">/* WAL hook script (if any) */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pUnlockNotify</name></decl>;</decl_stmt>    <comment type="block">/* Unlock notify script (if any) */</comment>
  <decl_stmt><decl><type><name>SqlCollate</name> <modifier>*</modifier></type><name>pCollate</name></decl>;</decl_stmt>      <comment type="block">/* List of SQL collation functions */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                    <comment type="block">/* Return code of most recent sqlite3_exec() */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pCollateNeeded</name></decl>;</decl_stmt>   <comment type="block">/* Collation needed script */</comment>
  <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>stmtList</name></decl>;</decl_stmt> <comment type="block">/* List of prepared statements*/</comment>
  <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>stmtLast</name></decl>;</decl_stmt> <comment type="block">/* Last statement in the list */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>maxStmt</name></decl>;</decl_stmt>               <comment type="block">/* The next maximum number of stmtList */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nStmt</name></decl>;</decl_stmt>                 <comment type="block">/* Number of statements in stmtList */</comment>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>pIncrblob</name></decl>;</decl_stmt><comment type="block">/* Linked list of open incrblob channels */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nStep</name></decl>, <decl><type ref="prev"/><name>nSort</name></decl>, <decl><type ref="prev"/><name>nIndex</name></decl>;</decl_stmt>  <comment type="block">/* Statistics for most recent operation */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTransaction</name></decl>;</decl_stmt>          <comment type="block">/* Number of nested [transaction] methods */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>openFlags</name></decl>;</decl_stmt>             <comment type="block">/* Flags used to open.  (SQLITE_OPEN_URI) */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>bLegacyPrepare</name></decl>;</decl_stmt>        <comment type="block">/* True to use sqlite3_prepare() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<struct>struct <name>IncrblobChannel</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name></decl>;</decl_stmt>      <comment type="block">/* sqlite3 blob handle */</comment>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>            <comment type="block">/* Associated database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iSeek</name></decl>;</decl_stmt>                <comment type="block">/* Current seek offset */</comment>
  <decl_stmt><decl><type><name>Tcl_Channel</name></type> <name>channel</name></decl>;</decl_stmt>      <comment type="block">/* Channel identifier */</comment>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>   <comment type="block">/* Linked list of all open incrblob channels */</comment>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>pPrev</name></decl>;</decl_stmt>   <comment type="block">/* Linked list of all open incrblob channels */</comment>
}</block>;</struct>

<comment type="block">/*
** Compute a string length that is limited to what can be stored in
** lower 30 bits of a 32-bit signed integer.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>strlen30</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z2</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><operator>*</operator><name>z2</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>z2</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <return>return <expr><literal type="number">0x3fffffff</literal> <operator>&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z2</name> <operator>-</operator> <name>z</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_INCRBLOB</name></cpp:ifndef>
<comment type="block">/*
** Close all incrblob channels opened using database connection pDb.
** This is called when shutting down the database connection.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>closeIncrblobChannels</name><parameter_list>(<parameter><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name><name>pDb</name><operator>-&gt;</operator><name>pIncrblob</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name>pNext</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

    <comment type="block">/* Note: Calling unregister here call Tcl_Close on the incrblob channel, 
    ** which deletes the IncrblobChannel structure at *p. So do not
    ** call Tcl_Free() here.
    */</comment>
    <expr_stmt><expr><call><name>Tcl_UnregisterChannel</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Close an incremental blob channel.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>incrblobClose</name><parameter_list>(<parameter><decl><type><name>ClientData</name></type> <name>instanceData</name></decl></parameter>, <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>IncrblobChannel</name> <operator>*</operator><operator>)</operator><name>instanceData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_blob_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBlob</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Remove the channel from the SqliteDb.pIncrblob list. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPrev</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPrev</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name><operator>-&gt;</operator><name>pIncrblob</name></name><operator>==</operator><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name><operator>-&gt;</operator><name>pIncrblob</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Free the IncrblobChannel structure */</comment>
  <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from an incremental blob channel.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>incrblobInput</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>instanceData</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bufSize</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errorCodePtr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>IncrblobChannel</name> <operator>*</operator><operator>)</operator><name>instanceData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRead</name> <init>= <expr><name>bufSize</name></expr></init></decl>;</decl_stmt>         <comment type="block">/* Number of bytes to read */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBlob</name></decl>;</decl_stmt>                   <comment type="block">/* Total size of the blob */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                      <comment type="block">/* sqlite error code */</comment>

  <expr_stmt><expr><name>nBlob</name> <operator>=</operator> <call><name>sqlite3_blob_bytes</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name><operator>+</operator><name>nRead</name><operator>)</operator><operator>&gt;</operator><name>nBlob</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nRead</name> <operator>=</operator> <name>nBlob</name><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nRead</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_blob_read</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBlob</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>errorCodePtr</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>
  <return>return <expr><name>nRead</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to an incremental blob channel.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>incrblobOutput</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>instanceData</name></decl></parameter>, 
  <parameter><decl><type><name>CONST</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>toWrite</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errorCodePtr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>IncrblobChannel</name> <operator>*</operator><operator>)</operator><name>instanceData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name> <init>= <expr><name>toWrite</name></expr></init></decl>;</decl_stmt>        <comment type="block">/* Number of bytes to write */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBlob</name></decl>;</decl_stmt>                   <comment type="block">/* Total size of the blob */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                      <comment type="block">/* sqlite error code */</comment>

  <expr_stmt><expr><name>nBlob</name> <operator>=</operator> <call><name>sqlite3_blob_bytes</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBlob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name><operator>+</operator><name>nWrite</name><operator>)</operator><operator>&gt;</operator><name>nBlob</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>errorCodePtr</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nWrite</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_blob_write</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBlob</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name>nWrite</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>errorCodePtr</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name> <operator>+=</operator> <name>nWrite</name></expr>;</expr_stmt>
  <return>return <expr><name>nWrite</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Seek an incremental blob channel.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>incrblobSeek</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>instanceData</name></decl></parameter>, 
  <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>seekMode</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errorCodePtr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>IncrblobChannel</name> <operator>*</operator><operator>)</operator><name>instanceData</name></expr></init></decl>;</decl_stmt>

  <switch>switch<condition>( <expr><name>seekMode</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SEEK_SET</name></expr>:</case>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SEEK_CUR</name></expr>:</case>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SEEK_END</name></expr>:</case>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name> <operator>=</operator> <call><name>sqlite3_blob_bytes</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBlob</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"Bad seekMode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>incrblobWatch</name><parameter_list>(<parameter><decl><type><name>ClientData</name></type> <name>instanceData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <comment type="block">/* NO-OP */</comment> 
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>incrblobHandle</name><parameter_list>(<parameter><decl><type><name>ClientData</name></type> <name>instanceData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>ClientData</name> <modifier>*</modifier></type><name>hPtr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>Tcl_ChannelType</name></type> <name>IncrblobChannelType</name> <init>= <expr><block>{
  <expr><literal type="string">"incrblob"</literal></expr>,                        <comment type="block">/* typeName                             */</comment>
  <expr><name>TCL_CHANNEL_VERSION_2</name></expr>,             <comment type="block">/* version                              */</comment>
  <expr><name>incrblobClose</name></expr>,                     <comment type="block">/* closeProc                            */</comment>
  <expr><name>incrblobInput</name></expr>,                     <comment type="block">/* inputProc                            */</comment>
  <expr><name>incrblobOutput</name></expr>,                    <comment type="block">/* outputProc                           */</comment>
  <expr><name>incrblobSeek</name></expr>,                      <comment type="block">/* seekProc                             */</comment>
  <expr><literal type="number">0</literal></expr>,                                 <comment type="block">/* setOptionProc                        */</comment>
  <expr><literal type="number">0</literal></expr>,                                 <comment type="block">/* getOptionProc                        */</comment>
  <expr><name>incrblobWatch</name></expr>,                     <comment type="block">/* watchProc (this is a no-op)          */</comment>
  <expr><name>incrblobHandle</name></expr>,                    <comment type="block">/* getHandleProc (always returns error) */</comment>
  <expr><literal type="number">0</literal></expr>,                                 <comment type="block">/* close2Proc                           */</comment>
  <expr><literal type="number">0</literal></expr>,                                 <comment type="block">/* blockModeProc                        */</comment>
  <expr><literal type="number">0</literal></expr>,                                 <comment type="block">/* flushProc                            */</comment>
  <expr><literal type="number">0</literal></expr>,                                 <comment type="block">/* handlerProc                          */</comment>
  <expr><literal type="number">0</literal></expr>,                                 <comment type="block">/* wideSeekProc                         */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Create a new incrblob channel.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>createIncrblobChannel</name><parameter_list>(
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, 
  <parameter><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTable</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zColumn</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iRow</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>isReadonly</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IncrblobChannel</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>TCL_READABLE</name><operator>|</operator><operator>(</operator><ternary><condition><expr><name>isReadonly</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>TCL_WRITABLE</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="block">/* This variable is used to name the channels: "incrblob_[incr count]" */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zChannel</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_blob_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>zTable</name></expr></argument>, <argument><expr><name>zColumn</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>, <argument><expr><operator>!</operator><name>isReadonly</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>IncrblobChannel</name> <operator>*</operator><operator>)</operator><call><name>Tcl_Alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IncrblobChannel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSeek</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pBlob</name></name> <operator>=</operator> <name>pBlob</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zChannel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zChannel</name></expr></argument>, <argument><expr><literal type="string">"incrblob_%d"</literal></expr></argument>, <argument><expr><operator>++</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>channel</name></name> <operator>=</operator> <call><name>Tcl_CreateChannel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>IncrblobChannelType</name></expr></argument>, <argument><expr><name>zChannel</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_RegisterChannel</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Link the new channel into the SqliteDb.pIncrblob list. */</comment>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pIncrblob</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pIncrblob</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name></name> <operator>=</operator> <name>pDb</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>Tcl_GetChannelName</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>channel</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* else clause for "#ifndef SQLITE_OMIT_INCRBLOB" */</comment>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>closeIncrblobChannels</name><parameter_list>(<parameter><type><name>pDb</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Look at the script prefix in pCmd.  We will be executing this script
** after first appending one or more arguments.  This routine analyzes
** the script to see if it is safe to use Tcl_EvalObjv() on the script
** rather than the more general Tcl_EvalEx().  Tcl_EvalObjv() is much
** faster.
**
** Scripts that are safe to use with Tcl_EvalObjv() consists of a
** command name followed by zero or more arguments with no [...] or $
** or {...} or ; to be seen anywhere.  Most callback scripts consist
** of just a single procedure name and they meet this requirement.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>safeToUseEvalObjv</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pCmd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="block">/* We could try to do something with Tcl_Parse().  But we will instead
  ** just do a search for forbidden characters.  If any of the forbidden
  ** characters appear in pCmd, we will report the string as unsafe.
  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>n</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>z</name><operator>++</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'$'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'['</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">';'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Find an SqlFunc structure with the given name.  Or create a new
** one if an existing one cannot be found.  Return a pointer to the
** structure.
*/</comment>
<function><type><specifier>static</specifier> <name>SqlFunc</name> <modifier>*</modifier></type><name>findSqlFunc</name><parameter_list>(<parameter><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqlFunc</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name> <init>= <expr><call><name>strlen30</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>SqlFunc</name><operator>*</operator><operator>)</operator><call><name>Tcl_Alloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nName</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNew</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nName</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name><name>pDb</name><operator>-&gt;</operator><name>pFunc</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content> 
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pDb</name></name> <operator>=</operator> <name>pDb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pScript</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pFunc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pFunc</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free a single SqlPreparedStmt object.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbFreeStmt</name><parameter_list>(<parameter><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pStmt</name><operator>-&gt;</operator><name>zSql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pStmt</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Finalize and free a list of prepared statements
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>flushStmtCache</name><parameter_list>(<parameter><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pPreStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>pPreStmt</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name></name></expr>;</init> <condition><expr><name>pPreStmt</name></expr>;</condition> <incr><expr><name>pPreStmt</name><operator>=</operator><name>pNext</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pPreStmt</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dbFreeStmt</name><argument_list>(<argument><expr><name>pPreStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtLast</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** TCL calls this procedure when an sqlite3 database command is
** deleted.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DbDeleteCmd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>db</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>flushStmtCache</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closeIncrblobChannels</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pFunc</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>SqlFunc</name> <modifier>*</modifier></type><name>pFunc</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pFunc</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pFunc</name></name> <operator>=</operator> <name><name>pFunc</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pDb</name></name><operator>==</operator><name>pDb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <while>while<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollate</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>SqlCollate</name> <modifier>*</modifier></type><name>pCollate</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollate</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollate</name></name> <operator>=</operator> <name><name>pCollate</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pCollate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pUpdateHook</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUpdateHook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pRollbackHook</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pRollbackHook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pWalHook</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pWalHook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollateNeeded</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollateNeeded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This routine is called when a database file is locked while trying
** to execute SQL.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbBusyHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTries</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>cd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zVal</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zVal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zVal</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>nTries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_VarEval</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>zVal</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>TCL_OK</name> <operator>||</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PROGRESS_CALLBACK</name></cpp:ifndef>
<comment type="block">/*
** This routine is invoked as the 'progress callback' for the database.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbProgressHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>cd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_Eval</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>TCL_OK</name> <operator>||</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRACE</name></cpp:ifndef>
<comment type="block">/*
** This routine is called by the SQLite trace handler whenever a new
** block of SQL is executed.  The TCL script in pDb-&gt;zTrace is executed.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DbTraceHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>cd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_DString</name></type> <name>str</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>Tcl_DStringInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_Eval</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><call><name>Tcl_DStringValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRACE</name></cpp:ifndef>
<comment type="block">/*
** This routine is called by the SQLite profile handler after a statement
** SQL has executed.  The TCL script in pDb-&gt;zProfile is evaluated.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DbProfileHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>, <parameter><decl><type><name>sqlite_uint64</name></type> <name>tm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>cd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_DString</name></type> <name>str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zTm</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zTm</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zTm</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>zTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_Eval</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><call><name>Tcl_DStringValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** This routine is called when a transaction is committed.  The
** TCL script in pDb-&gt;zCommit is executed.  If it returns non-zero or
** if it throws an exception, the transaction is rolled back instead
** of being committed.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbCommitHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>cd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_Eval</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>TCL_OK</name> <operator>||</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DbRollbackHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>clientData</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pRollbackHook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>TCL_OK</name><operator>!=</operator><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pRollbackHook</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_BackgroundError</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This procedure handles wal_hook callbacks.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbWalHandler</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>clientData</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nEntry</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>clientData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pWalHook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>db</name><operator>==</operator><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pWalHook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zDb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>nEntry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>TCL_OK</name><operator>!=</operator><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> 
   <operator>||</operator> <name>TCL_OK</name><operator>!=</operator><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_BackgroundError</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_UNLOCK_NOTIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setTestUnlockNotifyVars</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iArg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>iArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"sqlite_unlock_notify_arg"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"sqlite_unlock_notify_argcount"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>setTestUnlockNotifyVars</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_UNLOCK_NOTIFY</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DbUnlockNotify</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>apArg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nArg</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><operator>(</operator><name>TCL_EVAL_GLOBAL</name><operator>|</operator><name>TCL_EVAL_DIRECT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name> <operator>*</operator><operator>)</operator><name><name>apArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setTestUnlockNotifyVars</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DbUpdateHandler</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTbl</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>rowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pCmd</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUpdateHook</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>==</operator><name>SQLITE_INSERT</name> <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_UPDATE</name> <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_DELETE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pCmd</name> <operator>=</operator> <call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUpdateHook</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(
    <argument><expr><operator>(</operator> <ternary><condition><expr><operator>(</operator><name>op</name><operator>==</operator><name>SQLITE_INSERT</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"INSERT"</literal></expr></then><else>:<expr><ternary><condition><expr><operator>(</operator><name>op</name><operator>==</operator><name>SQLITE_UPDATE</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"UPDATE"</literal></expr></then><else>:<expr><literal type="string">"DELETE"</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zDb</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zTbl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr><name>rowid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><name>TCL_EVAL_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tclCollateNeeded</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>enc</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pScript</name> <init>= <expr><call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollateNeeded</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This routine is called to evaluate an SQL collation function implemented
** using TCL script.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tclSqlCollate</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nA</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zA</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nB</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zB</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqlCollate</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>SqlCollate</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pCmd</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCmd</name> <operator>=</operator> <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zScript</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zA</name></expr></argument>, <argument><expr><name>nA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zB</name></expr></argument>, <argument><expr><name>nB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><name>TCL_EVAL_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This routine is called to evaluate an SQL function implemented
** using TCL script.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tclSqlFunc</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name><modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqlFunc</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pCmd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* If there are no arguments to the function, call Tcl_EvalObjEx on the
    ** script object directly.  This allows the TCL compiler to generate
    ** bytecode for the command on the first invocation and thus make
    ** subsequent invocations much faster. */</comment>
    <expr_stmt><expr><name>pCmd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* If there are arguments to the function, make a shallow copy of the
    ** script object, lappend the arguments, then evaluate the copy.
    **
    ** By "shallow" copy, we mean only the outer list Tcl_Obj is duplicated.
    ** The new Tcl_Obj contains pointers to the original list elements. 
    ** That way, when Tcl_EvalObjv() is run and shimmers the first element
    ** of the list to tclCmdNameType, that alternate representation will
    ** be preserved and reused on the next invocation.
    */</comment>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>aArg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nArg</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>Tcl_ListObjGetElements</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nArg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aArg</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <return>return;</return>
    </block_content>}</block></if></if_stmt>     
    <expr_stmt><expr><name>pCmd</name> <operator>=</operator> <call><name>Tcl_NewListObj</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>, <argument><expr><name>aArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pIn</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
            
      <comment type="block">/* Set pVal to contain the i'th column of this row. */</comment>
      <switch>switch<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <case>case <expr><name>SQLITE_BLOB</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SQLITE_INTEGER</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>sqlite_int64</name></type> <name>v</name> <init>= <expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;=</operator><operator>-</operator><literal type="number">2147483647</literal> <operator>&amp;&amp;</operator> <name>v</name><operator>&lt;=</operator><literal type="number">2147483647</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SQLITE_FLOAT</name></expr>:</case> <block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>sqlite3_value_double</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>Tcl_NewDoubleObj</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>SQLITE_NULL</name></expr>:</case> <block>{<block_content>
          <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
        <default>default:</default> <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block>
      </block_content>}</block></switch>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>useEvalObjv</name></name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Tcl_EvalObjEx() will automatically call Tcl_EvalObjv() if pCmd
      ** is a list without a string representation.  To prevent this from
      ** happening, make sure pCmd has a valid string representation */</comment>
      <expr_stmt><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pCmd</name></expr></argument>, <argument><expr><name>TCL_EVAL_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>!=</operator><name>TCL_RETURN</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pVar</name> <init>= <expr><call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pVar</name><operator>-&gt;</operator><name>typePtr</name></name></expr> ?</condition><then> <expr><name><name>pVar</name><operator>-&gt;</operator><name>typePtr</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>zType</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'b'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"bytearray"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pVar</name><operator>-&gt;</operator><name>bytes</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* Only return a BLOB type if the Tcl variable is a bytearray and
      ** has no string representation. */</comment>
      <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'b'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"boolean"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>Tcl_GetDoubleFromObj</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_double</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'w'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"wideInt"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator>
          <operator>(</operator><name>c</name><operator>==</operator><literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Tcl_WideInt</name></type> <name>v</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>Tcl_GetWideIntFromObj</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTHORIZATION</name></cpp:ifndef>
<comment type="block">/*
** This is the authentication function.  It appends the authentication
** type code and the two arguments to zCmd[] then invokes the result
** on the interpreter.  The reply is examined to determine if the
** authentication fails or succeeds.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>auth_callback</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg1</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg2</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg3</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg4</name></decl></parameter>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_USER_AUTHENTICATION</name></cpp:ifdef>
  ,<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg5</name></decl></parameter>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_DString</name></type> <name>str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zReply</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>disableAuth</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

  <switch>switch<condition>( <expr><name>code</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_COPY</name></expr>              :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_COPY"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_INDEX</name></expr>      :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_INDEX"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_TABLE</name></expr>      :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_TABLE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_TEMP_INDEX</name></expr> :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_TEMP_INDEX"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_TEMP_TABLE</name></expr> :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_TEMP_TABLE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_TEMP_TRIGGER</name></expr>:</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_TEMP_TRIGGER"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_TEMP_VIEW</name></expr>  :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_TEMP_VIEW"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_TRIGGER</name></expr>    :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_TRIGGER"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_VIEW</name></expr>       :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_VIEW"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DELETE</name></expr>            :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DELETE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_INDEX</name></expr>        :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_INDEX"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_TABLE</name></expr>        :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_TABLE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_TEMP_INDEX</name></expr>   :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_TEMP_INDEX"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_TEMP_TABLE</name></expr>   :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_TEMP_TABLE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_TEMP_TRIGGER</name></expr> :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_TEMP_TRIGGER"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_TEMP_VIEW</name></expr>    :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_TEMP_VIEW"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_TRIGGER</name></expr>      :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_TRIGGER"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_VIEW</name></expr>         :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_VIEW"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_INSERT</name></expr>            :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_INSERT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_PRAGMA</name></expr>            :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_PRAGMA"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_READ</name></expr>              :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_READ"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_SELECT</name></expr>            :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_SELECT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_TRANSACTION</name></expr>       :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_TRANSACTION"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_UPDATE</name></expr>            :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_UPDATE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_ATTACH</name></expr>            :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_ATTACH"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DETACH</name></expr>            :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DETACH"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_ALTER_TABLE</name></expr>       :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_ALTER_TABLE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_REINDEX</name></expr>           :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_REINDEX"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_ANALYZE</name></expr>           :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_ANALYZE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_CREATE_VTABLE</name></expr>     :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_CREATE_VTABLE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_DROP_VTABLE</name></expr>       :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_DROP_VTABLE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_FUNCTION</name></expr>          :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_FUNCTION"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_SAVEPOINT</name></expr>         :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_SAVEPOINT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_RECURSIVE</name></expr>         :</case> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"SQLITE_RECURSIVE"</literal></expr>;</expr_stmt> <break>break;</break>
    <default>default                       :</default> <expr_stmt><expr><name>zCode</name><operator>=</operator><literal type="string">"????"</literal></expr>;</expr_stmt> <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>Tcl_DStringInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>zCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><name>zArg1</name></expr> ?</condition><then> <expr><name>zArg1</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><name>zArg2</name></expr> ?</condition><then> <expr><name>zArg2</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><name>zArg3</name></expr> ?</condition><then> <expr><name>zArg3</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><name>zArg4</name></expr> ?</condition><then> <expr><name>zArg4</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_USER_AUTHENTICATION</name></cpp:ifdef>
  <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><name>zArg5</name></expr> ?</condition><then> <expr><name>zArg5</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_GlobalEval</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><call><name>Tcl_DStringValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zReply</name> <operator>=</operator> <ternary><condition><expr><name>rc</name><operator>==</operator><name>TCL_OK</name></expr> ?</condition><then> <expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"SQLITE_DENY"</literal></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zReply</name></expr></argument>,<argument><expr><literal type="string">"SQLITE_OK"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zReply</name></expr></argument>,<argument><expr><literal type="string">"SQLITE_DENY"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_DENY</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zReply</name></expr></argument>,<argument><expr><literal type="string">"SQLITE_IGNORE"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IGNORE</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_AUTHORIZATION */</comment>

<comment type="block">/*
** This routine reads a line of text from FILE in, stores
** the text in memory obtained from malloc() and returns a pointer
** to the text.  NULL is returned at end of file, or if malloc()
** fails.
**
** The interface is like "readline" but no command-line editing
** is done.
**
** copied from shell.c from '.import' command
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>local_getline</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zPrompt</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLine</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nLine</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nLine</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>zLine</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nLine</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zLine</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>+</operator><literal type="number">100</literal><operator>&gt;</operator><name>nLine</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nLine</name> <operator>=</operator> <name>nLine</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zLine</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>nLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zLine</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>fgets</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zLine</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>nLine</name> <operator>-</operator> <name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>zLine</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <while>while<condition>( <expr><name><name>zLine</name><index>[<expr><name>n</name></expr>]</index></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>zLine</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'\n'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zLine</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>zLine</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zLine</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** This function is part of the implementation of the command:
**
**   $db transaction [-deferred|-immediate|-exclusive] SCRIPT
**
** It is invoked after evaluating the script SCRIPT to commit or rollback
** the transaction or savepoint opened by the [transaction] command.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbTransPostCmd</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>,                   <comment type="block">/* data[0] is the Sqlite3Db* for $db */</comment>
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,                  <comment type="block">/* Tcl interpreter */</comment>
  <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>                           <comment type="block">/* Result of evaluating SCRIPT */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>azEnd</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"RELEASE _tcl_transaction"</literal></expr>,        <comment type="block">/* rc==TCL_ERROR, nTransaction!=0 */</comment>
    <expr><literal type="string">"COMMIT"</literal></expr>,                          <comment type="block">/* rc!=TCL_ERROR, nTransaction==0 */</comment>
    <expr><literal type="string">"ROLLBACK TO _tcl_transaction ; RELEASE _tcl_transaction"</literal></expr>,
    <expr><literal type="string">"ROLLBACK"</literal></expr>                         <comment type="block">/* rc==TCL_ERROR, nTransaction==0 */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>result</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nTransaction</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>zEnd</name> <operator>=</operator> <name><name>azEnd</name><index>[<expr><operator>(</operator><name>rc</name><operator>==</operator><name>TCL_ERROR</name><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>pDb</name><operator>-&gt;</operator><name>nTransaction</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>disableAuth</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zEnd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <comment type="block">/* This is a tricky scenario to handle. The most likely cause of an
      ** error is that the exec() above was an attempt to commit the 
      ** top-level transaction that returned SQLITE_BUSY. Or, less likely,
      ** that an IO-error has occurred. In either case, throw a Tcl exception
      ** and try to rollback the transaction.
      **
      ** But it could also be that the user executed one or more BEGIN, 
      ** COMMIT, SAVEPOINT, RELEASE or ROLLBACK commands that are confusing
      ** this method's logic. Not clear how this would be best handled.
      */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>TCL_ERROR</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>disableAuth</name></name><operator>--</operator></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unless SQLITE_TEST is defined, this function is a simple wrapper around
** sqlite3_prepare_v2(). If SQLITE_TEST is defined, then it uses either
** sqlite3_prepare_v2() or legacy interface sqlite3_prepare(), depending
** on whether or not the [db_use_legacy_prepare] command has been used to 
** configure the connection.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbPrepare</name><parameter_list>(
  <parameter><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                  <comment type="block">/* Database object */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>,               <comment type="block">/* SQL to compile */</comment>
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStmt</name></decl></parameter>,          <comment type="block">/* OUT: Prepared statement */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzOut</name></decl></parameter>              <comment type="block">/* OUT: Pointer to next SQL statement */</comment>
)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>bLegacyPrepare</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ppStmt</name></expr></argument>, <argument><expr><name>pzOut</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ppStmt</name></expr></argument>, <argument><expr><name>pzOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Search the cache for a prepared-statement object that implements the
** first SQL statement in the buffer pointed to by parameter zIn. If
** no such prepared-statement can be found, allocate and prepare a new
** one. In either case, bind the current values of the relevant Tcl
** variables to any $var, :var or @var variables in the statement. Before
** returning, set *ppPreStmt to point to the prepared-statement object.
**
** Output parameter *pzOut is set to point to the next SQL statement in
** buffer zIn, or to the '\0' byte at the end of zIn if there is no
** next statement.
**
** If successful, TCL_OK is returned. Otherwise, TCL_ERROR is returned
** and an error message loaded into interpreter pDb-&gt;interp.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbPrepareAndBind</name><parameter_list>(
  <parameter><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                  <comment type="block">/* Database object */</comment>
  <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zIn</name></decl></parameter>,                <comment type="block">/* SQL to compile */</comment>
  <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>pzOut</name></decl></parameter>,             <comment type="block">/* OUT: Pointer to next SQL statement */</comment>
  <parameter><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPreStmt</name></decl></parameter>     <comment type="block">/* OUT: Object used to cache statement */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><name>zIn</name></expr></init></decl>;</decl_stmt>         <comment type="block">/* Pointer to first SQL statement in zIn */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Prepared statement object */</comment>
  <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pPreStmt</name></decl>;</decl_stmt>      <comment type="block">/* Pointer to cached statement */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSql</name></decl>;</decl_stmt>                       <comment type="block">/* Length of zSql in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nVar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* Number of variables in statement */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iParm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Next free entry in apParm */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppPreStmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Trim spaces from the start of zSql and calculate the remaining length. */</comment>
  <while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>zSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>==</operator><literal type="char">' '</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\t'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\r'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\n'</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <expr_stmt><expr><name>nSql</name> <operator>=</operator> <call><name>strlen30</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>pPreStmt</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name></name></expr>;</init> <condition><expr><name>pPreStmt</name></expr>;</condition> <incr><expr><name>pPreStmt</name><operator>=</operator><name><name>pPreStmt</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nSql</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nSql</name><operator>&gt;=</operator><name>n</name> 
        <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>zSql</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zSql</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">';'</literal><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <name><name>pPreStmt</name><operator>-&gt;</operator><name>pStmt</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pzOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>zSql</name><index>[<expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nSql</name></name></expr>]</index></name></expr>;</expr_stmt>

      <comment type="block">/* When a prepared statement is found, unlink it from the
      ** cache list.  It will later be added back to the beginning
      ** of the cache list in order to implement LRU replacement.
      */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>pPrev</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>pPrev</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pPreStmt</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name></name> <operator>=</operator> <name><name>pPreStmt</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <name><name>pPreStmt</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtLast</name></name> <operator>=</operator> <name><name>pPreStmt</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nStmt</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>nVar</name> <operator>=</operator> <call><name>sqlite3_bind_parameter_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  
  <comment type="block">/* If no prepared statement was found. Compile the SQL text. Also allocate
  ** a new SqlPreparedStmt structure.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>pPreStmt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>dbPrepare</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><name>pzOut</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pStmt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <comment type="block">/* A compile-time error in the statement. */</comment>
        <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <comment type="block">/* The statement was a no-op.  Continue to the next statement
        ** in the SQL string.
        */</comment>
        <return>return <expr><name>TCL_OK</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pPreStmt</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nVar</name> <operator>=</operator> <call><name>sqlite3_bind_parameter_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SqlPreparedStmt</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nVar</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Tcl_Obj</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>pPreStmt</name> <operator>=</operator> <operator>(</operator><name>SqlPreparedStmt</name><operator>*</operator><operator>)</operator><call><name>Tcl_Alloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pPreStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <name>pStmt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nSql</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>*</operator><name>pzOut</name> <operator>-</operator> <name>zSql</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>zSql</name></name> <operator>=</operator> <call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>apParm</name></name> <operator>=</operator> <operator>(</operator><name>Tcl_Obj</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pPreStmt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>zSql</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zCopy</name> <init>= <expr><call><name>Tcl_Alloc</name><argument_list>(<argument><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nSql</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zCopy</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nSql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zCopy</name><index>[<expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nSql</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>zSql</name></name> <operator>=</operator> <name>zCopy</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pPreStmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strlen30</name><argument_list>(<argument><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>zSql</name></name></expr></argument>)</argument_list></call><operator>==</operator><name><name>pPreStmt</name><operator>-&gt;</operator><name>nSql</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>zSql</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nSql</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Bind values to parameters that begin with $ or : */</comment>  
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>nVar</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVar</name> <init>= <expr><call><name>sqlite3_bind_parameter_name</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zVar</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zVar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'$'</literal> <operator>||</operator> <name><name>zVar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal> <operator>||</operator> <name><name>zVar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'@'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pVar</name> <init>= <expr><call><name>Tcl_GetVar2Ex</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zVar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>pVar</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pVar</name><operator>-&gt;</operator><name>typePtr</name></name></expr> ?</condition><then> <expr><name><name>pVar</name><operator>-&gt;</operator><name>typePtr</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>zType</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>zVar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'@'</literal> <operator>||</operator>
           <operator>(</operator><name>c</name><operator>==</operator><literal type="char">'b'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"bytearray"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pVar</name><operator>-&gt;</operator><name>bytes</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
          <comment type="block">/* Load a BLOB type if the Tcl variable is a bytearray and
          ** it has no string representation or the host
          ** parameter name begins with "@". */</comment>
          <expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>apParm</name><index>[<expr><name>iParm</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pVar</name></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'b'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"boolean"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>Tcl_GetDoubleFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'w'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"wideInt"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator>
              <operator>(</operator><name>c</name><operator>==</operator><literal type="char">'i'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zType</name></expr></argument>,<argument><expr><literal type="string">"int"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>Tcl_WideInt</name></type> <name>v</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>Tcl_GetWideIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name>pVar</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>apParm</name><index>[<expr><name>iParm</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pVar</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nParm</name></name> <operator>=</operator> <name>iParm</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppPreStmt</name> <operator>=</operator> <name>pPreStmt</name></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Release a statement reference obtained by calling dbPrepareAndBind().
** There should be exactly one call to this function for each call to
** dbPrepareAndBind().
**
** If the discard parameter is non-zero, then the statement is deleted
** immediately. Otherwise it is added to the LRU list and may be returned
** by a subsequent call to dbPrepareAndBind().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbReleaseStmt</name><parameter_list>(
  <parameter><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                  <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pPreStmt</name></decl></parameter>,      <comment type="block">/* Prepared statement handle to release */</comment>
  <parameter><decl><type><name>int</name></type> <name>discard</name></decl></parameter>                     <comment type="block">/* True to delete (not cache) the pPreStmt */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Free the bound string and blob parameters */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pPreStmt</name><operator>-&gt;</operator><name>nParm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>apParm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>nParm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>maxStmt</name></name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>discard</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* If the cache is turned off, deallocated the statement */</comment>
    <expr_stmt><expr><call><name>dbFreeStmt</name><argument_list>(<argument><expr><name>pPreStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Add the prepared statement to the beginning of the cache list. */</comment>
    <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name></name></expr> )</condition><block>{<block_content>
     <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <name>pPreStmt</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name></name> <operator>=</operator> <name>pPreStmt</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtLast</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>nStmt</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtLast</name></name> <operator>=</operator> <name>pPreStmt</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>nStmt</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nStmt</name></name><operator>++</operator></expr>;</expr_stmt>
   
    <comment type="block">/* If we have too many statement in cache, remove the surplus from 
    ** the end of the cache list.  */</comment>
    <while>while<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>nStmt</name></name><operator>&gt;</operator><name><name>pDb</name><operator>-&gt;</operator><name>maxStmt</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtLast</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtLast</name></name> <operator>=</operator> <name><name>pLast</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtLast</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nStmt</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dbFreeStmt</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Structure used with dbEvalXXX() functions:
**
**   dbEvalInit()
**   dbEvalStep()
**   dbEvalFinalize()
**   dbEvalRowInfo()
**   dbEvalColumnValue()
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>DbEvalContext</name></name></type> <name>DbEvalContext</name>;</typedef>
<struct>struct <name>DbEvalContext</name> <block>{
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>                  <comment type="block">/* Database handle */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pSql</name></decl>;</decl_stmt>                  <comment type="block">/* Object holding string zSql */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>               <comment type="block">/* Remaining SQL to execute */</comment>
  <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pPreStmt</name></decl>;</decl_stmt>      <comment type="block">/* Current statement */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                       <comment type="block">/* Number of columns returned by pStmt */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pArray</name></decl>;</decl_stmt>                <comment type="block">/* Name of array variable */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>apColName</name></decl>;</decl_stmt>            <comment type="block">/* Array of column names */</comment>
}</block>;</struct>

<comment type="block">/*
** Release any cache of column names currently held as part of
** the DbEvalContext structure passed as the first argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbReleaseColumnNames</name><parameter_list>(<parameter><decl><type><name>DbEvalContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>apColName</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apColName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>apColName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apColName</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Initialize a DbEvalContext structure.
**
** If pArray is not NULL, then it contains the name of a Tcl array
** variable. The "*" member of this array is set to a list containing
** the names of the columns returned by the statement as part of each
** call to dbEvalStep(), in order from left to right. e.g. if the names 
** of the returned columns are a, b and c, it does the equivalent of the 
** tcl command:
**
**     set ${pArray}(*) {a b c}
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbEvalInit</name><parameter_list>(
  <parameter><decl><type><name>DbEvalContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,               <comment type="block">/* Pointer to structure to initialize */</comment>
  <parameter><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                  <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pSql</name></decl></parameter>,                  <comment type="block">/* Object containing SQL script */</comment>
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pArray</name></decl></parameter>                 <comment type="block">/* Name of Tcl array to set (*) element of */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DbEvalContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name></name> <operator>=</operator> <name>pDb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zSql</name></name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pSql</name></name> <operator>=</operator> <name>pSql</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pArray</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pArray</name></name> <operator>=</operator> <name>pArray</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Obtain information about the row that the DbEvalContext passed as the
** first argument currently points to.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbEvalRowInfo</name><parameter_list>(
  <parameter><decl><type><name>DbEvalContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,               <comment type="block">/* Evaluation context */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnCol</name></decl></parameter>,                     <comment type="block">/* OUT: Number of column names */</comment>
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>papColName</name></decl></parameter>           <comment type="block">/* OUT: Array of column names */</comment>
)</parameter_list><block>{<block_content>
  <comment type="block">/* Compute column names */</comment>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>apColName</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name><operator>-&gt;</operator><name>pStmt</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* Iterator variable */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                     <comment type="block">/* Number of columns returned by pStmt */</comment>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>apColName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Array of column names */</comment>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <name>nCol</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nCol</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>papColName</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pArray</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>apColName</name> <operator>=</operator> <operator>(</operator><name>Tcl_Obj</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>Tcl_Alloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Tcl_Obj</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nCol</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>apColName</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><call><name>sqlite3_column_name</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name><name>apColName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apColName</name></name> <operator>=</operator> <name>apColName</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If results are being stored in an array variable, then create
    ** the array(*) entry for that array
    */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pArray</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pColList</name> <init>= <expr><call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pStar</name> <init>= <expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pColList</name></expr></argument>, <argument><expr><name><name>apColName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pStar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_ObjSetVar2</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pStar</name></expr></argument>, <argument><expr><name>pColList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pStar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>papColName</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>papColName</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>apColName</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pnCol</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pnCol</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return one of TCL_OK, TCL_BREAK or TCL_ERROR. If TCL_ERROR is
** returned, then an error message is stored in the interpreter before
** returning.
**
** A return value of TCL_OK means there is a row of data available. The
** data may be accessed using dbEvalRowInfo() and dbEvalColumnValue(). This
** is analogous to a return of SQLITE_ROW from sqlite3_step(). If TCL_BREAK
** is returned, then the SQL script has finished executing and there are
** no further rows available. This is similar to SQLITE_DONE.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dbEvalStep</name><parameter_list>(<parameter><decl><type><name>DbEvalContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrevSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Previous value of p-&gt;zSql */</comment>

  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zPrevSql</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>zSql</name></name><operator>==</operator><name>zPrevSql</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>zSql</name></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbPrepareAndBind</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zSql</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zSql</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>TCL_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rcs</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SqlPreparedStmt</name> <modifier>*</modifier></type><name>pPreStmt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><name><name>pPreStmt</name><operator>-&gt;</operator><name>pStmt</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>rcs</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rcs</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_OK</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pArray</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>dbEvalRowInfo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rcs</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nStep</name></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>SQLITE_STMTSTATUS_FULLSCAN_STEP</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nSort</name></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>SQLITE_STMTSTATUS_SORT</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nIndex</name></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>SQLITE_STMTSTATUS_AUTOINDEX</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dbReleaseColumnNames</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name>rcs</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* If a run-time error occurs, report the error and stop reading
        ** the SQL.  */</comment>
        <expr_stmt><expr><call><name>dbReleaseStmt</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pPreStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_TEST</name></expr></cpp:if>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name><operator>-&gt;</operator><name>bLegacyPrepare</name></name> <operator>&amp;&amp;</operator> <name>rcs</name><operator>==</operator><name>SQLITE_SCHEMA</name> <operator>&amp;&amp;</operator> <name>zPrevSql</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* If the runtime error was an SQLITE_SCHEMA, and the database
          ** handle is configured to use the legacy sqlite3_prepare() 
          ** interface, retry prepare()/step() on the same SQL statement.
          ** This only happens once. If there is a second SQLITE_SCHEMA
          ** error, the error will be returned to the caller. */</comment>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zSql</name></name> <operator>=</operator> <name>zPrevSql</name></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>,
                         <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>dbReleaseStmt</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pPreStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Finished */</comment>
  <return>return <expr><name>TCL_BREAK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free all resources currently held by the DbEvalContext structure passed
** as the first argument. There should be exactly one call to this function
** for each call to dbEvalInit().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dbEvalFinalize</name><parameter_list>(<parameter><decl><type><name>DbEvalContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dbReleaseStmt</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pArray</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pArray</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbReleaseColumnNames</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to a Tcl_Obj structure with ref-count 0 that contains
** the value for the iCol'th column of the row currently pointed to by
** the DbEvalContext structure passed as the first argument.
*/</comment>
<function><type><specifier>static</specifier> <name>Tcl_Obj</name> <modifier>*</modifier></type><name>dbEvalColumnValue</name><parameter_list>(<parameter><decl><type><name>DbEvalContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pPreStmt</name><operator>-&gt;</operator><name>pStmt</name></name></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_BLOB</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>bytes</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBlob</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zBlob</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bytes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBlob</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>SQLITE_INTEGER</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>sqlite_int64</name></type> <name>v</name> <init>= <expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;=</operator><operator>-</operator><literal type="number">2147483647</literal> <operator>&amp;&amp;</operator> <name>v</name><operator>&lt;=</operator><literal type="number">2147483647</literal></expr> )</condition><block>{<block_content>
        <return>return <expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <return>return <expr><call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>SQLITE_FLOAT</name></expr>:</case> <block>{<block_content>
      <return>return <expr><call><name>Tcl_NewDoubleObj</name><argument_list>(<argument><expr><call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>SQLITE_NULL</name></expr>:</case> <block>{<block_content>
      <return>return <expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>

  <return>return <expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If using Tcl version 8.6 or greater, use the NR functions to avoid
** recursive evalution of scripts by the [db eval] and [db trans]
** commands. Even if the headers used while compiling the extension
** are 8.6 or newer, the code still tests the Tcl version at runtime.
** This allows stubs-enabled builds to be used with older Tcl libraries.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TCL_MAJOR_VERSION</name><operator>&gt;</operator><literal type="number">8</literal> <operator>||</operator> <operator>(</operator><name>TCL_MAJOR_VERSION</name><operator>==</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>TCL_MINOR_VERSION</name><operator>&gt;=</operator><literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_TCL_NRE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbUseNre</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Tcl_GetVersion</name><argument_list>(<argument><expr><operator>&amp;</operator><name>major</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return<expr><operator>(</operator> <operator>(</operator><name>major</name><operator>==</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>minor</name><operator>&gt;=</operator><literal type="number">6</literal><operator>)</operator> <operator>||</operator> <name>major</name><operator>&gt;</operator><literal type="number">8</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* 
** Compiling using headers earlier than 8.6. In this case NR cannot be
** used, so DbUseNre() to always return zero. Add #defines for the other
** Tcl_NRxxx() functions to prevent them from causing compilation errors,
** even though the only invocations of them are within conditional blocks 
** of the form:
**
**   if( DbUseNre() ) { ... }
*/</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_TCL_NRE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>DbUseNre</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>Tcl_NRAddCallback</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>Tcl_NREvalObj</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>Tcl_NRCreateCommand</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** This function is part of the implementation of the command:
**
**   $db eval SQL ?ARRAYNAME? SCRIPT
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbEvalNextCmd</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name><name>data</name><index>[]</index></name></decl></parameter>,                   <comment type="block">/* data[0] is the (DbEvalContext*) */</comment>
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,                  <comment type="block">/* Tcl interpreter */</comment>
  <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>                           <comment type="block">/* Result so far */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>result</name></expr></init></decl>;</decl_stmt>                     <comment type="block">/* Return code */</comment>

  <comment type="block">/* The first element of the data[] array is a pointer to a DbEvalContext
  ** structure allocated using Tcl_Alloc(). The second element of data[]
  ** is a pointer to a Tcl_Obj containing the script to run for each row
  ** returned by the queries encapsulated in data[0]. */</comment>
  <decl_stmt><decl><type><name>DbEvalContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>DbEvalContext</name> <operator>*</operator><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pScript</name> <init>= <expr><operator>(</operator><name>Tcl_Obj</name> <operator>*</operator><operator>)</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pArray</name></name></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><operator>(</operator><name>rc</name><operator>==</operator><name>TCL_OK</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>TCL_CONTINUE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>TCL_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dbEvalStep</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>apColName</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dbEvalRowInfo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>apColName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pVal</name> <init>= <expr><call><name>dbEvalColumnValue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>pArray</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_ObjSetVar2</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>apColName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_ObjSetVar2</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><name><name>apColName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* The required interpreter variables are now populated with the data 
    ** from the current row. If using NRE, schedule callbacks to evaluate
    ** script pScript, then to invoke this function again to fetch the next
    ** row (or clean up if there is no next row or the script throws an
    ** exception). After scheduling the callbacks, return control to the 
    ** caller.
    **
    ** If not using NRE, evaluate pScript directly and continue with the
    ** next iteration of this while(...) loop.  */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>DbUseNre</name><argument_list>()</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_NRAddCallback</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>DbEvalNextCmd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pScript</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>Tcl_NREvalObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dbEvalFinalize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>TCL_OK</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>TCL_BREAK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The "sqlite" command below creates a new Tcl command for each
** connection it opens to an SQLite database.  This routine is invoked
** whenever one of those connection-specific commands is executed
** in Tcl.  For example, if you run Tcl code like this:
**
**       sqlite3 db1  "my_database"
**       db1 close
**
** The first command opens a connection to the "my_database" database
** and calls that connection "db1".  The second command causes this
** subroutine to be invoked.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbObjCmd</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,<parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>objv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name>cd</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>choice</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>TCL_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>DB_strs</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"authorizer"</literal></expr>,         <expr><literal type="string">"backup"</literal></expr>,            <expr><literal type="string">"busy"</literal></expr>,
    <expr><literal type="string">"cache"</literal></expr>,              <expr><literal type="string">"changes"</literal></expr>,           <expr><literal type="string">"close"</literal></expr>,
    <expr><literal type="string">"collate"</literal></expr>,            <expr><literal type="string">"collation_needed"</literal></expr>,  <expr><literal type="string">"commit_hook"</literal></expr>,
    <expr><literal type="string">"complete"</literal></expr>,           <expr><literal type="string">"copy"</literal></expr>,              <expr><literal type="string">"enable_load_extension"</literal></expr>,
    <expr><literal type="string">"errorcode"</literal></expr>,          <expr><literal type="string">"eval"</literal></expr>,              <expr><literal type="string">"exists"</literal></expr>,
    <expr><literal type="string">"function"</literal></expr>,           <expr><literal type="string">"incrblob"</literal></expr>,          <expr><literal type="string">"interrupt"</literal></expr>,
    <expr><literal type="string">"last_insert_rowid"</literal></expr>,  <expr><literal type="string">"nullvalue"</literal></expr>,         <expr><literal type="string">"onecolumn"</literal></expr>,
    <expr><literal type="string">"profile"</literal></expr>,            <expr><literal type="string">"progress"</literal></expr>,          <expr><literal type="string">"rekey"</literal></expr>,
    <expr><literal type="string">"restore"</literal></expr>,            <expr><literal type="string">"rollback_hook"</literal></expr>,     <expr><literal type="string">"status"</literal></expr>,
    <expr><literal type="string">"timeout"</literal></expr>,            <expr><literal type="string">"total_changes"</literal></expr>,     <expr><literal type="string">"trace"</literal></expr>,
    <expr><literal type="string">"transaction"</literal></expr>,        <expr><literal type="string">"unlock_notify"</literal></expr>,     <expr><literal type="string">"update_hook"</literal></expr>,
    <expr><literal type="string">"version"</literal></expr>,            <expr><literal type="string">"wal_hook"</literal></expr>,          <expr><literal type="number">0</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <enum>enum <name>DB_enum</name> <block>{
    <decl><name>DB_AUTHORIZER</name></decl>,        <decl><name>DB_BACKUP</name></decl>,           <decl><name>DB_BUSY</name></decl>,
    <decl><name>DB_CACHE</name></decl>,             <decl><name>DB_CHANGES</name></decl>,          <decl><name>DB_CLOSE</name></decl>,
    <decl><name>DB_COLLATE</name></decl>,           <decl><name>DB_COLLATION_NEEDED</name></decl>, <decl><name>DB_COMMIT_HOOK</name></decl>,
    <decl><name>DB_COMPLETE</name></decl>,          <decl><name>DB_COPY</name></decl>,             <decl><name>DB_ENABLE_LOAD_EXTENSION</name></decl>,
    <decl><name>DB_ERRORCODE</name></decl>,         <decl><name>DB_EVAL</name></decl>,             <decl><name>DB_EXISTS</name></decl>,
    <decl><name>DB_FUNCTION</name></decl>,          <decl><name>DB_INCRBLOB</name></decl>,         <decl><name>DB_INTERRUPT</name></decl>,
    <decl><name>DB_LAST_INSERT_ROWID</name></decl>, <decl><name>DB_NULLVALUE</name></decl>,        <decl><name>DB_ONECOLUMN</name></decl>,
    <decl><name>DB_PROFILE</name></decl>,           <decl><name>DB_PROGRESS</name></decl>,         <decl><name>DB_REKEY</name></decl>,
    <decl><name>DB_RESTORE</name></decl>,           <decl><name>DB_ROLLBACK_HOOK</name></decl>,    <decl><name>DB_STATUS</name></decl>,
    <decl><name>DB_TIMEOUT</name></decl>,           <decl><name>DB_TOTAL_CHANGES</name></decl>,    <decl><name>DB_TRACE</name></decl>,
    <decl><name>DB_TRANSACTION</name></decl>,       <decl><name>DB_UNLOCK_NOTIFY</name></decl>,    <decl><name>DB_UPDATE_HOOK</name></decl>,
    <decl><name>DB_VERSION</name></decl>,           <decl><name>DB_WAL_HOOK</name></decl>
  }</block>;</enum>
  <comment type="block">/* don't leave trailing commas on DB_enum, it confuses the AIX xlc compiler */</comment>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"SUBCOMMAND ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIndexFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>DB_strs</name></expr></argument>, <argument><expr><literal type="string">"option"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>choice</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch<condition>( <expr><operator>(</operator>enum <name>DB_enum</name><operator>)</operator><name>choice</name></expr> )</condition><block>{<block_content>

  <comment type="block">/*    $db authorizer ?CALLBACK?
  **
  ** Invoke the given callback to authorize each SQL operation as it is
  ** compiled.  5 arguments are appended to the callback before it is
  ** invoked:
  **
  **   (1) The authorization type (ex: SQLITE_CREATE_TABLE, SQLITE_INSERT, ...)
  **   (2) First descriptive name (depends on authorization type)
  **   (3) Second descriptive name
  **   (4) Name of the database (ex: "main", "temp")
  **   (5) Name of trigger that is doing the access
  **
  ** The callback should return on of the following strings: SQLITE_OK,
  ** SQLITE_IGNORE, or SQLITE_DENY.  Any other return value is an error.
  **
  ** If this method is invoked with no arguments, the current authorization
  ** callback string is returned.
  */</comment>
  <case>case <expr><name>DB_AUTHORIZER</name></expr>:</case> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_AUTHORIZATION</name></cpp:ifdef>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"authorization not available in this build"</literal></expr></argument>,
                     <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?CALLBACK?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zAuth</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zAuth</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zAuth</name> <operator>&amp;&amp;</operator> <name>len</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name> <operator>=</operator> <call><name>Tcl_Alloc</name><argument_list>( <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr></argument>, <argument><expr><name>zAuth</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zAuth</name></name></expr> )</condition><block>{<block_content>
        <typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>sqlite3_auth_cb</name>)<parameter_list>(
           <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_set_authorizer</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><operator>(</operator><name>sqlite3_auth_cb</name><operator>)</operator><name>auth_callback</name></expr></argument>,<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_set_authorizer</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db backup ?DATABASE? FILENAME
  **
  ** Open or create a database file named FILENAME.  Transfer the
  ** content of local database DATABASE (default: "main") into the
  ** FILENAME database.
  */</comment>
  <case>case <expr><name>DB_BACKUP</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDestFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSrcDb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>pDest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>pBackup</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zSrcDb</name> <operator>=</operator> <literal type="string">"main"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zDestFile</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zSrcDb</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zDestFile</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?DATABASE? FILENAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>zDestFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDest</name></expr></argument>,
               <argument><expr><name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name><operator>|</operator> <name><name>pDb</name><operator>-&gt;</operator><name>openFlags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"cannot open target database: "</literal></expr></argument>,
           <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pBackup</name> <operator>=</operator> <call><name>sqlite3_backup_init</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSrcDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pBackup</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"backup failed: "</literal></expr></argument>,
           <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <while>while<condition>(  <expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_backup_step</name><argument_list>(<argument><expr><name>pBackup</name></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content/>}</block></while>
    <expr_stmt><expr><call><name>sqlite3_backup_finish</name><argument_list>(<argument><expr><name>pBackup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_OK</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"backup failed: "</literal></expr></argument>,
           <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>pDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db busy ?CALLBACK?
  **
  ** Invoke the given callback if an SQL statement attempts to open
  ** a locked database file.
  */</comment>
  <case>case <expr><name>DB_BUSY</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"CALLBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBusy</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zBusy</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zBusy</name> <operator>&amp;&amp;</operator> <name>len</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name> <operator>=</operator> <call><name>Tcl_Alloc</name><argument_list>( <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr></argument>, <argument><expr><name>zBusy</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zBusy</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_busy_handler</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>DbBusyHandler</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_busy_handler</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*     $db cache flush
  **     $db cache size n
  **
  ** Flush the prepared statement cache, or set the maximum number of
  ** cached statements.
  */</comment>
  <case>case <expr><name>DB_CACHE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>subCmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&lt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"cache option ?arg?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>subCmd</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>( <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>subCmd</name><operator>==</operator><literal type="char">'f'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>subCmd</name></expr></argument>,<argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>flushStmtCache</name><argument_list>( <argument><expr><name>pDb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>*</operator><name>subCmd</name><operator>==</operator><literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>subCmd</name></expr></argument>,<argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"size n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>TCL_ERROR</name><operator>==</operator><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>( <argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"cannot convert \""</literal></expr></argument>, 
               <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\" to integer"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TCL_ERROR</name></expr>;</return>
        </block_content>}</block></if><else>else<block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>flushStmtCache</name><argument_list>( <argument><expr><name>pDb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>n</name><operator>&gt;</operator><name>MAX_PREPARED_STMTS</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <name>MAX_PREPARED_STMTS</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>maxStmt</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>( <argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"bad option \""</literal></expr></argument>, 
          <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\": must be flush or size"</literal></expr></argument>,
          <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*     $db changes
  **
  ** Return the number of rows that were modified, inserted, or deleted by
  ** the most recent INSERT, UPDATE or DELETE statement, not including 
  ** any changes made by trigger programs.
  */</comment>
  <case>case <expr><name>DB_CHANGES</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pResult</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_SetIntObj</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><call><name>sqlite3_changes</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db close
  **
  ** Shutdown the database
  */</comment>
  <case>case <expr><name>DB_CLOSE</name></expr>:</case> <block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_DeleteCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db collate NAME SCRIPT
  **
  ** Create a new SQL collation function called NAME.  Whenever
  ** that function is called, invoke SCRIPT to evaluate the function.
  */</comment>
  <case>case <expr><name>DB_COLLATE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>SqlCollate</name> <modifier>*</modifier></type><name>pCollate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zScript</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nScript</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"NAME SCRIPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zScript</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pCollate</name> <operator>=</operator> <operator>(</operator><name>SqlCollate</name><operator>*</operator><operator>)</operator><call><name>Tcl_Alloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCollate</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nScript</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pCollate</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pCollate</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCollate</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pCollate</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCollate</name><operator>-&gt;</operator><name>zScript</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCollate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollate</name></name> <operator>=</operator> <name>pCollate</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCollate</name><operator>-&gt;</operator><name>zScript</name></name></expr></argument>, <argument><expr><name>zScript</name></expr></argument>, <argument><expr><name>nScript</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_create_collation</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, 
        <argument><expr><name>pCollate</name></expr></argument>, <argument><expr><name>tclSqlCollate</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db collation_needed SCRIPT
  **
  ** Create a new SQL collation function called NAME.  Whenever
  ** that function is called, invoke SCRIPT to evaluate the function.
  */</comment>
  <case>case <expr><name>DB_COLLATION_NEEDED</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"SCRIPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollateNeeded</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollateNeeded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollateNeeded</name></name> <operator>=</operator> <call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCollateNeeded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_collation_needed</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>tclCollateNeeded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db commit_hook ?CALLBACK?
  **
  ** Invoke the given callback just before committing every SQL transaction.
  ** If the callback throws an exception or returns non-zero, then the
  ** transaction is aborted.  If CALLBACK is an empty string, the callback
  ** is disabled.
  */</comment>
  <case>case <expr><name>DB_COMMIT_HOOK</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?CALLBACK?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCommit</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zCommit</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zCommit</name> <operator>&amp;&amp;</operator> <name>len</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name> <operator>=</operator> <call><name>Tcl_Alloc</name><argument_list>( <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name></expr></argument>, <argument><expr><name>zCommit</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zCommit</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_commit_hook</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>DbCommitHandler</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_commit_hook</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db complete SQL
  **
  ** Return TRUE if SQL is a complete SQL statement.  Return FALSE if
  ** additional lines of input are needed.  This is similar to the
  ** built-in "info complete" command of Tcl.
  */</comment>
  <case>case <expr><name>DB_COMPLETE</name></expr>:</case> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_COMPLETE</name></cpp:ifndef>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pResult</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>isComplete</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>isComplete</name> <operator>=</operator> <call><name>sqlite3_complete</name><argument_list>( <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_SetBooleanObj</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>isComplete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db copy conflict-algorithm table filename ?SEPARATOR? ?NULLINDICATOR?
  **
  ** Copy data into table from filename, optionally using SEPARATOR
  ** as column separators.  If a column contains a null string, or the
  ** value of NULLINDICATOR, a NULL is inserted for the column.
  ** conflict-algorithm is one of the sqlite conflict algorithms:
  **    rollback, abort, fail, ignore, replace
  ** On success, return the number of lines processed, not necessarily same
  ** as 'db changes' due to conflict-algorithm selected.
  **
  ** This code is basically an implementation/enhancement of
  ** the sqlite3 shell.c ".import" command.
  **
  ** This command usage is equivalent to the sqlite2.x COPY statement,
  ** which imports file data into a table using the PostgreSQL COPY file format:
  **   $db copy $conflit_algo $table_name $filename \t \\N
  */</comment>
  <case>case <expr><name>DB_COPY</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTable</name></decl>;</decl_stmt>               <comment type="block">/* Insert data into this table */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>                <comment type="block">/* The file from which to extract data */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zConflict</name></decl>;</decl_stmt>            <comment type="block">/* The conflict algorithm to use */</comment>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>        <comment type="block">/* A statement */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                   <comment type="block">/* Number of columns in the table */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                  <comment type="block">/* Number of bytes in an SQL string */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>                   <comment type="block">/* Loop counters */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nSep</name></decl>;</decl_stmt>                   <comment type="block">/* Number of bytes in zSep[] */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nNull</name></decl>;</decl_stmt>                  <comment type="block">/* Number of bytes in zNull[] */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>                 <comment type="block">/* An SQL statement */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLine</name></decl>;</decl_stmt>                <comment type="block">/* A single line of input from the file */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azCol</name></decl>;</decl_stmt>               <comment type="block">/* zLine[] broken up into columns */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCommit</name></decl>;</decl_stmt>        <comment type="block">/* How to commit changes */</comment>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>                   <comment type="block">/* The input file */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Line number of input file */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zLineNum</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>          <comment type="block">/* Line number print buffer */</comment>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pResult</name></decl>;</decl_stmt>           <comment type="block">/* interp result */</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNull</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>objc</name><argument_list type="generic">&lt;<argument><expr><literal type="number">5</literal> <operator>||</operator> <name>objc</name></expr></argument>&gt;</argument_list></name><literal type="number">7</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, 
         <argument><expr><literal type="string">"CONFLICT-ALGORITHM TABLE FILENAME ?SEPARATOR? ?NULLINDICATOR?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;=</operator><literal type="number">6</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zSep</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">"\t"</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;=</operator><literal type="number">7</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zNull</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zNull</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>zConflict</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zTable</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nSep</name> <operator>=</operator> <call><name>strlen30</name><argument_list>(<argument><expr><name>zSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nNull</name> <operator>=</operator> <call><name>strlen30</name><argument_list>(<argument><expr><name>zNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nSep</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"Error: non-null separator required for copy"</literal></expr></argument>,
                       <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zConflict</name></expr></argument>, <argument><expr><literal type="string">"rollback"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
       <call><name>strcmp</name><argument_list>(<argument><expr><name>zConflict</name></expr></argument>, <argument><expr><literal type="string">"abort"</literal></expr></argument>   )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
       <call><name>strcmp</name><argument_list>(<argument><expr><name>zConflict</name></expr></argument>, <argument><expr><literal type="string">"fail"</literal></expr></argument>    )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
       <call><name>strcmp</name><argument_list>(<argument><expr><name>zConflict</name></expr></argument>, <argument><expr><literal type="string">"ignore"</literal></expr></argument>  )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
       <call><name>strcmp</name><argument_list>(<argument><expr><name>zConflict</name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Error: \""</literal></expr></argument>, <argument><expr><name>zConflict</name></expr></argument>, 
            <argument><expr><literal type="string">"\", conflict-algorithm must be one of: rollback, "</literal>
            <literal type="string">"abort, fail, ignore, or replace"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM '%q'"</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Error: no such table: "</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>strlen30</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Error: "</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>nCol</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nCol</name><operator>==</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nByte</name> <operator>+</operator> <literal type="number">50</literal> <operator>+</operator> <name>nCol</name><operator>*</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Error: can't malloc()"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nByte</name><operator>+</operator><literal type="number">50</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="string">"INSERT OR %q INTO '%q' VALUES(?"</literal></expr></argument>,
         <argument><expr><name>zConflict</name></expr></argument>, <argument><expr><name>zTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>strlen30</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Error: "</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot open file: "</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>azCol</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>azCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>nCol</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>azCol</name><operator>==</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"Error: can't malloc()"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zCommit</name> <operator>=</operator> <literal type="string">"COMMIT"</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>zLine</name> <operator>=</operator> <call><name>local_getline</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>azCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>zLine</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>z</name><operator>=</operator><name>zLine</name></expr>;</init> <condition><expr><operator>*</operator><name>z</name></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>z</name><operator>==</operator><name><name>zSep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>nSep</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>azCol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>z</name><index>[<expr><name>nSep</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>z</name> <operator>+=</operator> <name>nSep</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>!=</operator><name>nCol</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nErr</name> <init>= <expr><call><name>strlen30</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">200</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zErr</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nErr</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>,
             <argument><expr><literal type="string">"Error: %s line %d: expected %d columns of data but found %d"</literal></expr></argument>,
             <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>nCol</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>zCommit</name> <operator>=</operator> <literal type="string">"ROLLBACK"</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <comment type="block">/* check for null data, if so, bind as null */</comment>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nNull</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>azCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>zNull</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator>
          <operator>||</operator> <call><name>strlen30</name><argument_list>(<argument><expr><name><name>azCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> 
        )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>azCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"Error: "</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zCommit</name> <operator>=</operator> <literal type="string">"ROLLBACK"</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>azCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zCommit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>zCommit</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* success, set result as number of lines processed */</comment>
      <expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_SetIntObj</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_OK</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* failure, append lineno where failed */</comment>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLineNum</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zLineNum</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">", failed while processing line: "</literal></expr></argument>,<argument><expr><name>zLineNum</name></expr></argument>,
                       <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **    $db enable_load_extension BOOLEAN
  **
  ** Turn the extension loading feature on or off.  It if off by
  ** default.
  */</comment>
  <case>case <expr><name>DB_ENABLE_LOAD_EXTENSION</name></expr>:</case> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type> <name>onoff</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"BOOLEAN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>onoff</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_enable_load_extension</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"extension loading is turned off at compile-time"</literal></expr></argument>,
                     <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block>

  <comment type="block">/*
  **    $db errorcode
  **
  ** Return the numeric error code that was returned by the most recent
  ** call to sqlite3_exec().
  */</comment>
  <case>case <expr><name>DB_ERRORCODE</name></expr>:</case> <block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **    $db exists $sql
  **    $db onecolumn $sql
  **
  ** The onecolumn method is the equivalent of:
  **     lindex [$db eval $sql] 0
  */</comment>
  <case>case <expr><name>DB_EXISTS</name></expr>:</case> 
  <case>case <expr><name>DB_ONECOLUMN</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>DbEvalContext</name></type> <name>sEval</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"SQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>dbEvalInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>dbEvalStep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>choice</name><operator>==</operator><name>DB_ONECOLUMN</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>TCL_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>dbEvalColumnValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>==</operator><name>TCL_BREAK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>==</operator><name>TCL_BREAK</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>TCL_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewBooleanObj</name><argument_list>(<argument><expr><name>rc</name><operator>==</operator><name>TCL_OK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>dbEvalFinalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>TCL_BREAK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_OK</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block>
   
  <comment type="block">/*
  **    $db eval $sql ?array? ?{  ...code... }?
  **
  ** The SQL statement in $sql is evaluated.  For each row, the values are
  ** placed in elements of the array named "array" and ...code... is executed.
  ** If "array" and "code" are omitted, then no callback is every invoked.
  ** If "array" is an empty string, then the values are placed in variables
  ** that have the same name as the fields extracted by the query.
  */</comment>
  <case>case <expr><name>DB_EVAL</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>objc</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal> <operator>||</operator> <name>objc</name></expr></argument>&gt;</argument_list></name><literal type="number">5</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"SQL ?ARRAY-NAME? ?SCRIPT?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>DbEvalContext</name></type> <name>sEval</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dbEvalInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while<condition>( <expr><name>TCL_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>dbEvalStep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>dbEvalRowInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nCol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>dbEvalColumnValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>dbEvalFinalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sEval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>TCL_BREAK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_OK</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>ClientData</name></type> <name><name>cd2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DbEvalContext</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pScript</name></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pArray</name> <operator>=</operator> <name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>pScript</name> <operator>=</operator> <name><name>objv</name><index>[<expr><name>objc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>DbEvalContext</name> <operator>*</operator><operator>)</operator><call><name>Tcl_Alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DbEvalContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dbEvalInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>cd2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cd2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pScript</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DbEvalNextCmd</name><argument_list>(<argument><expr><name>cd2</name></expr></argument>, <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>TCL_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db function NAME [-argcount N] [-deterministic] SCRIPT
  **
  ** Create a new SQL function called NAME.  Whenever that function is
  ** called, invoke SCRIPT to evaluate the function.
  */</comment>
  <case>case <expr><name>DB_FUNCTION</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SQLITE_UTF8</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SqlFunc</name> <modifier>*</modifier></type><name>pFunc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pScript</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nArg</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&lt;</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"NAME ?SWITCHES? SCRIPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>objc</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen30</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"-argcount"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><operator>(</operator><name>objc</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"option requires an argument: "</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TCL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nArg</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"number of arguments must be non-negative"</literal></expr></argument>,
                           <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TCL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else
      if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"-deterministic"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_DETERMINISTIC</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"bad option \""</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, 
            <argument><expr><literal type="string">"\": must be -argcount or -deterministic"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>pScript</name> <operator>=</operator> <name><name>objv</name><index>[<expr><name>objc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pFunc</name> <operator>=</operator> <call><name>findSqlFunc</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pFunc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pFunc</name><operator>-&gt;</operator><name>pScript</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>pScript</name></name> <operator>=</operator> <name>pScript</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFunc</name><operator>-&gt;</operator><name>useEvalObjv</name></name> <operator>=</operator> <call><name>safeToUseEvalObjv</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
        <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><name>tclSqlFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db incrblob ?-readonly? ?DB? TABLE COLUMN ROWID
  */</comment>
  <case>case <expr><name>DB_INCRBLOB</name></expr>:</case> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_INCRBLOB</name></cpp:ifdef>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"incrblob not available in this build"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>isReadonly</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name> <init>= <expr><literal type="string">"main"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zColumn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Tcl_WideInt</name></type> <name>iRow</name></decl>;</decl_stmt>

    <comment type="block">/* Check for the -readonly option */</comment>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"-readonly"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>isReadonly</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><operator>(</operator><literal type="number">5</literal><operator>+</operator><name>isReadonly</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>objc</name><operator>!=</operator><operator>(</operator><literal type="number">6</literal><operator>+</operator><name>isReadonly</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?-readonly? ?DB? TABLE COLUMN ROWID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><operator>(</operator><literal type="number">6</literal><operator>+</operator><name>isReadonly</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zDb</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zTable</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>objc</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zColumn</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>objc</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_GetWideIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>objc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>TCL_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>createIncrblobChannel</name><argument_list>(
          <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>zTable</name></expr></argument>, <argument><expr><name>zColumn</name></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>iRow</name></expr></argument>, <argument><expr><name>isReadonly</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db interrupt
  **
  ** Interrupt the execution of the inner-most SQL interpreter.  This
  ** causes the SQL statement to return an error of SQLITE_INTERRUPT.
  */</comment>
  <case>case <expr><name>DB_INTERRUPT</name></expr>:</case> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_interrupt</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db nullvalue ?STRING?
  **
  ** Change text used when a NULL comes back from the database. If ?STRING?
  ** is not present, then the current string used for NULL is returned.
  ** If STRING is present, then STRING is returned.
  **
  */</comment>
  <case>case <expr><name>DB_NULLVALUE</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"NULLVALUE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNull</name> <init>= <expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>zNull</name> <operator>&amp;&amp;</operator> <name>len</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name> <operator>=</operator> <call><name>Tcl_Alloc</name><argument_list>( <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name></expr></argument>, <argument><expr><name>zNull</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zNull</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db last_insert_rowid 
  **
  ** Return an integer which is the ROWID for the most recent insert.
  */</comment>
  <case>case <expr><name>DB_LAST_INSERT_ROWID</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pResult</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Tcl_WideInt</name></type> <name>rowid</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rowid</name> <operator>=</operator> <call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_SetWideIntObj</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  ** The DB_ONECOLUMN method is implemented together with DB_EXISTS.
  */</comment>

  <comment type="block">/*    $db progress ?N CALLBACK?
  ** 
  ** Invoke the given callback every N virtual machine opcodes while executing
  ** queries.
  */</comment>
  <case>case <expr><name>DB_PROGRESS</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zProgress</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>TCL_OK</name><operator>!=</operator><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt><empty_stmt>;</empty_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zProgress</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zProgress</name> <operator>&amp;&amp;</operator> <name>len</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name> <operator>=</operator> <call><name>Tcl_Alloc</name><argument_list>( <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name></expr></argument>, <argument><expr><name>zProgress</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PROGRESS_CALLBACK</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zProgress</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_progress_handler</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>DbProgressHandler</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_progress_handler</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"N CALLBACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db profile ?CALLBACK?
  **
  ** Make arrangements to invoke the CALLBACK routine after each SQL statement
  ** that has run.  The text of the SQL and the amount of elapse time are
  ** appended to CALLBACK before the script is run.
  */</comment>
  <case>case <expr><name>DB_PROFILE</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?CALLBACK?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zProfile</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zProfile</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zProfile</name> <operator>&amp;&amp;</operator> <name>len</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name> <operator>=</operator> <call><name>Tcl_Alloc</name><argument_list>( <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr></argument>, <argument><expr><name>zProfile</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_TRACE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_FLOATING_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zProfile</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_profile</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>DbProfileHandler</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_profile</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db rekey KEY
  **
  ** Change the encryption key on the currently open database.
  */</comment>
  <case>case <expr><name>DB_REKEY</name></expr>:</case> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
    <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_rekey</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db restore ?DATABASE? FILENAME
  **
  ** Open a database file named FILENAME.  Transfer the content 
  ** of FILENAME into the local database DATABASE (default: "main").
  */</comment>
  <case>case <expr><name>DB_RESTORE</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSrcFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDestDb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>pSrc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>pBackup</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nTimeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zDestDb</name> <operator>=</operator> <literal type="string">"main"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zSrcFile</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zDestDb</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zSrcFile</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?DATABASE? FILENAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>zSrcFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSrc</name></expr></argument>,
                         <argument><expr><name>SQLITE_OPEN_READONLY</name> <operator>|</operator> <name><name>pDb</name><operator>-&gt;</operator><name>openFlags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"cannot open source database: "</literal></expr></argument>,
           <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pBackup</name> <operator>=</operator> <call><name>sqlite3_backup_init</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zDestDb</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pBackup</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"restore failed: "</literal></expr></argument>,
           <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_backup_step</name><argument_list>(<argument><expr><name>pBackup</name></expr></argument>,<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>SQLITE_OK</name>
              <operator>||</operator> <name>rc</name><operator>==</operator><name>SQLITE_BUSY</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_BUSY</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>nTimeout</name><operator>++</operator> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3_sleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>sqlite3_backup_finish</name><argument_list>(<argument><expr><name>pBackup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_OK</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_BUSY</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>SQLITE_LOCKED</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"restore failed: source database busy"</literal></expr></argument>,
                       <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"restore failed: "</literal></expr></argument>,
           <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>pSrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **     $db status (step|sort|autoindex)
  **
  ** Display SQLITE_STMTSTATUS_FULLSCAN_STEP or 
  ** SQLITE_STMTSTATUS_SORT for the most recent eval.
  */</comment>
  <case>case <expr><name>DB_STATUS</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOp</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"(step|sort|autoindex)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zOp</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zOp</name></expr></argument>, <argument><expr><literal type="string">"step"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nStep</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zOp</name></expr></argument>, <argument><expr><literal type="string">"sort"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nSort</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zOp</name></expr></argument>, <argument><expr><literal type="string">"autoindex"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>nIndex</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, 
            <argument><expr><literal type="string">"bad argument: should be autoindex, step, or sort"</literal></expr></argument>, 
            <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>
  
  <comment type="block">/*
  **     $db timeout MILLESECONDS
  **
  ** Delay for the number of milliseconds specified when a file is locked.
  */</comment>
  <case>case <expr><name>DB_TIMEOUT</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ms</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"MILLISECONDS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ms</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_busy_timeout</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>
  
  <comment type="block">/*
  **     $db total_changes
  **
  ** Return the number of rows that were modified, inserted, or deleted 
  ** since the database handle was created.
  */</comment>
  <case>case <expr><name>DB_TOTAL_CHANGES</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pResult</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pResult</name> <operator>=</operator> <call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_SetIntObj</name><argument_list>(<argument><expr><name>pResult</name></expr></argument>, <argument><expr><call><name>sqlite3_total_changes</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db trace ?CALLBACK?
  **
  ** Make arrangements to invoke the CALLBACK routine for each SQL statement
  ** that is executed.  The text of the SQL is appended to CALLBACK before
  ** it is executed.
  */</comment>
  <case>case <expr><name>DB_TRACE</name></expr>:</case> <block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?CALLBACK?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTrace</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zTrace</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zTrace</name> <operator>&amp;&amp;</operator> <name>len</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name> <operator>=</operator> <call><name>Tcl_Alloc</name><argument_list>( <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr></argument>, <argument><expr><name>zTrace</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_TRACE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_FLOATING_POINT</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>zTrace</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_trace</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>DbTraceHandler</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_trace</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db transaction [-deferred|-immediate|-exclusive] SCRIPT
  **
  ** Start a new transaction (if we are not already in the midst of a
  ** transaction) and execute the TCL script SCRIPT.  After SCRIPT
  ** completes, either commit the transaction or roll it back if SCRIPT
  ** throws an exception.  Or if no new transation was started, do nothing.
  ** pass the exception on up the stack.
  **
  ** This command was inspired by Dave Thomas's talk on Ruby at the
  ** 2005 O'Reilly Open Source Convention (OSCON).
  */</comment>
  <case>case <expr><name>DB_TRANSACTION</name></expr>:</case> <block>{<block_content>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pScript</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBegin</name> <init>= <expr><literal type="string">"SAVEPOINT _tcl_transaction"</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>objc</name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"[TYPE] SCRIPT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>nTransaction</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>objc</name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>TTYPE_strs</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">"deferred"</literal></expr>,   <expr><literal type="string">"exclusive"</literal></expr>,  <expr><literal type="string">"immediate"</literal></expr>, <expr><literal type="number">0</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <enum>enum <name>TTYPE_enum</name> <block>{
        <decl><name>TTYPE_DEFERRED</name></decl>, <decl><name>TTYPE_EXCLUSIVE</name></decl>, <decl><name>TTYPE_IMMEDIATE</name></decl>
      }</block>;</enum>
      <decl_stmt><decl><type><name>int</name></type> <name>ttype</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIndexFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>TTYPE_strs</name></expr></argument>, <argument><expr><literal type="string">"transaction type"</literal></expr></argument>,
                              <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttype</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <switch>switch<condition>( <expr><operator>(</operator>enum <name>TTYPE_enum</name><operator>)</operator><name>ttype</name></expr> )</condition><block>{<block_content>
        <case>case <expr><name>TTYPE_DEFERRED</name></expr>:</case>    <comment type="block">/* no-op */</comment><empty_stmt>;</empty_stmt>                 <break>break;</break>
        <case>case <expr><name>TTYPE_EXCLUSIVE</name></expr>:</case>   <expr_stmt><expr><name>zBegin</name> <operator>=</operator> <literal type="string">"BEGIN EXCLUSIVE"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><name>TTYPE_IMMEDIATE</name></expr>:</case>   <expr_stmt><expr><name>zBegin</name> <operator>=</operator> <literal type="string">"BEGIN IMMEDIATE"</literal></expr>;</expr_stmt>  <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pScript</name> <operator>=</operator> <name><name>objv</name><index>[<expr><name>objc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/* Run the SQLite BEGIN command to open a transaction or savepoint. */</comment>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>disableAuth</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zBegin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>disableAuth</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nTransaction</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* If using NRE, schedule a callback to invoke the script pScript, then
    ** a second callback to commit (or rollback) the transaction or savepoint
    ** opened above. If not using NRE, evaluate the script directly, then
    ** call function DbTransPostCmd() to commit (or rollback) the transaction 
    ** or savepoint.  */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>DbUseNre</name><argument_list>()</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_NRAddCallback</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>DbTransPostCmd</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>Tcl_NREvalObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>DbTransPostCmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cd</name></expr></argument>, <argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **    $db unlock_notify ?script?
  */</comment>
  <case>case <expr><name>DB_UNLOCK_NOTIFY</name></expr>:</case> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_ENABLE_UNLOCK_NOTIFY</name></cpp:ifndef>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"unlock_notify not available in this build"</literal></expr></argument>,
                     <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?SCRIPT?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xNotify</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pNotifyArg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
  
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>xNotify</name> <operator>=</operator> <name>DbUnlockNotify</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pNotifyArg</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pDb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name> <operator>=</operator> <name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUnlockNotify</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
  
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_unlock_notify</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>xNotify</name></expr></argument>, <argument><expr><name>pNotifyArg</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>TCL_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*
  **    $db wal_hook ?script?
  **    $db update_hook ?script?
  **    $db rollback_hook ?script?
  */</comment>
  <case>case <expr><name>DB_WAL_HOOK</name></expr>:</case> 
  <case>case <expr><name>DB_UPDATE_HOOK</name></expr>:</case> 
  <case>case <expr><name>DB_ROLLBACK_HOOK</name></expr>:</case> <block>{<block_content>

    <comment type="block">/* set ppHook to point at pUpdateHook or pRollbackHook, depending on 
    ** whether [$db update_hook] or [$db rollback_hook] was invoked.
    */</comment>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppHook</name></decl>;</decl_stmt> 
    <if_stmt><if>if<condition>( <expr><name>choice</name><operator>==</operator><name>DB_UPDATE_HOOK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>ppHook</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pUpdateHook</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>choice</name><operator>==</operator><name>DB_WAL_HOOK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>ppHook</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pWalHook</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>ppHook</name> <operator>=</operator> <operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>pRollbackHook</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
       <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?SCRIPT?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>ppHook</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>*</operator><name>ppHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><operator>*</operator><name>ppHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ppHook</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ppHook</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetCharLength</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>ppHook</name> <operator>=</operator> <name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><operator>*</operator><name>ppHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite3_update_hook</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>pDb</name><operator>-&gt;</operator><name>pUpdateHook</name></name></expr>?</condition><then><expr><name>DbUpdateHandler</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_rollback_hook</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><operator>(</operator><ternary><condition><expr><name><name>pDb</name><operator>-&gt;</operator><name>pRollbackHook</name></name></expr>?</condition><then><expr><name>DbRollbackHandler</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_wal_hook</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,<argument><expr><operator>(</operator><ternary><condition><expr><name><name>pDb</name><operator>-&gt;</operator><name>pWalHook</name></name></expr>?</condition><then><expr><name>DbWalHandler</name></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>
  </block_content>}</block>

  <comment type="block">/*    $db version
  **
  ** Return the version string for this database.
  */</comment>
  <case>case <expr><name>DB_VERSION</name></expr>:</case> <block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_libversion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block>


  </block_content>}</block></switch> <comment type="block">/* End of the SWITCH statement */</comment>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_TCL_NRE</name></expr></cpp:if>
<comment type="block">/*
** Adaptor that provides an objCmd interface to the NRE-enabled
** interface implementation.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbObjCmdAdaptor</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>objv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>Tcl_NRCallObjProc</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>DbObjCmd</name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><name>objc</name></expr></argument>, <argument><expr><name>objv</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TCL_NRE */</comment>

<comment type="block">/*
**   sqlite3 DBNAME FILENAME ?-vfs VFSNAME? ?-key KEY? ?-readonly BOOLEAN?
**                           ?-create BOOLEAN? ?-nomutex BOOLEAN?
**
** This is the main Tcl command.  When the "sqlite" Tcl command is
** invoked, this routine runs to process that command.
**
** The first argument, DBNAME, is an arbitrary name for a new
** database connection.  This command creates a new command named
** DBNAME that is used to control that connection.  The database
** connection is deleted when the DBNAME command is deleted.
**
** The second argument is the name of the database file.
**
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DbMain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,<parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>objv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVfs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_DString</name></type> <name>translatedFilename</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <comment type="block">/* In normal use, each TCL interpreter runs in a single thread.  So
  ** by default, we can turn of mutexing on SQLite database connections.
  ** However, for testing purposes it is useful to have mutexes turned
  ** on.  So, by default, mutexes default off.  But if compiled with
  ** SQLITE_TCL_DEFAULT_FULLMUTEX then mutexes default on.
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TCL_DEFAULT_FULLMUTEX</name></cpp:ifdef>
  <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name> <operator>|</operator> <name>SQLITE_OPEN_FULLMUTEX</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name> <operator>|</operator> <name>SQLITE_OPEN_NOMUTEX</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zArg</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>,<argument><expr><literal type="string">"-version"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><call><name>sqlite3_libversion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>,<argument><expr><literal type="string">"-sourceid"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><call><name>sqlite3_sourceid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>,<argument><expr><literal type="string">"-has-codec"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"1"</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"0"</literal></expr></argument>,<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <return>return <expr><name>TCL_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>objc</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>zArg</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>,<argument><expr><literal type="string">"-key"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
      <expr_stmt><expr><name>pKey</name> <operator>=</operator> <call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-vfs"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zVfs</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-readonly"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>b</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>SQLITE_OPEN_READWRITE</name><operator>|</operator><name>SQLITE_OPEN_CREATE</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_OPEN_READONLY</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_OPEN_READONLY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_OPEN_READWRITE</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-create"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>b</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_READONLY</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_OPEN_CREATE</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_OPEN_CREATE</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-nomutex"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>b</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_OPEN_NOMUTEX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_OPEN_FULLMUTEX</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_OPEN_NOMUTEX</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-fullmutex"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>b</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_OPEN_FULLMUTEX</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_OPEN_NOMUTEX</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_OPEN_FULLMUTEX</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-uri"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>b</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_OPEN_URI</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_OPEN_URI</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"unknown option: "</literal></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&lt;</operator><literal type="number">3</literal> <operator>||</operator> <operator>(</operator><name>objc</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, 
      <argument><expr><literal type="string">"HANDLE FILENAME ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN?"</literal>
      <literal type="string">" ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
      <literal type="string">" ?-key CODECKEY?"</literal></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zErrMsg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><call><name>Tcl_Alloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"malloc failed"</literal></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>Tcl_TranslateFileName</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>translatedFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>zVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>translatedFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_key</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>maxStmt</name></name> <operator>=</operator> <name>NUM_PREPARED_STMTS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_URI</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>zArg</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>DbUseNre</name><argument_list>()</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_NRCreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><name>DbObjCmdAdaptor</name></expr></argument>, <argument><expr><name>DbObjCmd</name></expr></argument>,
                        <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>DbDeleteCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><name>DbObjCmd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><name>DbDeleteCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Provide a dummy Tcl_InitStubs if we are using this as a static
** library.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>USE_TCL_STUBS</name></cpp:ifndef>
<cpp:undef># <cpp:directive>undef</cpp:directive>  <name>Tcl_InitStubs</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>Tcl_InitStubs</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TCL_VERSION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Make sure we have a PACKAGE_VERSION macro defined.  This will be
** defined automatically by the TEA makefile.  But other makefiles
** do not define it.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PACKAGE_VERSION</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>PACKAGE_VERSION</name></cpp:macro> <cpp:value>SQLITE_VERSION</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Initialize this module.
**
** This Tcl module contains only a single new Tcl command named "sqlite".
** (Hence there is no namespace.  There is no point in using a namespace
** if the extension only supplies one new name!)  The "sqlite" command is
** used to open a new SQLite database.  See the DbMain() routine above
** for additional information.
**
** The EXTERN macros are required by TCL in order to work on windows.
*/</comment>
<function><type><name>EXTERN</name> <name>int</name></type> <name>Sqlite3_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><ternary><condition><expr><call><name>Tcl_InitStubs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"8.4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TCL_OK</name></expr> </then><else>: <expr><name>TCL_ERROR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>TCL_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"sqlite3"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Tcl_ObjCmdProc</name><operator>*</operator><operator>)</operator><name>DbMain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_3_SUFFIX_ONLY</name></cpp:ifndef>
    <comment type="block">/* The "sqlite" alias is undocumented.  It is here only to support
    ** legacy scripts.  All new scripts should use only the "sqlite3"
    ** command. */</comment>
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"sqlite"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Tcl_ObjCmdProc</name><operator>*</operator><operator>)</operator><name>DbMain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_PkgProvide</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"sqlite3"</literal></expr></argument>, <argument><expr><name>PACKAGE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>EXTERN</name> <name>int</name></type> <name>Tclsqlite3_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>Sqlite3_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>EXTERN</name> <name>int</name></type> <name>Sqlite3_Unload</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>TCL_OK</name></expr>;</return> </block_content>}</block></function>
<function><type><name>EXTERN</name> <name>int</name></type> <name>Tclsqlite3_Unload</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>TCL_OK</name></expr>;</return> </block_content>}</block></function>

<comment type="block">/* Because it accesses the file-system and uses persistent state, SQLite
** is not considered appropriate for safe interpreters.  Hence, we cause
** the _SafeInit() interfaces return TCL_ERROR.
*/</comment>
<function><type><name>EXTERN</name> <name>int</name></type> <name>Sqlite3_SafeInit</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return> </block_content>}</block></function>
<function><type><name>EXTERN</name> <name>int</name></type> <name>Sqlite3_SafeUnload</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content><return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content>}</block></function>



<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_3_SUFFIX_ONLY</name></cpp:ifndef>
<function><type><name>int</name></type> <name>Sqlite_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>Sqlite3_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>Tclsqlite_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>Sqlite3_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>Sqlite_Unload</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>TCL_OK</name></expr>;</return> </block_content>}</block></function>
<function><type><name>int</name></type> <name>Tclsqlite_Unload</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>TCL_OK</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCLSH</name></cpp:ifdef>
<comment type="block" format="doxygen">/*****************************************************************************
** All of the code that follows is used to build standalone TCL interpreters
** that are statically linked with SQLite.  Enable these by compiling
** with -DTCLSH=n where n can be 1 or 2.  An n of 1 generates a standard
** tclsh but with SQLite built in.  An n of 2 generates the SQLite space
** analysis program.
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TCLMD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * This code implements the MD5 message-digest algorithm.
 * The algorithm is due to Ron Rivest.  This code was
 * written by Colin Plumb in 1993, no copyright is claimed.
 * This code is in the public domain; do with it what you wish.
 *
 * Equivalent code is available from RSA Data Security, Inc.
 * This code has been tested against that, and is equivalent,
 * except that you don't need to include two pages of legalese
 * with every copy.
 *
 * To compute the message digest of a chunk of bytes, declare an
 * MD5Context structure, pass it to MD5Init, call MD5Update as
 * needed on buffers full of bytes, and then call MD5Final, which
 * will fill a supplied 16-byte array with the digest.
 */</comment>

<comment type="block">/*
 * If compiled on a machine that doesn't have a 32-bit integer,
 * you just set "uint32" to the appropriate datatype for an
 * unsigned 32-bit integer.  For example:
 *
 *       cc -Duint32='unsigned long' md5.c
 *
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>uint32</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>uint32</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>MD5Context</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>isInit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>MD5Context</name></name></type> <name>MD5Context</name>;</typedef>

<comment type="block">/*
 * Note: this code is harmless on little-endian machines.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>byteReverse</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>longs</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>uint32</name></type> <name>t</name></decl>;</decl_stmt>
        <do>do <block>{<block_content>
                <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
                            <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block> while <condition>(<expr><operator>--</operator><name>longs</name></expr>)</condition>;</do>
</block_content>}</block></function>
<comment type="block">/* The four core functions - F1 is optimized somewhat */</comment>

<comment type="block">/* #define F1(x, y, z) (x &amp; y | ~x &amp; z) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1(z, x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x ^ y ^ z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y ^ (x | ~z))</cpp:value></cpp:define>

<comment type="block">/* This is the central step in the MD5 algorithm. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5STEP</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>( w += f(x, y, z) + data,  w = w&lt;&lt;s | w&gt;&gt;(32-s),  w += x )</cpp:value></cpp:define>

<comment type="block">/*
 * The core of the MD5 algorithm, this alters an existing MD5 hash to
 * reflect the addition of 16 longwords of new data.  MD5Update blocks
 * the data and converts bytes into longwords for this routine.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5Transform</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name><name>in</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd76aa478</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0xe8c7b756</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">0x242070db</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">0xc1bdceee</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf57c0faf</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><literal type="number">0x4787c62a</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa8304613</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfd469501</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">0x698098d8</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="number">0x8b44f7af</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="number">0xffff5bb1</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="number">0x895cd7be</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>+</operator><literal type="number">0x6b901122</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfd987193</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa679438e</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>+</operator><literal type="number">0x49b40821</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf61e2562</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator><literal type="number">0xc040b340</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="number">0x265e5a51</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0xe9b6c7aa</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd62f105d</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="number">0x02441453</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd8a1e681</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><literal type="number">0xe7d3fbc8</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="number">0x21e1cde6</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>+</operator><literal type="number">0xc33707d6</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf4d50d87</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">0x455a14ed</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa9e3e905</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfcefa3f8</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><literal type="number">0x676f02d9</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>+</operator><literal type="number">0x8d2a4c8a</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfffa3942</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">0x8771f681</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="number">0x6d9d6122</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfde5380c</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa4beea44</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><literal type="number">0x4bdecfa9</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf6bb4b60</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="number">0xbebfbc70</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>+</operator><literal type="number">0x289b7ec6</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0xeaa127fa</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd4ef3085</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator><literal type="number">0x04881d05</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd9d4d039</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>+</operator><literal type="number">0xe6db99e5</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>+</operator><literal type="number">0x1fa27cf8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">0xc4ac5665</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf4292244</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><literal type="number">0x432aff97</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>+</operator><literal type="number">0xab9423a7</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfc93a039</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>+</operator><literal type="number">0x655b59c3</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">0x8f0ccc92</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="number">0xffeff47d</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0x85845dd1</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">0x6fa87e4f</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfe2ce6e0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa3014314</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>+</operator><literal type="number">0x4e0811a1</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf7537e82</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="number">0xbd3af235</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">0x2ad7d2bb</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="number">0xeb86d391</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5Init</name><parameter_list>(<parameter><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list><block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isInit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xefcdab89</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98badcfe</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Update context to reflect the concatenation of another buffer full
 * of bytes.
 */</comment>
<function><type><specifier>static</specifier> 
<name>void</name></type> <name>MD5Update</name><parameter_list>(<parameter><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>uint32</name></type> <name>t</name></decl>;</decl_stmt>

        <comment type="block">/* Update bitcount */</comment>

        <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* Carry from low to high */</comment>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>    <comment type="block">/* Bytes already in shsInfo-&gt;data */</comment>

        <comment type="block">/* Handle any leading odd-sized chunks */</comment>

        <if_stmt><if>if <condition>( <expr><name>t</name></expr> )</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name>t</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">64</literal><operator>-</operator><name>t</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* Process data in 64-byte chunks */</comment>

        <while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
        </block_content>}</block></while>

        <comment type="block">/* Handle any remaining bytes of data. */</comment>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Final wrapup - pad to 64-byte boundary with the bit pattern 
 * 1 0* (64-bit count of bits processed, MSB-first)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list><block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name></type> <name>count</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

        <comment type="block">/* Compute number of bytes mod 64 */</comment>
        <expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

        <comment type="block">/* Set the first char of padding to 0x80.  This is safe since there is
           always at least one byte free */</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

        <comment type="block">/* Bytes of padding needed to make 64 bytes */</comment>
        <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>count</name></expr>;</expr_stmt>

        <comment type="block">/* Pad out to 56 mod 64 */</comment>
        <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/* Two lots of padding:  Pad the first block to 64 bytes */</comment>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Now fill the next block with 56 bytes */</comment>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="block">/* Pad block to 56 bytes */</comment>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Append length in bits and transform */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name> <operator>+</operator> <literal type="number">14</literal><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Convert a 128-bit MD5 digest into a 32-digit base-16 number.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5DigestToBase16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>zEncode</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>zEncode</name><index>[<expr><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>zEncode</name><index>[<expr><name>a</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Convert a 128-bit MD5 digest into sequency of eight 5-digit integers
** each representing 16 bits of the digest and separated from each
** other by a "-" character.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5DigestToBase10x8</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>zDigest</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>digest</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zDigest</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">50</literal><operator>-</operator><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zDigest</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%05u"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>zDigest</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** A TCL command for md5.  The argument is the text to be hashed.  The
** Result is the hash in base64.  
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>md5_cmd</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MD5Context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>converter</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"wrong # args: should be \""</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, 
        <argument><expr><literal type="string">" TEXT\""</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>converter</name> <operator>=</operator> <operator>(</operator><macro><name>void</name><argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>,</operator><name>char</name><operator>*</operator><operator>)</operator><operator>)</operator><name>cd</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>converter</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** A TCL command to take the md5 hash of a file.  The argument is the
** name of the file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>md5file_cmd</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type><name>cd</name></decl></parameter>, <parameter><decl><type><name>Tcl_Interp</name><modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MD5Context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>converter</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">10240</literal></expr>]</index></name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"wrong # args: should be \""</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, 
        <argument><expr><literal type="string">" FILENAME\""</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"unable to open file \""</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, 
         <argument><expr><literal type="string">"\" for reading"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>fread</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>MD5Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>converter</name> <operator>=</operator> <operator>(</operator><macro><name>void</name><argument_list>(<argument>*</argument>)</argument_list></macro><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>,</operator><name>char</name><operator>*</operator><operator>)</operator><operator>)</operator><name>cd</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>converter</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register the four new TCL commands for generating MD5 checksums
** with the TCL interpreter.
*/</comment>
<function><type><name>int</name></type> <name>Md5_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"md5"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Tcl_CmdProc</name><operator>*</operator><operator>)</operator><name>md5_cmd</name></expr></argument>,
                    <argument><expr><name>MD5DigestToBase16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"md5-10x8"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Tcl_CmdProc</name><operator>*</operator><operator>)</operator><name>md5_cmd</name></expr></argument>,
                    <argument><expr><name>MD5DigestToBase10x8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"md5file"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Tcl_CmdProc</name><operator>*</operator><operator>)</operator><name>md5file_cmd</name></expr></argument>,
                    <argument><expr><name>MD5DigestToBase16</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"md5file-10x8"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Tcl_CmdProc</name><operator>*</operator><operator>)</operator><name>md5file_cmd</name></expr></argument>,
                    <argument><expr><name>MD5DigestToBase10x8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(SQLITE_TEST) || defined(SQLITE_TCLMD5) */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
** During testing, the special md5sum() aggregate function is available.
** inside SQLite.  The following routines implement that function.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>md5step</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>isInit</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zData</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>MD5Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zData</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>md5finalize</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5DigestToBase16</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>Md5_Register</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"md5sum"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
                                 <argument><expr><name>md5step</name></expr></argument>, <argument><expr><name>md5finalize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_overload_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"md5sum"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* To exercise this API */</comment>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(SQLITE_TEST) */</comment>


<comment type="block">/*
** If the macro TCLSH is one, then put in code this for the
** "main" routine that will initialize Tcl and take input from
** standard input, or if a file is named on the command line
** the TCL interpreter reads and evaluates that file.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TCLSH</name><operator>==</operator><literal type="number">1</literal></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tclsh_main_loop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zMainloop</name><index>[]</index></name> <init>=
    <expr><literal type="string">"set line {}\n"</literal>
    <literal type="string">"while {![eof stdin]} {\n"</literal>
      <literal type="string">"if {$line!=\"\"} {\n"</literal>
        <literal type="string">"puts -nonewline \"&gt; \"\n"</literal>
      <literal type="string">"} else {\n"</literal>
        <literal type="string">"puts -nonewline \"% \"\n"</literal>
      <literal type="string">"}\n"</literal>
      <literal type="string">"flush stdout\n"</literal>
      <literal type="string">"append line [gets stdin]\n"</literal>
      <literal type="string">"if {[info complete $line]} {\n"</literal>
        <literal type="string">"if {[catch {uplevel #0 $line} result]} {\n"</literal>
          <literal type="string">"puts stderr \"Error: $result\"\n"</literal>
        <literal type="string">"} elseif {$result!=\"\"} {\n"</literal>
          <literal type="string">"puts $result\n"</literal>
        <literal type="string">"}\n"</literal>
        <literal type="string">"set line {}\n"</literal>
      <literal type="string">"} else {\n"</literal>
        <literal type="string">"append line \\n\n"</literal>
      <literal type="string">"}\n"</literal>
    <literal type="string">"}\n"</literal></expr></init></decl>
  ;</decl_stmt>
  <return>return <expr><name>zMainloop</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TCLSH</name><operator>==</operator><literal type="number">2</literal></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tclsh_main_loop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_all</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type> <name>init_all_cmd</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>cd</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>

  <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>slave</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"SLAVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>slave</name> <operator>=</operator> <call><name>Tcl_GetSlave</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>slave</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>init_all</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Tclcmd: db_use_legacy_prepare DB BOOLEAN
**
**   The first argument to this command must be a database command created by
**   [sqlite3]. If the second argument is true, then the handle is configured
**   to use the sqlite3_prepare_v2() function to prepare statements. If it
**   is false, sqlite3_prepare().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>db_use_legacy_prepare_cmd</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>cd</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Tcl_CmdInfo</name></type> <name>cmdInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bPrepare</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"DB BOOLEAN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>Tcl_GetCommandInfo</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdInfo</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"no such db: "</literal></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name><name>cmdInfo</name><operator>.</operator><name>objClientData</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bPrepare</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>bLegacyPrepare</name></name> <operator>=</operator> <name>bPrepare</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Tclcmd: db_last_stmt_ptr DB
**
**   If the statement cache associated with database DB is not empty,
**   return the text representation of the most recently used statement
**   handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>db_last_stmt_ptr</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>cd</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_CmdInfo</name></type> <name>cmdInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SqliteDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>Tcl_GetCommandInfo</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmdInfo</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"no such db: "</literal></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <operator>(</operator><name>SqliteDb</name><operator>*</operator><operator>)</operator><name><name>cmdInfo</name><operator>.</operator><name>objClientData</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>stmtList</name><operator>-&gt;</operator><name>pStmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<comment type="block">/*
** Configure the interpreter passed as the first argument to have access
** to the commands and linked variables that make up:
**
**   * the [sqlite3] extension itself, 
**
**   * If SQLITE_TCLMD5 or SQLITE_TEST is defined, the Md5 commands, and
**
**   * If SQLITE_TEST is set, the various test interfaces used by the Tcl
**     test suite.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_all</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>Sqlite3_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TCLMD5</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>Md5_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqliteconfig_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest1_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest2_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest3_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest4_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest5_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest6_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest7_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest8_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest9_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestasync_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest_autoext_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest_blob_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest_demovfs_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest_func_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest_hexio_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest_init_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest_malloc_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetest_mutex_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestschema_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestsse_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetesttclvar_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestfs_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>SqlitetestThread_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>SqlitetestOnefile_Init</name><parameter_list>()</parameter_list>;</function_decl>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>SqlitetestOsinst_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestbackup_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestintarray_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestvfs_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestrtree_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitequota_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitemultiplex_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>SqliteSuperlock_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>SqlitetestSyscall_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Fts5tcl_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>SqliteRbu_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS4</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Sqlitetestfts3_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name> <operator>*</operator><name>interp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_ZIPVFS</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>Zipvfs_Init</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Zipvfs_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>Sqliteconfig_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest1_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest2_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest3_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest4_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest5_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest6_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest7_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest8_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest9_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetestasync_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest_autoext_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest_blob_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest_demovfs_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest_func_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest_hexio_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest_init_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest_malloc_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetest_mutex_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetestschema_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetesttclvar_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetestfs_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SqlitetestThread_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SqlitetestOnefile_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SqlitetestOsinst_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetestbackup_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetestintarray_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetestvfs_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitetestrtree_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitequota_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Sqlitemultiplex_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SqliteSuperlock_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SqlitetestSyscall_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Fts5tcl_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SqliteRbu_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS3</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS4</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>Sqlitetestfts3_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(
        <argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"load_testfixture_extensions"</literal></expr></argument>, <argument><expr><name>init_all_cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(
        <argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"db_use_legacy_prepare"</literal></expr></argument>, <argument><expr><name>db_use_legacy_prepare_cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(
        <argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"db_last_stmt_ptr"</literal></expr></argument>, <argument><expr><name>db_last_stmt_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_SSE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>Sqlitetestsse_Init</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Needed for the setrlimit() system call on unix */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>unix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TCLSH_MAIN</name></cpp:macro> <cpp:value>main</cpp:value></cpp:define>   <comment type="block">/* Needed to fake out mktclapp */</comment>
<function><type><name>int</name></type> <name>TCLSH_MAIN</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"BREAK"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
        <argument><expr><literal type="string">"attach debugger to process %d and press any key to continue.\n"</literal></expr></argument>,
        <argument><expr><call><name>GETPID</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fgetc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Since the primary use case for this binary is testing of SQLite,
  ** be sure to generate core files if we crash */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>unix</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{<block_content> <decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getrlimit</name><argument_list>(<argument><expr><name>RLIMIT_CORE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>rlim_cur</name></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>rlim_max</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_CORE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST &amp;&amp; unix */</comment>


  <comment type="block">/* Call sqlite3_shutdown() once before doing anything else. This is to
  ** test that sqlite3_shutdown() can be safely called by a process before
  ** sqlite3_initialize() is. */</comment>
  <expr_stmt><expr><call><name>sqlite3_shutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>Tcl_FindExecutable</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetSystemEncoding</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"utf-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>interp</name> <operator>=</operator> <call><name>Tcl_CreateInterp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TCLSH</name><operator>==</operator><literal type="number">2</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SINGLETHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>init_all</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zArgc</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zArgc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zArgc</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>argc</name><operator>-</operator><operator>(</operator><literal type="number">3</literal><operator>-</operator><name>TCLSH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"argc"</literal></expr></argument>, <argument><expr><name>zArgc</name></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"argv0"</literal></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr><literal type="string">"argv"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal><operator>-</operator><name>TCLSH</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_SetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"argv"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
          <argument><expr><name>TCL_GLOBAL_ONLY</name> <operator>|</operator> <name>TCL_LIST_ELEMENT</name> <operator>|</operator> <name>TCL_APPEND_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>TCLSH</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>Tcl_EvalFile</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>!=</operator><name>TCL_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zInfo</name> <init>= <expr><call><name>Tcl_GetVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"errorInfo"</literal></expr></argument>, <argument><expr><name>TCL_GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zInfo</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zInfo</name> <operator>=</operator> <call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>argv</name></expr></argument>, <argument><expr><name>zInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>TCLSH</name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name>argc</name><operator>&lt;=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_GlobalEval</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>tclsh_main_loop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TCLSH */</comment>
</unit>
