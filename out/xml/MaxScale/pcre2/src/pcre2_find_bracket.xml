<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_find_bracket.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2018 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>


<comment type="block">/* This module contains a single function that scans through a compiled pattern
until it finds a capturing bracket with the given number, or, if the number is
negative, an instance of OP_REVERSE for a lookbehind. The function is called
from pcre2_compile.c and also from pcre2_study.c when finding the minimum
matching length. */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2_internal.h"</cpp:file></cpp:include>


<comment type="block" format="doxygen">/*************************************************
*    Scan compiled regex for specific bracket    *
*************************************************/</comment>

<comment type="block">/*
Arguments:
  code        points to start of expression
  utf         TRUE in UTF mode
  number      the required bracket number or negative to find a lookbehind

Returns:      pointer to the opcode for the bracket, or NULL if not found
*/</comment>

<function><type><name>PCRE2_SPTR</name>
<name>PRIV</name></type>(<name>find_bracket</name>)<parameter_list>(<parameter><decl><type><name>PCRE2_SPTR</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>utf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
  <block>{<block_content>
  <decl_stmt><decl><type><name>PCRE2_UCHAR</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>code</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>OP_END</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* XCLASS is used for classes that cannot be represented just by a bit map.
  This includes negated single high-valued characters. CALLOUT_STR is used for
  callouts with string arguments. In both cases the length in the table is
  zero; the actual length is stored in the compiled code. */</comment>

  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>OP_XCLASS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>+=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>OP_CALLOUT_STR</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>+=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>LINK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

  <comment type="block">/* Handle lookbehind */</comment>

  <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>OP_REVERSE</name></expr>)</condition>
    <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>number</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>PCRE2_UCHAR</name> <operator>*</operator><operator>)</operator><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>+=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>OP_lengths</name></expr></argument>)</argument_list></call><index>[<expr><name>c</name></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if>

  <comment type="block">/* Handle capturing bracket */</comment>

  <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>OP_CBRA</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>OP_SCBRA</name> <operator>||</operator>
           <name>c</name> <operator>==</operator> <name>OP_CBRAPOS</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>OP_SCBRAPOS</name></expr>)</condition>
    <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>GET2</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><name>LINK_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <name>number</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>PCRE2_UCHAR</name> <operator>*</operator><operator>)</operator><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>+=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>OP_lengths</name></expr></argument>)</argument_list></call><index>[<expr><name>c</name></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if>

  <comment type="block">/* Otherwise, we can get the item's length from the table, except that for
  repeated character types, we have to test for \p and \P, which have an extra
  two bytes of parameters, and for MARK/PRUNE/SKIP/THEN with an argument, we
  must add in its length. */</comment>

  <else>else
    <block>{<block_content>
    <switch>switch<condition>(<expr><name>c</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>OP_TYPESTAR</name></expr>:</case>
      <case>case <expr><name>OP_TYPEMINSTAR</name></expr>:</case>
      <case>case <expr><name>OP_TYPEPLUS</name></expr>:</case>
      <case>case <expr><name>OP_TYPEMINPLUS</name></expr>:</case>
      <case>case <expr><name>OP_TYPEQUERY</name></expr>:</case>
      <case>case <expr><name>OP_TYPEMINQUERY</name></expr>:</case>
      <case>case <expr><name>OP_TYPEPOSSTAR</name></expr>:</case>
      <case>case <expr><name>OP_TYPEPOSPLUS</name></expr>:</case>
      <case>case <expr><name>OP_TYPEPOSQUERY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OP_PROP</name> <operator>||</operator> <name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OP_NOTPROP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

      <case>case <expr><name>OP_TYPEUPTO</name></expr>:</case>
      <case>case <expr><name>OP_TYPEMINUPTO</name></expr>:</case>
      <case>case <expr><name>OP_TYPEEXACT</name></expr>:</case>
      <case>case <expr><name>OP_TYPEPOSUPTO</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>code</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>IMM2_SIZE</name></expr>]</index></name> <operator>==</operator> <name>OP_PROP</name> <operator>||</operator> <name><name>code</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>IMM2_SIZE</name></expr>]</index></name> <operator>==</operator> <name>OP_NOTPROP</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>code</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>

      <case>case <expr><name>OP_MARK</name></expr>:</case>
      <case>case <expr><name>OP_COMMIT_ARG</name></expr>:</case>
      <case>case <expr><name>OP_PRUNE_ARG</name></expr>:</case>
      <case>case <expr><name>OP_SKIP_ARG</name></expr>:</case>
      <case>case <expr><name>OP_THEN_ARG</name></expr>:</case>
      <expr_stmt><expr><name>code</name> <operator>+=</operator> <name><name>code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <break>break;</break>
      </block_content>}</block></switch>

    <comment type="block">/* Add in the fixed length from the table */</comment>

    <expr_stmt><expr><name>code</name> <operator>+=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>OP_lengths</name></expr></argument>)</argument_list></call><index>[<expr><name>c</name></expr>]</index></expr>;</expr_stmt>

  <comment type="block">/* In UTF-8 and UTF-16 modes, opcodes that are followed by a character may be
  followed by a multi-byte character. The length in the table is a minimum, so
  we have to arrange to skip the extra bytes. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAYBE_UTF_MULTI</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>utf</name></expr>)</condition><block type="pseudo"><block_content> <switch>switch<condition>(<expr><name>c</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>OP_CHAR</name></expr>:</case>
      <case>case <expr><name>OP_CHARI</name></expr>:</case>
      <case>case <expr><name>OP_NOT</name></expr>:</case>
      <case>case <expr><name>OP_NOTI</name></expr>:</case>
      <case>case <expr><name>OP_EXACT</name></expr>:</case>
      <case>case <expr><name>OP_EXACTI</name></expr>:</case>
      <case>case <expr><name>OP_NOTEXACT</name></expr>:</case>
      <case>case <expr><name>OP_NOTEXACTI</name></expr>:</case>
      <case>case <expr><name>OP_UPTO</name></expr>:</case>
      <case>case <expr><name>OP_UPTOI</name></expr>:</case>
      <case>case <expr><name>OP_NOTUPTO</name></expr>:</case>
      <case>case <expr><name>OP_NOTUPTOI</name></expr>:</case>
      <case>case <expr><name>OP_MINUPTO</name></expr>:</case>
      <case>case <expr><name>OP_MINUPTOI</name></expr>:</case>
      <case>case <expr><name>OP_NOTMINUPTO</name></expr>:</case>
      <case>case <expr><name>OP_NOTMINUPTOI</name></expr>:</case>
      <case>case <expr><name>OP_POSUPTO</name></expr>:</case>
      <case>case <expr><name>OP_POSUPTOI</name></expr>:</case>
      <case>case <expr><name>OP_NOTPOSUPTO</name></expr>:</case>
      <case>case <expr><name>OP_NOTPOSUPTOI</name></expr>:</case>
      <case>case <expr><name>OP_STAR</name></expr>:</case>
      <case>case <expr><name>OP_STARI</name></expr>:</case>
      <case>case <expr><name>OP_NOTSTAR</name></expr>:</case>
      <case>case <expr><name>OP_NOTSTARI</name></expr>:</case>
      <case>case <expr><name>OP_MINSTAR</name></expr>:</case>
      <case>case <expr><name>OP_MINSTARI</name></expr>:</case>
      <case>case <expr><name>OP_NOTMINSTAR</name></expr>:</case>
      <case>case <expr><name>OP_NOTMINSTARI</name></expr>:</case>
      <case>case <expr><name>OP_POSSTAR</name></expr>:</case>
      <case>case <expr><name>OP_POSSTARI</name></expr>:</case>
      <case>case <expr><name>OP_NOTPOSSTAR</name></expr>:</case>
      <case>case <expr><name>OP_NOTPOSSTARI</name></expr>:</case>
      <case>case <expr><name>OP_PLUS</name></expr>:</case>
      <case>case <expr><name>OP_PLUSI</name></expr>:</case>
      <case>case <expr><name>OP_NOTPLUS</name></expr>:</case>
      <case>case <expr><name>OP_NOTPLUSI</name></expr>:</case>
      <case>case <expr><name>OP_MINPLUS</name></expr>:</case>
      <case>case <expr><name>OP_MINPLUSI</name></expr>:</case>
      <case>case <expr><name>OP_NOTMINPLUS</name></expr>:</case>
      <case>case <expr><name>OP_NOTMINPLUSI</name></expr>:</case>
      <case>case <expr><name>OP_POSPLUS</name></expr>:</case>
      <case>case <expr><name>OP_POSPLUSI</name></expr>:</case>
      <case>case <expr><name>OP_NOTPOSPLUS</name></expr>:</case>
      <case>case <expr><name>OP_NOTPOSPLUSI</name></expr>:</case>
      <case>case <expr><name>OP_QUERY</name></expr>:</case>
      <case>case <expr><name>OP_QUERYI</name></expr>:</case>
      <case>case <expr><name>OP_NOTQUERY</name></expr>:</case>
      <case>case <expr><name>OP_NOTQUERYI</name></expr>:</case>
      <case>case <expr><name>OP_MINQUERY</name></expr>:</case>
      <case>case <expr><name>OP_MINQUERYI</name></expr>:</case>
      <case>case <expr><name>OP_NOTMINQUERY</name></expr>:</case>
      <case>case <expr><name>OP_NOTMINQUERYI</name></expr>:</case>
      <case>case <expr><name>OP_POSQUERY</name></expr>:</case>
      <case>case <expr><name>OP_POSQUERYI</name></expr>:</case>
      <case>case <expr><name>OP_NOTPOSQUERY</name></expr>:</case>
      <case>case <expr><name>OP_NOTPOSQUERYI</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>HAS_EXTRALEN</name><argument_list>(<argument><expr><name><name>code</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>+=</operator> <call><name>GET_EXTRALEN</name><argument_list>(<argument><expr><name><name>code</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
      </block_content>}</block></switch></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>utf</name><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* Keep compiler happy by referencing function argument */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* MAYBE_UTF_MULTI */</comment>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* End of pcre2_find_bracket.c */</comment>
</unit>
