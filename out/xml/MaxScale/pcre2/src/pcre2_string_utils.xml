<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_string_utils.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2018 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>

<comment type="block">/* This module contains internal functions for comparing and finding the length
of strings. These are used instead of strcmp() etc because the standard
functions work only on 8-bit data. */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2_internal.h"</cpp:file></cpp:include>


<comment type="block" format="doxygen">/*************************************************
*    Emulated memmove() for systems without it   *
*************************************************/</comment>

<comment type="block">/* This function can make use of bcopy() if it is available. Otherwise do it by
steam, as there some non-Unix environments that lack both memmove() and
bcopy(). */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>VPCOMPAT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MEMMOVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name> <modifier>*</modifier>
<name>PRIV</name></type>(<name>memmove</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BCOPY</name></cpp:ifdef>
<expr_stmt><expr><call><name>bcopy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>d</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>s</name></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&gt;</operator> <name>src</name></expr>)</condition>
  <block>{<block_content>
  <expr_stmt><expr><name>dest</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>src</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>dest</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>src</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>dest</name></expr>;</return>
  </block_content>}</block></if>
<else>else
  <block>{<block_content>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dest</name> <operator>-</operator> <name>n</name><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* not HAVE_BCOPY */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* not VPCOMPAT &amp;&amp; not HAVE_MEMMOVE */</comment>


<comment type="block" format="doxygen">/*************************************************
*    Compare two zero-terminated PCRE2 strings   *
*************************************************/</comment>

<comment type="block">/*
Arguments:
  str1        first string
  str2        second string

Returns:      0, 1, or -1
*/</comment>

<function><type><name>int</name>
<name>PRIV</name></type>(<name>strcmp</name>)<parameter_list>(<parameter><decl><type><name>PCRE2_SPTR</name></type> <name>str1</name></decl></parameter>, <parameter><decl><type><name>PCRE2_SPTR</name></type> <name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCRE2_UCHAR</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str1</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>str2</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
  <block>{<block_content>
  <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>str1</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>str2</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************
*  Compare zero-terminated PCRE2 &amp; 8-bit strings *
*************************************************/</comment>

<comment type="block">/* As the 8-bit string is almost always a literal, its type is specified as
const char *.

Arguments:
  str1        first string
  str2        second string

Returns:      0, 1, or -1
*/</comment>

<function><type><name>int</name>
<name>PRIV</name></type>(<name>strcmp_c8</name>)<parameter_list>(<parameter><decl><type><name>PCRE2_SPTR</name></type> <name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCRE2_UCHAR</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str1</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>str2</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
  <block>{<block_content>
  <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>str1</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>str2</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></while>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************
*    Compare two PCRE2 strings, given a length   *
*************************************************/</comment>

<comment type="block">/*
Arguments:
  str1        first string
  str2        second string
  len         the length

Returns:      0, 1, or -1
*/</comment>

<function><type><name>int</name>
<name>PRIV</name></type>(<name>strncmp</name>)<parameter_list>(<parameter><decl><type><name>PCRE2_SPTR</name></type> <name>str1</name></decl></parameter>, <parameter><decl><type><name>PCRE2_SPTR</name></type> <name>str2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCRE2_UCHAR</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
  <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>str1</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>str2</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************
* Compare PCRE2 string to 8-bit string by length *
*************************************************/</comment>

<comment type="block">/* As the 8-bit string is almost always a literal, its type is specified as
const char *.

Arguments:
  str1        first string
  str2        second string
  len         the length

Returns:      0, 1, or -1
*/</comment>

<function><type><name>int</name>
<name>PRIV</name></type>(<name>strncmp_c8</name>)<parameter_list>(<parameter><decl><type><name>PCRE2_SPTR</name></type> <name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCRE2_UCHAR</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
<for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>len</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
  <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>str1</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>str2</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c1</name> <operator>!=</operator> <name>c2</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>c1</name> <operator>&gt;</operator> <name>c2</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************
*        Find the length of a PCRE2 string       *
*************************************************/</comment>

<comment type="block">/*
Argument:    the string
Returns:     the length
*/</comment>

<function><type><name>PCRE2_SIZE</name>
<name>PRIV</name></type>(<name>strlen</name>)<parameter_list>(<parameter><decl><type><name>PCRE2_SPTR</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCRE2_SIZE</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str</name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************
* Copy 8-bit 0-terminated string to PCRE2 string *
*************************************************/</comment>

<comment type="block">/* Arguments:
  str1     buffer to receive the string
  str2     8-bit string to be copied

Returns:   the number of code units used (excluding trailing zero)
*/</comment>

<function><type><name>PCRE2_SIZE</name>
<name>PRIV</name></type>(<name>strcpy_c8</name>)<parameter_list>(<parameter><decl><type><name>PCRE2_UCHAR</name> <modifier>*</modifier></type><name>str1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCRE2_UCHAR</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>str1</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><operator>*</operator><name>str2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>t</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>t</name> <operator>-</operator> <name>str1</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* End of pcre2_string_utils.c */</comment>
</unit>
