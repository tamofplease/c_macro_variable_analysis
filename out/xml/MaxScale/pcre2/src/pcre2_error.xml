<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_error.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2019 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2_internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRING</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value># a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XSTRING</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>STRING(s)</cpp:value></cpp:define>

<comment type="block">/* The texts of compile-time error messages. Compile-time error numbers start
at COMPILE_ERROR_BASE (100).

This used to be a table of strings, but in order to reduce the number of
relocations needed when a shared library is loaded dynamically, it is now one
long string. We cannot use a table of offsets, because the lengths of inserts
such as XSTRING(MAX_NAME_SIZE) are not known. Instead,
pcre2_get_error_message() counts through to the one it wants - this isn't a
performance issue because these strings are used only when there is an error.

Each substring ends with \0 to insert a null character. This includes the final
substring, so that the whole string ends with \0\0, which can be detected when
counting through. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>compile_error_texts</name><index>[]</index></name> <init>=
  <expr><literal type="string">"no error\0"</literal>
  <literal type="string">"\\ at end of pattern\0"</literal>
  <literal type="string">"\\c at end of pattern\0"</literal>
  <literal type="string">"unrecognized character follows \\\0"</literal>
  <literal type="string">"numbers out of order in {} quantifier\0"</literal>
  <comment type="block">/* 5 */</comment>
  <literal type="string">"number too big in {} quantifier\0"</literal>
  <literal type="string">"missing terminating ] for character class\0"</literal>
  <literal type="string">"escape sequence is invalid in character class\0"</literal>
  <literal type="string">"range out of order in character class\0"</literal>
  <literal type="string">"quantifier does not follow a repeatable item\0"</literal>
  <comment type="block">/* 10 */</comment>
  <literal type="string">"internal error: unexpected repeat\0"</literal>
  <literal type="string">"unrecognized character after (? or (?-\0"</literal>
  <literal type="string">"POSIX named classes are supported only within a class\0"</literal>
  <literal type="string">"POSIX collating elements are not supported\0"</literal>
  <literal type="string">"missing closing parenthesis\0"</literal>
  <comment type="block">/* 15 */</comment>
  <literal type="string">"reference to non-existent subpattern\0"</literal>
  <literal type="string">"pattern passed as NULL\0"</literal>
  <literal type="string">"unrecognised compile-time option bit(s)\0"</literal>
  <literal type="string">"missing ) after (?# comment\0"</literal>
  <literal type="string">"parentheses are too deeply nested\0"</literal>
  <comment type="block">/* 20 */</comment>
  <literal type="string">"regular expression is too large\0"</literal>
  <literal type="string">"failed to allocate heap memory\0"</literal>
  <literal type="string">"unmatched closing parenthesis\0"</literal>
  <literal type="string">"internal error: code overflow\0"</literal>
  <literal type="string">"missing closing parenthesis for condition\0"</literal>
  <comment type="block">/* 25 */</comment>
  <literal type="string">"lookbehind assertion is not fixed length\0"</literal>
  <literal type="string">"a relative value of zero is not allowed\0"</literal>
  <literal type="string">"conditional subpattern contains more than two branches\0"</literal>
  <literal type="string">"assertion expected after (?( or (?(?C)\0"</literal>
  <literal type="string">"digit expected after (?+ or (?-\0"</literal>
  <comment type="block">/* 30 */</comment>
  <literal type="string">"unknown POSIX class name\0"</literal>
  <literal type="string">"internal error in pcre2_study(): should not occur\0"</literal>
  <literal type="string">"this version of PCRE2 does not have Unicode support\0"</literal>
  <literal type="string">"parentheses are too deeply nested (stack check)\0"</literal>
  <literal type="string">"character code point value in \\x{} or \\o{} is too large\0"</literal>
  <comment type="block">/* 35 */</comment>
  <literal type="string">"lookbehind is too complicated\0"</literal>
  <literal type="string">"\\C is not allowed in a lookbehind assertion in UTF-"</literal> <call><name>XSTRING</name><argument_list>(<argument><expr><name>PCRE2_CODE_UNIT_WIDTH</name></expr></argument>)</argument_list></call> <literal type="string">" mode\0"</literal>
  <literal type="string">"PCRE2 does not support \\F, \\L, \\l, \\N{name}, \\U, or \\u\0"</literal>
  <literal type="string">"number after (?C is greater than 255\0"</literal>
  <literal type="string">"closing parenthesis for (?C expected\0"</literal>
  <comment type="block">/* 40 */</comment>
  <literal type="string">"invalid escape sequence in (*VERB) name\0"</literal>
  <literal type="string">"unrecognized character after (?P\0"</literal>
  <literal type="string">"syntax error in subpattern name (missing terminator?)\0"</literal>
  <literal type="string">"two named subpatterns have the same name (PCRE2_DUPNAMES not set)\0"</literal>
  <literal type="string">"subpattern name must start with a non-digit\0"</literal>
  <comment type="block">/* 45 */</comment>
  <literal type="string">"this version of PCRE2 does not have support for \\P, \\p, or \\X\0"</literal>
  <literal type="string">"malformed \\P or \\p sequence\0"</literal>
  <literal type="string">"unknown property name after \\P or \\p\0"</literal>
  <literal type="string">"subpattern name is too long (maximum "</literal> <call><name>XSTRING</name><argument_list>(<argument><expr><name>MAX_NAME_SIZE</name></expr></argument>)</argument_list></call> <literal type="string">" code units)\0"</literal>
  <literal type="string">"too many named subpatterns (maximum "</literal> <call><name>XSTRING</name><argument_list>(<argument><expr><name>MAX_NAME_COUNT</name></expr></argument>)</argument_list></call> <literal type="string">")\0"</literal>
  <comment type="block">/* 50 */</comment>
  <literal type="string">"invalid range in character class\0"</literal>
  <literal type="string">"octal value is greater than \\377 in 8-bit non-UTF-8 mode\0"</literal>
  <literal type="string">"internal error: overran compiling workspace\0"</literal>
  <literal type="string">"internal error: previously-checked referenced subpattern not found\0"</literal>
  <literal type="string">"DEFINE subpattern contains more than one branch\0"</literal>
  <comment type="block">/* 55 */</comment>
  <literal type="string">"missing opening brace after \\o\0"</literal>
  <literal type="string">"internal error: unknown newline setting\0"</literal>
  <literal type="string">"\\g is not followed by a braced, angle-bracketed, or quoted name/number or by a plain number\0"</literal>
  <literal type="string">"(?R (recursive pattern call) must be followed by a closing parenthesis\0"</literal>
  <comment type="block">/* "an argument is not allowed for (*ACCEPT), (*FAIL), or (*COMMIT)\0" */</comment>
  <literal type="string">"obsolete error (should not occur)\0"</literal>  <comment type="block">/* Was the above */</comment>
  <comment type="block">/* 60 */</comment>
  <literal type="string">"(*VERB) not recognized or malformed\0"</literal>
  <literal type="string">"subpattern number is too big\0"</literal>
  <literal type="string">"subpattern name expected\0"</literal>
  <literal type="string">"internal error: parsed pattern overflow\0"</literal>
  <literal type="string">"non-octal character in \\o{} (closing brace missing?)\0"</literal>
  <comment type="block">/* 65 */</comment>
  <literal type="string">"different names for subpatterns of the same number are not allowed\0"</literal>
  <literal type="string">"(*MARK) must have an argument\0"</literal>
  <literal type="string">"non-hex character in \\x{} (closing brace missing?)\0"</literal>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EBCDIC</name></cpp:ifndef>
  <literal type="string">"\\c must be followed by a printable ASCII character\0"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <literal type="string">"\\c must be followed by a letter or one of [\\]^_?\0"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <literal type="string">"\\k is not followed by a braced, angle-bracketed, or quoted name\0"</literal>
  <comment type="block">/* 70 */</comment>
  <literal type="string">"internal error: unknown meta code in check_lookbehinds()\0"</literal>
  <literal type="string">"\\N is not supported in a class\0"</literal>
  <literal type="string">"callout string is too long\0"</literal>
  <literal type="string">"disallowed Unicode code point (&gt;= 0xd800 &amp;&amp; &lt;= 0xdfff)\0"</literal>
  <literal type="string">"using UTF is disabled by the application\0"</literal>
  <comment type="block">/* 75 */</comment>
  <literal type="string">"using UCP is disabled by the application\0"</literal>
  <literal type="string">"name is too long in (*MARK), (*PRUNE), (*SKIP), or (*THEN)\0"</literal>
  <literal type="string">"character code point value in \\u.... sequence is too large\0"</literal>
  <literal type="string">"digits missing in \\x{} or \\o{} or \\N{U+}\0"</literal>
  <literal type="string">"syntax error or number too big in (?(VERSION condition\0"</literal>
  <comment type="block">/* 80 */</comment>
  <literal type="string">"internal error: unknown opcode in auto_possessify()\0"</literal>
  <literal type="string">"missing terminating delimiter for callout with string argument\0"</literal>
  <literal type="string">"unrecognized string delimiter follows (?C\0"</literal>
  <literal type="string">"using \\C is disabled by the application\0"</literal>
  <literal type="string">"(?| and/or (?J: or (?x: parentheses are too deeply nested\0"</literal>
  <comment type="block">/* 85 */</comment>
  <literal type="string">"using \\C is disabled in this PCRE2 library\0"</literal>
  <literal type="string">"regular expression is too complicated\0"</literal>
  <literal type="string">"lookbehind assertion is too long\0"</literal>
  <literal type="string">"pattern string is longer than the limit set by the application\0"</literal>
  <literal type="string">"internal error: unknown code in parsed pattern\0"</literal>
  <comment type="block">/* 90 */</comment>
  <literal type="string">"internal error: bad code value in parsed_skip()\0"</literal>
  <literal type="string">"PCRE2_EXTRA_ALLOW_SURROGATE_ESCAPES is not allowed in UTF-16 mode\0"</literal>
  <literal type="string">"invalid option bits with PCRE2_LITERAL\0"</literal>
  <literal type="string">"\\N{U+dddd} is supported only in Unicode (UTF) mode\0"</literal>
  <literal type="string">"invalid hyphen in option setting\0"</literal>
  <comment type="block">/* 95 */</comment>
  <literal type="string">"(*alpha_assertion) not recognized\0"</literal>
  <literal type="string">"script runs require Unicode support, which this version of PCRE2 does not have\0"</literal>
  <literal type="string">"too many capturing groups (maximum 65535)\0"</literal>
  <literal type="string">"atomic assertion expected after (?( or (?(?C)\0"</literal></expr></init></decl>
  ;</decl_stmt>

<comment type="block">/* Match-time and UTF error texts are in the same format. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>match_error_texts</name><index>[]</index></name> <init>=
  <expr><literal type="string">"no error\0"</literal>
  <literal type="string">"no match\0"</literal>
  <literal type="string">"partial match\0"</literal>
  <literal type="string">"UTF-8 error: 1 byte missing at end\0"</literal>
  <literal type="string">"UTF-8 error: 2 bytes missing at end\0"</literal>
  <comment type="block">/* 5 */</comment>
  <literal type="string">"UTF-8 error: 3 bytes missing at end\0"</literal>
  <literal type="string">"UTF-8 error: 4 bytes missing at end\0"</literal>
  <literal type="string">"UTF-8 error: 5 bytes missing at end\0"</literal>
  <literal type="string">"UTF-8 error: byte 2 top bits not 0x80\0"</literal>
  <literal type="string">"UTF-8 error: byte 3 top bits not 0x80\0"</literal>
  <comment type="block">/* 10 */</comment>
  <literal type="string">"UTF-8 error: byte 4 top bits not 0x80\0"</literal>
  <literal type="string">"UTF-8 error: byte 5 top bits not 0x80\0"</literal>
  <literal type="string">"UTF-8 error: byte 6 top bits not 0x80\0"</literal>
  <literal type="string">"UTF-8 error: 5-byte character is not allowed (RFC 3629)\0"</literal>
  <literal type="string">"UTF-8 error: 6-byte character is not allowed (RFC 3629)\0"</literal>
  <comment type="block">/* 15 */</comment>
  <literal type="string">"UTF-8 error: code points greater than 0x10ffff are not defined\0"</literal>
  <literal type="string">"UTF-8 error: code points 0xd800-0xdfff are not defined\0"</literal>
  <literal type="string">"UTF-8 error: overlong 2-byte sequence\0"</literal>
  <literal type="string">"UTF-8 error: overlong 3-byte sequence\0"</literal>
  <literal type="string">"UTF-8 error: overlong 4-byte sequence\0"</literal>
  <comment type="block">/* 20 */</comment>
  <literal type="string">"UTF-8 error: overlong 5-byte sequence\0"</literal>
  <literal type="string">"UTF-8 error: overlong 6-byte sequence\0"</literal>
  <literal type="string">"UTF-8 error: isolated byte with 0x80 bit set\0"</literal>
  <literal type="string">"UTF-8 error: illegal byte (0xfe or 0xff)\0"</literal>
  <literal type="string">"UTF-16 error: missing low surrogate at end\0"</literal>
  <comment type="block">/* 25 */</comment>
  <literal type="string">"UTF-16 error: invalid low surrogate\0"</literal>
  <literal type="string">"UTF-16 error: isolated low surrogate\0"</literal>
  <literal type="string">"UTF-32 error: code points 0xd800-0xdfff are not defined\0"</literal>
  <literal type="string">"UTF-32 error: code points greater than 0x10ffff are not defined\0"</literal>
  <literal type="string">"bad data value\0"</literal>
  <comment type="block">/* 30 */</comment>
  <literal type="string">"patterns do not all use the same character tables\0"</literal>
  <literal type="string">"magic number missing\0"</literal>
  <literal type="string">"pattern compiled in wrong mode: 8/16/32-bit error\0"</literal>
  <literal type="string">"bad offset value\0"</literal>
  <literal type="string">"bad option value\0"</literal>
  <comment type="block">/* 35 */</comment>
  <literal type="string">"invalid replacement string\0"</literal>
  <literal type="string">"bad offset into UTF string\0"</literal>
  <literal type="string">"callout error code\0"</literal>              <comment type="block">/* Never returned by PCRE2 itself */</comment>
  <literal type="string">"invalid data in workspace for DFA restart\0"</literal>
  <literal type="string">"too much recursion for DFA matching\0"</literal>
  <comment type="block">/* 40 */</comment>
  <literal type="string">"backreference condition or recursion test is not supported for DFA matching\0"</literal>
  <literal type="string">"function is not supported for DFA matching\0"</literal>
  <literal type="string">"pattern contains an item that is not supported for DFA matching\0"</literal>
  <literal type="string">"workspace size exceeded in DFA matching\0"</literal>
  <literal type="string">"internal error - pattern overwritten?\0"</literal>
  <comment type="block">/* 45 */</comment>
  <literal type="string">"bad JIT option\0"</literal>
  <literal type="string">"JIT stack limit reached\0"</literal>
  <literal type="string">"match limit exceeded\0"</literal>
  <literal type="string">"no more memory\0"</literal>
  <literal type="string">"unknown substring\0"</literal>
  <comment type="block">/* 50 */</comment>
  <literal type="string">"non-unique substring name\0"</literal>
  <literal type="string">"NULL argument passed\0"</literal>
  <literal type="string">"nested recursion at the same subject position\0"</literal>
  <literal type="string">"matching depth limit exceeded\0"</literal>
  <literal type="string">"requested value is not available\0"</literal>
  <comment type="block">/* 55 */</comment>
  <literal type="string">"requested value is not set\0"</literal>
  <literal type="string">"offset limit set without PCRE2_USE_OFFSET_LIMIT\0"</literal>
  <literal type="string">"bad escape sequence in replacement string\0"</literal>
  <literal type="string">"expected closing curly bracket in replacement string\0"</literal>
  <literal type="string">"bad substitution in replacement string\0"</literal>
  <comment type="block">/* 60 */</comment>
  <literal type="string">"match with end before start or start moved backwards is not supported\0"</literal>
  <literal type="string">"too many replacements (more than INT_MAX)\0"</literal>
  <literal type="string">"bad serialized data\0"</literal>
  <literal type="string">"heap limit exceeded\0"</literal>
  <literal type="string">"invalid syntax\0"</literal>
  <comment type="block">/* 65 */</comment>
  <literal type="string">"internal error - duplicate substitution match\0"</literal>
  <literal type="string">"PCRE2_MATCH_INVALID_UTF is not supported for DFA matching\0"</literal></expr></init></decl>
  ;</decl_stmt>


<comment type="block" format="doxygen">/*************************************************
*            Return error message                *
*************************************************/</comment>

<comment type="block">/* This function copies an error message into a buffer whose units are of an
appropriate width. Error numbers are positive for compile-time errors, and
negative for match-time errors (except for UTF errors), but the numbers are all
distinct.

Arguments:
  enumber       error number
  buffer        where to put the message (zero terminated)
  size          size of the buffer in code units

Returns:        length of message if all is well
                negative on error
*/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_get_error_message</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>enumber</name></decl></parameter>, <parameter><decl><type><name>PCRE2_UCHAR</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>PCRE2_SIZE</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCRE2_SIZE</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_NOMEMORY</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>enumber</name> <operator>&gt;=</operator> <name>COMPILE_ERROR_BASE</name></expr>)</condition>  <comment type="block">/* Compile error */</comment>
  <block>{<block_content>
  <expr_stmt><expr><name>message</name> <operator>=</operator> <name>compile_error_texts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>enumber</name> <operator>-</operator> <name>COMPILE_ERROR_BASE</name></expr>;</expr_stmt>
  </block_content>}</block></if>
<if type="elseif">else if <condition>(<expr><name>enumber</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>               <comment type="block">/* Match or UTF error */</comment>
  <block>{<block_content>
  <expr_stmt><expr><name>message</name> <operator>=</operator> <name>match_error_texts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>enumber</name></expr>;</expr_stmt>
  </block_content>}</block></if>
<else>else                                <comment type="block">/* Invalid error number */</comment>
  <block>{<block_content>
  <expr_stmt><expr><name>message</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\0"</literal></expr>;</expr_stmt>  <comment type="block">/* Empty message list */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control>
  <block>{<block_content>
  <while>while <condition>(<expr><operator>*</operator><name>message</name><operator>++</operator> <operator>!=</operator> <name>CHAR_NUL</name></expr>)</condition> <block>{<block_content/>}</block></while><empty_stmt>;</empty_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>message</name> <operator>==</operator> <name>CHAR_NUL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_BADDATA</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>message</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>     <comment type="block">/* Terminate partial message */</comment>
    <return>return <expr><name>PCRE2_ERROR_NOMEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>message</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* End of pcre2_error.c */</comment>
</unit>
