<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_xclass.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2019 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>

<comment type="block">/* This module contains an internal function that is used to match an extended
class. It is used by pcre2_auto_possessify() and by both pcre2_match() and
pcre2_def_match(). */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2_internal.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/*************************************************
*       Match character against an XCLASS        *
*************************************************/</comment>

<comment type="block">/* This function is called to match a character against an extended class that
might contain codepoints above 255 and/or Unicode properties.

Arguments:
  c           the character
  data        points to the flag code unit of the XCLASS data
  utf         TRUE if in UTF mode

Returns:      TRUE if character matches, else FALSE
*/</comment>

<function><type><name>BOOL</name>
<name>PRIV</name></type>(<name>xclass</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>PCRE2_SPTR</name></type> <name>data</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>utf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>PCRE2_UCHAR</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>negated</name> <init>= <expr><operator>(</operator><operator>*</operator><name>data</name> <operator>&amp;</operator> <name>XCL_NOT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PCRE2_CODE_UNIT_WIDTH</name> <operator>==</operator> <literal type="number">8</literal></expr></cpp:if>
<comment type="block">/* In 8 bit mode, this must always be TRUE. Help the compiler to know that. */</comment>
<expr_stmt><expr><name>utf</name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Code points &lt; 256 are matched against a bitmap, if one is present. If not,
we still carry on, because there may be ranges that start below 256 in the
additional data. */</comment>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>
  <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>data</name> <operator>&amp;</operator> <name>XCL_HASPROP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>data</name> <operator>&amp;</operator> <name>XCL_MAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><index>[<expr><name>c</name><operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>&amp;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>c</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>data</name> <operator>&amp;</operator> <name>XCL_MAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
    <operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><index>[<expr><name>c</name><operator>/</operator><literal type="number">8</literal></expr>]</index> <operator>&amp;</operator> <operator>(</operator><literal type="number">1u</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>c</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* char found */</comment>
  </block_content>}</block></if></if_stmt>

<comment type="block">/* First skip the bit map if present. Then match against the list of Unicode
properties or large chars or ranges that end with a large char. We won't ever
encounter XCL_PROP or XCL_NOTPROP when UTF support is not compiled. */</comment>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>data</name><operator>++</operator> <operator>&amp;</operator> <name>XCL_MAP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">32</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PCRE2_UCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <name>XCL_END</name></expr>)</condition>
  <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>XCL_SINGLE</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>utf</name></expr>)</condition>
      <block>{<block_content>
      <expr_stmt><expr><call><name>GETCHARINC</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* macro generates multiple statements */</comment>
      </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>XCL_RANGE</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>utf</name></expr>)</condition>
      <block>{<block_content>
      <expr_stmt><expr><call><name>GETCHARINC</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* macro generates multiple statements */</comment>
      <expr_stmt><expr><call><name>GETCHARINC</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* macro generates multiple statements */</comment>
      </block_content>}</block></if>
    <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <block>{<block_content>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
  <else>else  <comment type="block">/* XCL_PROP &amp; XCL_NOTPROP */</comment>
    <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ucd_record</name> <modifier>*</modifier></type><name>prop</name> <init>= <expr><call><name>GET_UCD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type> <name>isprop</name> <init>= <expr><name>t</name> <operator>==</operator> <name>XCL_PROP</name></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>(<expr><operator>*</operator><name>data</name></expr>)</condition>
      <block>{<block_content>
      <case>case <expr><name>PT_ANY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>isprop</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <case>case <expr><name>PT_LAMP</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name> <operator>==</operator> <name>ucp_Lu</name> <operator>||</operator> <name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name> <operator>==</operator> <name>ucp_Ll</name> <operator>||</operator>
           <name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name> <operator>==</operator> <name>ucp_Lt</name><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <case>case <expr><name>PT_GC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <case>case <expr><name>PT_PC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <case>case <expr><name>PT_SC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>prop</name><operator>-&gt;</operator><name>script</name></name><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <case>case <expr><name>PT_ALNUM</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>==</operator> <name>ucp_L</name> <operator>||</operator>
           <call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>==</operator> <name>ucp_N</name><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <comment type="block">/* Perl space used to exclude VT, but from Perl 5.18 it is included,
      which means that Perl space and POSIX space are now identical. PCRE
      was changed at release 8.34. */</comment>

      <case>case <expr><name>PT_SPACE</name></expr>:</case>    <comment type="block">/* Perl space */</comment>
      <case>case <expr><name>PT_PXSPACE</name></expr>:</case>  <comment type="block">/* POSIX space */</comment>
      <switch>switch<condition>(<expr><name>c</name></expr>)</condition>
        <block>{<block_content>
        <label><name>HSPACE_CASES</name>:</label>
        <label><name>VSPACE_CASES</name>:</label>
        <if_stmt><if>if <condition>(<expr><name>isprop</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>

        <default>default:</default>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>==</operator> <name>ucp_Z</name><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
        <break>break;</break>
        </block_content>}</block></switch>
      <break>break;</break>

      <case>case <expr><name>PT_WORD</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>==</operator> <name>ucp_L</name> <operator>||</operator>
           <call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>==</operator> <name>ucp_N</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CHAR_UNDERSCORE</name><operator>)</operator>
             <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <case>case <expr><name>PT_UCNC</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0xa0</literal></expr>)</condition>
        <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <name>CHAR_DOLLAR_SIGN</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CHAR_COMMERCIAL_AT</name> <operator>||</operator>
             <name>c</name> <operator>==</operator> <name>CHAR_GRAVE_ACCENT</name><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if>
      <else>else
        <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0xd800</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xdfff</literal><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      <break>break;</break>

      <comment type="block">/* The following three properties can occur only in an XCLASS, as there
      is no \p or \P coding for them. */</comment>

      <comment type="block">/* Graphic character. Implement this as not Z (space or separator) and
      not C (other), except for Cf (format) with a few exceptions. This seems
      to be what Perl does. The exceptional characters are:

      U+061C           Arabic Letter Mark
      U+180E           Mongolian Vowel Separator
      U+2066 - U+2069  Various "isolate"s
      */</comment>

      <case>case <expr><name>PT_PXGRAPH</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>!=</operator> <name>ucp_Z</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>!=</operator> <name>ucp_C</name> <operator>||</operator>
              <operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name> <operator>==</operator> <name>ucp_Cf</name> <operator>&amp;&amp;</operator>
                <name>c</name> <operator>!=</operator> <literal type="number">0x061c</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">0x180e</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x2066</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x2069</literal><operator>)</operator><operator>)</operator>
         <operator>)</operator><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <comment type="block">/* Printable character: same as graphic, with the addition of Zs, i.e.
      not Zl and not Zp, and U+180E. */</comment>

      <case>case <expr><name>PT_PXPRINT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name> <operator>!=</operator> <name>ucp_Zl</name> <operator>&amp;&amp;</operator>
           <name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name> <operator>!=</operator> <name>ucp_Zp</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>!=</operator> <name>ucp_C</name> <operator>||</operator>
              <operator>(</operator><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name> <operator>==</operator> <name>ucp_Cf</name> <operator>&amp;&amp;</operator>
                <name>c</name> <operator>!=</operator> <literal type="number">0x061c</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x2066</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="number">0x2069</literal><operator>)</operator><operator>)</operator>
         <operator>)</operator><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <comment type="block">/* Punctuation: all Unicode punctuation, plus ASCII characters that
      Unicode treats as symbols rather than punctuation, for Perl
      compatibility (these are $+&lt;=&gt;^`|~). */</comment>

      <case>case <expr><name>PT_PXPUNCT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>==</operator> <name>ucp_P</name> <operator>||</operator>
            <operator>(</operator><name>c</name> <operator>&lt;</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>ucp_gentype</name></expr></argument>)</argument_list></call><index>[<expr><name><name>prop</name><operator>-&gt;</operator><name>chartype</name></name></expr>]</index> <operator>==</operator> <name>ucp_S</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>isprop</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>!</operator><name>negated</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>

      <comment type="block">/* This should never occur, but compilers may mutter if there is no
      default. */</comment>

      <default>default:</default>
      <return>return <expr><name>FALSE</name></expr>;</return>
      </block_content>}</block></switch>

    <expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>utf</name></expr>;</expr_stmt>  <comment type="block">/* Avoid compiler warning */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SUPPORT_UNICODE */</comment>
  </block_content>}</block></while>

<return>return <expr><name>negated</name></expr>;</return>   <comment type="block">/* char did not match */</comment>
</block_content>}</block></function>

<comment type="block">/* End of pcre2_xclass.c */</comment>
</unit>
