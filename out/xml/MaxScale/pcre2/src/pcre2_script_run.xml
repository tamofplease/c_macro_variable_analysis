<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_script_run.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2018 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>

<comment type="block">/* This module contains the function for checking a script run. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2_internal.h"</cpp:file></cpp:include>


<comment type="block" format="doxygen">/*************************************************
*                Check script run                *
*************************************************/</comment>

<comment type="block">/* A script run is conceptually a sequence of characters all in the same
Unicode script. However, it isn't quite that simple. There are special rules
for scripts that are commonly used together, and also special rules for digits.
This function implements the appropriate checks, which is possible only when
PCRE2 is compiled with Unicode support. The function returns TRUE if there is
no Unicode support; however, it should never be called in that circumstance
because an error is given by pcre2_compile() if a script run is called for in a
version of PCRE2 compiled without Unicode support.

Arguments:
  pgr       point to the first character
  endptr    point after the last character
  utf       TRUE if in UTF mode

Returns:    TRUE if this is a valid script run
*/</comment>

<comment type="block">/* These dummy values must be less than the negation of the largest offset in
the PRIV(ucd_script_sets) vector, which is held in a 16-bit field in UCD
records (and is only likely to be a few hundred). */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_UNSET</name></cpp:macro>        <cpp:value>(-99999)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_HANPENDING</name></cpp:macro>   <cpp:value>(-99998)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_HANHIRAKATA</name></cpp:macro>  <cpp:value>(-99997)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_HANBOPOMOFO</name></cpp:macro>  <cpp:value>(-99996)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_HANHANGUL</name></cpp:macro>    <cpp:value>(-99995)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_LIST</name></cpp:macro>         <cpp:value>(-99994)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERSECTION_LIST_SIZE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<function><type><name>BOOL</name>
<name>PRIV</name></type>(<name>script_run</name>)<parameter_list>(<parameter><decl><type><name>PCRE2_SPTR</name></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>PCRE2_SPTR</name></type> <name>endptr</name></decl></parameter>, <parameter><decl><type><name>BOOL</name></type> <name>utf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
<decl_stmt><decl><type><name>int</name></type> <name>require_script</name> <init>= <expr><name>SCRIPT_UNSET</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>intersection_list</name><index>[<expr><name>INTERSECTION_LIST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>require_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>require_digitset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PCRE2_CODE_UNIT_WIDTH</name> <operator>==</operator> <literal type="number">32</literal></expr></cpp:if>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>utf</name></expr>;</expr_stmt>    <comment type="block">/* Avoid compiler warning */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Any string containing fewer than 2 characters is a valid script run. */</comment>

<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>endptr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>GETCHARINCTEST</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>endptr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>

<comment type="block">/* Scan strings of two or more characters, checking the Unicode characteristics
of each code point. We make use of the Script Extensions property. There is
special code for scripts that can be combined with characters from the Han
Chinese script. This may be used in conjunction with four other scripts in
these combinations:

. Han with Hiragana and Katakana is allowed (for Japanese).
. Han with Bopomofo is allowed (for Taiwanese Mandarin).
. Han with Hangul is allowed (for Korean).

If the first significant character's script is one of the four, the required
script type is immediately known. However, if the first significant
character's script is Han, we have to keep checking for a non-Han character.
Hence the SCRIPT_HANPENDING state. */</comment>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
  <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>ucd_record</name> <modifier>*</modifier></type><name>ucd</name> <init>= <expr><call><name>GET_UCD</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>scriptx</name> <init>= <expr><name><name>ucd</name><operator>-&gt;</operator><name>scriptx</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If the script extension is Unknown, the string is not a valid script run.
  Such characters can only form script runs of length one. */</comment>

  <if_stmt><if>if <condition>(<expr><name>scriptx</name> <operator>==</operator> <name>ucp_Unknown</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* A character whose script extension is Inherited is always accepted with
  any script, and plays no further part in this testing. A character whose
  script is Common is always accepted, but must still be tested for a digit
  below. The scriptx value at this point is non-zero, because zero is
  ucp_Unknown, tested for above. */</comment>

  <if_stmt><if>if <condition>(<expr><name>scriptx</name> <operator>!=</operator> <name>ucp_Inherited</name></expr>)</condition>
    <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>scriptx</name> <operator>!=</operator> <name>ucp_Common</name></expr>)</condition>
      <block>{<block_content>
      <comment type="block">/* If the script extension value is positive, the character is not a mark
      that can be used with many scripts. In the simple case we either set or
      compare with the required script. However, handling the scripts that can
      combine with Han are more complicated, as is the case when the previous
      characters have been man-script marks. */</comment>

      <if_stmt><if>if <condition>(<expr><name>scriptx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
        <switch>switch<condition>(<expr><name>require_script</name></expr>)</condition>
          <block>{<block_content>
          <comment type="block">/* Either the first significant character (require_script unset) or
          after only Han characters. */</comment>

          <case>case <expr><name>SCRIPT_UNSET</name></expr>:</case>
          <case>case <expr><name>SCRIPT_HANPENDING</name></expr>:</case>
          <switch>switch<condition>(<expr><name>scriptx</name></expr>)</condition>
            <block>{<block_content>
            <case>case <expr><name>ucp_Han</name></expr>:</case>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANPENDING</name></expr>;</expr_stmt>
            <break>break;</break>

            <case>case <expr><name>ucp_Hiragana</name></expr>:</case>
            <case>case <expr><name>ucp_Katakana</name></expr>:</case>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANHIRAKATA</name></expr>;</expr_stmt>
            <break>break;</break>

            <case>case <expr><name>ucp_Bopomofo</name></expr>:</case>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANBOPOMOFO</name></expr>;</expr_stmt>
            <break>break;</break>

            <case>case <expr><name>ucp_Hangul</name></expr>:</case>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANHANGUL</name></expr>;</expr_stmt>
            <break>break;</break>

            <comment type="block">/* Not a Han-related script. If expecting one, fail. Otherise set
            the requirement to this script. */</comment>

            <default>default:</default>
            <if_stmt><if>if <condition>(<expr><name>require_script</name> <operator>==</operator> <name>SCRIPT_HANPENDING</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>scriptx</name></expr>;</expr_stmt>
            <break>break;</break>
            </block_content>}</block></switch>
          <break>break;</break>

          <comment type="block">/* Previously encountered one of the "with Han" scripts. Check that
          this character is appropriate. */</comment>

          <case>case <expr><name>SCRIPT_HANHIRAKATA</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>scriptx</name> <operator>!=</operator> <name>ucp_Han</name> <operator>&amp;&amp;</operator> <name>scriptx</name> <operator>!=</operator> <name>ucp_Hiragana</name> <operator>&amp;&amp;</operator> 
              <name>scriptx</name> <operator>!=</operator> <name>ucp_Katakana</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>

          <case>case <expr><name>SCRIPT_HANBOPOMOFO</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>scriptx</name> <operator>!=</operator> <name>ucp_Han</name> <operator>&amp;&amp;</operator> <name>scriptx</name> <operator>!=</operator> <name>ucp_Bopomofo</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>

          <case>case <expr><name>SCRIPT_HANHANGUL</name></expr>:</case>
          <if_stmt><if>if <condition>(<expr><name>scriptx</name> <operator>!=</operator> <name>ucp_Han</name> <operator>&amp;&amp;</operator> <name>scriptx</name> <operator>!=</operator> <name>ucp_Hangul</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>

          <comment type="block">/* We have a list of scripts to check that is derived from one or
          more previous characters. This is either one of the lists in
          ucd_script_sets[] (for one previous character) or the intersection of
          several lists for multiple characters. */</comment>

          <case>case <expr><name>SCRIPT_LIST</name></expr>:</case>
            <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>list</name> <operator>=</operator> <name>require_list</name></expr>;</init> <condition><expr><operator>*</operator><name>list</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control>
              <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <name>scriptx</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
              </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>

          <comment type="block">/* The rest of the string must be in this script, but we have to 
          allow for the Han complications. */</comment>
          
          <switch>switch<condition>(<expr><name>scriptx</name></expr>)</condition>
            <block>{<block_content>
            <case>case <expr><name>ucp_Han</name></expr>:</case>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANPENDING</name></expr>;</expr_stmt>
            <break>break;</break>

            <case>case <expr><name>ucp_Hiragana</name></expr>:</case>
            <case>case <expr><name>ucp_Katakana</name></expr>:</case>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANHIRAKATA</name></expr>;</expr_stmt>
            <break>break;</break>

            <case>case <expr><name>ucp_Bopomofo</name></expr>:</case>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANBOPOMOFO</name></expr>;</expr_stmt>
            <break>break;</break>

            <case>case <expr><name>ucp_Hangul</name></expr>:</case>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANHANGUL</name></expr>;</expr_stmt>
            <break>break;</break>

            <default>default:</default>
            <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>scriptx</name></expr>;</expr_stmt>
            <break>break;</break>
            </block_content>}</block></switch>  
          <break>break;</break>

          <comment type="block">/* This is the easy case when a single script is required. */</comment>

          <default>default:</default>
          <if_stmt><if>if <condition>(<expr><name>scriptx</name> <operator>!=</operator> <name>require_script</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
          </block_content>}</block></switch>
        </block_content>}</block></if>  <comment type="block">/* End of handing positive scriptx */</comment>

      <comment type="block">/* If scriptx is negative, this character is a mark-type character that
      has a list of permitted scripts. */</comment>

      <else>else
        <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>chspecial</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>clist</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rlist</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>PRIV</name><argument_list>(<argument><expr><name>ucd_script_sets</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>scriptx</name></expr></init></decl>;</decl_stmt>
        
        <switch>switch<condition>(<expr><name>require_script</name></expr>)</condition>
          <block>{<block_content>
          <case>case <expr><name>SCRIPT_UNSET</name></expr>:</case>
          <expr_stmt><expr><name>require_list</name> <operator>=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>ucd_script_sets</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>scriptx</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_LIST</name></expr>;</expr_stmt>
          <break>break;</break>

          <comment type="block">/* An inspection of the Unicode 11.0.0 files shows that there are the
          following types of Script Extension list that involve the Han,
          Bopomofo, Hiragana, Katakana, and Hangul scripts:

          . Bopomofo + Han
          . Han + Hiragana + Katakana
          . Hiragana + Katakana
          . Bopopmofo + Hangul + Han + Hiragana + Katakana

          The following code tries to make sense of this. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOUND_BOPOMOFO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOUND_HIRAGANA</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOUND_KATAKANA</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOUND_HANGUL</name></cpp:macro>   <cpp:value>8</cpp:value></cpp:define>

          <case>case <expr><name>SCRIPT_HANPENDING</name></expr>:</case>
          <expr_stmt><expr><name>chspecial</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>list</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
            <switch>switch <condition>(<expr><operator>*</operator><name>list</name></expr>)</condition>
              <block>{<block_content>
              <case>case <expr><name>ucp_Bopomofo</name></expr>:</case> <expr_stmt><expr><name>chspecial</name> <operator>|=</operator> <name>FOUND_BOPOMOFO</name></expr>;</expr_stmt> <break>break;</break>
              <case>case <expr><name>ucp_Hiragana</name></expr>:</case> <expr_stmt><expr><name>chspecial</name> <operator>|=</operator> <name>FOUND_HIRAGANA</name></expr>;</expr_stmt> <break>break;</break>
              <case>case <expr><name>ucp_Katakana</name></expr>:</case> <expr_stmt><expr><name>chspecial</name> <operator>|=</operator> <name>FOUND_KATAKANA</name></expr>;</expr_stmt> <break>break;</break>
              <case>case <expr><name>ucp_Hangul</name></expr>:</case>   <expr_stmt><expr><name>chspecial</name> <operator>|=</operator> <name>FOUND_HANGUL</name></expr>;</expr_stmt> <break>break;</break>
              <default>default:</default> <break>break;</break>
              </block_content>}</block></switch>
            </block_content>}</block></for>

           <if_stmt><if>if <condition>(<expr><name>chspecial</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>

           <if_stmt><if>if <condition>(<expr><name>chspecial</name> <operator>==</operator> <name>FOUND_BOPOMOFO</name></expr>)</condition>
             <block>{<block_content>
             <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANBOPOMOFO</name></expr>;</expr_stmt>
             </block_content>}</block></if>
           <if type="elseif">else if <condition>(<expr><name>chspecial</name> <operator>==</operator> <operator>(</operator><name>FOUND_HIRAGANA</name><operator>|</operator><name>FOUND_KATAKANA</name><operator>)</operator></expr>)</condition>
             <block>{<block_content>
             <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name>SCRIPT_HANHIRAKATA</name></expr>;</expr_stmt>
             </block_content>}</block></if></if_stmt>

          <comment type="block">/* Otherwise it must be allowed with all of them, so remain in
          the pending state. */</comment>

          <break>break;</break>

          <case>case <expr><name>SCRIPT_HANHIRAKATA</name></expr>:</case>
          <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>list</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <name>ucp_Hiragana</name> <operator>||</operator> <operator>*</operator><name>list</name> <operator>==</operator> <name>ucp_Katakana</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>

          <case>case <expr><name>SCRIPT_HANBOPOMOFO</name></expr>:</case>
          <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>list</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <name>ucp_Bopomofo</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>

          <case>case <expr><name>SCRIPT_HANHANGUL</name></expr>:</case>
          <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>list</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <name>ucp_Hangul</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>

          <comment type="block">/* Previously encountered one or more characters that are allowed
          with a list of scripts. Build the intersection of the required list
          with this character's list in intersection_list[]. This code is
          written so that it still works OK if the required list is already in
          that vector. */</comment>

          <case>case <expr><name>SCRIPT_LIST</name></expr>:</case>
            <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>rlist</name> <operator>=</operator> <name>require_list</name></expr>;</init> <condition><expr><operator>*</operator><name>rlist</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>rlist</name><operator>++</operator></expr></incr>)</control>
              <block>{<block_content>
              <for>for <control>(<init><expr><name>clist</name> <operator>=</operator> <name>list</name></expr>;</init> <condition><expr><operator>*</operator><name>clist</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>clist</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>*</operator><name>rlist</name> <operator>==</operator> <operator>*</operator><name>clist</name></expr>)</condition>
                  <block>{<block_content>
                  <expr_stmt><expr><name><name>intersection_list</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>rlist</name></expr>;</expr_stmt>
                  <break>break;</break>
                  </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
              </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* No scripts in common */</comment>

            <comment type="block">/* If there's just one script in common, we can set it as the
            unique required script. Otherwise, terminate the intersection list
            and make it the required list. */</comment>

            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
              <block>{<block_content>
              <expr_stmt><expr><name>require_script</name> <operator>=</operator> <name><name>intersection_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
              </block_content>}</block></if>
            <else>else
              <block>{<block_content>
              <expr_stmt><expr><name><name>intersection_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>require_list</name> <operator>=</operator> <name>intersection_list</name></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block>
          <break>break;</break>

          <comment type="block">/* The previously set required script is a single script, not
          Han-related. Check that it is in this character's list. */</comment>

          <default>default:</default>
          <for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>list</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>list</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <name>require_script</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
          <if_stmt><if>if <condition>(<expr><operator>*</operator><name>list</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
          <break>break;</break>
          </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>  <comment type="block">/* End of handling negative scriptx */</comment>
      </block_content>}</block></if></if_stmt>    <comment type="block">/* End of checking non-Common character */</comment>

    <comment type="block">/* The character is in an acceptable script. We must now ensure that all
    decimal digits in the string come from the same set. Some scripts (e.g.
    Common, Arabic) have more than one set of decimal digits. This code does
    not allow mixing sets, even within the same script. The vector called
    PRIV(ucd_digit_sets)[] contains, in its first element, the number of
    following elements, and then, in ascending order, the code points of the
    '9' characters in every set of 10 digits. Each set is identified by the
    offset in the vector of its '9' character. An initial check of the first
    value picks up ASCII digits quickly. Otherwise, a binary chop is used. */</comment>

    <if_stmt><if>if <condition>(<expr><name><name>ucd</name><operator>-&gt;</operator><name>chartype</name></name> <operator>==</operator> <name>ucp_Nd</name></expr>)</condition>
      <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>digitset</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>ucd_digit_sets</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>digitset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> <else>else
        <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bot</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>PRIV</name><argument_list>(<argument><expr><name>ucd_digit_sets</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
          <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;=</operator> <name>bot</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>    <comment type="block">/* &lt;= rather than == is paranoia */</comment>
            <block>{<block_content>
            <expr_stmt><expr><name>digitset</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
            <break>break;</break>
            </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>top</name> <operator>+</operator> <name>bot</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>ucd_digit_sets</name></expr></argument>)</argument_list></call><index>[<expr><name>mid</name></expr>]</index></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>top</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>bot</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

      <comment type="block">/* A required value of 0 means "unset". */</comment>

      <if_stmt><if>if <condition>(<expr><name>require_digitset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>require_digitset</name> <operator>=</operator> <name>digitset</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>digitset</name> <operator>!=</operator> <name>require_digitset</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>FALSE</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>   <comment type="block">/* End digit handling */</comment>
    </block_content>}</block></if></if_stmt>     <comment type="block">/* End checking non-Inherited character */</comment>

  <comment type="block">/* If we haven't yet got to the end, pick up the next character. */</comment>

  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&gt;=</operator> <name>endptr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TRUE</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>GETCHARINCTEST</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>  <comment type="block">/* End checking loop */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>   <comment type="block">/* NOT SUPPORT_UNICODE */</comment>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>endptr</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>utf</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SUPPORT_UNICODE */</comment>
</block_content>}</block></function>

<comment type="block">/* End of pcre2_script_run.c */</comment>
</unit>
