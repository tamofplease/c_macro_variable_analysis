<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativePPC_common.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sljit_get_platform_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"PowerPC"</literal> <name>SLJIT_CPUINFO</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Length of an instruction word.
   Both for ppc-32 and ppc-64. */</comment>
<typedef>typedef <type><name>sljit_u32</name></type> <name>sljit_ins</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>_AIX</name><operator>)</operator><operator>)</operator> \
	<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_PPC_STACK_FRAME_V2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_AIX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/cache.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>_CALL_ELF</name> <operator>&amp;&amp;</operator> <name>_CALL_ELF</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CACHE_FLUSH_OWN_IMPL</name> <operator>&amp;&amp;</operator> <name>SLJIT_CACHE_FLUSH_OWN_IMPL</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ppc_cache_flush</name><parameter_list>(<parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>to</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_AIX</name></cpp:ifdef>
	<expr_stmt><expr><call><name>_sync_cache_range</name><argument_list>(<argument><expr><operator>(</operator><name>caddr_t</name><operator>)</operator><name>from</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>to</name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>from</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IBM_GCC_ASM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__IBM_GCC_ASM</name><operator>)</operator></expr></cpp:elif>
<cpp:if>#	<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PWR2</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<comment type="block">/* Cache flush for POWER architecture. */</comment>
	<while>while <condition>(<expr><name>from</name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>
		<asm>__asm__ <specifier>volatile</specifier> (
			"clf 0, %0\n"
			"dcs\n"
			: : "r"(from)
		);</asm>
		<expr_stmt><expr><name>from</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<asm>__asm__ <specifier>volatile</specifier> ( "ics" );</asm>
<cpp:elif>#	<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_COM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_ARCH_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:error>#	<cpp:directive>error</cpp:directive> <cpp:literal>"Cache flush is not implemented for PowerPC/POWER common mode."</cpp:literal></cpp:error>
<cpp:else>#	<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* Cache flush for PowerPC architecture. */</comment>
	<while>while <condition>(<expr><name>from</name> <operator>&lt;</operator> <name>to</name></expr>)</condition> <block>{<block_content>
		<asm>__asm__ <specifier>volatile</specifier> (
			"dcbf 0, %0\n"
			"sync\n"
			"icbi 0, %0\n"
			: : "r"(from)
		);</asm>
		<expr_stmt><expr><name>from</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<asm>__asm__ <specifier>volatile</specifier> ( "isync" );</asm>
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#	<cpp:directive>ifdef</cpp:directive> <name>__xlc__</name></cpp:ifdef>
<cpp:warning>#	<cpp:directive>warning</cpp:directive> <cpp:literal>"This file may fail to compile if -qfuncsect is used"</cpp:literal></cpp:warning>
<cpp:endif>#	<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__xlc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please enable GCC syntax for inline assembly statements with -qasm=gcc"</cpp:literal></cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This platform requires a cache flush implementation."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _AIX */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* (defined SLJIT_CACHE_FLUSH_OWN_IMPL &amp;&amp; SLJIT_CACHE_FLUSH_OWN_IMPL) */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_ZERO</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 4)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_CALL_REG</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 5)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_CALL_REG</name></cpp:macro>	<cpp:value>TMP_REG2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 2)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">12</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>freg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Instrucion forms                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[d] &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[s] &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[a] &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[b] &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[c] &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD</name><parameter_list>(<parameter><type><name>fd</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[fd] &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS</name><parameter_list>(<parameter><type><name>fs</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[fs] &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FA</name><parameter_list>(<parameter><type><name>fa</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[fa] &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FB</name><parameter_list>(<parameter><type><name>fb</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[fb] &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FC</name><parameter_list>(<parameter><type><name>fc</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[fc] &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((imm) &amp; 0xffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRD</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((d) &lt;&lt; 21)</cpp:value></cpp:define>

<comment type="block">/* Instruction bit sections.
   OE and Rc flag (see ALT_SET_FLAGS). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OE</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((flags) &amp; ALT_SET_FLAGS)</cpp:value></cpp:define>
<comment type="block">/* Rc flag (see ALT_SET_FLAGS). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((flags) &amp; ALT_SET_FLAGS) &gt;&gt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((opcode) &lt;&lt; 26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LO</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((opcode) &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name></cpp:macro>		<cpp:value>(HI(31) | LO(266))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDC</name></cpp:macro>		<cpp:value>(HI(31) | LO(10))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDE</name></cpp:macro>		<cpp:value>(HI(31) | LO(138))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDI</name></cpp:macro>		<cpp:value>(HI(14))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDIC</name></cpp:macro>		<cpp:value>(HI(13))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDIS</name></cpp:macro>		<cpp:value>(HI(15))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDME</name></cpp:macro>		<cpp:value>(HI(31) | LO(234))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND</name></cpp:macro>		<cpp:value>(HI(31) | LO(28))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDI</name></cpp:macro>		<cpp:value>(HI(28))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDIS</name></cpp:macro>		<cpp:value>(HI(29))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Bx</name></cpp:macro>		<cpp:value>(HI(18))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCx</name></cpp:macro>		<cpp:value>(HI(16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCCTR</name></cpp:macro>		<cpp:value>(HI(19) | LO(528) | (3 &lt;&lt; 11))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLR</name></cpp:macro>		<cpp:value>(HI(19) | LO(16) | (0x14 &lt;&lt; 21))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CNTLZD</name></cpp:macro>		<cpp:value>(HI(31) | LO(58))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CNTLZW</name></cpp:macro>		<cpp:value>(HI(31) | LO(26))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name></cpp:macro>		<cpp:value>(HI(31) | LO(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMPI</name></cpp:macro>		<cpp:value>(HI(11))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMPL</name></cpp:macro>		<cpp:value>(HI(31) | LO(32))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMPLI</name></cpp:macro>		<cpp:value>(HI(10))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CROR</name></cpp:macro>		<cpp:value>(HI(19) | LO(449))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCBT</name></cpp:macro>		<cpp:value>(HI(31) | LO(278))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVD</name></cpp:macro>		<cpp:value>(HI(31) | LO(489))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVDU</name></cpp:macro>		<cpp:value>(HI(31) | LO(457))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVW</name></cpp:macro>		<cpp:value>(HI(31) | LO(491))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVWU</name></cpp:macro>		<cpp:value>(HI(31) | LO(459))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTSB</name></cpp:macro>		<cpp:value>(HI(31) | LO(954))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTSH</name></cpp:macro>		<cpp:value>(HI(31) | LO(922))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTSW</name></cpp:macro>		<cpp:value>(HI(31) | LO(986))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FABS</name></cpp:macro>		<cpp:value>(HI(63) | LO(264))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADD</name></cpp:macro>		<cpp:value>(HI(63) | LO(21))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADDS</name></cpp:macro>		<cpp:value>(HI(59) | LO(21))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCFID</name></cpp:macro>		<cpp:value>(HI(63) | LO(846))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCMPU</name></cpp:macro>		<cpp:value>(HI(63) | LO(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCTIDZ</name></cpp:macro>		<cpp:value>(HI(63) | LO(815))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCTIWZ</name></cpp:macro>		<cpp:value>(HI(63) | LO(15))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIV</name></cpp:macro>		<cpp:value>(HI(63) | LO(18))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIVS</name></cpp:macro>		<cpp:value>(HI(59) | LO(18))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMR</name></cpp:macro>		<cpp:value>(HI(63) | LO(72))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMUL</name></cpp:macro>		<cpp:value>(HI(63) | LO(25))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMULS</name></cpp:macro>		<cpp:value>(HI(59) | LO(25))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNEG</name></cpp:macro>		<cpp:value>(HI(63) | LO(40))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRSP</name></cpp:macro>		<cpp:value>(HI(63) | LO(12))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSUB</name></cpp:macro>		<cpp:value>(HI(63) | LO(20))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSUBS</name></cpp:macro>		<cpp:value>(HI(59) | LO(20))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD</name></cpp:macro>		<cpp:value>(HI(58) | 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LWZ</name></cpp:macro>		<cpp:value>(HI(32))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFCR</name></cpp:macro>		<cpp:value>(HI(31) | LO(19))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFLR</name></cpp:macro>		<cpp:value>(HI(31) | LO(339) | 0x80000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFXER</name></cpp:macro>		<cpp:value>(HI(31) | LO(339) | 0x10000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTCTR</name></cpp:macro>		<cpp:value>(HI(31) | LO(467) | 0x90000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTLR</name></cpp:macro>		<cpp:value>(HI(31) | LO(467) | 0x80000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTXER</name></cpp:macro>		<cpp:value>(HI(31) | LO(467) | 0x10000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULHD</name></cpp:macro>		<cpp:value>(HI(31) | LO(73))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULHDU</name></cpp:macro>		<cpp:value>(HI(31) | LO(9))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULHW</name></cpp:macro>		<cpp:value>(HI(31) | LO(75))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULHWU</name></cpp:macro>		<cpp:value>(HI(31) | LO(11))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULLD</name></cpp:macro>		<cpp:value>(HI(31) | LO(233))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULLI</name></cpp:macro>		<cpp:value>(HI(7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULLW</name></cpp:macro>		<cpp:value>(HI(31) | LO(235))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG</name></cpp:macro>		<cpp:value>(HI(31) | LO(104))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro>		<cpp:value>(HI(24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR</name></cpp:macro>		<cpp:value>(HI(31) | LO(124))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR</name></cpp:macro>		<cpp:value>(HI(31) | LO(444))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORI</name></cpp:macro>		<cpp:value>(HI(24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIS</name></cpp:macro>		<cpp:value>(HI(25))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLDICL</name></cpp:macro>		<cpp:value>(HI(30))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLWINM</name></cpp:macro>		<cpp:value>(HI(21))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLD</name></cpp:macro>		<cpp:value>(HI(31) | LO(27))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLW</name></cpp:macro>		<cpp:value>(HI(31) | LO(24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRAD</name></cpp:macro>		<cpp:value>(HI(31) | LO(794))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRADI</name></cpp:macro>		<cpp:value>(HI(31) | LO(413 &lt;&lt; 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRAW</name></cpp:macro>		<cpp:value>(HI(31) | LO(792))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRAWI</name></cpp:macro>		<cpp:value>(HI(31) | LO(824))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRD</name></cpp:macro>		<cpp:value>(HI(31) | LO(539))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRW</name></cpp:macro>		<cpp:value>(HI(31) | LO(536))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STD</name></cpp:macro>		<cpp:value>(HI(62) | 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDU</name></cpp:macro>		<cpp:value>(HI(62) | 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STDUX</name></cpp:macro>		<cpp:value>(HI(31) | LO(181))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STFIWX</name></cpp:macro>		<cpp:value>(HI(31) | LO(983))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STW</name></cpp:macro>		<cpp:value>(HI(36))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STWU</name></cpp:macro>		<cpp:value>(HI(37))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STWUX</name></cpp:macro>		<cpp:value>(HI(31) | LO(183))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBF</name></cpp:macro>		<cpp:value>(HI(31) | LO(40))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBFC</name></cpp:macro>		<cpp:value>(HI(31) | LO(8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBFE</name></cpp:macro>		<cpp:value>(HI(31) | LO(136))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBFIC</name></cpp:macro>		<cpp:value>(HI(8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR</name></cpp:macro>		<cpp:value>(HI(31) | LO(316))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XORI</name></cpp:macro>		<cpp:value>(HI(26))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XORIS</name></cpp:macro>		<cpp:value>(HI(27))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMM_MAX</name></cpp:macro>	<cpp:value>(0x7fff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMM_MIN</name></cpp:macro>	<cpp:value>(-0x8000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UIMM_MAX</name></cpp:macro>	<cpp:value>(0xffff)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RLDI</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>sh</name></type></parameter>, <parameter><type><name>mb</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(HI(30) | S(src) | A(dst) | ((type) &lt;&lt; 2) | (((sh) &amp; 0x1f) &lt;&lt; 11) | (((sh) &amp; 0x20) &gt;&gt; 4) | (((mb) &amp; 0x1f) &lt;&lt; 6) | ((mb) &amp; 0x20))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_INDIRECT_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_INDIRECT_CALL</name><operator>)</operator></expr></cpp:if>
<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_function_context</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>func_ptr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_function_context</name></name><modifier>*</modifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_sw</name><modifier>*</modifier></type> <name>ptrs</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>func_ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>func_ptr</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>context</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ptrs</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>*</operator><operator>)</operator><name>func</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <ternary><condition><expr><name>addr</name></expr> ?</condition><then> <expr><name>addr</name></expr> </then><else>: <expr><name><name>ptrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>r2</name></name> <operator>=</operator> <name><name>ptrs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>r11</name></name> <operator>=</operator> <name><name>ptrs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name></type> <name>ins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>ins</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>detect_jump_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>diff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>target_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>extra_jump_flags</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_REWRITABLE_JUMP</name> <operator>|</operator> <name>IS_CALL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_ADDR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>target_addr</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>target_addr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>executable_offset</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_CALL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>keep_address</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>target_addr</name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code_ptr</name><operator>)</operator> <operator>-</operator> <name>executable_offset</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3l</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>extra_jump_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0x7fff</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x8000</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>target_addr</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name> <operator>|</operator> <name>PATCH_ABS_B</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>extra_jump_flags</name> <operator>=</operator> <name>REMOVE_COND</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>diff</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0x01ffffff</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x02000000</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name> <operator>|</operator> <name>extra_jump_flags</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>target_addr</name> <operator>&lt;=</operator> <literal type="number">0x03ffffff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name> <operator>|</operator> <name>PATCH_ABS_B</name> <operator>|</operator> <name>extra_jump_flags</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name><operator>)</operator></expr></cpp:if>
<label><name>keep_address</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>target_addr</name> <operator>&lt;=</operator> <literal type="number">0x7fffffff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_ABS32</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>target_addr</name> <operator>&lt;=</operator> <literal type="number">0x7fffffffffffl</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_ABS48</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_sw</name></type> <name>put_label_get_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>max_label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>max_label</name> <operator>&lt;</operator> <literal type="number">0x100000000l</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_label</name> <operator>&lt;</operator> <literal type="number">0x1000000000000l</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">3</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>put_label_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>addr</name> <init>= <expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name> <init>= <expr><operator>*</operator><name>inst</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;</operator> <literal type="number">0x100000000l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;</operator> <literal type="number">0x1000000000000l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>RLDI</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_generate_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>word_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>next_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>addr</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_generate_code</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_INDIRECT_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_INDIRECT_CALL</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_function_context</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_function_context</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC_EXEC</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_WITH_EXEC_IF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>word_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>executable_offset</name> <operator>=</operator> <call><name>SLJIT_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>labels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>consts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>memory</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf_ptr</name> <operator>+</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>next_addr</name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name> <operator>||</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name> <operator>||</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name> <operator>||</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name> <operator>||</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* These structures are ordered by their address. */</comment>
				<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<comment type="block">/* Just recording the address. */</comment>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>jump</name> <operator>&amp;&amp;</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
					<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
					<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>-</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					<if_stmt><if>if <condition>(<expr><call><name>detect_jump_type</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
						<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>code_ptr</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS32</name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><name>code_ptr</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>code_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>code_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
						</block_content>}</block></if>
						<if type="elseif">else if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS48</name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><name>code_ptr</name><operator>--</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>code_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
							<comment type="block">/* rldicr rX,rX,32,31 -&gt; rX,rX,16,47 */</comment>
							<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfc00ffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x780007c6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">0x8422</literal></expr>;</expr_stmt>
							<comment type="block">/* oris -&gt; ori */</comment>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">0x4000000</literal></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else <block>{<block_content>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><name>code_ptr</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>REMOVE_COND</name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>BCx</name> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03ff0001</literal><operator>)</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name>code_ptr</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>Bx</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>-=</operator> <name>IS_COND</name></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>const_</name> <operator>&amp;&amp;</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>const_</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>put_label</name> <operator>&amp;&amp;</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
					<expr_stmt><expr><name>code_ptr</name> <operator>+=</operator> <call><name>put_label_get_length</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>word_count</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <call><name>compute_next_addr</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>const_</name></expr></argument>, <argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>code_ptr</name> <operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_count</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>buf_ptr</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition>;</do>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>buf</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_INDIRECT_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_INDIRECT_CALL</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>-</operator> <name>code</name> <operator>&lt;=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_function_context</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>-</operator> <name>code</name> <operator>&lt;=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>jump</name></expr>)</condition> <block>{<block_content>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_B</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS_B</name><operator>)</operator></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>addr</name> <operator>-=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x7fff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>buf_ptr</name> <operator>=</operator> <name>BCx</name> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xfffc</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf_ptr</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03ff0001</literal><operator>)</operator></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else <block>{<block_content>
						<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>buf_ptr</name> <operator>=</operator> <name>BCx</name> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xfffc</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x2</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf_ptr</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03ff0001</literal><operator>)</operator></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS_B</name><operator>)</operator></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>addr</name> <operator>-=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x01ffffff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x02000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>buf_ptr</name> <operator>=</operator> <name>Bx</name> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0x03fffffc</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf_ptr</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else <block>{<block_content>
						<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x03ffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>buf_ptr</name> <operator>=</operator> <name>Bx</name> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0x03fffffc</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x2</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf_ptr</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Set the fields of immediate loads. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS32</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x7fffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS48</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x7fffffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>put_label</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfc1f0000</literal><operator>)</operator> <operator>==</operator> <name>ADDIS</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfc000000</literal><operator>)</operator> <operator>==</operator> <name>ORI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>put_label_set</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_COMPILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_size</name></name> <operator>=</operator> <operator>(</operator><name>code_ptr</name> <operator>-</operator> <name>code</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_INDIRECT_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_INDIRECT_CALL</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>code_ptr</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x4</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>code_ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>sljit_set_function_context</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sljit_function_context</name><operator>*</operator><operator>)</operator><name>code_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>sljit_generate_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_INDIRECT_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_INDIRECT_CALL</name><operator>)</operator></expr></cpp:if>
	<return>return <expr><name>code_ptr</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><name>code</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_has_cpu_feature</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>feature_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>feature_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_HAS_FPU</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SLJIT_IS_FPU_AVAILABLE</name></cpp:ifdef>
		<return>return <expr><name>SLJIT_IS_FPU_AVAILABLE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* Available by default. */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* A saved register is set to a zero value. */</comment>
	<case>case <expr><name>SLJIT_HAS_ZERO_REGISTER</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_CLZ</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_PREFETCH</name></expr>:</case>
		<return>return <expr><literal type="number">1</literal></expr>;</return>

	<default>default:</default>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Entry, exit                                                          */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* inp_flags: */</comment>

<comment type="block">/* Creates an index in data_transfer_insts array. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_DATA</name></cpp:macro>	<cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEXED</name></cpp:macro>		<cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_DATA</name></cpp:macro>	<cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_DATA</name></cpp:macro>	<cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_DATA</name></cpp:macro>	<cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_DATA</name></cpp:macro>	<cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_DATA</name></cpp:macro>	<cpp:value>0x18</cpp:value></cpp:define>
<comment type="block">/* Separates integer and floating point registers */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPR_REG</name></cpp:macro>		<cpp:value>0x1f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_DATA</name></cpp:macro>	<cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_MASK</name></cpp:macro>	<cpp:value>0x7f</cpp:value></cpp:define>

<comment type="block">/* Other inp_flags. */</comment>

<comment type="block">/* Integer opertion and set flags -&gt; requires exts on 64 bit systems. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_SIGN_EXT</name></cpp:macro>	<cpp:value>0x000100</cpp:value></cpp:define>
<comment type="block">/* This flag affects the RC() and OERC() macros. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_SET_FLAGS</name></cpp:macro>	<cpp:value>0x000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_FORM1</name></cpp:macro>	<cpp:value>0x001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_FORM2</name></cpp:macro>	<cpp:value>0x002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_FORM3</name></cpp:macro>	<cpp:value>0x004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_FORM4</name></cpp:macro>	<cpp:value>0x008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_FORM5</name></cpp:macro>	<cpp:value>0x010000</cpp:value></cpp:define>

<comment type="block">/* Source and destination is register. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_DEST</name></cpp:macro>	<cpp:value>0x000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG1_SOURCE</name></cpp:macro>	<cpp:value>0x000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG2_SOURCE</name></cpp:macro>	<cpp:value>0x000004</cpp:value></cpp:define>
<comment type="block">/*
ALT_SIGN_EXT		0x000100
ALT_SET_FLAGS		0x000200
ALT_FORM1		0x001000
...
ALT_FORM5		0x010000 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativePPC_32.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativePPC_64.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_STORE</name></cpp:macro>	<cpp:value>STW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_LOAD</name></cpp:macro>	<cpp:value>LWZ</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_STORE</name></cpp:macro>	<cpp:value>STD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_LOAD</name></cpp:macro>	<cpp:value>LD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>args</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFLR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_STORE</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name>saveds</name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>saveds</name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_S0</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>offs</name> <operator>-=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_STORE</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>scratches</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>offs</name> <operator>-=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_STORE</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>offs</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>sljit_s32</name><operator>)</operator><call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PPC_STACK_FRAME_V2</name> <operator>&amp;&amp;</operator> <name>SLJIT_PPC_STACK_FRAME_V2</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_STORE</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_STORE</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>get_arg_count</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_S0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_S1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_S2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>local_size</name> <operator>+=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>SLJIT_LOCALS_OFFSET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>local_size</name> <operator>=</operator> <operator>(</operator><name>local_size</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <name>local_size</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&lt;=</operator> <name>SIMM_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STWU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STWUX</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&lt;=</operator> <name>SIMM_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STDUX</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_set_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_size</name> <operator>+=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>SLJIT_LOCALS_OFFSET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <operator>(</operator><name>local_size</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_return</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_before_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>&lt;=</operator> <name>SIMM_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PPC_STACK_FRAME_V2</name> <operator>&amp;&amp;</operator> <name>SLJIT_PPC_STACK_FRAME_V2</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_LOAD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_LOAD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>sljit_s32</name><operator>)</operator><call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_LOAD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>+=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>tmp</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SLJIT_S0</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_LOAD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>+=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_LOAD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>offs</name> <operator>==</operator> <operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTLR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BLR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_STORE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_LOAD</name></cpp:undef>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Operators                                                            */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* s/l - store/load (1 bit)
   i/x - immediate/indexed form
   u/s - signed/unsigned (1 bit)
   w/b/h/i - word/byte/half/int allowed (2 bit)

   Some opcodes are repeated (e.g. store signed / unsigned byte is the same instruction). */</comment>

<comment type="block">/* 64 bit only: [reg+imm] must be aligned to 4 bytes. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_ALIGNED</name></cpp:macro>	<cpp:value>0x10000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_32_64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_CODE_AND_DST</name><parameter_list>(<parameter><type><name>inst</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((inst) | (((flags) &amp; MEM_MASK) &lt;= GPR_REG ? D(reg) : FD(reg)))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_32_64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INST_CODE_AND_DST</name><parameter_list>(<parameter><type><name>inst</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((inst) &amp; ~INT_ALIGNED) | (((flags) &amp; MEM_MASK) &lt;= GPR_REG ? D(reg) : FD(reg)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_ins</name></type> <name><name>data_transfer_insts</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<comment type="block">/* -------- Integer -------- */</comment>

<comment type="block">/* Word. */</comment>

<comment type="block">/* w u i s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stw */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x0</literal></expr></argument> <comment type="block">/* std */</comment>)</argument_list></call></expr>,
<comment type="block">/* w u i l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwz */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x0</literal></expr></argument> <comment type="block">/* ld */</comment>)</argument_list></call></expr>,
<comment type="block">/* w u x s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">151</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stwx */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">149</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stdx */</comment>)</argument_list></call></expr>,
<comment type="block">/* w u x l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzx */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* ldx */</comment>)</argument_list></call></expr>,

<comment type="block">/* w s i s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stw */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x0</literal></expr></argument> <comment type="block">/* std */</comment>)</argument_list></call></expr>,
<comment type="block">/* w s i l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwz */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x0</literal></expr></argument> <comment type="block">/* ld */</comment>)</argument_list></call></expr>,
<comment type="block">/* w s x s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">151</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stwx */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">149</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stdx */</comment>)</argument_list></call></expr>,
<comment type="block">/* w s x l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzx */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* ldx */</comment>)</argument_list></call></expr>,

<comment type="block">/* Byte. */</comment>

<comment type="block">/* b u i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stb */</comment>,
<comment type="block">/* b u i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lbz */</comment>,
<comment type="block">/* b u x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">215</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stbx */</comment>,
<comment type="block">/* b u x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">87</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lbzx */</comment>,

<comment type="block">/* b s i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stb */</comment>,
<comment type="block">/* b s i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lbz */</comment> <comment type="block">/* EXTS_REQ */</comment>,
<comment type="block">/* b s x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">215</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stbx */</comment>,
<comment type="block">/* b s x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">87</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lbzx */</comment> <comment type="block">/* EXTS_REQ */</comment>,

<comment type="block">/* Half. */</comment>

<comment type="block">/* h u i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sth */</comment>,
<comment type="block">/* h u i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lhz */</comment>,
<comment type="block">/* h u x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">407</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sthx */</comment>,
<comment type="block">/* h u x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">279</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lhzx */</comment>,

<comment type="block">/* h s i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sth */</comment>,
<comment type="block">/* h s i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lha */</comment>,
<comment type="block">/* h s x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">407</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sthx */</comment>,
<comment type="block">/* h s x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">343</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lhax */</comment>,

<comment type="block">/* Int. */</comment>

<comment type="block">/* i u i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stw */</comment>,
<comment type="block">/* i u i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lwz */</comment>,
<comment type="block">/* i u x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">151</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stwx */</comment>,
<comment type="block">/* i u x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lwzx */</comment>,

<comment type="block">/* i s i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stw */</comment>,
<comment type="block">/* i s i l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwz */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x2</literal></expr></argument> <comment type="block">/* lwa */</comment>)</argument_list></call></expr>,
<comment type="block">/* i s x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">151</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stwx */</comment>,
<comment type="block">/* i s x l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzx */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">341</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwax */</comment>)</argument_list></call></expr>,

<comment type="block">/* -------- Floating point -------- */</comment>

<comment type="block">/* d   i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">54</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stfd */</comment>,
<comment type="block">/* d   i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lfd */</comment>,
<comment type="block">/* d   x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">727</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stfdx */</comment>,
<comment type="block">/* d   x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">599</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lfdx */</comment>,

<comment type="block">/* s   i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stfs */</comment>,
<comment type="block">/* s   i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lfs */</comment>,
<comment type="block">/* s   x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">663</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stfsx */</comment>,
<comment type="block">/* s   x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">535</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lfsx */</comment>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_ins</name></type> <name><name>updated_data_transfer_insts</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<comment type="block">/* -------- Integer -------- */</comment>

<comment type="block">/* Word. */</comment>

<comment type="block">/* w u i s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stwu */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x1</literal></expr></argument> <comment type="block">/* stdu */</comment>)</argument_list></call></expr>,
<comment type="block">/* w u i l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzu */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x1</literal></expr></argument> <comment type="block">/* ldu */</comment>)</argument_list></call></expr>,
<comment type="block">/* w u x s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">183</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stwux */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">181</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stdux */</comment>)</argument_list></call></expr>,
<comment type="block">/* w u x l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzux */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* ldux */</comment>)</argument_list></call></expr>,

<comment type="block">/* w s i s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stwu */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x1</literal></expr></argument> <comment type="block">/* stdu */</comment>)</argument_list></call></expr>,
<comment type="block">/* w s i l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzu */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>INT_ALIGNED</name> <operator>|</operator> <literal type="number">0x1</literal></expr></argument> <comment type="block">/* ldu */</comment>)</argument_list></call></expr>,
<comment type="block">/* w s x s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">183</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stwux */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">181</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* stdux */</comment>)</argument_list></call></expr>,
<comment type="block">/* w s x l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzux */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* ldux */</comment>)</argument_list></call></expr>,

<comment type="block">/* Byte. */</comment>

<comment type="block">/* b u i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stbu */</comment>,
<comment type="block">/* b u i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lbzu */</comment>,
<comment type="block">/* b u x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">247</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stbux */</comment>,
<comment type="block">/* b u x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">119</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lbzux */</comment>,

<comment type="block">/* b s i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stbu */</comment>,
<comment type="block">/* b s i l */</comment> <expr><literal type="number">0</literal></expr> <comment type="block">/* no such instruction */</comment>,
<comment type="block">/* b s x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">247</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stbux */</comment>,
<comment type="block">/* b s x l */</comment> <expr><literal type="number">0</literal></expr> <comment type="block">/* no such instruction */</comment>,

<comment type="block">/* Half. */</comment>

<comment type="block">/* h u i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sthu */</comment>,
<comment type="block">/* h u i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lhzu */</comment>,
<comment type="block">/* h u x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">439</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sthux */</comment>,
<comment type="block">/* h u x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">311</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lhzux */</comment>,

<comment type="block">/* h s i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sthu */</comment>,
<comment type="block">/* h s i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lhau */</comment>,
<comment type="block">/* h s x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">439</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sthux */</comment>,
<comment type="block">/* h s x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">375</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lhaux */</comment>,

<comment type="block">/* Int. */</comment>

<comment type="block">/* i u i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stwu */</comment>,
<comment type="block">/* i u i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lwzu */</comment>,
<comment type="block">/* i u x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">183</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stwux */</comment>,
<comment type="block">/* i u x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lwzux */</comment>,

<comment type="block">/* i s i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stwu */</comment>,
<comment type="block">/* i s i l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzu */</comment>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* no such instruction */</comment>)</argument_list></call></expr>,
<comment type="block">/* i s x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">183</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stwux */</comment>,
<comment type="block">/* i s x l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwzux */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">373</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwaux */</comment>)</argument_list></call></expr>,

<comment type="block">/* -------- Floating point -------- */</comment>

<comment type="block">/* d   i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stfdu */</comment>,
<comment type="block">/* d   i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lfdu */</comment>,
<comment type="block">/* d   x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">759</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stfdux */</comment>,
<comment type="block">/* d   x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">631</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lfdux */</comment>,

<comment type="block">/* s   i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stfsu */</comment>,
<comment type="block">/* s   i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lfsu */</comment>,
<comment type="block">/* s   x s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">695</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* stfsux */</comment>,
<comment type="block">/* s   x l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LO</name><argument_list>(<argument><expr><literal type="number">567</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lfsux */</comment>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ARCH_32_64</name></cpp:undef>

<comment type="block">/* Simple cases, (no caching is required). */</comment>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_op_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>inp_flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>tmp_reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>offs_reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>high_short</name></decl>;</decl_stmt>

	<comment type="block">/* Should work when (arg &amp; REG_MASK) == 0. */</comment>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs_reg</name> <operator>=</operator> <call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RLWINM</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>argw</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argw</name></expr></argument>, <argument><expr><literal type="number">63</literal> <operator>-</operator> <name>argw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>offs_reg</name> <operator>=</operator> <name>tmp_reg</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>data_transfer_insts</name><index>[<expr><operator>(</operator><name>inp_flags</name> <operator>|</operator> <name>INDEXED</name><operator>)</operator> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>inst</name> <operator>&amp;</operator> <name>INT_ALIGNED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inp_flags</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>offs_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>data_transfer_insts</name><index>[<expr><name>inp_flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg</name> <operator>&amp;=</operator> <name>REG_MASK</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <name>INT_ALIGNED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>data_transfer_insts</name><index>[<expr><operator>(</operator><name>inp_flags</name> <operator>|</operator> <name>INDEXED</name><operator>)</operator> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inp_flags</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inp_flags</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&lt;=</operator> <literal type="number">0x7fff7fffl</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x80000000l</literal></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>high_short</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><name>argw</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffff</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>high_short</name> <operator>&amp;&amp;</operator> <name>high_short</name> <operator>&lt;=</operator> <literal type="number">0x7fffffffl</literal> <operator>&amp;&amp;</operator> <name>high_short</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x80000000l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>high_short</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>high_short</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inp_flags</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The rest is PPC-64 only. */</comment>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>data_transfer_insts</name><index>[<expr><operator>(</operator><name>inp_flags</name> <operator>|</operator> <name>INDEXED</name><operator>)</operator> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inp_flags</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>input_flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* arg1 goes to TMP_REG1 or src reg
	   arg2 goes to TMP_REG2, imm or src reg
	   result goes to TMP_REG2, so put result can use TMP_REG1. */</comment>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><name>TMP_REG2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src1_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src2_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>sugg_src2_r</name> <init>= <expr><name>TMP_REG2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><name>input_flags</name> <operator>&amp;</operator> <operator>(</operator><name>ALT_FORM1</name> <operator>|</operator> <name>ALT_FORM2</name> <operator>|</operator> <name>ALT_FORM3</name> <operator>|</operator> <name>ALT_FORM4</name> <operator>|</operator> <name>ALT_FORM5</name> <operator>|</operator> <name>ALT_SIGN_EXT</name> <operator>|</operator> <name>ALT_SET_FLAGS</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Destination check. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG_DEST</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sugg_src2_r</name> <operator>=</operator> <name>dst_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Source 1. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>src1_r</name> <operator>=</operator> <name>src1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG1_SOURCE</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1_r</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>input_flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1_r</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Source 2. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG2_SOURCE</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REG_DEST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src2_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>sugg_src2_r</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <name>sugg_src2_r</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>input_flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>sugg_src2_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <name>sugg_src2_r</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_single_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>input_flags</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>int_op</name> <init>= <expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op0</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_BREAKPOINT</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOP</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_LMUL_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_LMUL_SW</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULLD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>MULHDU</name></expr> </then><else>: <expr><name>MULHD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULLW</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>MULHWU</name></expr> </then><else>: <expr><name>MULHW</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<case>case <expr><name>SLJIT_DIVMOD_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIVMOD_SW</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>int_op</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr> ?</condition><then> <expr><name>DIVWU</name></expr> </then><else>: <expr><name>DIVW</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr> ?</condition><then> <expr><name>DIVDU</name></expr> </then><else>: <expr><name>DIVD</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>int_op</name></expr> ?</condition><then> <expr><name>MULLW</name></expr> </then><else>: <expr><name>MULLD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr> ?</condition><then> <expr><name>DIVWU</name></expr> </then><else>: <expr><name>DIVW</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULLW</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBF</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_DIV_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_SW</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>int_op</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DIVWU</name></expr> </then><else>: <expr><name>DIVW</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DIVDU</name></expr> </then><else>: <expr><name>DIVD</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DIVWU</name></expr> </then><else>: <expr><name>DIVW</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<case>case <expr><name>SLJIT_ENDBR</name></expr>:</case>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_prefetch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
        <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>srcw</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>!=</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DCBT</name> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Works with SLJIT_MEM0() case as well. */</comment>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DCBT</name> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>srcw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>srcw</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DCBT</name> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RLWINM</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>srcw</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>srcw</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><literal type="number">63</literal> <operator>-</operator> <name>srcw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DCBT</name> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_MOV</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>type_flags</name></type></parameter>, <parameter><type><name>type_cast</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>emit_op(compiler, (src &amp; SLJIT_IMM) ? SLJIT_MOV : type, flags | (type_flags), dst, dstw, TMP_REG1, 0, src, (src &amp; SLJIT_IMM) ? type_cast srcw : srcw)</cpp:value></cpp:define>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALT_SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>op_flags</name> <init>= <expr><call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>srcw</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_ZERO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op_flags</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OVERFLOW</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTXER</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>SLJIT_NOT</name> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TYPE_CAST_NEEDED</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>SLJIT_NOT</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S32</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>op</name> <operator>=</operator> <name>SLJIT_MOV_U32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_U32</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>op</name> <operator>=</operator> <name>SLJIT_MOV_S32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<comment type="block">/* Most operations expect sign extended arguments. */</comment>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op_flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALT_SIGN_EXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>WORD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
		<return>return <expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>SLJIT_MOV_U32</name></expr></argument>, <argument><expr><name>INT_DATA</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_u32</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
		<return>return <expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>SLJIT_MOV_S32</name></expr></argument>, <argument><expr><name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s32</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
		<return>return <expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>SLJIT_MOV_U8</name></expr></argument>, <argument><expr><name>BYTE_DATA</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_u8</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<return>return <expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>SLJIT_MOV_S8</name></expr></argument>, <argument><expr><name>BYTE_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s8</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<return>return <expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>SLJIT_MOV_U16</name></expr></argument>, <argument><expr><name>HALF_DATA</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_u16</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<return>return <expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>SLJIT_MOV_S16</name></expr></argument>, <argument><expr><name>HALF_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s16</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_NOT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_NEG</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_NEG</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALT_FORM1</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_CLZ</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ALT_FORM1</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_CLZ</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMIT_MOV</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SL_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((src) &amp; SLJIT_IMM) &amp;&amp; (srcw) &lt;= SIMM_MAX &amp;&amp; (srcw) &gt;= SIMM_MIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_UL_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((src) &amp; SLJIT_IMM) &amp;&amp; !((srcw) &amp; ~0xffff))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SH_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((src) &amp; SLJIT_IMM) &amp;&amp; !((srcw) &amp; 0xffff) &amp;&amp; (srcw) &lt;= 0x7fffffffl &amp;&amp; (srcw) &gt;= -0x80000000l)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SH_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((src) &amp; SLJIT_IMM) &amp;&amp; !((srcw) &amp; 0xffff))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_UH_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((src) &amp; SLJIT_IMM) &amp;&amp; !((srcw) &amp; ~0xffff0000))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ADD_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((src) &amp; SLJIT_IMM) &amp;&amp; (srcw) &lt;= 0x7fff7fffl &amp;&amp; (srcw) &gt;= -0x80000000l)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ADD_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((src) &amp; SLJIT_IMM)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_UI_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((src) &amp; SLJIT_IMM) &amp;&amp; !((srcw) &amp; ~0xffffffff))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_UI_IMM</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((src) &amp; SLJIT_IMM)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ALT_SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src1w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_ZERO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src2w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_ZERO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Most operations expect sign extended arguments. */</comment>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>src1w</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><name>src1w</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>src2w</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><name>src2w</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALT_SIGN_EXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OVERFLOW</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTXER</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OVERFLOW</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>src1</name> <operator>|</operator> <name>src2</name><operator>)</operator> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src1w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SH_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><name>src2w</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SH_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><name>src1w</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Range between -1 and -32768 is covered above. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_ADD_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name> <operator>|</operator> <name>ALT_FORM4</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_ADD_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src1w</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name> <operator>|</operator> <name>ALT_FORM4</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src1w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>ALT_FORM4</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADDC</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_LESS</name> <operator>&amp;&amp;</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_LESS_EQUAL</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>TEST_UL_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
					<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name> <operator>|</operator> <name>ALT_FORM2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src2w</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src2w</name> <operator>&lt;=</operator> <operator>(</operator><name>SIMM_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name> <operator>|</operator> <name>ALT_FORM2</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OVERFLOW</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>src1</name> <operator>|</operator> <name>src2</name><operator>)</operator> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><operator>-</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>src2w</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src1w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SH_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><operator>-</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>src2w</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator>  <name>ALT_FORM2</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Range between -1 and -32768 is covered above. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_ADD_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><operator>-</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>-</operator><name>src2w</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name> <operator>|</operator> <name>ALT_FORM4</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name> <operator>&amp;&amp;</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM4</name> <operator>|</operator> <name>ALT_FORM5</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM4</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><operator>-</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name>src2w</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
			<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* We know ALT_SIGN_EXT is set if it is an SLJIT_I32_OP on 64 bit systems. */</comment>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>ALT_FORM5</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUBC</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALT_FORM2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MUL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_SL_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src1w</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MUL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTXER</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MUL</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<comment type="block">/* Commutative unsigned operations. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_AND</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_UL_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_UL_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src1w</name></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_UH_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><name>src2w</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_UH_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <operator>(</operator><name>src1w</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_AND</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_AND</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Unlike or and xor, and resets unwanted bits as well. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_UI_IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>TEST_UI_IMM</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src1w</name></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM3</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ALT_FORM2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
			<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ALT_FORM1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_src</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_FAST_RETURN</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTLR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTLR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BLR</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_FAST_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	<case>case <expr><name>SLJIT_PREFETCH_L1</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L2</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L3</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_ONCE</name></expr>:</case>
		<return>return <expr><call><name>emit_prefetch</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_float_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_float_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>freg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_custom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_custom</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name>instruction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Floating point operators                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_DATA</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DOUBLE_DATA | ((op &amp; SLJIT_F32_OP) &gt;&gt; 6))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_FOP</name><parameter_list>(<parameter><type><name>op</name></type></parameter>, <parameter><type><name>single</name></type></parameter>, <parameter><type><name>double</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op &amp; SLJIT_F32_OP) ? single : double)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_TMP_MEM_OFFSET</name></cpp:macro> <cpp:value>(6 * sizeof(sljit_sw))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_TMP_MEM_OFFSET</name></cpp:macro> <cpp:value>(2 * sizeof(sljit_sw))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_LITTLE_ENDIAN</name> <operator>&amp;&amp;</operator> <name>SLJIT_LITTLE_ENDIAN</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_TMP_MEM_OFFSET_LOW</name></cpp:macro> <cpp:value>(2 * sizeof(sljit_sw))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_TMP_MEM_OFFSET_HI</name></cpp:macro> <cpp:value>(3 * sizeof(sljit_sw))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_TMP_MEM_OFFSET_LOW</name></cpp:macro> <cpp:value>(3 * sizeof(sljit_sw))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_TMP_MEM_OFFSET_HI</name></cpp:macro> <cpp:value>(2 * sizeof(sljit_sw))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_PPC_64 */</comment>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_sw_from_f64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* We can ignore the temporary data store on the stack from caching point of view. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_CONV_S32_FROM_F64</name></expr> ?</condition><then> <expr><name>FCTIWZ</name></expr> </then><else>: <expr><name>FCTIDZ</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_CONV_SW_FROM_F64</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DOUBLE_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DOUBLE_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FCTIWZ</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STFIWX</name> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>INT_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dstw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dstw</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RLWINM</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>dstw</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>dstw</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">63</literal> <operator>-</operator> <name>dstw</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>dstw</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>dstw</name> <operator>=</operator> <call><name>OFFS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>dstw</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>dstw</name> <operator>=</operator> <name>dst</name> <operator>&amp;</operator> <name>REG_MASK</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>dst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<comment type="block">/* This works regardless we have SLJIT_MEM1 or SLJIT_MEM0. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dstw</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STFIWX</name> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_f64_from_sw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>

	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_S32</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_S32</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EXTSW</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DOUBLE_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DOUBLE_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FCFID</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FRSP</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>invert_sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name> <operator>^</operator> <literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>invert_sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* First, a special double floating point value is constructed: (2^53 + (input xor (2^31)))
	   The double precision format has exactly 53 bit precision, so the lower 32 bit represents
	   the lower 32 bit of such value. The result of xor 2^31 is the same as adding 0x80000000
	   to the input, which shifts it into the 0 - 0xffffffff range. To get the converted floating
	   point value, we need to substract 2^53 + 2^31 from the constructed value. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0x4330</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>invert_sign</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET_HI</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET_LOW</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0x8000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DOUBLE_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET_LOW</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DOUBLE_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FLOAT_TMP_MEM_OFFSET</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FSUB</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FA</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>TMP_FREG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FRSP</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FCMPU</name> <operator>|</operator> <call><name>CRD</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FA</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>SLJIT_F32_OP</name> <operator>==</operator> <literal type="number">0x100</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>DOUBLE_DATA</name> <operator>&amp;</operator> <literal type="number">0x4</literal><operator>)</operator></expr></argument>, <argument><expr><name>float_transfer_bit_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT_FOP1_OPERATION_WITH_CHECKS</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_F32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dst_r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_CONV_F64_FROM_F32</name></expr>:</case>
		<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FRSP</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Fall through. */</comment>
	<case>case <expr><name>SLJIT_MOV_F64</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>dst_r</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>TMP_FREG1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FMR</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NEG_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FNEG</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_ABS_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FABS</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fop2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG2</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>SELECT_FOP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>FADDS</name></expr></argument>, <argument><expr><name>FADD</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FA</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_SUB_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>SELECT_FOP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>FSUBS</name></expr></argument>, <argument><expr><name>FSUB</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FA</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_MUL_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>SELECT_FOP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>FMULS</name></expr></argument>, <argument><expr><name>FMUL</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FA</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FC</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* FMUL use FC as src2 */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_DIV_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>SELECT_FOP</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>FDIVS</name></expr></argument>, <argument><expr><name>FDIV</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FA</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FB</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SELECT_FOP</name></cpp:undef>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Other instructions                                                   */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fast_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fast_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFLR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Memory. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFLR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Conditional instructions                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>sljit_emit_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>label</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_ins</name></type> <name>get_bo_bi_flags</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">12</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
		<return>return <expr><operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>

	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_JUMP</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name>SLJIT_CALL_CDECL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="number">20</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>bo_bi_flags</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>bo_bi_flags</name> <operator>=</operator> <call><name>get_bo_bi_flags</name><argument_list>(<argument><expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bo_bi_flags</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

	<comment type="block">/* In PPC, we don't need to touch the arguments. */</comment>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>SLJIT_JUMP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_COND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_CALL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_CALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_CALL_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTCTR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_CALL_REG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BCCTR</name> <operator>|</operator> <name>bo_bi_flags</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>jump</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_call</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_ijump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_CALL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_CALL_REG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src_r</name> <operator>=</operator> <name>TMP_CALL_REG</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>src_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>src_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* These jumps are converted to jump/call instructions when possible. */</comment>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JUMP_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>srcw</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_PASS_ENTRY_ADDR_TO_CALL</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_CALL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_CALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_CALL_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src_r</name> <operator>=</operator> <name>TMP_CALL_REG</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>TMP_CALL_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src_r</name> <operator>=</operator> <name>TMP_CALL_REG</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTCTR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>jump</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BCCTR</name> <operator>|</operator> <operator>(</operator><literal type="number">20</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_icall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_icall</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>TMP_CALL_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_CALL_REG</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name></decl>, <decl><type ref="prev"/><name>input_flags</name></decl>, <decl><type ref="prev"/><name>cr_bit</name></decl>, <decl><type ref="prev"/><name>invert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>saved_op</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>saved_dstw</name> <init>= <expr><name>dstw</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>input_flags</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_DATA</name></expr> </then><else>: <expr><name>WORD_DATA</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>input_flags</name> <operator>=</operator> <name>WORD_DATA</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>reg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>op</name> <operator>&lt;</operator> <name>SLJIT_ADD</name> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_ADD</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>input_flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
		<break>break;</break>

	<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
		<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
		<expr_stmt><expr><name>cr_bit</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<break>break;</break>

	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFCR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RLWINM</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>cr_bit</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">31</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">31</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>invert</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>SLJIT_ADD</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>input_flags</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>saved_op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>saved_dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>saved_op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_cmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_cmov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>sljit_emit_cmov_generic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>mem_flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_POST</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>WORD_DATA</name></expr>;</expr_stmt>
		<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>INT_DATA</name></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>INT_DATA</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>mem_flags</name> <operator>|=</operator> <name>SIGNED_DATA</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>BYTE_DATA</name></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>HALF_DATA</name></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>HALF_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr>;</expr_stmt>
		<break>break;</break>

	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>WORD_DATA</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mem_flags</name> <operator>|=</operator> <name>LOAD_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>updated_data_transfer_insts</name><index>[<expr><name>mem_flags</name> <operator>|</operator> <name>INDEXED</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>&gt;</operator> <name>SIMM_MAX</name> <operator>||</operator> <name>memw</name> <operator>&lt;</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>updated_data_transfer_insts</name><index>[<expr><name>mem_flags</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <name>INT_ALIGNED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>memw</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem_flags</name> <operator>&amp;</operator> <name>LOAD_DATA</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_MOV_S8</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EXTSB</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fmem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>freg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>mem_flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fmem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>freg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_POST</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>&gt;</operator> <name>SIMM_MAX</name> <operator>||</operator> <name>memw</name> <operator>&lt;</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mem_flags</name> <operator>|=</operator> <name>LOAD_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>updated_data_transfer_insts</name><index>[<expr><name>mem_flags</name> <operator>|</operator> <name>INDEXED</name></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>DOUBLE_DATA</name></expr></argument>, <argument><expr><name>freg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>updated_data_transfer_insts</name><index>[<expr><name>mem_flags</name></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INST_CODE_AND_DST</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>DOUBLE_DATA</name></expr></argument>, <argument><expr><name>freg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_const</name></name><modifier>*</modifier></type> <name>sljit_emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>const_</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_const</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_const</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_const</name><argument_list>(<argument><expr><name>const_</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>const_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_put_label</name></name><modifier>*</modifier></type> <name>sljit_emit_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_put_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_put_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_put_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_put_label</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>put_label</name></expr>;</return>
</block_content>}</block></function>
</unit>
