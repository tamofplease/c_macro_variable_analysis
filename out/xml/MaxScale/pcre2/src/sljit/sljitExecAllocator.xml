<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitExecAllocator.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/*
   This file contains a simple executable memory allocator

   It is assumed, that executable code blocks are usually medium (or sometimes
   large) memory blocks, and the allocator is not too frequently called (less
   optimized than other allocators). Thus, using it as a generic allocator is
   not suggested.

   How does it work:
     Memory is allocated in continuous memory areas called chunks by alloc_chunk()
     Chunk format:
     [ block ][ block ] ... [ block ][ block terminator ]

   All blocks and the block terminator is started with block_header. The block
   header contains the size of the previous and the next block. These sizes
   can also contain special values.
     Block size:
       0 - The block is a free_block, with a different size member.
       1 - The block is a block terminator.
       n - The block is used at the moment, and the value contains its size.
     Previous block size:
       0 - This is the first block of the memory chunk.
       n - The size of the previous block.

   Using these size values we can go forward or backward on the block chain.
   The unused blocks are stored in a chain list pointed by free_blocks. This
   list is useful if we need to find a suitable memory area when the allocator
   is called.

   When a block is freed, the new free block is connected to its adjacent free
   blocks if possible.

     [ free block ][ used block ][ free block ]
   and "used block" is freed, the three blocks are connected together:
     [           one big free block           ]
*/</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  System (OS) functions                                                */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* 64 KByte. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_SIZE</name></cpp:macro>	<cpp:value>0x10000</cpp:value></cpp:define>

<comment type="block">/*
   alloc_chunk / free_chunk :
     * allocate executable system memory chunks
     * the size is always divisible by CHUNK_SIZE
   SLJIT_ALLOCATOR_LOCK / SLJIT_ALLOCATOR_UNLOCK :
     * provided as part of sljitUtils
     * only the allocator requires this lock, sljit is fully thread safe
       as it only uses local variables
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name><modifier>*</modifier></type> <name>alloc_chunk</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VirtualAlloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MEM_COMMIT</name> <operator>|</operator> <name>MEM_RESERVE</name></expr></argument>, <argument><expr><name>PAGE_EXECUTE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>free_chunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_ANON</name></cpp:ifdef>
<comment type="block">/* Configures TARGET_OS_OSX when appropriate */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_OSX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>MAP_JIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/utsname.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TARGET_OS_OSX &amp;&amp; MAP_JIT */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_JIT</name></cpp:ifdef>

<comment type="block">/*
   On macOS systems, returns MAP_JIT if it is defined _and_ we're running on a
   version where it's OK to have more than one JIT block.
   On non-macOS systems, returns MAP_JIT if it is defined.
*/</comment>
<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>int</name></type> <name>get_map_jit_flag</name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_OSX</name></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>page_size</name> <init>= <expr><call><name>get_page_alignment</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>map_jit_flag</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	  The following code is thread safe because multiple initialization
	  sets map_jit_flag to the same value and the code has no side-effects.
	  Changing the kernel version witout system restart is (very) unlikely.
	*/</comment>
	<if_stmt><if>if <condition>(<expr><name>map_jit_flag</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>utsname</name></name></type> <name>name</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>map_jit_flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>uname</name><argument_list>(<argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Kernel version for 10.14.0 (Mojave) */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>name</name><operator>.</operator><name>release</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Only use MAP_JIT if a hardened runtime is used */</comment>

			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>, <argument><expr><name>PROT_WRITE</name> <operator>|</operator> <name>PROT_EXEC</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name> <operator>|</operator> <name>MAP_ANON</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>map_jit_flag</name> <operator>=</operator> <name>MAP_JIT</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>page_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>map_jit_flag</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !TARGET_OS_OSX */</comment>
	<return>return <expr><name>MAP_JIT</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TARGET_OS_OSX */</comment>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MAP_JIT */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MAP_ANON */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __APPLE__ */</comment>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name><modifier>*</modifier></type> <name>alloc_chunk</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>prot</name> <init>= <expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name> <operator>|</operator> <name>PROT_EXEC</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_ANON</name></cpp:ifdef>

	<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>MAP_PRIVATE</name> <operator>|</operator> <name>MAP_ANON</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_JIT</name></cpp:ifdef>
	<expr_stmt><expr><name>flags</name> <operator>|=</operator> <call><name>get_map_jit_flag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !MAP_ANON */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name>dev_zero</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>open_dev_zero</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>dev_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MAP_ANON */</comment>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>mprotect</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>free_chunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Common functions                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MASK</name></cpp:macro>	<cpp:value>(~(CHUNK_SIZE - 1))</cpp:value></cpp:define>

<struct>struct <name>block_header</name> <block>{
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>prev_size</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>free_block</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>block_header</name></name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AS_BLOCK_HEADER</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((struct block_header*)(((sljit_u8*)base) + offset))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AS_FREE_BLOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((struct free_block*)(((sljit_u8*)base) + offset))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_START</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((void*)(((sljit_u8*)base) + sizeof(struct block_header)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_SIZE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((size) + sizeof(struct block_header) + 7) &amp; ~7)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>free_block</name></name><modifier>*</modifier></type> <name>free_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>allocated_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>total_size</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>sljit_insert_free_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>free_block</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>free_blocks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>free_blocks</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>free_blocks</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>free_block</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>free_blocks</name> <operator>=</operator> <name>free_block</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>sljit_remove_free_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>free_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>free_block</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>free_blocks</name> <operator>==</operator> <name>free_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>free_blocks</name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_malloc_exec</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>block_header</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>block_header</name></name> <modifier>*</modifier></type><name>next_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>free_block</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>chunk_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ALIGN_SIZE</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>free_block</name> <operator>=</operator> <name>free_blocks</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>free_block</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>size</name> <operator>+</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* We just cut a block from the end of the free block. */</comment>
				<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prev_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>sljit_remove_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator>struct <name>block_header</name><operator>*</operator><operator>)</operator><name>free_block</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>size</name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>allocated_size</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>MEM_START</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>free_block</name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>CHUNK_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>CHUNK_MASK</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator>struct <name>block_header</name><operator>*</operator><operator>)</operator><call><name>alloc_chunk</name><argument_list>(<argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>header</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name>chunk_size</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>size</name> <operator>+</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Cut the allocated space into a free and a used block. */</comment>
		<expr_stmt><expr><name>allocated_size</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>free_block</name> <operator>=</operator> <call><name>AS_FREE_BLOCK</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>prev_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_insert_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* All space belongs to this allocation. */</comment>
		<expr_stmt><expr><name>allocated_size</name> <operator>+=</operator> <name>chunk_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>next_header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>next_header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>MEM_START</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_exec</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>block_header</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name><modifier>*</modifier></type> <name>free_block</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocated_size</name> <operator>-=</operator> <name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<comment type="block">/* Connecting free blocks together if possible. */</comment>

	<comment type="block">/* If header-&gt;prev_size == 0, free_block will equal to header.
	   In this case, free_block-&gt;header.size will be &gt; 0. */</comment>
	<expr_stmt><expr><name>free_block</name> <operator>=</operator> <call><name>AS_FREE_BLOCK</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>free_block</name> <operator>=</operator> <operator>(</operator>struct <name>free_block</name><operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_insert_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator>struct <name>free_block</name><operator>*</operator><operator>)</operator><name>header</name><operator>)</operator><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_remove_free_block</name><argument_list>(<argument><expr><operator>(</operator>struct <name>free_block</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The whole chunk is free. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>prev_size</name></name> <operator>&amp;&amp;</operator> <name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If this block is freed, we still have (allocated_size / 2) free space. */</comment>
		<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>-</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <operator>(</operator><name>allocated_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>total_size</name> <operator>-=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_remove_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_chunk</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_unused_memory_exec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name><modifier>*</modifier></type> <name>free_block</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name><modifier>*</modifier></type> <name>next_free_block</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>free_block</name> <operator>=</operator> <name>free_blocks</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>free_block</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next_free_block</name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>prev_size</name></name> <operator>&amp;&amp;</operator> 
				<call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>total_size</name> <operator>-=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_remove_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_chunk</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>free_block</name> <operator>=</operator> <name>next_free_block</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>total_size</name> <operator>&amp;&amp;</operator> <name>free_blocks</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>total_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>free_blocks</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
