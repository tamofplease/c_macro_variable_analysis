<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativeARM_T2_32.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sljit_get_platform_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>
	<return>return <expr><literal type="string">"ARM-Thumb2"</literal> <name>SLJIT_CPUINFO</name> <literal type="string">" ABI:softfp"</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><literal type="string">"ARM-Thumb2"</literal> <name>SLJIT_CPUINFO</name> <literal type="string">" ABI:hardfp"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Length of an instruction word. */</comment>
<typedef>typedef <type><name>sljit_u32</name></type> <name>sljit_ins</name>;</typedef>

<comment type="block">/* Last register + 1. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_PC</name></cpp:macro>		<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 2)</cpp:value></cpp:define>

<comment type="block">/* See sljit_emit_enter and sljit_emit_op0 if you want to change them. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>freg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BITS</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((from &gt;= to ? (src &gt;&gt; (from - to)) : (src &lt;&lt; (to - from))) &amp; (((1 &lt;&lt; bits) - 1) &lt;&lt; to))</cpp:value></cpp:define>

<comment type="block">/* Thumb16 encodings. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RD3</name><parameter_list>(<parameter><type><name>rd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rd])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RN3</name><parameter_list>(<parameter><type><name>rn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rn] &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM3</name><parameter_list>(<parameter><type><name>rm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rm] &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDN3</name><parameter_list>(<parameter><type><name>rdn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rdn] &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM3</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(imm &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM8</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(imm)</cpp:value></cpp:define>

<comment type="block">/* Thumb16 helpers. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_REGS44</name><parameter_list>(<parameter><type><name>rd</name></type></parameter>, <parameter><type><name>rn</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((reg_map[rn] &lt;&lt; 3) | (reg_map[rd] &amp; 0x7) | ((reg_map[rd] &amp; 0x8) &lt;&lt; 4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_2_LO_REGS</name><parameter_list>(<parameter><type><name>reg1</name></type></parameter>, <parameter><type><name>reg2</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(reg_map[reg1] &lt;= 7 &amp;&amp; reg_map[reg2] &lt;= 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_3_LO_REGS</name><parameter_list>(<parameter><type><name>reg1</name></type></parameter>, <parameter><type><name>reg2</name></type></parameter>, <parameter><type><name>reg3</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(reg_map[reg1] &lt;= 7 &amp;&amp; reg_map[reg2] &lt;= 7 &amp;&amp; reg_map[reg3] &lt;= 7)</cpp:value></cpp:define>

<comment type="block">/* Thumb32 encodings. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RD4</name><parameter_list>(<parameter><type><name>rd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rd] &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RN4</name><parameter_list>(<parameter><type><name>rn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rn] &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM4</name><parameter_list>(<parameter><type><name>rm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rm])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT4</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rt] &lt;&lt; 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DD4</name><parameter_list>(<parameter><type><name>dd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(freg_map[dd] &lt;&lt; 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DN4</name><parameter_list>(<parameter><type><name>dn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(freg_map[dn] &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DM4</name><parameter_list>(<parameter><type><name>dm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(freg_map[dm])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM5</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(COPY_BITS(imm, 2, 12, 3) | ((imm &amp; 0x3) &lt;&lt; 6))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM12</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(COPY_BITS(imm, 11, 26, 1) | COPY_BITS(imm, 8, 12, 3) | (imm &amp; 0xff))</cpp:value></cpp:define>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Instrucion forms                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* dot '.' changed to _
   I immediate form (possibly followed by number of immediate bits). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADCI</name></cpp:macro>		<cpp:value>0xf1400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADCS</name></cpp:macro>		<cpp:value>0x4140</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADC_W</name></cpp:macro>		<cpp:value>0xeb400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name></cpp:macro>		<cpp:value>0x4400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDS</name></cpp:macro>		<cpp:value>0x1800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDSI3</name></cpp:macro>		<cpp:value>0x1c00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDSI8</name></cpp:macro>		<cpp:value>0x3000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_W</name></cpp:macro>		<cpp:value>0xeb000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDWI</name></cpp:macro>		<cpp:value>0xf2000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_SP</name></cpp:macro>		<cpp:value>0xb000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_W</name></cpp:macro>		<cpp:value>0xeb000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_WI</name></cpp:macro>		<cpp:value>0xf1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDI</name></cpp:macro>		<cpp:value>0xf0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDS</name></cpp:macro>		<cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND_W</name></cpp:macro>		<cpp:value>0xea000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASRS</name></cpp:macro>		<cpp:value>0x4100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASRSI</name></cpp:macro>		<cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASR_W</name></cpp:macro>		<cpp:value>0xfa40f000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASR_WI</name></cpp:macro>		<cpp:value>0xea4f0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCC</name></cpp:macro>		<cpp:value>0xd000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BICI</name></cpp:macro>		<cpp:value>0xf0200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKPT</name></cpp:macro>		<cpp:value>0xbe00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLX</name></cpp:macro>		<cpp:value>0x4780</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BX</name></cpp:macro>		<cpp:value>0x4700</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLZ</name></cpp:macro>		<cpp:value>0xfab0f080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMNI_W</name></cpp:macro>		<cpp:value>0xf1100f00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name></cpp:macro>		<cpp:value>0x4280</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMPI</name></cpp:macro>		<cpp:value>0x2800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMPI_W</name></cpp:macro>		<cpp:value>0xf1b00f00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_X</name></cpp:macro>		<cpp:value>0x4500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_W</name></cpp:macro>		<cpp:value>0xebb00f00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EORI</name></cpp:macro>		<cpp:value>0xf0800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EORS</name></cpp:macro>		<cpp:value>0x4040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOR_W</name></cpp:macro>		<cpp:value>0xea800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IT</name></cpp:macro>		<cpp:value>0xbf00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDRI</name></cpp:macro>		<cpp:value>0xf8500800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSLS</name></cpp:macro>		<cpp:value>0x4080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSLSI</name></cpp:macro>		<cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSL_W</name></cpp:macro>		<cpp:value>0xfa00f000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSL_WI</name></cpp:macro>		<cpp:value>0xea4f0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSRS</name></cpp:macro>		<cpp:value>0x40c0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSRSI</name></cpp:macro>		<cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSR_W</name></cpp:macro>		<cpp:value>0xfa20f000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSR_WI</name></cpp:macro>		<cpp:value>0xea4f0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV</name></cpp:macro>		<cpp:value>0x4600</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVS</name></cpp:macro>		<cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVSI</name></cpp:macro>		<cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVT</name></cpp:macro>		<cpp:value>0xf2c00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVW</name></cpp:macro>		<cpp:value>0xf2400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_W</name></cpp:macro>		<cpp:value>0xea4f0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_WI</name></cpp:macro>		<cpp:value>0xf04f0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name></cpp:macro>		<cpp:value>0xfb00f000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVNS</name></cpp:macro>		<cpp:value>0x43c0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVN_W</name></cpp:macro>		<cpp:value>0xea6f0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVN_WI</name></cpp:macro>		<cpp:value>0xf06f0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro>		<cpp:value>0xbf00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORNI</name></cpp:macro>		<cpp:value>0xf0600000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORRI</name></cpp:macro>		<cpp:value>0xf0400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORRS</name></cpp:macro>		<cpp:value>0x4300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORR_W</name></cpp:macro>		<cpp:value>0xea400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name></cpp:macro>		<cpp:value>0xbc00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP_W</name></cpp:macro>		<cpp:value>0xe8bd0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH</name></cpp:macro>		<cpp:value>0xb400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_W</name></cpp:macro>		<cpp:value>0xe92d0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSB_WI</name></cpp:macro>		<cpp:value>0xf1c00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSBSI</name></cpp:macro>		<cpp:value>0x4240</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBCI</name></cpp:macro>		<cpp:value>0xf1600000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBCS</name></cpp:macro>		<cpp:value>0x4180</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC_W</name></cpp:macro>		<cpp:value>0xeb600000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDIV</name></cpp:macro>		<cpp:value>0xfb90f0f0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMULL</name></cpp:macro>		<cpp:value>0xfb800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_SP</name></cpp:macro>		<cpp:value>0x9000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBS</name></cpp:macro>		<cpp:value>0x1a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSI3</name></cpp:macro>		<cpp:value>0x1e00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSI8</name></cpp:macro>		<cpp:value>0x3800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_W</name></cpp:macro>		<cpp:value>0xeba00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBWI</name></cpp:macro>		<cpp:value>0xf2a00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_SP</name></cpp:macro>		<cpp:value>0xb080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_WI</name></cpp:macro>		<cpp:value>0xf1a00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SXTB</name></cpp:macro>		<cpp:value>0xb240</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SXTB_W</name></cpp:macro>		<cpp:value>0xfa4ff080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SXTH</name></cpp:macro>		<cpp:value>0xb200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SXTH_W</name></cpp:macro>		<cpp:value>0xfa0ff080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TST</name></cpp:macro>		<cpp:value>0x4200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDIV</name></cpp:macro>		<cpp:value>0xfbb0f0f0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMULL</name></cpp:macro>		<cpp:value>0xfba00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UXTB</name></cpp:macro>		<cpp:value>0xb2c0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UXTB_W</name></cpp:macro>		<cpp:value>0xfa5ff080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UXTH</name></cpp:macro>		<cpp:value>0xb280</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UXTH_W</name></cpp:macro>		<cpp:value>0xfa1ff080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VABS_F32</name></cpp:macro>	<cpp:value>0xeeb00ac0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VADD_F32</name></cpp:macro>	<cpp:value>0xee300a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCMP_F32</name></cpp:macro>	<cpp:value>0xeeb40a40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCVT_F32_S32</name></cpp:macro>	<cpp:value>0xeeb80ac0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCVT_F64_F32</name></cpp:macro>	<cpp:value>0xeeb70ac0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCVT_S32_F32</name></cpp:macro>	<cpp:value>0xeebd0ac0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VDIV_F32</name></cpp:macro>	<cpp:value>0xee800a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOV_F32</name></cpp:macro>	<cpp:value>0xeeb00a40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOV</name></cpp:macro>		<cpp:value>0xee000a10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOV2</name></cpp:macro>		<cpp:value>0xec400a10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMRS</name></cpp:macro>		<cpp:value>0xeef1fa10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMUL_F32</name></cpp:macro>	<cpp:value>0xee200a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNEG_F32</name></cpp:macro>	<cpp:value>0xeeb10a40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSTR_F32</name></cpp:macro>	<cpp:value>0xed000a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSUB_F32</name></cpp:macro>	<cpp:value>0xee300a40</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst16</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name></type> <name>inst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst32</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name></type> <name>inst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>sljit_u16</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <name>inst</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_imm32_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVW</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVT</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">11</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>modify_imm32_const</name><parameter_list>(<parameter><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>inst</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst</name> <init>= <expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfbf0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>MOVW</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfbf0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>MOVT</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f00</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>MOVW</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>new_imm</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>new_imm</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>new_imm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>new_imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>MOVT</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>new_imm</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>new_imm</name></expr></argument>, <argument><expr><literal type="number">11</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>dst</name> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>new_imm</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_imm</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>detect_jump_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>diff</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_ADDR</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Branch to ARM code is not optimized yet. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>executable_offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_BL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_TYPE1</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">5</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">524287</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">524288</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_TYPE2</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">4</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* +1 comes from the prefix IT instruction. */</comment>
		<expr_stmt><expr><name>diff</name><operator>--</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">8388607</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">8388608</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_TYPE3</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">3</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_BL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">8388607</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">8388608</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_BL</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">3</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">1023</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_TYPE4</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">4</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">8388607</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">8388608</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_TYPE5</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">3</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>set_jump_instruction</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>type</name> <init>= <expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>diff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>jump_inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>j1</name></decl>, <decl><type ref="prev"/><name>j2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>modify_imm32_const</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_u16</name><operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_ADDR</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u32</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <name>executable_offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u32</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <name>executable_offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>jump_inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name><operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><literal type="number">1</literal></expr>:</case>
		<comment type="block">/* Encoding T1 of 'B' instruction */</comment>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump_inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xd000</literal> <operator>|</operator> <operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><literal type="number">2</literal></expr>:</case>
		<comment type="block">/* Encoding T3 of 'B' instruction */</comment>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">524287</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">524288</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump_inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf000</literal> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump_inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x8000</literal> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator></expr>;</expr_stmt>
		<return>return;</return>
	<case>case <expr><literal type="number">3</literal></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>jump_inst</name><operator>++</operator> <operator>=</operator> <name>IT</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><literal type="number">4</literal></expr>:</case>
		<comment type="block">/* Encoding T2 of 'B' instruction */</comment>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">1023</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1024</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump_inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xe000</literal> <operator>|</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">8388607</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">8388608</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Really complex instruction form for branches. */</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>j1</name> <operator>=</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>^</operator> <name>s</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>j2</name> <operator>=</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>^</operator> <name>s</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump_inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xf000</literal> <operator>|</operator> <operator>(</operator><name>s</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump_inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>j1</name> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>j2</name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* The others have a common form. */</comment>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* Encoding T4 of 'B' instruction */</comment>
		<expr_stmt><expr><name><name>jump_inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x9000</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* Encoding T1 of 'BL' instruction */</comment>
		<expr_stmt><expr><name><name>jump_inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0xd000</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_generate_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>code_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>half_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>next_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_generate_code</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC_EXEC</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u16</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_WITH_EXEC_IF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>half_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>executable_offset</name> <operator>=</operator> <call><name>SLJIT_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>labels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>consts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>memory</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf_ptr</name> <operator>+</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>next_addr</name> <operator>==</operator> <name>half_count</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name> <operator>||</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>half_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name> <operator>||</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>half_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name> <operator>||</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>half_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name> <operator>||</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>half_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* These structures are ordered by their address. */</comment>
				<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>half_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>jump</name> <operator>&amp;&amp;</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>half_count</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>code_ptr</name> <operator>-=</operator> <call><name>detect_jump_type</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>const_</name> <operator>&amp;&amp;</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>half_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>const_</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>put_label</name> <operator>&amp;&amp;</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>half_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <call><name>compute_next_addr</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>const_</name></expr></argument>, <argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>code_ptr</name> <operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>half_count</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>buf_ptr</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition>;</do>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>buf</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>half_count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>|</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>-</operator> <name>code</name> <operator>&lt;=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>jump</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>set_jump_instruction</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>put_label</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>modify_imm32_const</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_u16</name> <operator>*</operator><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_COMPILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_size</name></name> <operator>=</operator> <operator>(</operator><name>code_ptr</name> <operator>-</operator> <name>code</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u16</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set thumb mode flag. */</comment>
	<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code</name> <operator>|</operator> <literal type="number">0x1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_has_cpu_feature</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>feature_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>feature_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_HAS_FPU</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SLJIT_IS_FPU_AVAILABLE</name></cpp:ifdef>
		<return>return <expr><name>SLJIT_IS_FPU_AVAILABLE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* Available by default. */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<case>case <expr><name>SLJIT_HAS_CLZ</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_CMOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_PREFETCH</name></expr>:</case>
		<return>return <expr><literal type="number">1</literal></expr>;</return>

	<default>default:</default>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Core code generator functions.                                       */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_IMM</name></cpp:macro>	<cpp:value>0x80000000</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>get_imm</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Thumb immediate form. */</comment>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>counter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>imm</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Some special cases. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Assembly optimization: count leading zeroes? */</comment>
	<expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>counter</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>counter</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>counter</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>counter</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>counter</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Since imm &gt;= 128, this must be true. */</comment>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>counter</name> <operator>&lt;=</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>INVALID_IMM</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Cannot be encoded. */</comment>

	<return>return <expr><operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>load_immediate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>tmp</name></decl>;</decl_stmt>

	<comment type="block">/* MOVS cannot be used since it destroy flags. */</comment>

	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>~</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MVN_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* set low 16 bits, set hi 16 bits to 0. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVW</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set hi 16 bit if needed. */</comment>
	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;=</operator> <literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVT</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call>
			<operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">11</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG1_IMM</name></cpp:macro>	<cpp:value>0x0010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG2_IMM</name></cpp:macro>	<cpp:value>0x0020000</cpp:value></cpp:define>
<comment type="block">/* SET_FLAGS must be 0x100000 as it is also the value of S bit (can be used for optimization). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FLAGS</name></cpp:macro>	<cpp:value>0x0100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_RETURN</name></cpp:macro>	<cpp:value>0x0200000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_op_imm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* dst must be register, TMP_REG1
	   arg1 must be register, imm
	   arg2 must be register, imm */</comment>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>imm</name></decl>, <decl><type ref="prev"/><name>nimm</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ARG1_IMM</name> <operator>|</operator> <name>ARG2_IMM</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>ARG1_IMM</name> <operator>|</operator> <name>ARG2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Both are immediates, no temporaries are used. */</comment>
		<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>ARG1_IMM</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg1</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ARG1_IMM</name> <operator>|</operator> <name>ARG2_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>reg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>arg1</name></expr> </then><else>: <expr><name>arg2</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>arg2</name></expr> </then><else>: <expr><name>arg1</name></expr></else></ternary></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
			<comment type="block">/* No form with immediate operand. */</comment>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>~</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<comment type="block">/* Since the flags should be set, we just fallback to the register mode.
			   Although some clever things could be done here, "NOT IMM" does not worth the efforts. */</comment>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>imm</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDSI3</name> <operator>|</operator> <call><name>IMM3</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&lt;=</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBSI3</name> <operator>|</operator> <call><name>IMM3</name><argument_list>(<argument><expr><name>nimm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDSI8</name> <operator>|</operator> <call><name>IMM8</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBSI8</name> <operator>|</operator> <call><name>IMM8</name><argument_list>(<argument><expr><name>nimm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDWI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM12</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBWI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM12</name><argument_list>(<argument><expr><name>nimm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_WI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>nimm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>nimm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADCI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
			<comment type="block">/* SUB operation can be replaced by ADD because of the negative carry flag. */</comment>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARG1_IMM</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RSBSI</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RSB_WI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>UNUSED_RETURN</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMPI</name> <operator>|</operator> <call><name>IMM8</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>nimm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMPI_W</name> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>nimm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>nimm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMNI_W</name> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>nimm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>imm</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBSI3</name> <operator>|</operator> <call><name>IMM3</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&lt;=</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDSI3</name> <operator>|</operator> <call><name>IMM3</name><argument_list>(<argument><expr><name>nimm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBSI8</name> <operator>|</operator> <call><name>IMM8</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDSI8</name> <operator>|</operator> <call><name>IMM8</name><argument_list>(<argument><expr><name>nimm</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBWI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM12</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDWI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM12</name><argument_list>(<argument><expr><name>nimm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>nimm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_WI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>nimm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARG1_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SBCI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_AND</name></expr>:</case>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>nimm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BICI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_OR</name></expr>:</case>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORRI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>nimm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORNI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EORI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
		<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARG1_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>imm</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_W</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LSLSI</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LSL_WI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM5</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LSRSI</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LSR_WI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM5</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			<default>default:</default> <comment type="block">/* SLJIT_ASHR */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ASRSI</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
				<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ASR_WI</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM5</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></switch>
		<default>default:</default>
			<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg2</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>arg1</name> <operator>==</operator> <name>TMP_REG1</name><operator>)</operator></expr> ?</condition><then> <expr><name>TMP_REG2</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg1</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>arg2</name> <operator>==</operator> <name>TMP_REG1</name><operator>)</operator></expr> ?</condition><then> <expr><name>TMP_REG2</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg1</name> <operator>!=</operator> <name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Both arguments are registers. */</comment>
	<switch>switch <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>UXTB</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>UXTB_W</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SXTB</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SXTB_W</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>UXTH</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>UXTH_W</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SXTH</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SXTH_W</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg1</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MVNS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MVN_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg1</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CLZ</name> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>IS_3_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADCS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADC_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>UNUSED_RETURN</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMP</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMP_X</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_3_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SBCS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SBC_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MUL</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SMULL</name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* cmp TMP_REG2, dst asr #31. */</comment>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMP_W</name> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0x70e0</literal> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_RETURN</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TST</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>AND_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORRS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EORS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EOR_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LSLS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LSL_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LSRS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LSR_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg1</name> <operator>&amp;&amp;</operator> <call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ASRS</name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ASR_W</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name></cpp:macro>		<cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED</name></cpp:macro>		<cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_SIZE</name></cpp:macro>	<cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_SIZE</name></cpp:macro>	<cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_SIZE</name></cpp:macro>	<cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRELOAD</name></cpp:macro>		<cpp:value>0x0c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_WORD_SIZE</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(!(flags &amp; (BYTE_SIZE | HALF_SIZE)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET_CHECK</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(!(argw &amp; ~(imm &lt;&lt; shift)))</cpp:value></cpp:define>

<comment type="block">/*
  1st letter:
  w = word
  b = byte
  h = half

  2nd letter:
  s = signed
  u = unsigned

  3rd letter:
  l = load
  s = store
*/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_ins</name></type> <name><name>sljit_mem16</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{
<comment type="block">/* w u l */</comment> <expr><literal type="number">0x5800</literal></expr> <comment type="block">/* ldr */</comment>,
<comment type="block">/* w u s */</comment> <expr><literal type="number">0x5000</literal></expr> <comment type="block">/* str */</comment>,
<comment type="block">/* w s l */</comment> <expr><literal type="number">0x5800</literal></expr> <comment type="block">/* ldr */</comment>,
<comment type="block">/* w s s */</comment> <expr><literal type="number">0x5000</literal></expr> <comment type="block">/* str */</comment>,

<comment type="block">/* b u l */</comment> <expr><literal type="number">0x5c00</literal></expr> <comment type="block">/* ldrb */</comment>,
<comment type="block">/* b u s */</comment> <expr><literal type="number">0x5400</literal></expr> <comment type="block">/* strb */</comment>,
<comment type="block">/* b s l */</comment> <expr><literal type="number">0x5600</literal></expr> <comment type="block">/* ldrsb */</comment>,
<comment type="block">/* b s s */</comment> <expr><literal type="number">0x5400</literal></expr> <comment type="block">/* strb */</comment>,

<comment type="block">/* h u l */</comment> <expr><literal type="number">0x5a00</literal></expr> <comment type="block">/* ldrh */</comment>,
<comment type="block">/* h u s */</comment> <expr><literal type="number">0x5200</literal></expr> <comment type="block">/* strh */</comment>,
<comment type="block">/* h s l */</comment> <expr><literal type="number">0x5e00</literal></expr> <comment type="block">/* ldrsh */</comment>,
<comment type="block">/* h s s */</comment> <expr><literal type="number">0x5200</literal></expr> <comment type="block">/* strh */</comment>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_ins</name></type> <name><name>sljit_mem16_imm5</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{
<comment type="block">/* w u l */</comment> <expr><literal type="number">0x6800</literal></expr> <comment type="block">/* ldr imm5 */</comment>,
<comment type="block">/* w u s */</comment> <expr><literal type="number">0x6000</literal></expr> <comment type="block">/* str imm5 */</comment>,
<comment type="block">/* w s l */</comment> <expr><literal type="number">0x6800</literal></expr> <comment type="block">/* ldr imm5 */</comment>,
<comment type="block">/* w s s */</comment> <expr><literal type="number">0x6000</literal></expr> <comment type="block">/* str imm5 */</comment>,

<comment type="block">/* b u l */</comment> <expr><literal type="number">0x7800</literal></expr> <comment type="block">/* ldrb imm5 */</comment>,
<comment type="block">/* b u s */</comment> <expr><literal type="number">0x7000</literal></expr> <comment type="block">/* strb imm5 */</comment>,
<comment type="block">/* b s l */</comment> <expr><literal type="number">0x0000</literal></expr> <comment type="block">/* not allowed */</comment>,
<comment type="block">/* b s s */</comment> <expr><literal type="number">0x7000</literal></expr> <comment type="block">/* strb imm5 */</comment>,

<comment type="block">/* h u l */</comment> <expr><literal type="number">0x8800</literal></expr> <comment type="block">/* ldrh imm5 */</comment>,
<comment type="block">/* h u s */</comment> <expr><literal type="number">0x8000</literal></expr> <comment type="block">/* strh imm5 */</comment>,
<comment type="block">/* h s l */</comment> <expr><literal type="number">0x0000</literal></expr> <comment type="block">/* not allowed */</comment>,
<comment type="block">/* h s s */</comment> <expr><literal type="number">0x8000</literal></expr> <comment type="block">/* strh imm5 */</comment>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_IMM8</name></cpp:macro>	<cpp:value>0xc00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_IMM12</name></cpp:macro>	<cpp:value>0x800000</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_ins</name></type> <name><name>sljit_mem32</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{
<comment type="block">/* w u l */</comment> <expr><literal type="number">0xf8500000</literal></expr> <comment type="block">/* ldr.w */</comment>,
<comment type="block">/* w u s */</comment> <expr><literal type="number">0xf8400000</literal></expr> <comment type="block">/* str.w */</comment>,
<comment type="block">/* w s l */</comment> <expr><literal type="number">0xf8500000</literal></expr> <comment type="block">/* ldr.w */</comment>,
<comment type="block">/* w s s */</comment> <expr><literal type="number">0xf8400000</literal></expr> <comment type="block">/* str.w */</comment>,

<comment type="block">/* b u l */</comment> <expr><literal type="number">0xf8100000</literal></expr> <comment type="block">/* ldrb.w */</comment>,
<comment type="block">/* b u s */</comment> <expr><literal type="number">0xf8000000</literal></expr> <comment type="block">/* strb.w */</comment>,
<comment type="block">/* b s l */</comment> <expr><literal type="number">0xf9100000</literal></expr> <comment type="block">/* ldrsb.w */</comment>,
<comment type="block">/* b s s */</comment> <expr><literal type="number">0xf8000000</literal></expr> <comment type="block">/* strb.w */</comment>,

<comment type="block">/* h u l */</comment> <expr><literal type="number">0xf8300000</literal></expr> <comment type="block">/* ldrh.w */</comment>,
<comment type="block">/* h u s */</comment> <expr><literal type="number">0xf8200000</literal></expr> <comment type="block">/* strsh.w */</comment>,
<comment type="block">/* h s l */</comment> <expr><literal type="number">0xf9300000</literal></expr> <comment type="block">/* ldrsh.w */</comment>,
<comment type="block">/* h s s */</comment> <expr><literal type="number">0xf8200000</literal></expr> <comment type="block">/* strsh.w */</comment>,

<comment type="block">/* p u l */</comment> <expr><literal type="number">0xf8100000</literal></expr> <comment type="block">/* pld */</comment>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Helper function. Dst should be reg + value, using at most 1 instruction, flags does not set. */</comment>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_set_delta</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDWI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM12</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><name>value</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBWI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM12</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_op_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>tmp_reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>other_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>!=</operator> <name>tmp_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg</name> <operator>&amp;=</operator> <operator>~</operator><name>SLJIT_MEM</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem32</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <name>MEM_IMM12</name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>sljit_mem16_imm5</name><index>[<expr><name>flags</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem16_imm5</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem32</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <name>MEM_IMM12</name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>other_r</name> <operator>=</operator> <call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg</name> <operator>&amp;=</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>argw</name> <operator>&amp;&amp;</operator> <call><name>IS_3_LO_REGS</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>other_r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem16</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM3</name><argument_list>(<argument><expr><name>other_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem32</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>other_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&gt;</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>tmp_reg</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>argw</name> <operator>=</operator> <name>argw</name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>argw</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>tmp_reg</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>-</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IS_2_LO_REGS</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>sljit_mem16_imm5</name><index>[<expr><name>flags</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>IS_WORD_SIZE</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>OFFSET_CHECK</name><argument_list>(<argument><expr><literal type="number">0x1f</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>BYTE_SIZE</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>OFFSET_CHECK</name><argument_list>(<argument><expr><literal type="number">0x1f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <name>HALF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>OFFSET_CHECK</name><argument_list>(<argument><expr><literal type="number">0x1f</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem16_imm5</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>tmp</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>arg</name> <operator>==</operator> <name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IS_WORD_SIZE</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>OFFSET_CHECK</name><argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* SP based immediate. */</comment>
		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STR_SP</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STORE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x800</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem32</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <name>MEM_IMM12</name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>argw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>argw</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem32</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <name>MEM_IMM8</name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>-</operator><name>argw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>!=</operator> <name>tmp_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IS_3_LO_REGS</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem16</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <call><name>RD3</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM3</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>sljit_mem32</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Entry, exit                                                          */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>args</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>push</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>imm</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name>saveds</name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>saveds</name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_S0</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>push</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>reg_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>scratches</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>push</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>reg_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>push</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator></expr>
		?</condition><then> <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PUSH_W</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <name>push</name></expr></argument>)</argument_list></call></expr>
		</then><else>: <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PUSH</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>push</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Stack must be aligned to 8 bytes: (LR, R4) */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>local_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>+</operator> <name>local_size</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <name>local_size</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>local_size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">127</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_SP</name> <operator>|</operator> <operator>(</operator><name>local_size</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name> <operator>|</operator> <name>ARG2_IMM</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>get_arg_count</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>SLJIT_S0</name></expr></argument>, <argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>SLJIT_S1</name></expr></argument>, <argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>SLJIT_S2</name></expr></argument>, <argument><expr><name>SLJIT_R2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <literal type="number">0x400</literal> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>local_size</name> <operator>-=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <literal type="number">0x400</literal> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>local_size</name> <operator>-=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <literal type="number">0x400</literal> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>local_size</name> <operator>-=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_R3</name></expr></argument>, <argument><expr><operator>(</operator><name>local_size</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <literal type="number">0x400</literal> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>SLJIT_R3</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBSI8</name> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>SLJIT_R3</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BCC</name> <operator>|</operator> <operator>(</operator><literal type="number">0x1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <comment type="block">/* not-equal */</comment> <operator>|</operator> <operator>(</operator><operator>-</operator><literal type="number">7</literal> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>local_size</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <literal type="number">0x400</literal> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>local_size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>local_size</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <literal type="number">0x400</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x100</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <literal type="number">0x500</literal> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_set_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>+</operator> <name>local_size</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_return</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>pop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_before_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">127</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_SP</name> <operator>|</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name> <operator>|</operator> <name>ARG2_IMM</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_S0</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pop</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>reg_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pop</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>reg_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name>pop</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator></expr>
		?</condition><then> <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>POP_W</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>|</operator> <name>pop</name></expr></argument>)</argument_list></call></expr>
		</then><else>: <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>POP</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>pop</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Operators                                                            */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>__ARM_FEATURE_IDIV</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>__ARM_ARCH_EXT_IDIV__</name><operator>)</operator></expr></cpp:if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>__rt_udiv</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>denominator</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>numerator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>long</name> <name>long</name></type> <name>__rt_sdiv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>denominator</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numerator</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>int</name></type> <name>__aeabi_uidivmod</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>numerator</name></decl></parameter>, <parameter><decl><type><name>int</name> <name>unsigned</name></type> <name>denominator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__aeabi_idivmod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numerator</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denominator</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Software divmod functions are needed"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !__ARM_FEATURE_IDIV &amp;&amp; !__ARM_ARCH_EXT_IDIV__ */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>__ARM_FEATURE_IDIV</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>__ARM_ARCH_EXT_IDIV__</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name><name>saved_reg_list</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>saved_reg_count</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op0</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_BREAKPOINT</name></expr>:</case>
		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BKPT</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_NOP</name></expr>:</case>
		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_LMUL_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_LMUL_SW</name></expr>:</case>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>UMULL</name></expr> </then><else>: <expr><name>SMULL</name></expr></else></ternary><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>SLJIT_R0</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>SLJIT_R0</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
			<operator>|</operator> <name><name>reg_map</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>__ARM_FEATURE_IDIV</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>__ARM_ARCH_EXT_IDIV__</name><operator>)</operator></expr></cpp:if>
	<case>case <expr><name>SLJIT_DIVMOD_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIVMOD_SW</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr> ?</condition><then> <expr><name>UDIV</name></expr> </then><else>: <expr><name>SDIV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MUL</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_W</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_DIV_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_SW</name></expr>:</case>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>UDIV</name></expr> </then><else>: <expr><name>SDIV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !__ARM_FEATURE_IDIV &amp;&amp; !__ARM_ARCH_EXT_IDIV__ */</comment>
	<case>case <expr><name>SLJIT_DIVMOD_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIVMOD_SW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_SW</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>SLJIT_DIVMOD_UW</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SLJIT_DIV_UW</name> <operator>-</operator> <literal type="number">0x2</literal> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr></argument>, <argument><expr><name>bad_div_opcode_assignments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>saved_reg_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>saved_reg_list</name><index>[<expr><name>saved_reg_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>saved_reg_list</name><index>[<expr><name>saved_reg_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIV_UW</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>saved_reg_list</name><index>[<expr><name>saved_reg_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0xf84d0d00</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator>
						<operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> <comment type="block">/* str rX, [sp, #-8/-16]! */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>saved_reg_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0x9001</literal> <operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument> <comment type="block">/* str rX, [sp, #4] */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>saved_reg_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0x9002</literal> <operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument> <comment type="block">/* str rX, [sp, #8] */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>, <argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_FAST_CALL</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>,
			<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><call><name>SLJIT_FUNC_OFFSET</name><argument_list>(<argument><expr><name>__rt_udiv</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>SLJIT_FUNC_OFFSET</name><argument_list>(<argument><expr><name>__rt_sdiv</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_FAST_CALL</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>,
			<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><call><name>SLJIT_FUNC_OFFSET</name><argument_list>(<argument><expr><name>__aeabi_uidivmod</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>SLJIT_FUNC_OFFSET</name><argument_list>(<argument><expr><name>__aeabi_idivmod</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Software divmod functions are needed"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>saved_reg_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0x9802</literal> <operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument> <comment type="block">/* ldr rX, [sp, #8] */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>saved_reg_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0x9801</literal> <operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument> <comment type="block">/* ldr rX, [sp, #4] */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0xf85d0b00</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator>
						<operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> <comment type="block">/* ldr rX, [sp], #8/16 */</comment>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __ARM_FEATURE_IDIV || __ARM_ARCH_EXT_IDIV__ */</comment>
	<case>case <expr><name>SLJIT_ENDBR</name></expr>:</case>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>op_flags</name> <init>= <expr><call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
		<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
		<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
		<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>BYTE_SIZE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>BYTE_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s8</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>HALF_SIZE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>HALF_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s16</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name> <operator>|</operator> <name>ARG2_IMM</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>TMP_REG1</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_NEG</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
			<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><call><name>sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name> <operator>|</operator> <name>op_flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>op</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>src2_reg</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dst_reg</name> <operator>=</operator> <ternary><condition><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ARG1_IMM</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>src1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ARG2_IMM</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARG1_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1w</name> <operator>==</operator> <name>TMP_REG1</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>TMP_REG2</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>src2_reg</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>src2_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2w</name> <operator>=</operator> <name>src2_reg</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>src2w</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>UNUSED_RETURN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_src</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_FAST_RETURN</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG2</name></expr>]</index></name> <operator>==</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BX</name> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_FAST_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	<case>case <expr><name>SLJIT_PREFETCH_L1</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L2</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L3</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_ONCE</name></expr>:</case>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PRELOAD</name></expr></argument>, <argument><expr><name>TMP_PC</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_float_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_float_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>freg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_custom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_custom</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>sljit_u16</name><operator>*</operator><operator>)</operator><name>instruction</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name>instruction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Floating point operators                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPU_LOAD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_fop_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>imm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>inst</name> <init>= <expr><name>VSTR_F32</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_F32_OP</name> <operator>|</operator> <name>FPU_LOAD</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fast loads and stores. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_W</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>SLJIT_MEM</name> <operator>|</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>argw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3fc</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <literal type="number">0x800000</literal> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>-</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3fc</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>-</operator><name>argw</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>emit_set_delta</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_ERR_UNSUPPORTED</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <literal type="number">0x800000</literal> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3fc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <literal type="number">0x800000</literal> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x3fc</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3fc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>-</operator><name>argw</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x3fc</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <literal type="number">0x800000</literal> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_sw_from_f64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VCVT_S32_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DN4</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Store the integer value from a VFP register. */</comment>
	<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_f64_from_sw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DN4</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Load the integer value into a VFP register. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DN4</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VCVT_F32_S32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VCMP_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMRS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>SLJIT_F32_OP</name> <operator>==</operator> <literal type="number">0x100</literal><operator>)</operator></expr></argument>, <argument><expr><name>float_transfer_bit_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT_FOP1_OPERATION_WITH_CHECKS</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_CONV_F64_FROM_F32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dst_r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV_F64</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>dst_r</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>TMP_FREG1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NEG_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VNEG_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_ABS_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VABS_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_CONV_F64_FROM_F32</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VCVT_F64_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fop2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VADD_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DN4</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_SUB_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VSUB_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DN4</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MUL_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMUL_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DN4</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_DIV_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VDIV_F32</name> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DN4</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FPU_LOAD</name></cpp:undef>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Other instructions                                                   */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fast_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fast_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG2</name></expr>]</index></name> <operator>==</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Memory. */</comment>
	<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Conditional instructions                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>get_cc</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x0</literal></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x1</literal></expr>;</return>

	<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x3</literal></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x2</literal></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x8</literal></expr>;</return>

	<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x9</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
		<return>return <expr><literal type="number">0xb</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
		<return>return <expr><literal type="number">0xa</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
		<return>return <expr><literal type="number">0xc</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
		<return>return <expr><literal type="number">0xd</literal></expr>;</return>

	<case>case <expr><name>SLJIT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x6</literal></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x7</literal></expr>;</return>

	<default>default:</default> <comment type="block">/* SLJIT_JUMP */</comment>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0xe</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>sljit_emit_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>label</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm32_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>SLJIT_JUMP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_COND</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BX</name> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BLX</name> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>jump</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>softfloat_call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>stack_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>word_arg_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>float_arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>types</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src_offset</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name><name>offsets</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>src_offset</name> <operator>=</operator> <name><name>reg_map</name><index>[<expr><operator>*</operator><name>src</name></expr>]</index></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>types</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&lt;&lt;</operator> <name>SLJIT_DEF_SHIFT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_arg_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_SP</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Process arguments in reversed direction. */</comment>
	<while>while <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>src_offset</name> <operator>==</operator> <name>stack_offset</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <operator>(</operator><name>src_offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">4</literal> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <literal type="number">0x100000</literal> <operator>|</operator> <operator>(</operator><name>float_arg_count</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>stack_offset</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VSTR_F32</name> <operator>|</operator> <literal type="number">0x800000</literal> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>float_arg_count</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>stack_offset</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>src_offset</name> <operator>==</operator> <name>stack_offset</name> <operator>||</operator> <name>src_offset</name> <operator>==</operator> <name>stack_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <operator>(</operator><name>src_offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">4</literal> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV2</name> <operator>|</operator> <literal type="number">0x100000</literal> <operator>|</operator> <operator>(</operator><name>stack_offset</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <name>float_arg_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VSTR_F32</name> <operator>|</operator> <literal type="number">0x800100</literal> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>float_arg_count</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_arg_offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>stack_offset</name> <operator>&gt;=</operator> <name>word_arg_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>!=</operator> <name>word_arg_offset</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>src_offset</name> <operator>==</operator> <name>stack_offset</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <operator>(</operator><name>src_offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">4</literal> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>src_offset</name> <operator>==</operator> <name>word_arg_offset</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>stack_offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>src_offset</name> <operator>=</operator> <name>stack_offset</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <operator>(</operator><name>stack_offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>word_arg_offset</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STR_SP</name> <operator>|</operator> <operator>(</operator><name>word_arg_offset</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>softfloat_post_call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>stack_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_ARG_TYPE_F32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_ARG_TYPE_F64</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV2</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>stack_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>stack_size</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>stack_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>stack_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>stack_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>stack_size</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_SP</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>stack_size</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>hardfloat_call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>remap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>new_offset</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

	<comment type="block">/* Remove return value. */</comment>
	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_ARG_TYPE_F32</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>new_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<while>while <condition>(<expr><name>remap</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>new_offset</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name>remap</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <name>new_offset</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV_F32</name> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><operator>(</operator><name>new_offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
					<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>new_offset</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x400000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_ARG_TYPE_F64</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>new_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

			<while>while <condition>(<expr><name>remap</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>new_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>mask</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name>remap</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <name>new_offset</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV_F32</name> <operator>|</operator> <name>SLJIT_F32_OP</name> <operator>|</operator> <call><name>DD4</name><argument_list>(<argument><expr><operator>(</operator><name>new_offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DM4</name><argument_list>(<argument><expr><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_call</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>softfloat_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><name>jump</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>softfloat_post_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>jump</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>hardfloat_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_ijump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>!=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>src</name></expr>]</index></name> <operator>!=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>BX</name></expr> </then><else>: <expr><name>BLX</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>TMP_PC</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BLX</name> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* These jumps are converted to jump/call instructions when possible. */</comment>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JUMP_ADDR</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>IS_BL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>srcw</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm32_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>BX</name></expr> </then><else>: <expr><name>BLX</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RN3</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_icall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_icall</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>softfloat_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>softfloat_post_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !__SOFTFP__ */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>hardfloat_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __SOFTFP__ */</comment>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>SLJIT_ADD</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>cc</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>reg_map</name><index>[<expr><name>dst_r</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<comment type="block">/* The movsi (immediate) instruction does not set flags in IT block. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVSI</name> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVSI</name> <operator>|</operator> <call><name>RDN3</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_AND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>cc</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDI</name> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDI</name> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>SLJIT_OR</name><operator>)</operator></expr> ?</condition><then> <expr><name>ORRI</name></expr> </then><else>: <expr><name>EORI</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* The condition must always be set, even if the ORR/EORI is not executed above. */</comment>
	<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_W</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM4</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_cmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_cmov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_reg</name> <operator>&amp;=</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>SET_REGS44</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator> <name>srcw</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* set low 16 bits, set hi 16 bits to 0. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVW</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call>
			<operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>~</operator><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>INVALID_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MVN_WI</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst16</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>IT</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>cc</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator> <name>srcw</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVW</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVT</name> <operator>|</operator> <call><name>RD4</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">11</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>COPY_BITS</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xff0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>memw</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>memw</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>BYTE_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>BYTE_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>HALF_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>HALF_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>STORE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <name><name>sljit_mem32</name><index>[<expr><name>flags</name></expr>]</index></name> <operator>|</operator> <literal type="number">0x900</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <literal type="number">0x400</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <literal type="number">0x200</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>memw</name> <operator>=</operator> <operator>-</operator><name>memw</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><call><name>push_inst32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <call><name>RT4</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN4</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>memw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_const</name></name><modifier>*</modifier></type> <name>sljit_emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>const_</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_const</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_const</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_const</name><argument_list>(<argument><expr><name>const_</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm32_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>const_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_put_label</name></name><modifier>*</modifier></type> <name>sljit_emit_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_put_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_put_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_put_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_put_label</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm32_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>put_label</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_target</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u16</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_u16</name><operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>modify_imm32_const</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>new_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sljit_set_jump_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>new_constant</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
