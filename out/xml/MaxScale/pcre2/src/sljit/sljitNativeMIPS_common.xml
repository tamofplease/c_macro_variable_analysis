<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativeMIPS_common.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/* Latest MIPS architecture. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mips_hard_float</name></cpp:ifndef>
<comment type="block">/* Disable automatic detection, covers both -msoft-float and -mno-float */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SLJIT_IS_FPU_AVAILABLE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_IS_FPU_AVAILABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sljit_get_platform_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
	<return>return <expr><literal type="string">"MIPS32-R6"</literal> <name>SLJIT_CPUINFO</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_MIPS_32 */</comment>
	<return>return <expr><literal type="string">"MIPS64-R6"</literal> <name>SLJIT_CPUINFO</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_MIPS_32 */</comment>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
	<return>return <expr><literal type="string">"MIPS32-R1"</literal> <name>SLJIT_CPUINFO</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_MIPS_32 */</comment>
	<return>return <expr><literal type="string">"MIPS64-R1"</literal> <name>SLJIT_CPUINFO</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_MIPS_32 */</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 1 */</comment>
	<return>return <expr><literal type="string">"MIPS III"</literal> <name>SLJIT_CPUINFO</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
</block_content>}</block></function>

<comment type="block">/* Length of an instruction word
   Both for mips-32 and mips-64 */</comment>
<typedef>typedef <type><name>sljit_u32</name></type> <name>sljit_ins</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG3</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 4)</cpp:value></cpp:define>

<comment type="block">/* For position independent code, t9 must contain the function address. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIC_ADDR_REG</name></cpp:macro>	<cpp:value>TMP_REG2</cpp:value></cpp:define>

<comment type="block">/* Floating point status register. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCSR_REG</name></cpp:macro>	<cpp:value>31</cpp:value></cpp:define>
<comment type="block">/* Return address register. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RETURN_ADDR_REG</name></cpp:macro>	<cpp:value>31</cpp:value></cpp:define>

<comment type="block">/* Flags are kept in volatile registers. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EQUAL_FLAG</name></cpp:macro>	<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OTHER_FLAG</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG3</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 3)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">31</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>freg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">16</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>freg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Instrucion forms                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[s] &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[t] &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[d] &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[t] &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[s] &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FD</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[d] &lt;&lt; 6)</cpp:value></cpp:define>
<comment type="block">/* Absolute registers. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((s) &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TA</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((t) &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DA</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((d) &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((imm) &amp; 0xffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SH_IMM</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((imm) &lt;&lt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DR</name><parameter_list>(<parameter><type><name>dr</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(reg_map[dr])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FR</name><parameter_list>(<parameter><type><name>dr</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(freg_map[dr])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HI</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((opcode) &lt;&lt; 26)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LO</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(opcode)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<comment type="block">/* CMP.cond.fmt */</comment>
<comment type="block">/* S = (20 &lt;&lt; 21) D = (21 &lt;&lt; 21) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_FMT_S</name></cpp:macro>	<cpp:value>(20 &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
<comment type="block">/* S = (16 &lt;&lt; 21) D = (17 &lt;&lt; 21) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_S</name></cpp:macro>		<cpp:value>(16 &lt;&lt; 21)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_D</name></cpp:macro>		<cpp:value>(17 &lt;&lt; 21)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDIU</name></cpp:macro>		<cpp:value>(HI(9))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDU</name></cpp:macro>		<cpp:value>(HI(0) | LO(33))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND</name></cpp:macro>		<cpp:value>(HI(0) | LO(36))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDI</name></cpp:macro>		<cpp:value>(HI(12))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro>		<cpp:value>(HI(4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAL</name></cpp:macro>		<cpp:value>(HI(1) | (17 &lt;&lt; 16))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC1EQZ</name></cpp:macro>		<cpp:value>(HI(17) | (9 &lt;&lt; 21) | FT(TMP_FREG3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC1NEZ</name></cpp:macro>		<cpp:value>(HI(17) | (13 &lt;&lt; 21) | FT(TMP_FREG3))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC1F</name></cpp:macro>		<cpp:value>(HI(17) | (8 &lt;&lt; 21))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BC1T</name></cpp:macro>		<cpp:value>(HI(17) | (8 &lt;&lt; 21) | (1 &lt;&lt; 16))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEQ</name></cpp:macro>		<cpp:value>(HI(4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGEZ</name></cpp:macro>		<cpp:value>(HI(1) | (1 &lt;&lt; 16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BGTZ</name></cpp:macro>		<cpp:value>(HI(7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLEZ</name></cpp:macro>		<cpp:value>(HI(6))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLTZ</name></cpp:macro>		<cpp:value>(HI(1) | (0 &lt;&lt; 16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BNE</name></cpp:macro>		<cpp:value>(HI(5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BREAK</name></cpp:macro>		<cpp:value>(HI(0) | LO(13))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFC1</name></cpp:macro>		<cpp:value>(HI(17) | (2 &lt;&lt; 21))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_UEQ_S</name></cpp:macro>		<cpp:value>(HI(17) | CMP_FMT_S | LO(3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ULE_S</name></cpp:macro>		<cpp:value>(HI(17) | CMP_FMT_S | LO(7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ULT_S</name></cpp:macro>		<cpp:value>(HI(17) | CMP_FMT_S | LO(5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_UN_S</name></cpp:macro>		<cpp:value>(HI(17) | CMP_FMT_S | LO(1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_FD</name></cpp:macro>		<cpp:value>(FD(TMP_FREG3))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_UEQ_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(51))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ULE_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(55))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ULT_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(53))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_UN_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(49))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_FD</name></cpp:macro>		<cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVT_S_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(32))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DADDIU</name></cpp:macro>		<cpp:value>(HI(25))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DADDU</name></cpp:macro>		<cpp:value>(HI(0) | LO(45))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DDIV</name></cpp:macro>		<cpp:value>(HI(0) | (2 &lt;&lt; 6) | LO(30))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DDIVU</name></cpp:macro>		<cpp:value>(HI(0) | (2 &lt;&lt; 6) | LO(31))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMOD</name></cpp:macro>		<cpp:value>(HI(0) | (3 &lt;&lt; 6) | LO(30))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMODU</name></cpp:macro>		<cpp:value>(HI(0) | (3 &lt;&lt; 6) | LO(31))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV</name></cpp:macro>		<cpp:value>(HI(0) | (2 &lt;&lt; 6) | LO(26))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVU</name></cpp:macro>		<cpp:value>(HI(0) | (2 &lt;&lt; 6) | LO(27))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMUH</name></cpp:macro>		<cpp:value>(HI(0) | (3 &lt;&lt; 6) | LO(28))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMUHU</name></cpp:macro>		<cpp:value>(HI(0) | (3 &lt;&lt; 6) | LO(29))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMUL</name></cpp:macro>		<cpp:value>(HI(0) | (2 &lt;&lt; 6) | LO(28))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMULU</name></cpp:macro>		<cpp:value>(HI(0) | (2 &lt;&lt; 6) | LO(29))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DDIV</name></cpp:macro>		<cpp:value>(HI(0) | LO(30))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DDIVU</name></cpp:macro>		<cpp:value>(HI(0) | LO(31))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV</name></cpp:macro>		<cpp:value>(HI(0) | LO(26))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVU</name></cpp:macro>		<cpp:value>(HI(0) | LO(27))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMULT</name></cpp:macro>		<cpp:value>(HI(0) | LO(28))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DMULTU</name></cpp:macro>		<cpp:value>(HI(0) | LO(29))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSLL</name></cpp:macro>		<cpp:value>(HI(0) | LO(56))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSLL32</name></cpp:macro>		<cpp:value>(HI(0) | LO(60))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSLLV</name></cpp:macro>		<cpp:value>(HI(0) | LO(20))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSRA</name></cpp:macro>		<cpp:value>(HI(0) | LO(59))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSRA32</name></cpp:macro>		<cpp:value>(HI(0) | LO(63))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSRAV</name></cpp:macro>		<cpp:value>(HI(0) | LO(23))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSRL</name></cpp:macro>		<cpp:value>(HI(0) | LO(58))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSRL32</name></cpp:macro>		<cpp:value>(HI(0) | LO(62))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSRLV</name></cpp:macro>		<cpp:value>(HI(0) | LO(22))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSUBU</name></cpp:macro>		<cpp:value>(HI(0) | LO(47))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>J</name></cpp:macro>		<cpp:value>(HI(2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAL</name></cpp:macro>		<cpp:value>(HI(3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JALR</name></cpp:macro>		<cpp:value>(HI(0) | LO(9))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JR</name></cpp:macro>		<cpp:value>(HI(0) | LO(9))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JR</name></cpp:macro>		<cpp:value>(HI(0) | LO(8))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD</name></cpp:macro>		<cpp:value>(HI(55))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUI</name></cpp:macro>		<cpp:value>(HI(15))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LW</name></cpp:macro>		<cpp:value>(HI(35))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFC1</name></cpp:macro>		<cpp:value>(HI(17))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>		<cpp:value>(HI(0) | (3 &lt;&lt; 6) | LO(26))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODU</name></cpp:macro>		<cpp:value>(HI(0) | (3 &lt;&lt; 6) | LO(27))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFHI</name></cpp:macro>		<cpp:value>(HI(0) | LO(16))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MFLO</name></cpp:macro>		<cpp:value>(HI(0) | LO(18))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(6))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MTC1</name></cpp:macro>		<cpp:value>(HI(17) | (4 &lt;&lt; 21))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUH</name></cpp:macro>		<cpp:value>(HI(0) | (3 &lt;&lt; 6) | LO(24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUHU</name></cpp:macro>		<cpp:value>(HI(0) | (3 &lt;&lt; 6) | LO(25))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name></cpp:macro>		<cpp:value>(HI(0) | (2 &lt;&lt; 6) | LO(24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULU</name></cpp:macro>		<cpp:value>(HI(0) | (2 &lt;&lt; 6) | LO(25))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULT</name></cpp:macro>		<cpp:value>(HI(0) | LO(24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTU</name></cpp:macro>		<cpp:value>(HI(0) | LO(25))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro>		<cpp:value>(HI(0) | LO(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOR</name></cpp:macro>		<cpp:value>(HI(0) | LO(39))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR</name></cpp:macro>		<cpp:value>(HI(0) | LO(37))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORI</name></cpp:macro>		<cpp:value>(HI(13))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SD</name></cpp:macro>		<cpp:value>(HI(63))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDC1</name></cpp:macro>		<cpp:value>(HI(61))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLT</name></cpp:macro>		<cpp:value>(HI(0) | LO(42))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLTI</name></cpp:macro>		<cpp:value>(HI(10))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLTIU</name></cpp:macro>		<cpp:value>(HI(11))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLTU</name></cpp:macro>		<cpp:value>(HI(0) | LO(43))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLL</name></cpp:macro>		<cpp:value>(HI(0) | LO(0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLLV</name></cpp:macro>		<cpp:value>(HI(0) | LO(4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRL</name></cpp:macro>		<cpp:value>(HI(0) | LO(2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRLV</name></cpp:macro>		<cpp:value>(HI(0) | LO(6))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRA</name></cpp:macro>		<cpp:value>(HI(0) | LO(3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRAV</name></cpp:macro>		<cpp:value>(HI(0) | LO(7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_S</name></cpp:macro>		<cpp:value>(HI(17) | FMT_S | LO(1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBU</name></cpp:macro>		<cpp:value>(HI(0) | LO(35))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SW</name></cpp:macro>		<cpp:value>(HI(43))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWC1</name></cpp:macro>		<cpp:value>(HI(57))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUNC_W_S</name></cpp:macro>	<cpp:value>(HI(17) | FMT_S | LO(13))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR</name></cpp:macro>		<cpp:value>(HI(0) | LO(38))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XORI</name></cpp:macro>		<cpp:value>(HI(14))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLZ</name></cpp:macro>		<cpp:value>(HI(28) | LO(32))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCLZ</name></cpp:macro>		<cpp:value>(LO(18))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCLZ</name></cpp:macro>		<cpp:value>(HI(28) | LO(36))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVF</name></cpp:macro>		<cpp:value>(HI(0) | (0 &lt;&lt; 16) | LO(1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVN</name></cpp:macro>		<cpp:value>(HI(0) | LO(11))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVT</name></cpp:macro>		<cpp:value>(HI(0) | (1 &lt;&lt; 16) | LO(1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVZ</name></cpp:macro>		<cpp:value>(HI(0) | LO(10))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name></cpp:macro>		<cpp:value>(HI(28) | LO(2))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREF</name></cpp:macro>		<cpp:value>(HI(51))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFX</name></cpp:macro>		<cpp:value>(HI(19) | LO(15))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEB</name></cpp:macro>		<cpp:value>(HI(31) | (16 &lt;&lt; 6) | LO(32))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEH</name></cpp:macro>		<cpp:value>(HI(31) | (24 &lt;&lt; 6) | LO(32))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDU_W</name></cpp:macro>		<cpp:value>ADDU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDIU_W</name></cpp:macro>		<cpp:value>ADDIU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLL_W</name></cpp:macro>		<cpp:value>SLL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBU_W</name></cpp:macro>		<cpp:value>SUBU</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDU_W</name></cpp:macro>		<cpp:value>DADDU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDIU_W</name></cpp:macro>		<cpp:value>DADDIU</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLL_W</name></cpp:macro>		<cpp:value>DSLL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBU_W</name></cpp:macro>		<cpp:value>DSUBU</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMM_MAX</name></cpp:macro>	<cpp:value>(0x7fff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMM_MIN</name></cpp:macro>	<cpp:value>(-0x8000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UIMM_MAX</name></cpp:macro>	<cpp:value>(0xffff)</cpp:value></cpp:define>

<comment type="block">/* dest_reg is the absolute name of the register
   Useful for reordering instructions in the delay slot. */</comment>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name></type> <name>ins</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>delay_slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>delay_slot</name> <operator>==</operator> <name>MOVABLE_INS</name> <operator>||</operator> <name>delay_slot</name> <operator>&gt;=</operator> <name>UNMOVABLE_INS</name>
		<operator>||</operator> <name>delay_slot</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>||</operator> <name>delay_slot</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>ins</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>ins</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>=</operator> <name>delay_slot</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_ins</name></type> <name>invert_branch</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IS_BIT26_COND</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">26</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IS_BIT23_COND</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
	<return>return <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_ins</name><modifier>*</modifier></type> <name>detect_jump_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>diff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>target_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>saved_inst</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_REWRITABLE_JUMP</name> <operator>|</operator> <name>IS_CALL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>code_ptr</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>code_ptr</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_ADDR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>target_addr</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>target_addr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>executable_offset</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_CALL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>keep_address</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* B instructions. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_MOVABLE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>target_addr</name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>inst</name> <operator>-</operator> <name>executable_offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>inst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_JAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>BAL</name></expr> </then><else>: <expr><name>B</name></expr></else></ternary></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<return>return <expr><name>inst</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>saved_inst</name> <operator>=</operator> <name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>saved_inst</name> <operator>^</operator> <call><name>invert_branch</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<return>return <expr><name>inst</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>target_addr</name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>inst</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>executable_offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_JAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>BAL</name></expr> </then><else>: <expr><name>B</name></expr></else></ternary></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
				<return>return <expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <call><name>invert_branch</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<return>return <expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_MOVABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>target_addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_J</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>saved_inst</name> <operator>=</operator> <name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>saved_inst</name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>J</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
			<return>return <expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>target_addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_J</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>J</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<return>return <expr><name>inst</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* J instuctions. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_MOVABLE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>target_addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_J</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_JAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>JAL</name></expr> </then><else>: <expr><name>J</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<return>return <expr><name>inst</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>target_addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_J</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_JAL</name><operator>)</operator></expr> ?</condition><then> <expr><name>JAL</name></expr> </then><else>: <expr><name>J</name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
			<return>return <expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
<label><name>keep_address</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>target_addr</name> <operator>&lt;=</operator> <literal type="number">0x7fffffff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_ABS32</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><name>inst</name> <operator>+</operator> <literal type="number">3</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>target_addr</name> <operator>&lt;=</operator> <literal type="number">0x7fffffffffffl</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_ABS48</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>inst</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><name>inst</name> <operator>+</operator> <literal type="number">5</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>code_ptr</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
<expr_stmt><expr><specifier>static</specifier> <macro><name>__attribute__</name> <argument_list>(<argument>(noinline)</argument>)</argument_list></macro> <name>void</name> <macro><name>sljit_cache_flush</name><argument_list>(<argument>void* code</argument>, <argument>void* code_ptr</argument>)</argument_list></macro>
<block>{
	<expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>

<specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_sw</name> <macro><name>put_label_get_length</name><argument_list>(<argument>struct sljit_put_label *put_label</argument>, <argument>sljit_uw max_label</argument>)</argument_list></macro>
<block>{
	<if_stmt><if>if <condition>(<expr><name>max_label</name> <operator>&lt;</operator> <literal type="number">0x80000000l</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_label</name> <operator>&lt;</operator> <literal type="number">0x800000000000l</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">3</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">5</literal></expr>;</return>
}

static <function><type><name>SLJIT_INLINE</name> <name>void</name></type> <name>put_label_set</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>addr</name> <init>= <expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name> <init>= <expr><operator>*</operator><name>inst</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;</operator> <literal type="number">0x80000000l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>LUI</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;</operator> <literal type="number">0x800000000000l</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>LUI</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>DSLL</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>LUI</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>DSLL</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>DSLL</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_generate_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>word_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>next_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>addr</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_generate_code</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC_EXEC</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_WITH_EXEC_IF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>word_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>executable_offset</name> <operator>=</operator> <call><name>SLJIT_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>labels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>consts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>memory</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf_ptr</name> <operator>+</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>next_addr</name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name> <operator>||</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name> <operator>||</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name> <operator>||</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name> <operator>||</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* These structures are ordered by their address. */</comment>
				<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>jump</name> <operator>&amp;&amp;</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
					<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
					<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>-</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <call><name>detect_jump_type</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>const_</name> <operator>&amp;&amp;</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>const_</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>put_label</name> <operator>&amp;&amp;</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
					<expr_stmt><expr><name>code_ptr</name> <operator>+=</operator> <call><name>put_label_get_length</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>word_count</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <call><name>compute_next_addr</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>const_</name></expr></argument>, <argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>code_ptr</name> <operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_count</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>buf_ptr</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition>;</do>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>buf</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>-</operator> <name>code</name> <operator>&lt;=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>jump</name></expr>)</condition> <block>{<block_content>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_B</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_J</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>addr</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfffffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03ffffff</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Set the fields of immediate loads. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS32</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x7fffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS48</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x7fffffffffffl</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>put_label</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffe00000</literal><operator>)</operator> <operator>==</operator> <name>LUI</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfc000000</literal><operator>)</operator> <operator>==</operator> <name>ORI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>put_label_set</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_COMPILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_size</name></name> <operator>=</operator> <operator>(</operator><name>code_ptr</name> <operator>-</operator> <name>code</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__GNUC__</name></cpp:ifndef>
	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* GCC workaround for invalid code generation with -O2. */</comment>
	<expr_stmt><expr><call><name>sljit_cache_flush</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_has_cpu_feature</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>feature_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>fir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>feature_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_HAS_FPU</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SLJIT_IS_FPU_AVAILABLE</name></cpp:ifdef>
		<return>return <expr><name>SLJIT_IS_FPU_AVAILABLE</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<asm>__asm__ ("cfc1 %0, $0" : "=r"(fir));</asm>
		<return>return <expr><operator>(</operator><name>fir</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"FIR check is not implemented for this architecture"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<case>case <expr><name>SLJIT_HAS_ZERO_REGISTER</name></expr>:</case>
		<return>return <expr><literal type="number">1</literal></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
	<case>case <expr><name>SLJIT_HAS_CLZ</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_CMOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_PREFETCH</name></expr>:</case>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>

	<default>default:</default>
		<return>return <expr><name>fir</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Entry, exit                                                          */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* Creates an index in data_transfer_insts array. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_DATA</name></cpp:macro>	<cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_DATA</name></cpp:macro>	<cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_DATA</name></cpp:macro>	<cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_DATA</name></cpp:macro>	<cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_DATA</name></cpp:macro>	<cpp:value>0x06</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED_DATA</name></cpp:macro>	<cpp:value>0x08</cpp:value></cpp:define>
<comment type="block">/* Separates integer and floating point registers */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPR_REG</name></cpp:macro>		<cpp:value>0x0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUBLE_DATA</name></cpp:macro>	<cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SINGLE_DATA</name></cpp:macro>	<cpp:value>0x12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_MASK</name></cpp:macro>	<cpp:value>0x1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_TEST</name></cpp:macro>	<cpp:value>0x00020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALT_KEEP_CACHE</name></cpp:macro>	<cpp:value>0x00040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUMULATIVE_OP</name></cpp:macro>	<cpp:value>0x00080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGICAL_OP</name></cpp:macro>	<cpp:value>0x00100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMM_OP</name></cpp:macro>		<cpp:value>0x00200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC2_IMM</name></cpp:macro>	<cpp:value>0x00400</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_DEST</name></cpp:macro>	<cpp:value>0x00800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_DEST</name></cpp:macro>	<cpp:value>0x01000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG1_SOURCE</name></cpp:macro>	<cpp:value>0x02000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG2_SOURCE</name></cpp:macro>	<cpp:value>0x04000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOW_SRC1</name></cpp:macro>	<cpp:value>0x08000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOW_SRC2</name></cpp:macro>	<cpp:value>0x10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOW_DEST</name></cpp:macro>	<cpp:value>0x20000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_STORE</name></cpp:macro>	<cpp:value>SW</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_LOAD</name></cpp:macro>	<cpp:value>LW</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_STORE</name></cpp:macro>	<cpp:value>SD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_LOAD</name></cpp:macro>	<cpp:value>LD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_op_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg_ar</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeMIPS_32.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeMIPS_64.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>base</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>args</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_size</name> <operator>+=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>SLJIT_LOCALS_OFFSET</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>local_size</name> <operator>=</operator> <operator>(</operator><name>local_size</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>local_size</name> <operator>=</operator> <operator>(</operator><name>local_size</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x1f</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <name>local_size</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&lt;=</operator> <name>SIMM_MAX</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Frequent case. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>=</operator> <name>local_size</name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>local_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_STORE</name> <operator>|</operator> <name>base</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name>saveds</name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>saveds</name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_S0</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>offs</name> <operator>-=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_STORE</name> <operator>|</operator> <name>base</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>scratches</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>offs</name> <operator>-=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_STORE</name> <operator>|</operator> <name>base</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>get_arg_count</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_S0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_S0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_S1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_S1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_S2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_S2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_set_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_size</name> <operator>+=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>SLJIT_LOCALS_OFFSET</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <operator>(</operator><name>local_size</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <operator>(</operator><name>local_size</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x1f</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_return</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>base</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_before_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>local_size</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&lt;=</operator> <name>SIMM_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>local_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_LOAD</name> <operator>|</operator> <name>base</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>local_size</name> <operator>-</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offs</name> <operator>=</operator> <name>local_size</name> <operator>-</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_LOAD</name> <operator>|</operator> <name>base</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>+=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>tmp</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SLJIT_S0</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STACK_LOAD</name> <operator>|</operator> <name>base</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>offs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>+=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>offs</name> <operator>==</operator> <name>local_size</name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JR</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>&lt;=</operator> <name>SIMM_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_STORE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STACK_LOAD</name></cpp:undef>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Operators                                                            */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_32_64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>a</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARCH_32_64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>b</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_ins</name></type> <name><name>data_transfer_insts</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
<comment type="block">/* u w s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* sw */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* sd */</comment>)</argument_list></call></expr>,
<comment type="block">/* u w l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lw */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* ld */</comment>)</argument_list></call></expr>,
<comment type="block">/* u b s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sb */</comment>,
<comment type="block">/* u b l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lbu */</comment>,
<comment type="block">/* u h s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sh */</comment>,
<comment type="block">/* u h l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lhu */</comment>,
<comment type="block">/* u i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sw */</comment>,
<comment type="block">/* u i l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lw */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lwu */</comment>)</argument_list></call></expr>,

<comment type="block">/* s w s */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* sw */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* sd */</comment>)</argument_list></call></expr>,
<comment type="block">/* s w l */</comment> <expr><call><name>ARCH_32_64</name><argument_list>(<argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* lw */</comment>, <argument><expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block">/* ld */</comment>)</argument_list></call></expr>,
<comment type="block">/* s b s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sb */</comment>,
<comment type="block">/* s b l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lb */</comment>,
<comment type="block">/* s h s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sh */</comment>,
<comment type="block">/* s h l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lh */</comment>,
<comment type="block">/* s i s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sw */</comment>,
<comment type="block">/* s i l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lw */</comment>,

<comment type="block">/* d   s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* sdc1 */</comment>,
<comment type="block">/* d   l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* ldc1 */</comment>,
<comment type="block">/* s   s */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* swc1 */</comment>,
<comment type="block">/* s   l */</comment> <expr><call><name>HI</name><argument_list>(<argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr> <comment type="block">/* lwc1 */</comment>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ARCH_32_64</name></cpp:undef>

<comment type="block">/* reg_ar is an absoulute register! */</comment>

<comment type="block">/* Can perform an operation using at most 1 instruction. */</comment>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>getput_arg_fast</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg_ar</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Works for both absoulte and relative addresses. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <name>ARG_TEST</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call>
			<operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name><operator>)</operator> <operator>&lt;=</operator> <name>GPR_REG</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOAD_DATA</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>reg_ar</name></expr> </then><else>: <expr><name>MOVABLE_INS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* See getput_arg below.
   Note: can_cache is called only for binary operators. Those
   operators always uses word arguments without write back. */</comment>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>can_cache</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>next_arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>next_argw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>next_arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Simple operation except for updates. */</comment>
	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_argw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>==</operator> <name>next_argw</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>arg</name> <operator>==</operator> <name>next_arg</name> <operator>||</operator> <operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>next_arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>next_arg</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>next_argw</name> <operator>-</operator> <name>argw</name><operator>)</operator> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>next_argw</name> <operator>-</operator> <name>argw</name><operator>)</operator> <operator>&gt;=</operator> <name>SIMM_MIN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Emit the necessary instructions. See can_cache above. */</comment>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>getput_arg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg_ar</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>next_arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>next_argw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>tmp_ar</name></decl>, <decl><type ref="prev"/><name>base</name></decl>, <decl><type ref="prev"/><name>delay_slot</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>next_arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next_arg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_argw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name><operator>)</operator> <operator>&lt;=</operator> <name>GPR_REG</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOAD_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp_ar</name> <operator>=</operator> <name>reg_ar</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>delay_slot</name> <operator>=</operator> <name>reg_ar</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>tmp_ar</name> <operator>=</operator> <call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>delay_slot</name> <operator>=</operator> <name>MOVABLE_INS</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>base</name> <operator>=</operator> <name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

		<comment type="block">/* Using the cache. */</comment>
		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>SLJIT_MEM</name> <operator>|</operator> <operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>next_arg</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>==</operator> <operator>(</operator><name>next_argw</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <name>argw</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <name>SLJIT_MEM</name> <operator>|</operator> <operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <name>argw</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL_W</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>next_arg</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>==</operator> <operator>(</operator><name>next_argw</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <name>argw</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name>argw</name></expr> ?</condition><then> <expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>TMP_REG3</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp_ar</name> <operator>=</operator> <call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><ternary><condition><expr><operator>!</operator><name>argw</name></expr> ?</condition><then> <expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>TMP_REG3</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>==</operator> <name>arg</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>!=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>argw</name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <name>argw</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>==</operator> <name>SLJIT_MEM</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>argw</name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>!=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>argw</name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <name>SLJIT_MEM</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <name>argw</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>base</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>next_arg</name> <operator>&amp;&amp;</operator> <name>next_argw</name> <operator>-</operator> <name>argw</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>next_argw</name> <operator>-</operator> <name>argw</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_op_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg_ar</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>tmp_ar</name></decl>, <decl><type ref="prev"/><name>base</name></decl>, <decl><type ref="prev"/><name>delay_slot</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>getput_arg_fast</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>reg_ar</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name><operator>)</operator> <operator>&lt;=</operator> <name>GPR_REG</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOAD_DATA</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp_ar</name> <operator>=</operator> <name>reg_ar</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>delay_slot</name> <operator>=</operator> <name>reg_ar</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>tmp_ar</name> <operator>=</operator> <call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>delay_slot</name> <operator>=</operator> <name>MOVABLE_INS</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>base</name> <operator>=</operator> <name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL_W</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_ar</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>base</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>flags</name> <operator>&amp;</operator> <name>MEM_MASK</name></expr>]</index></name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>tmp_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>reg_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delay_slot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_op_mem2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>arg1w</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>arg2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>getput_arg_fast</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg1w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg1w</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg2w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* arg1 goes to TMP_REG1 or src reg
	   arg2 goes to TMP_REG2, imm or src reg
	   TMP_REG3 can be used for caching
	   result goes to TMP_REG2, so put result can use TMP_REG1 and TMP_REG3. */</comment>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><name>TMP_REG2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src1_r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>src2_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>sugg_src2_r</name> <init>= <expr><name>TMP_REG2</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_KEEP_CACHE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>UNUSED_DEST</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG_DEST</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sugg_src2_r</name> <operator>=</operator> <name>dst_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getput_arg_fast</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>ARG_TEST</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SLOW_DEST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IMM_OP</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src2w</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOGICAL_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>src2w</name> <operator>&gt;=</operator> <name>SIMM_MIN</name><operator>)</operator><operator>)</operator>
				<operator>||</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOGICAL_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>src2w</name> <operator>&amp;</operator> <operator>~</operator><name>UIMM_MAX</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SRC2_IMM</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CUMULATIVE_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src1w</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOGICAL_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1w</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>src1w</name> <operator>&gt;=</operator> <name>SIMM_MIN</name><operator>)</operator><operator>)</operator>
				<operator>||</operator> <operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LOGICAL_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>src1w</name> <operator>&amp;</operator> <operator>~</operator><name>UIMM_MAX</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SRC2_IMM</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <name>src1w</name></expr>;</expr_stmt>

				<comment type="block">/* And swap arguments. */</comment>
				<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>SLJIT_IMM</name></expr>;</expr_stmt>
				<comment type="block">/* src2w = src2_r unneeded. */</comment>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Source 1. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>src1_r</name> <operator>=</operator> <name>src1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG1_SOURCE</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src1w</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src1_r</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>src1_r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>getput_arg_fast</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SLOW_SRC1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>src1_r</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Source 2. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>REG2_SOURCE</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REG_DEST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src2_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>src2w</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>sugg_src2_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <name>sugg_src2_r</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>getput_arg_fast</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>sugg_src2_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SLOW_SRC2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>src2_r</name> <operator>=</operator> <name>sugg_src2_r</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SLOW_SRC1</name> <operator>|</operator> <name>SLOW_SRC2</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>SLOW_SRC1</name> <operator>|</operator> <name>SLOW_SRC2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2_r</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_cache</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>can_cache</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SLOW_SRC1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SLOW_SRC2</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>sugg_src2_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_single_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src1_r</name></expr></argument>, <argument><expr><name>src2_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SLOW_DEST</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>getput_arg_fast</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>int_op</name> <init>= <expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op0</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_BREAKPOINT</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BREAK</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_NOP</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_LMUL_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_LMUL_SW</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>DMULU</name></expr> </then><else>: <expr><name>DMUL</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>DMUHU</name></expr> </then><else>: <expr><name>DMUH</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_MIPS_64 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>MULU</name></expr> </then><else>: <expr><name>MUL</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>MUHU</name></expr> </then><else>: <expr><name>MUH</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_MIPS_64 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>DMULTU</name></expr> </then><else>: <expr><name>DMULT</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_MIPS_64 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>MULTU</name></expr> </then><else>: <expr><name>MULT</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_MIPS_64 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFLO</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFHI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
	<case>case <expr><name>SLJIT_DIVMOD_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIVMOD_SW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_SW</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>SLJIT_DIVMOD_UW</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SLJIT_DIV_UW</name> <operator>-</operator> <literal type="number">0x2</literal> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr></argument>, <argument><expr><name>bad_div_opcode_assignments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>int_op</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DIVU</name></expr> </then><else>: <expr><name>DIV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>MODU</name></expr> </then><else>: <expr><name>MOD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DDIVU</name></expr> </then><else>: <expr><name>DDIV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DMODU</name></expr> </then><else>: <expr><name>DMOD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_MIPS_64 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DIVU</name></expr> </then><else>: <expr><name>DIV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>MODU</name></expr> </then><else>: <expr><name>MOD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_MIPS_64 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG3</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIV_UW</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLJIT_SUCCESS</name></expr> </then><else>: <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !SLJIT_MIPS_REV */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>int_op</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DIVU</name></expr> </then><else>: <expr><name>DIV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DDIVU</name></expr> </then><else>: <expr><name>DDIV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_MIPS_64 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>DIVU</name></expr> </then><else>: <expr><name>DIV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_MIPS_64 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFLO</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIV_UW</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLJIT_SUCCESS</name></expr> </then><else>: <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFHI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
	<case>case <expr><name>SLJIT_ENDBR</name></expr>:</case>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_prefetch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
        <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>srcw</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>srcw</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PREF</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PREFX</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>srcw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>srcw</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL_W</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PREFX</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PREFX</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>flags</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_NOT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_U32</name></expr></argument>, <argument><expr><name>INT_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_U32</name></expr></argument>, <argument><expr><name>INT_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_u32</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_S32</name></expr></argument>, <argument><expr><name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_S32</name></expr></argument>, <argument><expr><name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_U8</name></expr></argument>, <argument><expr><name>BYTE_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_u8</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_S8</name></expr></argument>, <argument><expr><name>BYTE_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_s8</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_U16</name></expr></argument>, <argument><expr><name>HALF_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_u16</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_S16</name></expr></argument>, <argument><expr><name>HALF_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_s16</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_NEG</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name> <operator>|</operator> <call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>IMM_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:undef>#	<cpp:directive>undef</cpp:directive> <name>flags</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>flags</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>src1w</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>src1w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>src2w</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>src2w</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>CUMULATIVE_OP</name> <operator>|</operator> <name>IMM_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>IMM_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>CUMULATIVE_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>CUMULATIVE_OP</name> <operator>|</operator> <name>LOGICAL_OP</name> <operator>|</operator> <name>IMM_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>src2w</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>src2w</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>src2w</name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>IMM_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:undef>#	<cpp:directive>undef</cpp:directive> <name>flags</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_src</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_FAST_RETURN</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>RETURN_ADDR_REG</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JR</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_FAST_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	<case>case <expr><name>SLJIT_PREFETCH_L1</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L2</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L3</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_ONCE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
		<return>return <expr><call><name>emit_prefetch</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 1 */</comment>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_float_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_float_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>FR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_custom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_custom</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name>instruction</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Floating point operators                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOAT_DATA</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(DOUBLE_DATA | ((op &amp; SLJIT_F32_OP) &gt;&gt; 7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((op &amp; SLJIT_F32_OP) ^ SLJIT_F32_OP) &lt;&lt; (21 - 8))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_sw_from_f64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>flags</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_SW_FROM_F64</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>TRUNC_W_S</name> <operator>^</operator> <operator>(</operator><name>flags</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFC1</name> <operator>|</operator> <name>flags</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Store the integer value from a VFP register. */</comment>
	<return>return <expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><ternary><condition><expr><name>flags</name></expr> ?</condition><then> <expr><name>DOUBLE_DATA</name></expr> </then><else>: <expr><name>SINGLE_DATA</name></expr></else></ternary></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:undef>#	<cpp:directive>undef</cpp:directive> <name>is_long</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_f64_from_sw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>flags</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_SW</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">21</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTC1</name> <operator>|</operator> <name>flags</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Load the integer value into a VFP register. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name><operator>)</operator></expr> ?</condition><then> <expr><name>DOUBLE_DATA</name></expr> </then><else>: <expr><name>SINGLE_DATA</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_S32</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MTC1</name> <operator>|</operator> <name>flags</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CVT_S_S</name> <operator>|</operator> <name>flags</name> <operator>|</operator> <operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>^</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:undef>#	<cpp:directive>undef</cpp:directive> <name>flags</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inst</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>C_UEQ_S</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>C_ULT_S</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>C_ULE_S</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_UNORDERED_F64</name> <operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_ORDERED_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>C_UN_S</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FT</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>C_FD</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>SLJIT_F32_OP</name> <operator>==</operator> <literal type="number">0x100</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>DOUBLE_DATA</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator></expr></argument>, <argument><expr><name>float_transfer_bit_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT_FOP1_OPERATION_WITH_CHECKS</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_F32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dst_r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV_F64</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>dst_r</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>TMP_FREG1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_S</name> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NEG_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NEG_S</name> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_ABS_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ABS_S</name> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_CONV_F64_FROM_F32</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CVT_S_S</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fop2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG2</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>getput_arg_fast</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SLOW_SRC1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>getput_arg_fast</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SLOW_SRC2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SLOW_SRC1</name> <operator>|</operator> <name>SLOW_SRC2</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>SLOW_SRC1</name> <operator>|</operator> <name>SLOW_SRC2</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>can_cache</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>can_cache</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SLOW_SRC1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SLOW_SRC2</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>getput_arg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SLOW_SRC1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SLOW_SRC2</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD_S</name> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FT</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_SUB_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB_S</name> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FT</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_MUL_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MUL_S</name> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FT</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_DIV_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DIV_S</name> <operator>|</operator> <call><name>FMT</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FT</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_FREG2</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>FLOAT_DATA</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>FR</name><argument_list>(<argument><expr><name>TMP_FREG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Other instructions                                                   */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fast_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fast_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Memory. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>RETURN_ADDR_REG</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>=</operator> <name>UNMOVABLE_INS</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Conditional instructions                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>sljit_emit_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>=</operator> <name>UNMOVABLE_INS</name></expr>;</expr_stmt>
	<return>return <expr><name>label</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_LENGTH</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_LENGTH</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_Z</name><parameter_list>(<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>inst = BEQ | SA(src) | TA(0) | JUMP_LENGTH; \
	flags = IS_BIT26_COND; \
	delay_check = src;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_NZ</name><parameter_list>(<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>inst = BNE | SA(src) | TA(0) | JUMP_LENGTH; \
	flags = IS_BIT26_COND; \
	delay_check = src;</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_T</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>inst = BC1NEZ; \
	flags = IS_BIT23_COND; \
	delay_check = FCSR_FCC;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_F</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>inst = BC1EQZ; \
	flags = IS_BIT23_COND; \
	delay_check = FCSR_FCC;</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_T</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>inst = BC1T | JUMP_LENGTH; \
	flags = IS_BIT16_COND; \
	delay_check = FCSR_FCC;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR_F</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>inst = BC1F | JUMP_LENGTH; \
	flags = IS_BIT16_COND; \
	delay_check = FCSR_FCC;</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>delay_check</name> <init>= <expr><name>UNMOVABLE_INS</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
		<expr_stmt><expr><call><name>BR_NZ</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
		<expr_stmt><expr><call><name>BR_Z</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
		<expr_stmt><expr><call><name>BR_Z</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
		<expr_stmt><expr><call><name>BR_NZ</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>BR_T</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>BR_F</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<comment type="block">/* Not conditional branch. */</comment>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>flags</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>==</operator> <name>MOVABLE_INS</name> <operator>||</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>!=</operator> <name>UNMOVABLE_INS</name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>!=</operator> <name>delay_check</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_MOVABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>inst</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_JAL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JALR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>jump</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESOLVE_IMM1</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>if (src1 &amp; SLJIT_IMM) { \
		if (src1w) { \
			PTR_FAIL_IF(load_immediate(compiler, DR(TMP_REG1), src1w)); \
			src1 = TMP_REG1; \
		} \
		else \
			src1 = 0; \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESOLVE_IMM2</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>if (src2 &amp; SLJIT_IMM) { \
		if (src2w) { \
			PTR_FAIL_IF(load_immediate(compiler, DR(TMP_REG2), src2w)); \
			src2 = TMP_REG2; \
		} \
		else \
			src2 = 0; \
	}</cpp:value></cpp:define>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_cmp</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_DATA</name></expr> </then><else>: <expr><name>WORD_DATA</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>LOAD_DATA</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_NOT_EQUAL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>RESOLVE_IMM1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RESOLVE_IMM2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT26_COND</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>==</operator> <name>MOVABLE_INS</name> <operator>||</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>!=</operator> <name>UNMOVABLE_INS</name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>!=</operator> <call><name>DR</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>!=</operator> <call><name>DR</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_MOVABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>SLJIT_EQUAL</name></expr> ?</condition><then> <expr><name>BNE</name></expr> </then><else>: <expr><name>BEQ</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>JUMP_LENGTH</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_SIG_LESS</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1w</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1w</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RESOLVE_IMM2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>BLEZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT26_COND</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>BGTZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT26_COND</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>BGEZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT16_COND</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>BLTZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT16_COND</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>RESOLVE_IMM1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>BGEZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT16_COND</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>BLTZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT16_COND</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>BLEZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT26_COND</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>BGTZ</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT26_COND</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>JUMP_LENGTH</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SLJIT_LESS</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SLJIT_GREATER_EQUAL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SLJIT_SIG_LESS</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SLJIT_SIG_GREATER_EQUAL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>RESOLVE_IMM1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src2w</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>src2w</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_LESS_EQUAL</name></expr> ?</condition><then> <expr><name>SLTIU</name></expr> </then><else>: <expr><name>SLTI</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>RESOLVE_IMM2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_LESS_EQUAL</name></expr> ?</condition><then> <expr><name>SLTU</name></expr> </then><else>: <expr><name>SLT</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>SLJIT_LESS</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SLJIT_SIG_LESS</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLJIT_NOT_EQUAL</name></expr> </then><else>: <expr><name>SLJIT_EQUAL</name></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>RESOLVE_IMM2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src1w</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>src1w</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_LESS_EQUAL</name></expr> ?</condition><then> <expr><name>SLTIU</name></expr> </then><else>: <expr><name>SLTI</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>RESOLVE_IMM1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_LESS_EQUAL</name></expr> ?</condition><then> <expr><name>SLTU</name></expr> </then><else>: <expr><name>SLT</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>SLJIT_GREATER</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SLJIT_SIG_GREATER</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLJIT_NOT_EQUAL</name></expr> </then><else>: <expr><name>SLJIT_EQUAL</name></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BIT26_COND</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>==</operator> <name>SLJIT_EQUAL</name></expr> ?</condition><then> <expr><name>BNE</name></expr> </then><else>: <expr><name>BEQ</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <name>JUMP_LENGTH</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>jump</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RESOLVE_IMM1</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>RESOLVE_IMM2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JUMP_LENGTH</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BR_Z</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BR_NZ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BR_T</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BR_F</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FLOAT_DATA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FMT</name></cpp:undef>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_ijump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JUMP_ADDR</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>IS_JAL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>srcw</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>!=</operator> <name>UNMOVABLE_INS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_MOVABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>jump</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src_ar</name></decl>, <decl><type ref="prev"/><name>dst_ar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>saved_op</name> <init>= <expr><name>op</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>mem_type</name> <init>= <expr><name>WORD_DATA</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>mem_type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name><operator>)</operator></expr> </then><else>: <expr><name>WORD_DATA</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mem_type</name> <operator>=</operator> <name>INT_DATA</name> <operator>|</operator> <name>SIGNED_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>dst_ar</name> <operator>=</operator> <call><name>DR</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&lt;</operator> <name>SLJIT_ADD</name> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_arg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cache_argw</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_ADD</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_type</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src_ar</name> <operator>=</operator> <name>dst_ar</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src_ar</name> <operator>=</operator> <name>dst_ar</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>type</name> <operator>^=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt> <comment type="block">/* Flip type bit for the XORI below. */</comment>
		<break>break;</break>
	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
		<expr_stmt><expr><name>type</name> <operator>^=</operator> <literal type="number">0x1</literal></expr>;</expr_stmt> <comment type="block">/* Flip type bit for the XORI below. */</comment>
	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFC1</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>TMP_FREG3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CFC1</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>FCSR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRL</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDI</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src_ar</name> <operator>=</operator> <name>dst_ar</name></expr>;</expr_stmt>
		<break>break;</break>

	<default>default:</default>
		<expr_stmt><expr><name>src_ar</name> <operator>=</operator> <name>OTHER_FLAG</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORI</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>src_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src_ar</name> <operator>=</operator> <name>dst_ar</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>SLJIT_ADD</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_type</name></expr></argument>, <argument><expr><name>src_ar</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>src_ar</name> <operator>!=</operator> <name>dst_ar</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>src_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* OTHER_FLAG cannot be specified as src2 argument at the moment. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>src_ar</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU_W</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>src_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mem_type</name> <operator>|=</operator> <name>CUMULATIVE_OP</name> <operator>|</operator> <name>LOGICAL_OP</name> <operator>|</operator> <name>IMM_OP</name> <operator>|</operator> <name>ALT_KEEP_CACHE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>saved_op</name></expr></argument>, <argument><expr><name>mem_type</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>saved_op</name></expr></argument>, <argument><expr><name>mem_type</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_cmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>ins</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 &amp;&amp; SLJIT_MIPS_REV &lt; 6 */</comment>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_cmov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>dst_reg</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>srcw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dst_reg</name> <operator>&amp;=</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOVZ</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOVN</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOVN</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOVZ</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOVT</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOVF</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOVZ</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ins</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 1 || SLJIT_MIPS_REV &gt;= 6 */</comment>
	<return>return <expr><call><name>sljit_emit_cmov_generic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_const</name></name><modifier>*</modifier></type> <name>sljit_emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>const_</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_const</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_const</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_const</name><argument_list>(<argument><expr><name>const_</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>const_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_put_label</name></name><modifier>*</modifier></type> <name>sljit_emit_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_put_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_put_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_put_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_put_label</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>WORD_DATA</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>put_label</name></expr>;</return>
</block_content>}</block></function>
</unit>
