<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativeARM_64.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sljit_get_platform_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"ARM-64"</literal> <name>SLJIT_CPUINFO</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Length of an instruction word */</comment>
<typedef>typedef <type><name>sljit_u32</name></type> <name>sljit_ins</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_ZERO</name></cpp:macro>	<cpp:value>(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_LR</name></cpp:macro>		<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FP</name></cpp:macro>		<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 2)</cpp:value></cpp:define>

<comment type="block">/* r18 - platform register, currently not used */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">31</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">29</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>freg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W_OP</name></cpp:macro> <cpp:value>(1u &lt;&lt; 31)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RD</name><parameter_list>(<parameter><type><name>rd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rd])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT</name><parameter_list>(<parameter><type><name>rt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rt])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RN</name><parameter_list>(<parameter><type><name>rn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rn] &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT2</name><parameter_list>(<parameter><type><name>rt2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rt2] &lt;&lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM</name><parameter_list>(<parameter><type><name>rm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rm] &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VD</name><parameter_list>(<parameter><type><name>vd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(freg_map[vd])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VT</name><parameter_list>(<parameter><type><name>vt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(freg_map[vt])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VN</name><parameter_list>(<parameter><type><name>vn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(freg_map[vn] &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VM</name><parameter_list>(<parameter><type><name>vm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(freg_map[vm] &lt;&lt; 16)</cpp:value></cpp:define>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Instrucion forms                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADC</name></cpp:macro> <cpp:value>0x9a000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name></cpp:macro> <cpp:value>0x8b000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDE</name></cpp:macro> <cpp:value>0x8b200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDI</name></cpp:macro> <cpp:value>0x91000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND</name></cpp:macro> <cpp:value>0x8a000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDI</name></cpp:macro> <cpp:value>0x92000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASRV</name></cpp:macro> <cpp:value>0x9ac02800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>0x14000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_CC</name></cpp:macro> <cpp:value>0x54000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL</name></cpp:macro> <cpp:value>0x94000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLR</name></cpp:macro> <cpp:value>0xd63f0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR</name></cpp:macro> <cpp:value>0xd61f0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRK</name></cpp:macro> <cpp:value>0xd4200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CBZ</name></cpp:macro> <cpp:value>0xb4000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLZ</name></cpp:macro> <cpp:value>0xdac01000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSEL</name></cpp:macro> <cpp:value>0x9a800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSINC</name></cpp:macro> <cpp:value>0x9a800400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOR</name></cpp:macro> <cpp:value>0xca000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EORI</name></cpp:macro> <cpp:value>0xd2000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FABS</name></cpp:macro> <cpp:value>0x1e60c000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FADD</name></cpp:macro> <cpp:value>0x1e602800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCMP</name></cpp:macro> <cpp:value>0x1e602000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCVT</name></cpp:macro> <cpp:value>0x1e224000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCVTZS</name></cpp:macro> <cpp:value>0x9e780000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIV</name></cpp:macro> <cpp:value>0x1e601800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMOV</name></cpp:macro> <cpp:value>0x1e604000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMUL</name></cpp:macro> <cpp:value>0x1e600800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNEG</name></cpp:macro> <cpp:value>0x1e614000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSUB</name></cpp:macro> <cpp:value>0x1e603800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDRI</name></cpp:macro> <cpp:value>0xf9400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDP</name></cpp:macro> <cpp:value>0xa9400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDP_PRE</name></cpp:macro> <cpp:value>0xa9c00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDR_PRE</name></cpp:macro> <cpp:value>0xf8400c00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSLV</name></cpp:macro> <cpp:value>0x9ac02000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSRV</name></cpp:macro> <cpp:value>0x9ac02400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MADD</name></cpp:macro> <cpp:value>0x9b000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVK</name></cpp:macro> <cpp:value>0xf2800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVN</name></cpp:macro> <cpp:value>0x92800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVZ</name></cpp:macro> <cpp:value>0xd2800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro> <cpp:value>0xd503201f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORN</name></cpp:macro> <cpp:value>0xaa200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORR</name></cpp:macro> <cpp:value>0xaa000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORRI</name></cpp:macro> <cpp:value>0xb2000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET</name></cpp:macro> <cpp:value>0xd65f0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC</name></cpp:macro> <cpp:value>0xda000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBFM</name></cpp:macro> <cpp:value>0x93000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCVTF</name></cpp:macro> <cpp:value>0x9e620000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SDIV</name></cpp:macro> <cpp:value>0x9ac00c00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMADDL</name></cpp:macro> <cpp:value>0x9b200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMULH</name></cpp:macro> <cpp:value>0x9b403c00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STP</name></cpp:macro> <cpp:value>0xa9000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STP_PRE</name></cpp:macro> <cpp:value>0xa9800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRB</name></cpp:macro> <cpp:value>0x38206800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRBI</name></cpp:macro> <cpp:value>0x39000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRI</name></cpp:macro> <cpp:value>0xf9000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_FI</name></cpp:macro> <cpp:value>0x3d000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_FR</name></cpp:macro> <cpp:value>0x3c206800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STUR_FI</name></cpp:macro> <cpp:value>0x3c000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STURBI</name></cpp:macro> <cpp:value>0x38000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB</name></cpp:macro> <cpp:value>0xcb000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBI</name></cpp:macro> <cpp:value>0xd1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBS</name></cpp:macro> <cpp:value>0xeb000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UBFM</name></cpp:macro> <cpp:value>0xd3000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDIV</name></cpp:macro> <cpp:value>0x9ac00800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMULH</name></cpp:macro> <cpp:value>0x9bc03c00</cpp:value></cpp:define>

<comment type="block">/* dest_reg is the absolute name of the register
   Useful for reordering instructions in the delay slot. */</comment>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name></type> <name>ins</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>ins</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_imm64_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVZ</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVK</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVK</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVK</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_sw</name></type> <name>detect_jump_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>diff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>target_addr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_ABS64</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_ADDR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>target_addr</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>target_addr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>executable_offset</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>target_addr</name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>executable_offset</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>diff</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0xfffff</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x100000</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>^=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_CBZ</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">0x1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0x1</literal></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_COND</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">5</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>diff</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0x7ffffff</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x8000000</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">4</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>target_addr</name> <operator>&lt;</operator> <literal type="number">0x100000000l</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">2</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>target_addr</name> <operator>&lt;</operator> <literal type="number">0x1000000000000l</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_ABS48</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_ABS64</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_sw</name></type> <name>put_label_get_length</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>max_label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>max_label</name> <operator>&lt;</operator> <literal type="number">0x100000000l</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">2</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_label</name> <operator>&lt;</operator> <literal type="number">0x1000000000000l</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_generate_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>code_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>word_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>next_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_generate_code</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC_EXEC</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_WITH_EXEC_IF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>word_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>executable_offset</name> <operator>=</operator> <call><name>SLJIT_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>labels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>consts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>memory</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf_ptr</name> <operator>+</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>next_addr</name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name> <operator>||</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name> <operator>||</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name> <operator>||</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name> <operator>||</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* These structures are ordered by their address. */</comment>
				<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>jump</name> <operator>&amp;&amp;</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>code_ptr</name> <operator>-=</operator> <call><name>detect_jump_type</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>const_</name> <operator>&amp;&amp;</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>const_</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>put_label</name> <operator>&amp;&amp;</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>code_ptr</name> <operator>-=</operator> <call><name>put_label_get_length</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <call><name>compute_next_addr</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>const_</name></expr></argument>, <argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>code_ptr</name> <operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_count</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>buf_ptr</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition>;</do>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>buf</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>-</operator> <name>code</name> <operator>&lt;=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>jump</name></expr>)</condition> <block>{<block_content>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name>addr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr></else></ternary></expr>;</expr_stmt>
			<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_B</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>-</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x1ffffff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x2000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_BL</name><operator>)</operator></expr> ?</condition><then> <expr><name>BL</name></expr> </then><else>: <expr><name>B</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0x3ffffff</literal><operator>)</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_COND</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="number">4</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_COND</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>addr</name> <operator>-</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&lt;=</operator> <literal type="number">0x3ffff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>addr</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x40000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffffe0</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0x7ffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PATCH_ABS48</name> <operator>|</operator> <name>PATCH_ABS64</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>addr</name> <operator>&lt;=</operator> <literal type="number">0xffffffffl</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS64</name><operator>)</operator> <operator>||</operator> <name>addr</name> <operator>&lt;=</operator> <literal type="number">0xffffffffffffl</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MOVZ</name> <operator>|</operator> <name>dst</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVK</name> <operator>|</operator> <name>dst</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PATCH_ABS48</name> <operator>|</operator> <name>PATCH_ABS64</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVK</name> <operator>|</operator> <name>dst</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_ABS64</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>MOVK</name> <operator>|</operator> <name>dst</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>put_label</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_COMPILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_size</name></name> <operator>=</operator> <operator>(</operator><name>code_ptr</name> <operator>-</operator> <name>code</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_ins</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_has_cpu_feature</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>feature_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>feature_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_HAS_FPU</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SLJIT_IS_FPU_AVAILABLE</name></cpp:ifdef>
		<return>return <expr><name>SLJIT_IS_FPU_AVAILABLE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* Available by default. */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<case>case <expr><name>SLJIT_HAS_CLZ</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_CMOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_PREFETCH</name></expr>:</case>
		<return>return <expr><literal type="number">1</literal></expr>;</return>

	<default>default:</default>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Core code generator functions.                                       */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT_TRAILING_ZERO</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>result</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>result = 0; \
	if (!(value &amp; 0xffffffff)) { \
		result += 32; \
		value &gt;&gt;= 32; \
	} \
	if (!(value &amp; 0xffff)) { \
		result += 16; \
		value &gt;&gt;= 16; \
	} \
	if (!(value &amp; 0xff)) { \
		result += 8; \
		value &gt;&gt;= 8; \
	} \
	if (!(value &amp; 0xf)) { \
		result += 4; \
		value &gt;&gt;= 4; \
	} \
	if (!(value &amp; 0x3)) { \
		result += 2; \
		value &gt;&gt;= 2; \
	} \
	if (!(value &amp; 0x1)) { \
		result += 1; \
		value &gt;&gt;= 1; \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGICAL_IMM_CHECK</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_ins</name></type> <name>logical_imm</name><parameter_list>(<parameter><decl><type><name>sljit_sw</name></type> <name>imm</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>negated</name></decl>, <decl><type ref="prev"/><name>ones</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>mask</name></decl>, <decl><type ref="prev"/><name>uimm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>ins</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <name>LOGICAL_IMM_CHECK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>&amp;=</operator> <operator>~</operator><name>LOGICAL_IMM_CHECK</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>imm</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>imm</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>sljit_s32</name><operator>)</operator><name>imm</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>imm</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>imm</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>imm</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator>
		<operator>||</operator> <operator>(</operator><name>len</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>imm</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>imm</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>uimm</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>imm</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uimm</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>uimm</name> <operator>&gt;&gt;</operator> <name>len</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>negated</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>uimm</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>negated</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>uimm</name> <operator>=</operator> <operator>~</operator><name>uimm</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>uimm</name> <operator>&amp;=</operator> <operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Unsigned right shift. */</comment>
	<expr_stmt><expr><call><name>COUNT_TRAILING_ZERO</name><argument_list>(<argument><expr><name>uimm</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Signed shift. We also know that the highest bit is set. */</comment>
	<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>~</operator><name>uimm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>imm</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COUNT_TRAILING_ZERO</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>~</operator><name>imm</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <operator>(</operator><literal type="number">0x3f</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>negated</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ins</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>ones</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>ones</name> <operator>-</operator> <name>right</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>ins</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>ones</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>-</operator> <name>right</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COUNT_TRAILING_ZERO</name></cpp:undef>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>load_immediate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>simm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>simm</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>zeros</name></decl>, <decl><type ref="prev"/><name>ones</name></decl>, <decl><type ref="prev"/><name>first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>bitmask</name></decl>;</decl_stmt>

	<comment type="block">/* Handling simple immediates first. */</comment>
	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVZ</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>simm</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>simm</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x10000</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVN</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xffffffffl</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVZ</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff0000l</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xffff0000</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>MOVN</name> <operator>^</operator> <name>W_OP</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>MOVN</name> <operator>^</operator> <name>W_OP</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff0000l</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <call><name>logical_imm</name><argument_list>(<argument><expr><name>simm</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>bitmask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ORRI</name> <operator>^</operator> <name>W_OP</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>bitmask</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVZ</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVK</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff0000l</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <call><name>logical_imm</name><argument_list>(<argument><expr><name>simm</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>bitmask</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORRI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>bitmask</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>simm</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>simm</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x100000000l</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVN</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff0000l</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVN</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVK</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff0000l</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* A large amount of number can be constructed from ORR and MOVx, but computing them is costly. */</comment>

	<expr_stmt><expr><name>zeros</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ones</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>simm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>zeros</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>simm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ones</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>simm</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>simm</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>imm</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ones</name> <operator>&gt;</operator> <name>zeros</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>simm</name> <operator>=</operator> <operator>~</operator><name>simm</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>simm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>simm</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVN</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>simm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVK</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>~</operator><name>simm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>simm</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		</block_content>}</block></for>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>simm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>simm</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVZ</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>simm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVK</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>simm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>simm</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG1_IMM</name></cpp:macro>	<cpp:value>0x0010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG2_IMM</name></cpp:macro>	<cpp:value>0x0020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_OP</name></cpp:macro>		<cpp:value>0x0040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FLAGS</name></cpp:macro>	<cpp:value>0x0080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_RETURN</name></cpp:macro>	<cpp:value>0x0100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_FLAGS</name><parameter_list>(<parameter><type><name>flag_bits</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if (flags &amp; SET_FLAGS) { \
		inv_bits |= flag_bits; \
		if (flags &amp; UNUSED_RETURN) \
			dst = TMP_ZERO; \
	}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_op_imm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* dst must be register, TMP_REG1
	   arg1 must be register, TMP_REG1, imm
	   arg2 must be register, TMP_REG2, imm */</comment>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inv_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>W_OP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inst_bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>op</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>imm</name></decl>, <decl><type ref="prev"/><name>nimm</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ARG1_IMM</name> <operator>|</operator> <name>ARG2_IMM</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>ARG1_IMM</name> <operator>|</operator> <name>ARG2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Both are immediates. */</comment>
		<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>ARG1_IMM</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>arg1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>SLJIT_ADD</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>!=</operator> <name>SLJIT_SUB</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>arg1</name> <operator>=</operator> <name>TMP_ZERO</name></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg1</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ARG1_IMM</name> <operator>|</operator> <name>ARG2_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>reg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>arg1</name></expr> </then><else>: <expr><name>arg2</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>arg2</name></expr> </then><else>: <expr><name>arg1</name></expr></else></ternary></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<case>case <expr><name>SLJIT_NEG</name></expr>:</case>
		<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
			<comment type="block">/* No form with immediate operand (except imm 0, which
			is represented by a ZERO register). */</comment>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>~</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr> </then><else>: <expr><operator>~</operator><name>imm</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>set_flags</name>;</goto>
		<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARG1_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>-</operator><name>imm</name></expr>;</expr_stmt>
			<comment type="block">/* Fall through. */</comment>
		<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_ADD</name></expr> ?</condition><then> <expr><name>ADDI</name></expr> </then><else>: <expr><name>SUBI</name></expr></else></ternary><operator>)</operator> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>imm</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ADDI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>nimm</name> <operator>=</operator> <operator>-</operator><name>imm</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nimm</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SUBI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>nimm</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>imm</name> <operator>&lt;=</operator> <literal type="number">0xffffff</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ADDI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nimm</name> <operator>&lt;=</operator> <literal type="number">0xffffff</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>nimm</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SUBI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>nimm</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>imm</name> <operator>&lt;=</operator> <literal type="number">0xffffff</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ADDI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ADDI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>nimm</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nimm</name> <operator>&lt;=</operator> <literal type="number">0xffffff</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SUBI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>nimm</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SUBI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>nimm</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_AND</name></expr>:</case>
			<expr_stmt><expr><name>inst_bits</name> <operator>=</operator> <call><name>logical_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>LOGICAL_IMM_CHECK</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inst_bits</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ANDI</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>inst_bits</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>SLJIT_OR</name></expr>:</case>
		<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
			<expr_stmt><expr><name>inst_bits</name> <operator>=</operator> <call><name>logical_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>, <argument><expr><name>LOGICAL_IMM_CHECK</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inst_bits</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_OR</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>inst_bits</name> <operator>|=</operator> <name>ORRI</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>inst_bits</name> <operator>|=</operator> <name>EORI</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>inst_bits</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>set_flags</name>;</goto>
		<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARG1_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>imm</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>UBFM</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>imm</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>imm</name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>UBFM</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">63</literal> <operator>-</operator> <name>imm</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<goto>goto <name>set_flags</name>;</goto>
		<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARG1_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_ASHR</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>inv_bits</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>imm</name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>UBFM</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">31</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>imm</name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>UBFM</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">63</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<goto>goto <name>set_flags</name>;</goto>
		<default>default:</default>
			<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ARG2_IMM</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>arg2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>arg2</name> <operator>=</operator> <name>TMP_ZERO</name></expr>;</expr_stmt></block_content></block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg2</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>arg1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>arg1</name> <operator>=</operator> <name>TMP_ZERO</name></expr>;</expr_stmt></block_content></block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg1</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Both arguments are registers. */</comment>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>arg2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>UBFM</name> <operator>^</operator> <name>W_OP</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>inv_bits</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SBFM</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>UBFM</name> <operator>^</operator> <name>W_OP</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">15</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>inv_bits</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SBFM</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">15</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>arg2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ORR</name> <operator>^</operator> <name>W_OP</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>arg2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SBFM</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">31</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ORN</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break> <comment type="block">/* Set flags. */</comment>
	<case>case <expr><name>SLJIT_NEG</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>inv_bits</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SUB</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>CLZ</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ADD</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ADC</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SUB</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SBC</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>MADD</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>INT_OP</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SMADDL</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">31</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">31</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBS</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">63</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SMULH</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBS</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">63</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_FLAGS</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>AND</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ORR</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break> <comment type="block">/* Set flags. */</comment>
	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>EOR</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break> <comment type="block">/* Set flags. */</comment>
	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>LSLV</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break> <comment type="block">/* Set flags. */</comment>
	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>LSRV</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break> <comment type="block">/* Set flags. */</comment>
	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ASRV</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break> <comment type="block">/* Set flags. */</comment>
	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></switch>

<label><name>set_flags</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SUBS</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE</name></cpp:macro>		<cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED</name></cpp:macro>		<cpp:value>0x20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_SIZE</name></cpp:macro>	<cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_SIZE</name></cpp:macro>	<cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT_SIZE</name></cpp:macro>	<cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_SIZE</name></cpp:macro>	<cpp:value>0x3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_SIZE_SHIFT</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flags) &amp; 0x3)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_op_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>tmp_reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>shift</name> <init>= <expr><call><name>MEM_SIZE_SHIFT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>shift</name> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>type</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SIGNED</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x00800000</literal></expr> </then><else>: <expr><literal type="number">0x00400000</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>argw</name> <operator>==</operator> <name>shift</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STRB</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call>
				<operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>argw</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STRBI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>arg</name> <operator>&amp;=</operator> <name>REG_MASK</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xfff</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>(</operator><name>argw</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STRBI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>argw</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argw</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STRBI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">10</literal> <operator>-</operator> <name>shift</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&lt;=</operator> <literal type="number">0xffffff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STRBI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&lt;=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STURBI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STRB</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Entry, exit                                                          */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>args</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>saved_regs_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>saved_regs_size</name> <operator>=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>saved_regs_size</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>saved_regs_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>local_size</name> <operator>=</operator> <operator>(</operator><name>local_size</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <name>local_size</name> <operator>+</operator> <name>saved_regs_size</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STP_PRE</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_FP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call>
		<operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>-</operator><operator>(</operator><name>saved_regs_size</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>local_size</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name>saveds</name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>saveds</name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>offs</name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_S0</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STP</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>scratches</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STP</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>offs</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_FP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>get_arg_count</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_S0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_S1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_S2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* No need for a loop. */</comment>
			<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>local_size</name> <operator>-=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4096</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>local_size</name> <operator>-=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>local_size</name> <operator>-=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVZ</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>local_size</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>B_CC</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_ins</name><operator>)</operator> <operator>-</operator><literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7ffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x1</literal></expr></argument> <comment type="block">/* not-equal */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>local_size</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>local_size</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDR_PRE</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>local_size</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDR_PRE</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>local_size</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !_WIN32 */</comment>

	<comment type="block">/* The local_size does not include saved registers size. */</comment>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>local_size</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>local_size</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>local_size</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 */</comment>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_set_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>saved_regs_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>saved_regs_size</name> <operator>=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>saved_regs_size</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>saved_regs_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <name>saved_regs_size</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>local_size</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_return</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>saved_regs_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_before_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>saved_regs_size</name> <operator>=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>saved_regs_size</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>saved_regs_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>local_size</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>-</operator> <name>saved_regs_size</name></expr>;</expr_stmt>

	<comment type="block">/* Load LR as early as possible. */</comment>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDP</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_FP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>local_size</name> <operator>&lt;</operator> <literal type="number">63</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDP_PRE</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_FP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call>
			<operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>local_size</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">15</literal> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>local_size</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>local_size</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>local_size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>local_size</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDP</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>TMP_FP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>offs</name> <operator>=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_S0</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDP</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDP</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>offs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>+=</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDRI</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>offs</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* These two can be executed in parallel. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>saved_regs_size</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RET</name> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Operators                                                            */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inv_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>W_OP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op0</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_BREAKPOINT</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BRK</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_NOP</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_LMUL_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_LMUL_SW</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>UMULH</name></expr> </then><else>: <expr><name>SMULH</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_DIVMOD_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIVMOD_SW</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>ORR</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr> ?</condition><then> <expr><name>UDIV</name></expr> </then><else>: <expr><name>SDIV</name></expr></else></ternary><operator>)</operator> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>MADD</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RT2</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SUB</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_DIV_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_SW</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><name>UDIV</name></expr> </then><else>: <expr><name>SDIV</name></expr></else></ternary><operator>)</operator> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_ENDBR</name></expr>:</case>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>mem_flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>op_flags</name> <init>= <expr><call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Both operands are registers. */</comment>
		<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_OP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
		<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>BYTE_SIZE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>BYTE_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s8</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>HALF_SIZE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>HALF_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s16</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>INT_SIZE</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_u32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>INT_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name> <operator>|</operator> <name>ARG2_IMM</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op_flags</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>INT_OP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>INT_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>UNUSED_RETURN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>op</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>mem_flags</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>INT_OP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>INT_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>UNUSED_RETURN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ARG1_IMM</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>src1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ARG2_IMM</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>src2w</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_src</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_FAST_RETURN</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_LR</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RET</name> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_FAST_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	<case>case <expr><name>SLJIT_PREFETCH_L1</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L2</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L3</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_ONCE</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* The reg_map[op] should provide the appropriate constant. */</comment>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_PREFETCH_L1</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_PREFETCH_L2</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_PREFETCH_L3</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>op</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* Signed word sized load is the prefetch instruction. */</comment>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_float_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_float_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>freg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_custom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_custom</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name>instruction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Floating point operators                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_fop_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>shift</name> <init>= <expr><call><name>MEM_SIZE_SHIFT</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>type</name> <init>= <expr><operator>(</operator><name>shift</name> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>type</name> <operator>|=</operator> <literal type="number">0x00400000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>argw</name> <operator>==</operator> <name>shift</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STR_FR</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>VT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call>
				<operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>argw</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STR_FI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>VT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>arg</name> <operator>&amp;=</operator> <name>REG_MASK</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xfff</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>(</operator><name>argw</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STR_FI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>VT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>argw</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>argw</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STR_FI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>VT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">10</literal> <operator>-</operator> <name>shift</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&lt;=</operator> <literal type="number">0xffffff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STR_FI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>VT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&lt;=</operator> <literal type="number">255</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STUR_FI</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>VT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STR_FR</name> <operator>|</operator> <name>type</name> <operator>|</operator> <call><name>VT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_sw_from_f64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inv_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_S32_FROM_F64</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inv_bits</name> <operator>|=</operator> <name>W_OP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_SIZE</name></expr> </then><else>: <expr><name>WORD_SIZE</name></expr></else></ternary></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FCVTZS</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_S32_FROM_F64</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_SIZE</name></expr> </then><else>: <expr><name>WORD_SIZE</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_f64_from_sw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inv_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_S32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inv_bits</name> <operator>|=</operator> <name>W_OP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_S32</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_SIZE</name></expr> </then><else>: <expr><name>WORD_SIZE</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_S32</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>SCVTF</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_SIZE</name></expr> </then><else>: <expr><name>WORD_SIZE</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>mem_flags</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_SIZE</name></expr> </then><else>: <expr><name>WORD_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inv_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FCMP</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>mem_flags</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_SIZE</name></expr> </then><else>: <expr><name>WORD_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inv_bits</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>INT_SIZE</name> <operator>^</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <name>WORD_SIZE</name></expr></argument>, <argument><expr><name>must_be_one_bit_difference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT_FOP1_OPERATION_WITH_CHECKS</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>inv_bits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_F32</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>mem_flags</name> <operator>^</operator> <literal type="number">0x1</literal><operator>)</operator></expr> </then><else>: <expr><name>mem_flags</name></expr></else></ternary></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dst_r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV_F64</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>dst_r</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>TMP_FREG1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FMOV</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NEG_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FNEG</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_ABS_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FABS</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_CONV_F64_FROM_F32</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FCVT</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>mem_flags</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>INT_SIZE</name></expr> </then><else>: <expr><name>WORD_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inv_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fop2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FADD</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_SUB_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FSUB</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MUL_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FMUL</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_DIV_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>FDIV</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <call><name>VD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>VM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Other instructions                                                   */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fast_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fast_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_LR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Memory. */</comment>
	<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>TMP_LR</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Conditional instructions                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>get_cc</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x1</literal></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x0</literal></expr>;</return>

	<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x2</literal></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x3</literal></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x9</literal></expr>;</return>

	<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x8</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
		<return>return <expr><literal type="number">0xa</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
		<return>return <expr><literal type="number">0xb</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
		<return>return <expr><literal type="number">0xd</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
		<return>return <expr><literal type="number">0xc</literal></expr>;</return>

	<case>case <expr><name>SLJIT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x7</literal></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x6</literal></expr>;</return>

	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0xe</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>sljit_emit_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>label</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;</operator> <name>SLJIT_JUMP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_COND</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>B_CC</name> <operator>|</operator> <operator>(</operator><literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm64_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>BLR</name></expr> </then><else>: <expr><name>BR</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>jump</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_call</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <name>SLJIT_INLINE</name> struct <name>sljit_jump</name><operator>*</operator> <macro><name>emit_cmp_to0</name><argument_list>(<argument>struct sljit_compiler *compiler</argument>, <argument>sljit_s32 type</argument>,
	<argument>sljit_s32 src</argument>, <argument>sljit_sw srcw</argument>)</argument_list></macro>
<block>{
	struct <expr><name>sljit_jump</name> <operator>*</operator><name>jump</name></expr>;
	<expr><name>sljit_ins</name> <name>inv_bits</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>W_OP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;

	<expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_EQUAL</name> <operator>||</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_NOT_EQUAL</name></expr></argument>)</argument_list></call></expr>;
	<expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;

	<expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;
	<expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;
	<expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr></argument>)</argument_list></call></expr>;
	<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_CBZ</name> <operator>|</operator> <name>IS_COND</name></expr>;

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><ternary><condition><expr><name>inv_bits</name></expr> ?</condition><then> <expr><name>INT_SIZE</name></expr> </then><else>: <expr><name>WORD_SIZE</name></expr></else></ternary></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	<expr_stmt/></block_content></block></if></if_stmt>}</block></expr></expr_stmt>
	<if_stmt><if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_EQUAL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inv_bits</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>CBZ</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">6</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm64_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BR</name> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>jump</name></expr>;</return>
}

SLJIT_API_FUNC_ATTRIBUTE <function><type><name>sljit_s32</name></type> <name>sljit_emit_ijump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>BLR</name></expr> </then><else>: <expr><name>BR</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* These jumps are converted to jump/call instructions when possible. */</comment>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JUMP_ADDR</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>IS_BL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>srcw</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm64_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>BLR</name></expr> </then><else>: <expr><name>BR</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_icall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_icall</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>src_r</name></decl>, <decl><type ref="prev"/><name>flags</name></decl>, <decl><type ref="prev"/><name>mem_flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLJIT_ADD</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CSINC</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_r</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_REG1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_MOV</name></expr> ?</condition><then> <expr><name>WORD_SIZE</name></expr> </then><else>: <expr><name>INT_SIZE</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>STORE</name></expr>;</expr_stmt>
			<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>flags</name> <operator>=</operator> <ternary><condition><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>INT_OP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mem_flags</name> <operator>=</operator> <name>INT_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>src_r</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src_r</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CSINC</name> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>emit_op_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src_r</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem_flags</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_cmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>inv_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dst_reg</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>W_OP</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>cc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_cmov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dst_reg</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>srcw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_reg</name> <operator>&amp;=</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr>;</expr_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>CSEL</name> <operator>^</operator> <name>inv_bits</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>sign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>memw</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>memw</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">256</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>STURBI</name> <operator>|</operator> <operator>(</operator><call><name>MEM_SIZE_SHIFT</name><argument_list>(<argument><expr><name>WORD_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>STURBI</name> <operator>|</operator> <operator>(</operator><call><name>MEM_SIZE_SHIFT</name><argument_list>(<argument><expr><name>BYTE_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>STURBI</name> <operator>|</operator> <operator>(</operator><call><name>MEM_SIZE_SHIFT</name><argument_list>(<argument><expr><name>HALF_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
		<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>STURBI</name> <operator>|</operator> <operator>(</operator><call><name>MEM_SIZE_SHIFT</name><argument_list>(<argument><expr><name>INT_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>STURBI</name> <operator>|</operator> <operator>(</operator><call><name>MEM_SIZE_SHIFT</name><argument_list>(<argument><expr><name>WORD_SIZE</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x400</literal></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><literal type="number">0x00800000</literal></expr> </then><else>: <expr><literal type="number">0x00400000</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <literal type="number">0x800</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <call><name>RT</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>memw</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fmem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>freg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fmem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>freg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>memw</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>memw</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">256</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <name>STUR_FI</name> <operator>|</operator> <literal type="number">0x80000400</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <literal type="number">0x40000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <literal type="number">0x00400000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <literal type="number">0x800</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <call><name>VT</name><argument_list>(<argument><expr><name>freg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>memw</name> <operator>&amp;</operator> <literal type="number">0x1ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_local_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>ins</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_get_local_base</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name> <argument_list>(<argument><expr><name>SLJIT_LOCALS_OFFSET_BASE</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_reg</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0xffffff</literal> <operator>&amp;&amp;</operator> <name>offset</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0xffffff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>ADDI</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>-</operator><name>offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>SUBI</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ins</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ins</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>offset</name> <operator>&amp;</operator> <literal type="number">0xfff000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">12</literal> <operator>-</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>offset</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ins</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>offset</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name> <argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Add extended register form. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDE</name> <operator>|</operator> <operator>(</operator><literal type="number">0x3</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_const</name></name><modifier>*</modifier></type> <name>sljit_emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>const_</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_const</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_const</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_const</name><argument_list>(<argument><expr><name>const_</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm64_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>const_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_put_label</name></name><modifier>*</modifier></type> <name>sljit_emit_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_put_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm64_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_put_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_put_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_put_label</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>STORE</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>put_label</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_target</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name><modifier>*</modifier></type> <name>inst</name> <init>= <expr><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffe00000</literal><operator>)</operator> <operator>==</operator> <name>MOVZ</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffe00000</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>MOVK</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MOVZ</name> <operator>|</operator> <name>dst</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_target</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVK</name> <operator>|</operator> <name>dst</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>new_target</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>MOVK</name> <operator>|</operator> <name>dst</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>new_target</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>MOVK</name> <operator>|</operator> <name>dst</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_target</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sljit_set_jump_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>new_constant</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
