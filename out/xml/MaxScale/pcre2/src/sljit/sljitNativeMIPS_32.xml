<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativeMIPS_32.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/* mips 32-bit arch dependent functions. */</comment>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>load_immediate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst_ar</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>imm</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LUI</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_ar</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>SLJIT_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_LOGICAL</name><parameter_list>(<parameter><type><name>op_imm</name></type></parameter>, <parameter><type><name>op_norm</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if (flags &amp; SRC2_IMM) { \
		if (op &amp; SLJIT_SET_Z) \
			FAIL_IF(push_inst(compiler, op_imm | S(src1) | TA(EQUAL_FLAG) | IMM(src2), EQUAL_FLAG)); \
		if (!(flags &amp; UNUSED_DEST)) \
			FAIL_IF(push_inst(compiler, op_imm | S(src1) | T(dst) | IMM(src2), DR(dst))); \
	} \
	else { \
		if (op &amp; SLJIT_SET_Z) \
			FAIL_IF(push_inst(compiler, op_norm | S(src1) | T(src2) | DA(EQUAL_FLAG), EQUAL_FLAG)); \
		if (!(flags &amp; UNUSED_DEST)) \
			FAIL_IF(push_inst(compiler, op_norm | S(src1) | T(src2) | D(dst), DR(dst))); \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_SHIFT</name><parameter_list>(<parameter><type><name>op_imm</name></type></parameter>, <parameter><type><name>op_v</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if (flags &amp; SRC2_IMM) { \
		if (op &amp; SLJIT_SET_Z) \
			FAIL_IF(push_inst(compiler, op_imm | T(src1) | DA(EQUAL_FLAG) | SH_IMM(src2), EQUAL_FLAG)); \
		if (!(flags &amp; UNUSED_DEST)) \
			FAIL_IF(push_inst(compiler, op_imm | T(src1) | D(dst) | SH_IMM(src2), DR(dst))); \
	} \
	else { \
		if (op &amp; SLJIT_SET_Z) \
			FAIL_IF(push_inst(compiler, op_v | S(src2) | T(src1) | DA(EQUAL_FLAG), EQUAL_FLAG)); \
		if (!(flags &amp; UNUSED_DEST)) \
			FAIL_IF(push_inst(compiler, op_v | S(src2) | T(src1) | D(dst), DR(dst))); \
	}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_single_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>is_overflow</name></decl>, <decl><type ref="prev"/><name>is_carry</name></decl>, <decl><type ref="prev"/><name>is_handled</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S8</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SEB</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 1 */</comment>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRA</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S16</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SEH</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 1 */</comment>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRA</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CLZ</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CLZ</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 1 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRL</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORI</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Nearly all instructions are unmovable in the following sequence. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Check zero. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BEQ</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Loop for searching the highest bit. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BGEZ</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<expr_stmt><expr><name>is_overflow</name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OVERFLOW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_carry</name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_overflow</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_overflow</name> <operator>||</operator> <name>is_carry</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* dst may be the same as src1 or src2. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_overflow</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_overflow</name> <operator>||</operator> <name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* dst may be the same as src1 or src2. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* a + b &gt;= a | b (otherwise, the carry should be set to 1). */</comment>
		<if_stmt><if>if <condition>(<expr><name>is_overflow</name> <operator>||</operator> <name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_overflow</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRL</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<expr_stmt><expr><name>is_carry</name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_carry</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* dst may be the same as src1 or src2. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* Set ULESS_FLAG (dst == 0) &amp;&amp; (OTHER_FLAG == 1). */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Set carry flag. */</comment>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src2</name> <operator>==</operator> <name>SIMM_MIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SRC2_IMM</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>is_handled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_LESS</name> <operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_GREATER_EQUAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_handled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_SIG_LESS</name> <operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_SIG_GREATER_EQUAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_handled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_handled</name> <operator>&amp;&amp;</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_LESS</name> <operator>&amp;&amp;</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_SIG_LESS_EQUAL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>is_handled</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SRC2_IMM</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_LESS</name> <operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_GREATER_EQUAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_GREATER</name> <operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_LESS_EQUAL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_SIG_LESS</name> <operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_SIG_GREATER_EQUAL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLT</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_SIG_GREATER</name> <operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_SIG_LESS_EQUAL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLT</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_handled</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>is_overflow</name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OVERFLOW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_carry</name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_overflow</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_overflow</name> <operator>||</operator> <name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* dst may be the same as src1 or src2. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_overflow</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_overflow</name> <operator>||</operator> <name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* dst may be the same as src1 or src2. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>UNUSED_DEST</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_overflow</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XOR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRL</name> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>src2</name> <operator>==</operator> <name>SIMM_MIN</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SRC2_IMM</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>is_carry</name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* dst may be the same as src1 or src2. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* dst may be the same as src1 or src2. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_carry</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLTU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>is_carry</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>SLJIT_SUCCESS</name></expr></else></ternary></expr>;</return>

	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_MUL_OVERFLOW</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></cpp:if>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MUL</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 1 */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULT</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFLO</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 1 */</comment>
		</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">6</literal><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MUL</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MUH</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_MIPS_REV &lt; 6 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULT</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFHI</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MFLO</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_MIPS_REV &gt;= 6 */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRA</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>SH_IMM</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBU</name> <operator>|</operator> <call><name>SA</name><argument_list>(<argument><expr><name>EQUAL_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OTHER_FLAG</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_LOGICAL</name><argument_list>(<argument><expr><name>ANDI</name></expr></argument>, <argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_LOGICAL</name><argument_list>(<argument><expr><name>ORI</name></expr></argument>, <argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_LOGICAL</name><argument_list>(<argument><expr><name>XORI</name></expr></argument>, <argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_SHIFT</name><argument_list>(<argument><expr><name>SLL</name></expr></argument>, <argument><expr><name>SLLV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_SHIFT</name><argument_list>(<argument><expr><name>SRL</name></expr></argument>, <argument><expr><name>SRLV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_SHIFT</name><argument_list>(<argument><expr><name>SRA</name></expr></argument>, <argument><expr><name>SRAV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LUI</name> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>init_value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_target</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffe00000</literal><operator>)</operator> <operator>==</operator> <name>LUI</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfc000000</literal><operator>)</operator> <operator>==</operator> <name>ORI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_target</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>new_target</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sljit_set_jump_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>new_constant</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>ins_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>stack_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>float_arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>word_arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>types</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>arg_count_save</name></decl>, <decl><type ref="prev"/><name>types_save</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>prev_ins</name> <init>= <expr><name>NOP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>ins</name> <init>= <expr><name>NOP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name><name>offsets</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>freg_map</name><index>[<expr><name>TMP_FREG1</name></expr>]</index></name> <operator>==</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>types</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&lt;&lt;</operator> <name>SLJIT_DEF_SHIFT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>word_arg_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg_count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <literal type="number">254</literal> <operator>+</operator> <name>arg_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>word_arg_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg_count</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <literal type="number">254</literal> <operator>+</operator> <name>arg_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Stack is aligned to 16 bytes, max two doubles can be placed on the stack. */</comment>
	<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>types_save</name> <operator>=</operator> <name>types</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_count_save</name> <operator>=</operator> <name>arg_count</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">254</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>SWC1</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FT</name><argument_list>(<argument><expr><name>float_arg_count</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">254</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>SDC1</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FT</name><argument_list>(<argument><expr><name>float_arg_count</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><name><name>offsets</name><index>[<expr><name>arg_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>SW</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>word_arg_count</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><name>arg_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>arg_count</name> <operator>!=</operator> <name>word_arg_count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>word_arg_count</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>offsets</name><index>[<expr><name>arg_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>arg_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>ins</name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>prev_ins</name> <operator>!=</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>prev_ins</name></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>prev_ins</name> <operator>=</operator> <name>ins</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <name>types_save</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_count</name> <operator>=</operator> <name>arg_count_save</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>==</operator> <literal type="number">254</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOV_S</name> <operator>|</operator> <name>FMT_S</name> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>SLJIT_FR0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>LW</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>==</operator> <literal type="number">254</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>MOV_S</name> <operator>|</operator> <name>FMT_D</name> <operator>|</operator> <call><name>FS</name><argument_list>(<argument><expr><name>SLJIT_FR0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>TMP_FREG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>prev_ins</name> <operator>!=</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>prev_ins</name></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>prev_ins</name> <operator>=</operator> <name>LW</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>LW</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>+</operator> <operator>(</operator><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>ins</name> <operator>!=</operator> <name>NOP</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>prev_ins</name> <operator>!=</operator> <name>NOP</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>prev_ins</name></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>prev_ins</name> <operator>=</operator> <name>ins</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ins</name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><operator>*</operator><name>ins_ptr</name> <operator>=</operator> <name>prev_ins</name></expr>;</expr_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>post_call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>stack_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Stack is aligned to 16 bytes, max two doubles can be placed on the stack. */</comment>
	<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>T</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>ins</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_call</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>PIC_ADDR_REG</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">25</literal> <operator>&amp;&amp;</operator> <name>PIC_ADDR_REG</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PIC_ADDR_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_JAL</name> <operator>|</operator> <name>IS_CALL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JALR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>PIC_ADDR_REG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>post_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>jump</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_icall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name></type> <name>ins</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_icall</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>PIC_ADDR_REG</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">25</literal> <operator>&amp;&amp;</operator> <name>PIC_ADDR_REG</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>PIC_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDU</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>TA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>PIC_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>PIC_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_DATA</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>PIC_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ins</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Register input. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JALR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>PIC_ADDR_REG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>RETURN_ADDR_REG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ins</name></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>post_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
