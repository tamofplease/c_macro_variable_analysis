<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitUtils.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>
<comment type="block">/*  Locks                                                                   */</comment>
<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<comment type="block">/* Executable Allocator */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_EXECUTABLE_ALLOCATOR</name><operator>)</operator> \
	<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_WX_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_WX_EXECUTABLE_ALLOCATOR</name><operator>)</operator></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_SINGLE_THREADED</name> <operator>&amp;&amp;</operator> <name>SLJIT_SINGLE_THREADED</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ALLOCATOR_LOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ALLOCATOR_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>_WIN32</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>allocator_lock</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ALLOCATOR_LOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>pthread_mutex_lock(&amp;allocator_lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ALLOCATOR_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>pthread_mutex_unlock(&amp;allocator_lock)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* windows */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>allocator_lock</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>allocator_grab_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>lock</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name>allocator_lock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>CreateMutex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>InterlockedCompareExchangePointer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>allocator_lock</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>allocator_lock</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ALLOCATOR_LOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>allocator_grab_lock()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ALLOCATOR_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ReleaseMutex(allocator_lock)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* thread implementation */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_EXECUTABLE_ALLOCATOR &amp;&amp; !SLJIT_WX_EXECUTABLE_ALLOCATOR */</comment>

<comment type="block">/* ------------------------------------------------------------------------ */</comment>
<comment type="block">/*  Stack                                                                   */</comment>
<comment type="block">/* ------------------------------------------------------------------------ */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>defined</name> <name>SLJIT_UTIL_STACK</name> <operator>&amp;&amp;</operator> <name>SLJIT_UTIL_STACK</name><operator>)</operator> \
	<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_UTIL_SIMPLE_STACK_ALLOCATION</name> <operator>&amp;&amp;</operator> <name>SLJIT_UTIL_SIMPLE_STACK_ALLOCATION</name><operator>)</operator><operator>)</operator> \
	<operator>||</operator> <operator>(</operator><operator>(</operator><name>defined</name> <name>SLJIT_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_EXECUTABLE_ALLOCATOR</name><operator>)</operator> \
	<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>defined</name> <name>SLJIT_PROT_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_PROT_EXECUTABLE_ALLOCATOR</name><operator>)</operator> \
	<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_WX_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_WX_EXECUTABLE_ALLOCATOR</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></cpp:if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<comment type="block">/* Provides mmap function. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_ANON</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_ANONYMOUS</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_ANON</name></cpp:macro> <cpp:value>MAP_ANONYMOUS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MAP_ANONYMOUS */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MAP_ANON */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_ANON</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>O_CLOEXEC</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CLOEXEC</name></cpp:macro>	<cpp:value>O_CLOEXEC</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !O_CLOEXEC */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CLOEXEC</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* O_CLOEXEC */</comment>

<comment type="block">/* Some old systems do not have MAP_ANON. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dev_zero</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_SINGLE_THREADED</name> <operator>&amp;&amp;</operator> <name>SLJIT_SINGLE_THREADED</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>int</name></type> <name>open_dev_zero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dev_zero</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/zero"</literal></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>SLJIT_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dev_zero</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_SINGLE_THREADED */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>dev_zero_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>int</name></type> <name>open_dev_zero</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dev_zero_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dev_zero</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dev_zero</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><literal type="string">"/dev/zero"</literal></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>SLJIT_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dev_zero_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>dev_zero</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_SINGLE_THREADED */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SLJIT_CLOEXEC</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !MAP_ANON */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !_WIN32 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* open_dev_zero */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_UTIL_STACK</name> <operator>&amp;&amp;</operator> <name>SLJIT_UTIL_STACK</name><operator>)</operator> \
	<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_EXECUTABLE_ALLOCATOR</name><operator>)</operator></expr></cpp:if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_sw</name></type> <name>get_page_alignment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>si</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_sw</name></type> <name>sljit_page_align</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sljit_page_align</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sljit_page_align</name> <operator>=</operator> <name><name>si</name><operator>.</operator><name>dwPageSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>sljit_page_align</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_sw</name></type> <name>get_page_alignment</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_sw</name></type> <name>sljit_page_align</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sljit_page_align</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sljit_page_align</name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_PAGESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Should never happen. */</comment>
		<if_stmt><if>if <condition>(<expr><name>sljit_page_align</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sljit_page_align</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>sljit_page_align</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>sljit_page_align</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* get_page_alignment() */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_UTIL_STACK</name> <operator>&amp;&amp;</operator> <name>SLJIT_UTIL_STACK</name><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_UTIL_SIMPLE_STACK_ALLOCATION</name> <operator>&amp;&amp;</operator> <name>SLJIT_UTIL_SIMPLE_STACK_ALLOCATION</name><operator>)</operator></expr></cpp:if>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_stack</name></name><modifier>*</modifier> <name>SLJIT_FUNC</name></type> <name>sljit_allocate_stack</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>start_size</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>max_size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>start_size</name> <operator>&gt;</operator> <name>max_size</name> <operator>||</operator> <name>start_size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>stack</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_stack</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><name>max_size</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
 	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name> <operator>+</operator> <name>max_size</name></expr>;</expr_stmt>
 	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>start_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
	<return>return <expr><name>stack</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name> <name>SLJIT_FUNC</name></type> <name>sljit_free_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_u8</name> <modifier>*</modifier><name>SLJIT_FUNC</name></type> <name>sljit_stack_resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>new_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_start</name> <operator>&lt;</operator> <name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>new_start</name> <operator>&gt;=</operator> <name><name>stack</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>new_start</name></expr>;</expr_stmt>
	<return>return <expr><name>new_start</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_UTIL_SIMPLE_STACK_ALLOCATION */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name> <name>SLJIT_FUNC</name></type> <name>sljit_free_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VirtualFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !_WIN32 */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name> <name>SLJIT_FUNC</name></type> <name>sljit_free_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_stack</name></name><modifier>*</modifier> <name>SLJIT_FUNC</name></type> <name>sljit_allocate_stack</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>start_size</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>max_size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>page_align</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>start_size</name> <operator>&gt;</operator> <name>max_size</name> <operator>||</operator> <name>start_size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>stack</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_stack</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_stack</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Align max_size. */</comment>
	<expr_stmt><expr><name>page_align</name> <operator>=</operator> <call><name>get_page_alignment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_size</name> <operator>=</operator> <operator>(</operator><name>max_size</name> <operator>+</operator> <name>page_align</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>page_align</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>VirtualAlloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>, <argument><expr><name>MEM_RESERVE</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name> <operator>+</operator> <name>max_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>sljit_stack_resize</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name><name>stack</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>start_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sljit_free_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !_WIN32 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_ANON</name></cpp:ifdef>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name> <operator>|</operator> <name>MAP_ANON</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !MAP_ANON */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name>dev_zero</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>open_dev_zero</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_PRIVATE</name></expr></argument>, <argument><expr><name>dev_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MAP_ANON */</comment>
	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name> <operator>+</operator> <name>max_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>end</name></name> <operator>-</operator> <name>start_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 */</comment>

	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>
	<return>return <expr><name>stack</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_u8</name> <modifier>*</modifier><name>SLJIT_FUNC</name></type> <name>sljit_stack_resize</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_stack</name></name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>new_start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>_WIN32</name> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>POSIX_MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>aligned_old_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>aligned_new_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>page_align</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_start</name> <operator>&lt;</operator> <name><name>stack</name><operator>-&gt;</operator><name>min_start</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>new_start</name> <operator>&gt;=</operator> <name><name>stack</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
	<expr_stmt><expr><name>page_align</name> <operator>=</operator> <call><name>get_page_alignment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>aligned_new_start</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>new_start</name> <operator>&amp;</operator> <operator>~</operator><name>page_align</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>aligned_old_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>page_align</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>aligned_new_start</name> <operator>!=</operator> <name>aligned_old_start</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>aligned_new_start</name> <operator>&lt;</operator> <name>aligned_old_start</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualAlloc</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>aligned_new_start</name></expr></argument>, <argument><expr><name>aligned_old_start</name> <operator>-</operator> <name>aligned_new_start</name></expr></argument>, <argument><expr><name>MEM_COMMIT</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VirtualFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>aligned_old_start</name></expr></argument>, <argument><expr><name>aligned_new_start</name> <operator>-</operator> <name>aligned_old_start</name></expr></argument>, <argument><expr><name>MEM_DECOMMIT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>POSIX_MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<if_stmt><if>if <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>start</name></name> <operator>&lt;</operator> <name>new_start</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>page_align</name> <operator>=</operator> <call><name>get_page_alignment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>aligned_new_start</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>new_start</name> <operator>&amp;</operator> <operator>~</operator><name>page_align</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>aligned_old_start</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><name><name>stack</name><operator>-&gt;</operator><name>start</name></name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>page_align</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>aligned_new_start</name> <operator>&gt;</operator> <name>aligned_old_start</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>posix_madvise</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>aligned_old_start</name></expr></argument>, <argument><expr><name>aligned_new_start</name> <operator>-</operator> <name>aligned_old_start</name></expr></argument>, <argument><expr><name>POSIX_MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MADV_FREE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>aligned_old_start</name></expr></argument>, <argument><expr><name>aligned_new_start</name> <operator>-</operator> <name>aligned_old_start</name></expr></argument>, <argument><expr><name>MADV_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MADV_FREE */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 */</comment>

	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>new_start</name></expr>;</expr_stmt>
	<return>return <expr><name>new_start</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_UTIL_SIMPLE_STACK_ALLOCATION */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_UTIL_STACK */</comment>
</unit>
