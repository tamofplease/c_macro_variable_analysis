<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitProtExecAllocator.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/*
   This file contains a simple executable memory allocator

   It is assumed, that executable code blocks are usually medium (or sometimes
   large) memory blocks, and the allocator is not too frequently called (less
   optimized than other allocators). Thus, using it as a generic allocator is
   not suggested.

   How does it work:
     Memory is allocated in continuous memory areas called chunks by alloc_chunk()
     Chunk format:
     [ block ][ block ] ... [ block ][ block terminator ]

   All blocks and the block terminator is started with block_header. The block
   header contains the size of the previous and the next block. These sizes
   can also contain special values.
     Block size:
       0 - The block is a free_block, with a different size member.
       1 - The block is a block terminator.
       n - The block is used at the moment, and the value contains its size.
     Previous block size:
       0 - This is the first block of the memory chunk.
       n - The size of the previous block.

   Using these size values we can go forward or backward on the block chain.
   The unused blocks are stored in a chain list pointed by free_blocks. This
   list is useful if we need to find a suitable memory area when the allocator
   is called.

   When a block is freed, the new free block is connected to its adjacent free
   blocks if possible.

     [ free block ][ used block ][ free block ]
   and "used block" is freed, the three blocks are connected together:
     [           one big free block           ]
*/</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  System (OS) functions                                                */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* 64 KByte. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_SIZE</name></cpp:macro>	<cpp:value>0x10000</cpp:value></cpp:define>

<struct>struct <name>chunk_header</name> <block>{
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>executable</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
   alloc_chunk / free_chunk :
     * allocate executable system memory chunks
     * the size is always divisible by CHUNK_SIZE
   SLJIT_ALLOCATOR_LOCK / SLJIT_ALLOCATOR_UNLOCK :
     * provided as part of sljitUtils
     * only the allocator requires this lock, sljit is fully thread safe
       as it only uses local variables
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__NetBSD__</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>O_NOATIME</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_NOATIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* this is a linux extension available since kernel 3.11 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>O_TMPFILE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_TMPFILE</name></cpp:macro> <cpp:value>020200000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GNU_SOURCE</name></cpp:ifndef>
<function_decl><type><name>char</name> <modifier>*</modifier></type><name>secure_getenv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>mkostemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>template</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>int</name></type> <name>create_tempfile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>tmp_name</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>tmp_name_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SLJIT_SINGLE_THREADED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SLJIT_SINGLE_THREADED</name></expr></cpp:if>
	<decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MEMFD_CREATE</name></cpp:ifdef>
	<comment type="block">/* this is a GNU extension, make sure to use -D_GNU_SOURCE */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>memfd_create</name><argument_list>(<argument><expr><literal type="string">"sljit"</literal></expr></argument>, <argument><expr><name>MFD_CLOEXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>fd</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>dir</name> <operator>=</operator> <call><name>secure_getenv</name><argument_list>(<argument><expr><literal type="string">"TMPDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dir</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp_name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp_name_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tmp_name_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>stat</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>P_tmpdir</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_name_len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp_name_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>P_tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp_name_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tmp_name_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><name>P_tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp_name_len</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp_name_len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>tmp_name_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tmp_name_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tmp_name</name><index>[<expr><name>tmp_name_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>tmp_name</name><index>[<expr><operator>--</operator><name>tmp_name_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
	<comment type="block">/*
	 * the previous trimming might had left an empty string if TMPDIR="/"
	 * so work around the problem below
	 */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><ternary><condition><expr><name>tmp_name_len</name></expr> ?</condition><then> <expr><name>tmp_name</name></expr> </then><else>: <expr><literal type="string">"/"</literal></expr></else></ternary></expr></argument>,
		<argument><expr><name>O_TMPFILE</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_NOATIME</name> <operator>|</operator> <name>O_CLOEXEC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>fd</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>tmp_name_len</name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp_name</name> <operator>+</operator> <name>tmp_name_len</name></expr></argument>, <argument><expr><literal type="string">"/XXXXXX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SLJIT_SINGLE_THREADED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SLJIT_SINGLE_THREADED</name></expr></cpp:if>
	<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>umask</name><argument_list>(<argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>mkostemp</name><argument_list>(<argument><expr><name>tmp_name</name></expr></argument>, <argument><expr><name>O_CLOEXEC</name> <operator>|</operator> <name>O_NOATIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SLJIT_SINGLE_THREADED</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SLJIT_SINGLE_THREADED</name></expr></cpp:if>
	<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>fchmod</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>tmp_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><specifier>static</specifier> <name>SLJIT_INLINE</name> struct <name>chunk_header</name><operator>*</operator> <macro><name>alloc_chunk</name><argument_list>(<argument>sljit_uw size</argument>)</argument_list></macro>
<block>{
	struct <expr><name>chunk_header</name> <operator>*</operator><name>retval</name></expr>;
	<expr><name>int</name> <name>fd</name></expr>;

	<expr><name>fd</name> <operator>=</operator> <call><name>create_tempfile</name><argument_list>()</argument_list></call></expr>;
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator>struct <name>chunk_header</name> <operator>*</operator><operator>)</operator><call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>retval</name><operator>-&gt;</operator><name>executable</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_EXEC</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>retval</name><operator>-&gt;</operator><name>executable</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>retval</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/*
 * MAP_REMAPDUP is a NetBSD extension available sinde 8.0, make sure to
 * adjust your feature macros (ex: -D_NETBSD_SOURCE) as needed
 */</comment>
static <function><type><name>SLJIT_INLINE</name> <name><name>struct</name> <name>chunk_header</name></name><modifier>*</modifier></type> <name>alloc_chunk</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>chunk_header</name></name> <modifier>*</modifier></type><name>retval</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator>struct <name>chunk_header</name> <operator>*</operator><operator>)</operator><call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
			<argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name> <operator>|</operator> <call><name>PROT_MPROTECT</name><argument_list>(<argument><expr><name>PROT_EXEC</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>MAP_ANON</name> <operator>|</operator> <name>MAP_SHARED</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>retval</name><operator>-&gt;</operator><name>executable</name></name> <operator>=</operator> <call><name>mremap</name><argument_list>(<argument><expr><name>retval</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>MAP_REMAPDUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>retval</name><operator>-&gt;</operator><name>executable</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>retval</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>mprotect</name><argument_list>(<argument><expr><name><name>retval</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_EXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>retval</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>retval</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NetBSD */</comment>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>free_chunk</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>chunk_header</name></name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>chunk_header</name> <operator>*</operator><operator>)</operator><name>chunk</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>executable</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Common functions                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHUNK_MASK</name></cpp:macro>	<cpp:value>(~(CHUNK_SIZE - 1))</cpp:value></cpp:define>

<struct>struct <name>block_header</name> <block>{
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>prev_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>free_block</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>block_header</name></name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AS_BLOCK_HEADER</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((struct block_header*)(((sljit_u8*)base) + offset))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AS_FREE_BLOCK</name><parameter_list>(<parameter><type><name>base</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((struct free_block*)(((sljit_u8*)base) + offset))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_START</name><parameter_list>(<parameter><type><name>base</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((void*)((base) + 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_SIZE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(((size) + sizeof(struct block_header) + 7) &amp; ~7)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>free_block</name></name><modifier>*</modifier></type> <name>free_blocks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>allocated_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>total_size</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>sljit_insert_free_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>free_block</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>free_blocks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>free_blocks</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>free_blocks</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>free_block</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>free_blocks</name> <operator>=</operator> <name>free_block</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>sljit_remove_free_block</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>free_block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>free_block</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>free_blocks</name> <operator>==</operator> <name>free_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>free_blocks</name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_malloc_exec</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>chunk_header</name></name> <modifier>*</modifier></type><name>chunk_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>block_header</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>block_header</name></name> <modifier>*</modifier></type><name>next_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name> <modifier>*</modifier></type><name>free_block</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>chunk_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><literal type="number">64</literal> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>ALIGN_SIZE</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>free_block</name> <operator>=</operator> <name>free_blocks</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>free_block</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>size</name> <operator>+</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* We just cut a block from the end of the free block. */</comment>
				<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>executable_offset</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>prev_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>sljit_remove_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator>struct <name>block_header</name><operator>*</operator><operator>)</operator><name>free_block</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>size</name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>allocated_size</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>MEM_START</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>free_block</name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>chunk_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>chunk_size</name> <operator>=</operator> <operator>(</operator><name>chunk_size</name> <operator>+</operator> <name>size</name> <operator>+</operator> <name>CHUNK_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>CHUNK_MASK</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>chunk_header</name> <operator>=</operator> <call><name>alloc_chunk</name><argument_list>(<argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chunk_header</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>executable_offset</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><name><name>chunk_header</name><operator>-&gt;</operator><name>executable</name></name> <operator>-</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><name>chunk_header</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>chunk_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name>chunk_size</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>header</name> <operator>=</operator> <operator>(</operator>struct <name>block_header</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>chunk_header</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>chunk_size</name> <operator>&gt;</operator> <name>size</name> <operator>+</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Cut the allocated space into a free and a used block. */</comment>
		<expr_stmt><expr><name>allocated_size</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>chunk_size</name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>free_block</name> <operator>=</operator> <call><name>AS_FREE_BLOCK</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>prev_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_insert_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* All space belongs to this allocation. */</comment>
		<expr_stmt><expr><name>allocated_size</name> <operator>+=</operator> <name>chunk_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next_header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>next_header</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>next_header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <name>chunk_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>next_header</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>MEM_START</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_exec</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>block_header</name></name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name><modifier>*</modifier></type> <name>free_block</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>-</operator><name><name>header</name><operator>-&gt;</operator><name>executable_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocated_size</name> <operator>-=</operator> <name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<comment type="block">/* Connecting free blocks together if possible. */</comment>

	<comment type="block">/* If header-&gt;prev_size == 0, free_block will equal to header.
	   In this case, free_block-&gt;header.size will be &gt; 0. */</comment>
	<expr_stmt><expr><name>free_block</name> <operator>=</operator> <call><name>AS_FREE_BLOCK</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>free_block</name> <operator>=</operator> <operator>(</operator>struct <name>free_block</name><operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_insert_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>header</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator>struct <name>free_block</name><operator>*</operator><operator>)</operator><name>header</name><operator>)</operator><operator>-&gt;</operator><name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_remove_free_block</name><argument_list>(<argument><expr><operator>(</operator>struct <name>free_block</name><operator>*</operator><operator>)</operator><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>prev_size</name></name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The whole chunk is free. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>prev_size</name></name> <operator>&amp;&amp;</operator> <name><name>header</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* If this block is freed, we still have (allocated_size / 2) free space. */</comment>
		<if_stmt><if>if <condition>(<expr><name>total_size</name> <operator>-</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <operator>(</operator><name>allocated_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>total_size</name> <operator>-=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_remove_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_chunk</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator>
				<sizeof>sizeof<argument_list>(<argument><expr>struct <name>chunk_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
				<sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_unused_memory_exec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name><modifier>*</modifier></type> <name>free_block</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>free_block</name></name><modifier>*</modifier></type> <name>next_free_block</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>free_block</name> <operator>=</operator> <name>free_blocks</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>free_block</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>next_free_block</name> <operator>=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>free_block</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>prev_size</name></name> <operator>&amp;&amp;</operator> 
				<call><name>AS_BLOCK_HEADER</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>total_size</name> <operator>-=</operator> <name><name>free_block</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_remove_free_block</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_chunk</name><argument_list>(<argument><expr><name>free_block</name></expr></argument>, <argument><expr><name><name>free_block</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator>
				<sizeof>sizeof<argument_list>(<argument><expr>struct <name>chunk_header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
				<sizeof>sizeof<argument_list>(<argument><expr>struct <name>block_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>free_block</name> <operator>=</operator> <name>next_free_block</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>total_size</name> <operator>&amp;&amp;</operator> <name>free_blocks</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>total_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>free_blocks</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ALLOCATOR_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_sw</name></type> <name>sljit_exec_offset</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator>struct <name>block_header</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name><operator>)</operator><operator>)</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index><operator>.</operator><name>executable_offset</name></expr>;</return>
</block_content>}</block></function>
</unit>
