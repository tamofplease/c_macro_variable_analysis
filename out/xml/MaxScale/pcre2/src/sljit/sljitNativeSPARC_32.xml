<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativeSPARC_32.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>load_immediate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>imm</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SETHI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3fffff</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>IMM_ARG</name> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>SLJIT_SUCCESS</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG2</name><parameter_list>(<parameter><type><name>flags</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((flags &amp; SRC2_IMM) ? IMM(src2) : S2(src2))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_single_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><name>ICC_IS_SET</name> <operator>==</operator> <name>SET_FLAGS</name></expr></argument>, <argument><expr><name>icc_is_set_and_set_flags_must_be_the_same</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_U8</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>AND</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRA</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S16</name></expr> ?</condition><then> <expr><name>SRA</name></expr> </then><else>: <expr><name>SRL</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XNOR</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SET_FLAGS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BICC</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">7</literal> <operator>&amp;</operator> <name>DISP_MASK</name><operator>)</operator></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Loop. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SET_FLAGS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BICC</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><literal type="number">0xe</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>-</operator><literal type="number">2</literal> <operator>&amp;</operator> <name>DISP_MASK</name><operator>)</operator></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UNMOVABLE_INS</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDC</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBC</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SMUL</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRA</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RDY</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_LINK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_LINK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><name>TMP_LINK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name> <operator>|</operator> <name>SET_FLAGS</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>AND</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XOR</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLL</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLJIT_SUCCESS</name></expr> </then><else>: <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SET_FLAGS</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRL</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLJIT_SUCCESS</name></expr> </then><else>: <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SET_FLAGS</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRA</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>ARG2</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLJIT_SUCCESS</name></expr> </then><else>: <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SET_FLAGS</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg_index</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>word_reg_index</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>float_arg_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>double_arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>float_offset</name> <init>= <expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>types</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>move_to_tmp2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>reg</name> <operator>=</operator> <name><name>reg_map</name><index>[<expr><operator>*</operator><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>types</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&lt;&lt;</operator> <name>SLJIT_DEF_SHIFT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>float_arg_index</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>==</operator> <name>reg</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>move_to_tmp2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>reg_index</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>float_arg_index</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>double_arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>==</operator> <name>reg</name> <operator>||</operator> <name>reg_index</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>reg</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>move_to_tmp2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>reg_index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>!=</operator> <name>word_reg_index</name> <operator>&amp;&amp;</operator> <name>reg_index</name> <operator>&lt;</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <name>reg_index</name> <operator>==</operator> <name>reg</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>move_to_tmp2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>reg_index</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_reg_index</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>move_to_tmp2</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>move_to_tmp2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>arg_types</name> <operator>=</operator> <name>types</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>float_arg_index</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STF</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>float_arg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>float_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>float_arg_index</name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>float_arg_index</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>double_arg_count</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STF</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>float_arg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STF</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>float_arg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STDF</name> <operator>|</operator> <call><name>FD</name><argument_list>(<argument><expr><name>float_arg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>float_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MOVABLE_INS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>float_offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>float_offset</name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>reg_index</name><operator>--</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDUW</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>reg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>float_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>float_offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>reg_index</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>reg_index</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDUW</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>reg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>float_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDUW</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>reg_index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>float_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content> 
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>LDD</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>reg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>float_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>float_offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>reg_index</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_reg_index</name><operator>--</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>!=</operator> <name>word_reg_index</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>reg_index</name> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>reg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S2A</name><argument_list>(<argument><expr><name>word_reg_index</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>reg_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>STW</name> <operator>|</operator> <call><name>DA</name><argument_list>(<argument><expr><name>word_reg_index</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><literal type="number">92</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>word_reg_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SETHI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>init_value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3fffff</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S1</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>IMM_ARG</name> <operator>|</operator> <operator>(</operator><name>init_value</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>DR</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_target</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc1c00000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x01000000</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc1f82000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80102000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffc00000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_target</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3fffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfffffc00</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>new_target</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sljit_set_jump_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>new_constant</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
