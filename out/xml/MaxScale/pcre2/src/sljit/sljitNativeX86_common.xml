<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativeX86_common.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sljit_get_platform_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_X86_32_FASTCALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_X86_32_FASTCALL</name><operator>)</operator></expr></cpp:if>
	<return>return <expr><literal type="string">"x86"</literal> <name>SLJIT_CPUINFO</name> <literal type="string">" ABI:fastcall"</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><literal type="string">"x86"</literal> <name>SLJIT_CPUINFO</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
   32b register indexes:
     0 - EAX
     1 - ECX
     2 - EDX
     3 - EBX
     4 - ESP
     5 - EBP
     6 - ESI
     7 - EDI
*/</comment>

<comment type="block">/*
   64b register indexes:
     0 - RAX
     1 - RCX
     2 - RDX
     3 - RBX
     4 - RSP
     5 - RBP
     6 - RSI
     7 - RDI
     8 - R8   - From now on REX prefix is required
     9 - R9
    10 - R10
    11 - R11
    12 - R12
    13 - R13
    14 - R14
    15 - R15
*/</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>

<comment type="block">/* Last register + 1. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 2)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EXTRA_REGS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter/></parameter_list></cpp:macro>do) \
	if (p &gt;= SLJIT_R3 &amp;&amp; p &lt;= SLJIT_S3) { \
		if (p &lt;= compiler-&gt;scratches) \
			w = compiler-&gt;saveds_offset - ((p) - SLJIT_R2) * (sljit_sw)sizeof(sljit_sw); \
		else \
			w = compiler-&gt;locals_offset + ((p) - SLJIT_S2) * (sljit_sw)sizeof(sljit_sw); \
		p = SLJIT_MEM1(SLJIT_SP); \
		do; \
	}</cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_CONFIG_X86_32 */</comment>

<comment type="block">/* Last register + 1. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 3)</cpp:value></cpp:define>

<comment type="block">/* Note: r12 &amp; 0x7 == 0b100, which decoded as SIB byte present
   Note: avoid to use r12 and r13 for memory addessing
   therefore r12 is better to be a higher saved register. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN64</name></cpp:ifndef>
<comment type="block">/* Args: rdi(=7), rsi(=6), rdx(=2), rcx(=1), r8, r9. Scratches: rax(=0), r10, r11 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">9</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* low-map. reg_map &amp; 0x7. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_lmap</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* Args: rcx(=1), rdx(=2), r8, r9. Scratches: rax(=0), r10, r11 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* low-map. reg_map &amp; 0x7. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_lmap</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Args: xmm0-xmm3 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>freg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<comment type="block">/* low-map. freg_map &amp; 0x7. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>freg_lmap</name><index>[<expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REX_W</name></cpp:macro>		<cpp:value>0x48</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REX_R</name></cpp:macro>		<cpp:value>0x44</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REX_X</name></cpp:macro>		<cpp:value>0x42</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REX_B</name></cpp:macro>		<cpp:value>0x41</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REX</name></cpp:macro>		<cpp:value>0x40</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN64</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALFWORD_MAX</name></cpp:macro> <cpp:value>0x7fffffffl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALFWORD_MIN</name></cpp:macro> <cpp:value>-0x80000000l</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALFWORD_MAX</name></cpp:macro> <cpp:value>0x7fffffffll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALFWORD_MIN</name></cpp:macro> <cpp:value>-0x80000000ll</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_HALFWORD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((x) &lt;= HALFWORD_MAX &amp;&amp; (x) &gt;= HALFWORD_MIN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_HALFWORD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((x) &gt; HALFWORD_MAX || (x) &lt; HALFWORD_MIN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_EXTRA_REGS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter/></parameter_list></cpp:macro>do)</cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_X86_32 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG</name></cpp:macro>	<cpp:value>(0)</cpp:value></cpp:define>

<comment type="block">/* Size flags for emit_x86_instruction: */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_BIN_INS</name></cpp:macro>		<cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_SHIFT_INS</name></cpp:macro>		<cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_REX</name></cpp:macro>		<cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_NO_REXW</name></cpp:macro>		<cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_BYTE_ARG</name></cpp:macro>		<cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_HALF_ARG</name></cpp:macro>		<cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_PREF_66</name></cpp:macro>		<cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_PREF_F2</name></cpp:macro>		<cpp:value>0x0800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_PREF_F3</name></cpp:macro>		<cpp:value>0x1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_SSE2_OP1</name></cpp:macro>		<cpp:value>0x2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_SSE2_OP2</name></cpp:macro>		<cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EX86_SSE2</name></cpp:macro>		<cpp:value>(EX86_SSE2_OP1 | EX86_SSE2_OP2)</cpp:value></cpp:define>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Instrucion forms                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name></cpp:macro>		<cpp:value>(<comment type="block">/* BINARY */</comment> 0 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_EAX_i32</name></cpp:macro>	<cpp:value>0x05</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_r_rm</name></cpp:macro>	<cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_rm_r</name></cpp:macro>	<cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDSD_x_xm</name></cpp:macro>	<cpp:value>0x58</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADC</name></cpp:macro>		<cpp:value>(<comment type="block">/* BINARY */</comment> 2 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADC_EAX_i32</name></cpp:macro>	<cpp:value>0x15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADC_r_rm</name></cpp:macro>	<cpp:value>0x13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADC_rm_r</name></cpp:macro>	<cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND</name></cpp:macro>		<cpp:value>(<comment type="block">/* BINARY */</comment> 4 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND_EAX_i32</name></cpp:macro>	<cpp:value>0x25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND_r_rm</name></cpp:macro>	<cpp:value>0x23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND_rm_r</name></cpp:macro>	<cpp:value>0x21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDPD_x_xm</name></cpp:macro>	<cpp:value>0x54</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSR_r_rm</name></cpp:macro>	<cpp:value>(<comment type="block">/* GROUP_0F */</comment> 0xbd)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_i32</name></cpp:macro>	<cpp:value>0xe8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALL_rm</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_FF */</comment> 2 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CDQ</name></cpp:macro>		<cpp:value>0x99</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMOVE_r_rm</name></cpp:macro>	<cpp:value>(<comment type="block">/* GROUP_0F */</comment> 0x44)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name></cpp:macro>		<cpp:value>(<comment type="block">/* BINARY */</comment> 7 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_EAX_i32</name></cpp:macro>	<cpp:value>0x3d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_r_rm</name></cpp:macro>	<cpp:value>0x3b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP_rm_r</name></cpp:macro>	<cpp:value>0x39</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVTPD2PS_x_xm</name></cpp:macro>	<cpp:value>0x5a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVTSI2SD_x_rm</name></cpp:macro>	<cpp:value>0x2a</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVTTSD2SI_r_xm</name></cpp:macro>	<cpp:value>0x2c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIV</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_F7 */</comment> 6 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVSD_x_xm</name></cpp:macro>	<cpp:value>0x5e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSTPS</name></cpp:macro>		<cpp:value>0xd9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSTPD</name></cpp:macro>		<cpp:value>0xdd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT3</name></cpp:macro>		<cpp:value>0xcc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDIV</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_F7 */</comment> 7 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMUL</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_F7 */</comment> 5 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMUL_r_rm</name></cpp:macro>	<cpp:value>(<comment type="block">/* GROUP_0F */</comment> 0xaf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMUL_r_rm_i8</name></cpp:macro>	<cpp:value>0x6b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMUL_r_rm_i32</name></cpp:macro>	<cpp:value>0x69</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JE_i8</name></cpp:macro>		<cpp:value>0x74</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNE_i8</name></cpp:macro>		<cpp:value>0x75</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JMP_i8</name></cpp:macro>		<cpp:value>0xeb</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JMP_i32</name></cpp:macro>		<cpp:value>0xe9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JMP_rm</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_FF */</comment> 4 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEA_r_m</name></cpp:macro>		<cpp:value>0x8d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_r_rm</name></cpp:macro>	<cpp:value>0x8b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_r_i32</name></cpp:macro>	<cpp:value>0xb8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_rm_r</name></cpp:macro>	<cpp:value>0x89</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_rm_i32</name></cpp:macro>	<cpp:value>0xc7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_rm8_i8</name></cpp:macro>	<cpp:value>0xc6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_rm8_r8</name></cpp:macro>	<cpp:value>0x88</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVSD_x_xm</name></cpp:macro>	<cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVSD_xm_x</name></cpp:macro>	<cpp:value>0x11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVSXD_r_rm</name></cpp:macro>	<cpp:value>0x63</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVSX_r_rm8</name></cpp:macro>	<cpp:value>(<comment type="block">/* GROUP_0F */</comment> 0xbe)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVSX_r_rm16</name></cpp:macro>	<cpp:value>(<comment type="block">/* GROUP_0F */</comment> 0xbf)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVZX_r_rm8</name></cpp:macro>	<cpp:value>(<comment type="block">/* GROUP_0F */</comment> 0xb6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVZX_r_rm16</name></cpp:macro>	<cpp:value>(<comment type="block">/* GROUP_0F */</comment> 0xb7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_F7 */</comment> 4 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULSD_x_xm</name></cpp:macro>	<cpp:value>0x59</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG_rm</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_F7 */</comment> 3 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro>		<cpp:value>0x90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_rm</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_F7 */</comment> 2 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR</name></cpp:macro>		<cpp:value>(<comment type="block">/* BINARY */</comment> 1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR_r_rm</name></cpp:macro>		<cpp:value>0x0b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR_EAX_i32</name></cpp:macro>	<cpp:value>0x0d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR_rm_r</name></cpp:macro>		<cpp:value>0x09</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OR_rm8_r8</name></cpp:macro>	<cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP_r</name></cpp:macro>		<cpp:value>0x58</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP_rm</name></cpp:macro>		<cpp:value>0x8f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POPF</name></cpp:macro>		<cpp:value>0x9d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREFETCH</name></cpp:macro>	<cpp:value>0x18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_i32</name></cpp:macro>	<cpp:value>0x68</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_r</name></cpp:macro>		<cpp:value>0x50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_rm</name></cpp:macro>		<cpp:value>(<comment type="block">/* GROUP_FF */</comment> 6 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSHF</name></cpp:macro>		<cpp:value>0x9c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_near</name></cpp:macro>	<cpp:value>0xc3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_i16</name></cpp:macro>		<cpp:value>0xc2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBB</name></cpp:macro>		<cpp:value>(<comment type="block">/* BINARY */</comment> 3 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBB_EAX_i32</name></cpp:macro>	<cpp:value>0x1d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBB_r_rm</name></cpp:macro>	<cpp:value>0x1b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBB_rm_r</name></cpp:macro>	<cpp:value>0x19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAR</name></cpp:macro>		<cpp:value>(<comment type="block">/* SHIFT */</comment> 7 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHL</name></cpp:macro>		<cpp:value>(<comment type="block">/* SHIFT */</comment> 4 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHR</name></cpp:macro>		<cpp:value>(<comment type="block">/* SHIFT */</comment> 5 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB</name></cpp:macro>		<cpp:value>(<comment type="block">/* BINARY */</comment> 5 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_EAX_i32</name></cpp:macro>	<cpp:value>0x2d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_r_rm</name></cpp:macro>	<cpp:value>0x2b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_rm_r</name></cpp:macro>	<cpp:value>0x29</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBSD_x_xm</name></cpp:macro>	<cpp:value>0x5c</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_EAX_i32</name></cpp:macro>	<cpp:value>0xa9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_rm_r</name></cpp:macro>	<cpp:value>0x85</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UCOMISD_x_xm</name></cpp:macro>	<cpp:value>0x2e</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNPCKLPD_x_xm</name></cpp:macro>	<cpp:value>0x14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCHG_EAX_r</name></cpp:macro>	<cpp:value>0x90</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XCHG_r_rm</name></cpp:macro>	<cpp:value>0x87</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR</name></cpp:macro>		<cpp:value>(<comment type="block">/* BINARY */</comment> 6 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR_EAX_i32</name></cpp:macro>	<cpp:value>0x35</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR_r_rm</name></cpp:macro>	<cpp:value>0x33</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XOR_rm_r</name></cpp:macro>	<cpp:value>0x31</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XORPD_x_xm</name></cpp:macro>	<cpp:value>0x57</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_0F</name></cpp:macro>	<cpp:value>0x0f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_F7</name></cpp:macro>	<cpp:value>0xf7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_FF</name></cpp:macro>	<cpp:value>0xff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_BINARY_81</name></cpp:macro>	<cpp:value>0x81</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_BINARY_83</name></cpp:macro>	<cpp:value>0x83</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_SHIFT_1</name></cpp:macro>	<cpp:value>0xd1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_SHIFT_N</name></cpp:macro>	<cpp:value>0xc1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_SHIFT_CL</name></cpp:macro>	<cpp:value>0xd3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_REG</name></cpp:macro>		<cpp:value>0xc0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_DISP8</name></cpp:macro>	<cpp:value>0x40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INC_SIZE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>(*inst++ = (s), compiler-&gt;size += (s))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_REG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>(*inst++ = (PUSH_r + (r)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP_REG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>(*inst++ = (POP_r + (r)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET</name><parameter_list>()</parameter_list></cpp:macro>				<cpp:value>(*inst++ = (RET_near))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RET_I16</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>(*inst++ = (RET_i16), *inst++ = n, *inst++ = 0)</cpp:value></cpp:define>
<comment type="block">/* r32, r/m32 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV_RM</name><parameter_list>(<parameter><type><name>mod</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>, <parameter><type><name>rm</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(*inst++ = (MOV_r_rm), *inst++ = (mod) &lt;&lt; 6 | (reg) &lt;&lt; 3 | (rm))</cpp:value></cpp:define>

<comment type="block">/* Multithreading does not affect these static variables, since they store
   built-in CPU features. Therefore they can be overwritten by different threads
   if they detect the CPU features in the same time. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_DETECT_SSE2</name> <operator>&amp;&amp;</operator> <name>SLJIT_DETECT_SSE2</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>cpu_has_sse2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>cpu_has_cmov</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32_WCE</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmnintrin.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/******************************************************/</comment>
<comment type="block">/*    Unaligned-store functions                       */</comment>
<comment type="block" format="doxygen">/******************************************************/</comment>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>sljit_unaligned_store_s16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_s16</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_MEMCPY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>sljit_unaligned_store_s32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_MEMCPY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>sljit_unaligned_store_sw</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_MEMCPY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/******************************************************/</comment>
<comment type="block">/*    Utility functions                               */</comment>
<comment type="block" format="doxygen">/******************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_cpu_features</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>features</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>_MSC_VER</name> <operator>&gt;=</operator> <literal type="number">1400</literal></expr></cpp:if>

	<decl_stmt><decl><type><name>int</name></type> <name><name>CPUInfo</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>__cpuid</name><argument_list>(<argument><expr><name>CPUInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>features</name> <operator>=</operator> <operator>(</operator><name>sljit_u32</name><operator>)</operator><name><name>CPUInfo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__SUNPRO_C</name></expr></argument>)</argument_list></call></expr></cpp:elif>

	<comment type="block">/* AT&amp;T syntax. */</comment>
	<asm>__asm__ (
		"movl $0x1, %%eax\n"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<comment type="block">/* On x86-32, there is no red zone, so this
		   should work (no need for a local variable). */</comment>
		"push %%ebx\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		"cpuid\n"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		"pop %%ebx\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		"movl %%edx, %0\n"
		: "=g" (features)
		:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		: "%eax", "%ecx", "%edx"
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		: "%rax", "%rbx", "%rcx", "%rdx"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	);</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* _MSC_VER &amp;&amp; _MSC_VER &gt;= 1400 */</comment>

	<comment type="block">/* Intel syntax. */</comment>
	<asm>__asm {
		<asm>mov eax, 1</asm>
		<asm>cpuid</asm>
		<asm>mov features, edx</asm>
	}</asm>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _MSC_VER &amp;&amp; _MSC_VER &gt;= 1400 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_DETECT_SSE2</name> <operator>&amp;&amp;</operator> <name>SLJIT_DETECT_SSE2</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>cpu_has_sse2</name> <operator>=</operator> <operator>(</operator><name>features</name> <operator>&gt;&gt;</operator> <literal type="number">26</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>cpu_has_cmov</name> <operator>=</operator> <operator>(</operator><name>features</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_u8</name></type> <name>get_jump_code</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x84</literal></expr> <comment type="block">/* je */</comment>;</return>

	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x85</literal></expr> <comment type="block">/* jne */</comment>;</return>

	<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x82</literal></expr> <comment type="block">/* jc */</comment>;</return>

	<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x83</literal></expr> <comment type="block">/* jae */</comment>;</return>

	<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x87</literal></expr> <comment type="block">/* jnbe */</comment>;</return>

	<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x86</literal></expr> <comment type="block">/* jbe */</comment>;</return>

	<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
		<return>return <expr><literal type="number">0x8c</literal></expr> <comment type="block">/* jl */</comment>;</return>

	<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
		<return>return <expr><literal type="number">0x8d</literal></expr> <comment type="block">/* jnl */</comment>;</return>

	<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
		<return>return <expr><literal type="number">0x8f</literal></expr> <comment type="block">/* jnle */</comment>;</return>

	<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
		<return>return <expr><literal type="number">0x8e</literal></expr> <comment type="block">/* jle */</comment>;</return>

	<case>case <expr><name>SLJIT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
		<return>return <expr><literal type="number">0x80</literal></expr> <comment type="block">/* jo */</comment>;</return>

	<case>case <expr><name>SLJIT_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
		<return>return <expr><literal type="number">0x81</literal></expr> <comment type="block">/* jno */</comment>;</return>

	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x8a</literal></expr> <comment type="block">/* jp */</comment>;</return>

	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x8b</literal></expr> <comment type="block">/* jpo */</comment>;</return>
	</block_content>}</block></switch>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>sljit_u8</name><modifier>*</modifier></type> <name>generate_far_jump_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>sljit_u8</name><modifier>*</modifier></type> <name>generate_far_jump_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sljit_u8</name><modifier>*</modifier></type> <name>generate_put_label_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>max_label</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>sljit_u8</name><modifier>*</modifier></type> <name>generate_near_jump_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>type</name> <init>= <expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&gt;&gt;</operator> <name>TYPE_SHIFT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>short_jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>label_addr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>label_addr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>label_addr</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <name>executable_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>short_jump</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>label_addr</name> <operator>-</operator> <operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <operator>-</operator><literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>label_addr</name> <operator>-</operator> <operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <literal type="number">127</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>label_addr</name> <operator>-</operator> <operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;</operator> <name>HALFWORD_MAX</name> <operator>||</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>label_addr</name> <operator>-</operator> <operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>HALFWORD_MIN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>generate_far_jump_code</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SLJIT_JUMP</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>short_jump</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>code_ptr</name><operator>++</operator> <operator>=</operator> <name>JMP_i8</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>code_ptr</name><operator>++</operator> <operator>=</operator> <name>JMP_i32</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>short_jump</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>code_ptr</name><operator>++</operator> <operator>=</operator> <name>CALL_i32</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>short_jump</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>code_ptr</name><operator>++</operator> <operator>=</operator> <call><name>get_jump_code</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>code_ptr</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>code_ptr</name><operator>++</operator> <operator>=</operator> <call><name>get_jump_code</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>short_jump</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_MB</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>code_ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s8</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_MW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>code_ptr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>code_ptr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_generate_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>code_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>jump_addr</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_generate_code</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Second code generation pass. */</comment>
	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC_EXEC</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_WITH_EXEC_IF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>labels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>consts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>executable_offset</name> <operator>=</operator> <call><name>SLJIT_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>memory</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf_ptr</name> <operator>+</operator> <name><name>buf</name><operator>-&gt;</operator><name>used_size</name></name></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* The code is already generated. */</comment>
				<expr_stmt><expr><call><name>SLJIT_MEMCPY</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>code_ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<switch>switch <condition>(<expr><operator>*</operator><name>buf_ptr</name></expr>)</condition> <block>{<block_content>
				<case>case <expr><literal type="number">0</literal></expr>:</case>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">1</literal></expr>:</case>
					<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <call><name>generate_near_jump_code</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
						<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <call><name>generate_far_jump_code</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <call><name>generate_far_jump_code</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="number">2</literal></expr>:</case>
					<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name><operator>)</operator> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
					<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>const_</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>buf_ptr</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
					<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <call><name>generate_put_label_code</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></switch>
				<expr_stmt><expr><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block> while <condition>(<expr><name>buf_ptr</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition>;</do>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>buf_ptr</name> <operator>==</operator> <name>buf_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>buf</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>&lt;=</operator> <name>code</name> <operator>+</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>jump</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>jump_addr</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>+</operator> <name>executable_offset</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_MB</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s8</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <operator>-</operator><literal type="number">128</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s8</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s8</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_MW</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
				<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>HALFWORD_MIN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <name>HALFWORD_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sljit_unaligned_store_s32</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
				<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <name>HALFWORD_MIN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <name>HALFWORD_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sljit_unaligned_store_s32</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>jump_addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if type="elseif">else if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_MD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>put_label</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_MD</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;</operator> <name>HALFWORD_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;=</operator> <name>HALFWORD_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_unaligned_store_s32</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_COMPILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_has_cpu_feature</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>feature_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>feature_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_HAS_FPU</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SLJIT_IS_FPU_AVAILABLE</name></cpp:ifdef>
		<return>return <expr><name>SLJIT_IS_FPU_AVAILABLE</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_DETECT_SSE2</name> <operator>&amp;&amp;</operator> <name>SLJIT_DETECT_SSE2</name><operator>)</operator></expr></cpp:elif>
		<if_stmt><if>if <condition>(<expr><name>cpu_has_sse2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>get_cpu_features</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>cpu_has_sse2</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_DETECT_SSE2 */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_DETECT_SSE2 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<case>case <expr><name>SLJIT_HAS_VIRTUAL_REGISTERS</name></expr>:</case>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<case>case <expr><name>SLJIT_HAS_CLZ</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_CMOV</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>cpu_has_cmov</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>get_cpu_features</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>cpu_has_cmov</name></expr>;</return>

	<case>case <expr><name>SLJIT_HAS_PREFETCH</name></expr>:</case>
		<return>return <expr><literal type="number">1</literal></expr>;</return>

	<case>case <expr><name>SLJIT_HAS_SSE2</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_DETECT_SSE2</name> <operator>&amp;&amp;</operator> <name>SLJIT_DETECT_SSE2</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>cpu_has_sse2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>get_cpu_features</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>cpu_has_sse2</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<default>default:</default>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Operators                                                            */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_OPCODE</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((opcode ## _EAX_i32) &lt;&lt; 24) | ((opcode ## _r_rm) &lt;&lt; 16) | ((opcode ## _rm_r) &lt;&lt; 8) | (opcode))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_cum_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_u32</name></type> <name>op_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_non_cum_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_u32</name></type> <name>op_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_mov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_MOV</name><parameter_list>(<parameter><type><name>compiler</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>dstw</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>FAIL_IF(emit_mov(compiler, dst, dstw, src, srcw));</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_sse2_store</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>single</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_sse2_load</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>single</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_cmp_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_endbranch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_CET</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_CET</name><operator>)</operator></expr></cpp:if>
	<comment type="block">/* Emit endbr32/endbr64 when CET is enabled.  */</comment>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0x1e</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <literal type="number">0xfb</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <literal type="number">0xfa</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_X86_CET */</comment>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_X86_CET */</comment>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_CET</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_CET</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__SHSTK__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_rdssp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>size</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf3</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>REX_W</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>REX_B</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0x1e</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <operator>(</operator><literal type="number">0x3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0x1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_incssp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>size</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0xf3</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>REX_W</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>REX_B</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0xae</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <operator>(</operator><literal type="number">0x3</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0x5</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_X86_CET &amp;&amp; __SHSTK__ */</comment>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>cpu_has_shadow_stack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_CET</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_CET</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__SHSTK__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<return>return <expr><call><name>_get_ssp</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_X86_CET || !__SHSTK__ */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_X86_CET &amp;&amp; __SHSTK__ */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>adjust_shadow_stack</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>disp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_CET</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_CET</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>defined</name> <argument_list>(<argument><expr><name>__SHSTK__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>jz_after_cmp_inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>size_jz_after_cmp_inst</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>size_before_rdssp_inst</name> <init>= <expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Generate "RDSSP TMP_REG1". */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_rdssp</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Load return address on shadow stack into TMP_REG1. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Hand code unsupported "mov 0x0(%ebp),%ebp". */</comment>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0x8b</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0x6d</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_X86_32 */</comment>
	<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_X86_32 */</comment>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Return address is on stack.  */</comment>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>srcw</name> <operator>=</operator> <name>disp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Compare return address against TMP_REG1. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_cmp_binary</name> <argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Generate JZ to skip shadow stack ajdustment when shadow
	   stack matches normal stack. */</comment>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <call><name>get_jump_code</name><argument_list>(<argument><expr><name>SLJIT_EQUAL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>size_jz_after_cmp_inst</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>jz_after_cmp_inst</name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<comment type="block">/* REX_W is not necessary. */</comment>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* Load 1 into TMP_REG1. */</comment>
	<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Generate "INCSSP TMP_REG1". */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_incssp</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Jump back to "RDSSP TMP_REG1" to check shadow stack again. */</comment>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>JMP_i8</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>size_before_rdssp_inst</name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>jz_after_cmp_inst</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>size_jz_after_cmp_inst</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_X86_CET || !__SHSTK__ */</comment>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>disp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_X86_CET &amp;&amp; __SHSTK__ */</comment>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeX86_32.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeX86_64.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_mov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>!=</operator> <name>SLJIT_UNUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm_r</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
			<return>return <expr><call><name>emit_do_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_r_i32</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>NOT_HALFWORD</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><call><name>emit_do_imm32</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><name>REX_B</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>MOV_r_i32</name> <operator>+</operator> <name><name>reg_lmap</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>&amp;&amp;</operator> <call><name>NOT_HALFWORD</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Immediate to memory move. Only SLJIT_MOV operation copies
			   an immediate directly into memory so TMP_REG1 can be used. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm_r</name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm_i32</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_r_rm</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Memory to memory move. Only SLJIT_MOV operation copies
	   data from memory to memory so TMP_REG1 can be used. */</comment>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_r_rm</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm_r</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>size</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op0</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_BREAKPOINT</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>INT3</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NOP</name></expr>:</case>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_LMUL_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_LMUL_SW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIVMOD_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIVMOD_SW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_SW</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(
			<argument><expr><name><name>reg_map</name><index>[<expr><name>SLJIT_R0</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal>
			<operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(
			<argument><expr><name><name>reg_map</name><index>[<expr><name>SLJIT_R0</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal>
			<operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">7</literal>
			<operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>SLJIT_DIVMOD_UW</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SLJIT_DIV_UW</name> <operator>-</operator> <literal type="number">0x2</literal> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr></argument>, <argument><expr><name>bad_div_opcode_assignments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_R1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_R1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_R1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>XOR_r_rm</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_SW</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_R1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CDQ</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CDQ</name></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>REX_W</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CDQ</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIVMOD_UW</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr> </then><else>: <expr><name><name>reg_map</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIVMOD_UW</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>REX_W</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIVMOD_UW</name><operator>)</operator></expr> ?</condition><then> <expr><name>REX_B</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIVMOD_UW</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>REX_B</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIVMOD_UW</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>reg_lmap</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr> </then><else>: <expr><name><name>reg_lmap</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>REX_W</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_LMUL_UW</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>MUL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_LMUL_SW</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>IMUL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_DIVMOD_UW</name></expr>:</case>
		<case>case <expr><name>SLJIT_DIV_UW</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>DIV</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_DIVMOD_SW</name></expr>:</case>
		<case>case <expr><name>SLJIT_DIV_SW</name></expr>:</case>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>IDIV</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;=</operator> <name>SLJIT_DIVMOD_SW</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_R1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIV_UW</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_R1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<break>break;</break>
	<case>case <expr><name>SLJIT_ENDBR</name></expr>:</case>
		<return>return <expr><call><name>emit_endbranch</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_RETURN</name></expr>:</case>
		<return>return <expr><call><name>skip_frames_before_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_PREFIX</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		inst = (sljit_u8*)ensure_buf(compiler, 1 + 1); \
		FAIL_IF(!inst); \
		INC_SIZE(1); \
		*inst = (prefix); \
	} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_mov_byte</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>sign</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>work_r</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
			<return>return <expr><call><name>emit_do_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_r_i32</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm_i32</name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_BYTE_ARG</name> <operator>|</operator> <name>EX86_NO_REXW</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm8_i8</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name><name>reg_map</name><index>[<expr><name>src</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst_r</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><name>src</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* src, dst are registers. */</comment>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><name>MOVSX_r_rm8</name></expr> </then><else>: <expr><name>MOVZX_r_rm8</name></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* shl reg, 24 */</comment>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>SHL</name></expr>;</expr_stmt>
				<comment type="block">/* sar reg, 24 */</comment>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>SAR</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_BIN_INS</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>inst</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|=</operator> <name>AND</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else <block>{<block_content>
		<comment type="block">/* src can be memory addr or reg_map[src] &lt; 4 on x86_32 architectures. */</comment>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><name>MOVSX_r_rm8</name></expr> </then><else>: <expr><name>MOVZX_r_rm8</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_REG1</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Find a non-used register, whose reg_map[src] &lt; 4. */</comment>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_R0</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator> <operator>==</operator> <call><name>TO_OFFS_REG</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>work_r</name> <operator>=</operator> <name>SLJIT_R2</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>work_r</name> <operator>=</operator> <name>SLJIT_R1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name><operator>)</operator> <operator>!=</operator> <call><name>TO_OFFS_REG</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>work_r</name> <operator>=</operator> <name>SLJIT_R0</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_R1</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>work_r</name> <operator>=</operator> <name>SLJIT_R2</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>work_r</name> <operator>=</operator> <name>SLJIT_R1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>work_r</name> <operator>==</operator> <name>SLJIT_R0</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ENCODE_PREFIX</name><argument_list>(<argument><expr><name>XCHG_EAX_r</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>work_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>XCHG_r_rm</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>work_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm8_r8</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>work_r</name> <operator>==</operator> <name>SLJIT_R0</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>ENCODE_PREFIX</name><argument_list>(<argument><expr><name>XCHG_EAX_r</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>work_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>XCHG_r_rm</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm8_r8</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_REX</name> <operator>|</operator> <name>EX86_NO_REXW</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm8_r8</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_prefetch</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>PREFETCH</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_PREFETCH_L1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_PREFETCH_L2</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_PREFETCH_L3</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_mov_half</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>sign</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
			<return>return <expr><call><name>emit_do_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV_r_i32</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm_i32</name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_HALF_ARG</name> <operator>|</operator> <name>EX86_NO_REXW</name> <operator>|</operator> <name>EX86_PREF_66</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm_i32</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <ternary><condition><expr><name>sign</name></expr> ?</condition><then> <expr><name>MOVSX_r_rm16</name></expr> </then><else>: <expr><name>MOVZX_r_rm16</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_NO_REXW</name> <operator>|</operator> <name>EX86_PREF_66</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOV_rm_r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_unary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name></type> <name>opcode</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src</name> <operator>&amp;&amp;</operator> <name>dstw</name> <operator>==</operator> <name>srcw</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Same input and output */</comment>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>opcode</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>opcode</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>opcode</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_not_with_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>NOT_rm</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>OR_r_rm</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>NOT_rm</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>OR_r_rm</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_sw</name></type> <name>emit_clz_arg</name> <init>= <expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_clz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op_flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cpu_has_cmov</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>get_cpu_features</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>BSR_r_rm</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>cpu_has_cmov</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>TMP_REG1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SLJIT_MEM0</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>&amp;</operator><name>emit_clz_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CMOVE_r_rm</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_cmov_generic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_EQUAL</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_BIN_INS</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>cpu_has_cmov</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">63</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">31</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CMOVE_r_rm</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_cmov_generic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_EQUAL</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">63</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>+</operator> <literal type="number">31</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_BIN_INS</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">63</literal></expr> </then><else>: <expr><literal type="number">31</literal></expr></else></ternary></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>inst</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>|=</operator> <name>XOR</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>op_flags</name> <init>= <expr><call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_is_ereg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>dst_is_ereg</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>src</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TYPE_CAST_NEEDED</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S32</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>op</name> <operator>=</operator> <name>SLJIT_MOV_U32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_U32</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>op</name> <operator>=</operator> <name>SLJIT_MOV_S32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s8</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_u16</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s16</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt>
				<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
			<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_u32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
				<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt>
				<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></switch>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst_is_ereg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst_is_ereg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>op</name> <operator>==</operator> <name>SLJIT_MOV</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV_U32</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV_S32</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV_P</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
		<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
		<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_byte</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_byte</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_half</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_half</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_int</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_int</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></switch>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst_is_ereg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dst</name> <operator>==</operator> <name>TMP_REG1</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>op_flags</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_not_with_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>emit_unary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOT_rm</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_NEG</name></expr>:</case>
		<return>return <expr><call><name>emit_unary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NEG_rm</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<return>return <expr><call><name>emit_clz</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op_flags</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_IMM</name><parameter_list>(<parameter><type><name>op_imm</name></type></parameter>, <parameter><type><name>op_mr</name></type></parameter>, <parameter><type><name>immw</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>argw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if (IS_HALFWORD(immw) || compiler-&gt;mode32) { \
		inst = emit_x86_instruction(compiler, 1 | EX86_BIN_INS, SLJIT_IMM, immw, arg, argw); \
		FAIL_IF(!inst); \
		*(inst + 1) |= (op_imm); \
	} \
	else { \
		FAIL_IF(emit_load_imm64(compiler, (arg == TMP_REG1) ? TMP_REG2 : TMP_REG1, immw)); \
		inst = emit_x86_instruction(compiler, 1, (arg == TMP_REG1) ? TMP_REG2 : TMP_REG1, 0, arg, argw); \
		FAIL_IF(!inst); \
		*inst = (op_mr); \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_EAX_IMM</name><parameter_list>(<parameter><type><name>op_eax_imm</name></type></parameter>, <parameter><type><name>immw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>FAIL_IF(emit_do_imm32(compiler, (!compiler-&gt;mode32) ? REX_W : 0, (op_eax_imm), immw))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_IMM</name><parameter_list>(<parameter><type><name>op_imm</name></type></parameter>, <parameter><type><name>op_mr</name></type></parameter>, <parameter><type><name>immw</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>, <parameter><type><name>argw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>inst = emit_x86_instruction(compiler, 1 | EX86_BIN_INS, SLJIT_IMM, immw, arg, argw); \
	FAIL_IF(!inst); \
	*(inst + 1) |= (op_imm);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINARY_EAX_IMM</name><parameter_list>(<parameter><type><name>op_eax_imm</name></type></parameter>, <parameter><type><name>immw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>FAIL_IF(emit_do_imm(compiler, (op_eax_imm), immw))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_cum_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_u32</name></type> <name>op_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>op_eax_imm</name> <init>= <expr><operator>(</operator><name>op_types</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>op_rm</name> <init>= <expr><operator>(</operator><name>op_types</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>op_mr</name> <init>= <expr><operator>(</operator><name>op_types</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>op_imm</name> <init>= <expr><name>op_types</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src1</name> <operator>&amp;&amp;</operator> <name>dstw</name> <operator>==</operator> <name>src1w</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>==</operator> <name>SLJIT_R0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src2w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>==</operator> <name>SLJIT_R0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src2w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>BINARY_EAX_IMM</name><argument_list>(<argument><expr><name>op_eax_imm</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Special exception for sljit_emit_op_flags. */</comment>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_mr</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_mr</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Only for cumulative operations. */</comment>
	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src2</name> <operator>&amp;&amp;</operator> <name>dstw</name> <operator>==</operator> <name>src2w</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>==</operator> <name>SLJIT_R0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src1w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>==</operator> <name>SLJIT_R0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src1w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>BINARY_EAX_IMM</name><argument_list>(<argument><expr><name>op_eax_imm</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_mr</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_mr</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* General version. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* This version requires less memory writing. */</comment>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_non_cum_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_u32</name></type> <name>op_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>op_eax_imm</name> <init>= <expr><operator>(</operator><name>op_types</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>op_rm</name> <init>= <expr><operator>(</operator><name>op_types</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>op_mr</name> <init>= <expr><operator>(</operator><name>op_types</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>op_imm</name> <init>= <expr><name>op_types</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src1</name> <operator>&amp;&amp;</operator> <name>dstw</name> <operator>==</operator> <name>src1w</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>==</operator> <name>SLJIT_R0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src2w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst</name> <operator>==</operator> <name>SLJIT_R0</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src2w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>BINARY_EAX_IMM</name><argument_list>(<argument><expr><name>op_eax_imm</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_mr</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_mr</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* General version. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* This version requires less memory writing. */</comment>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>op_imm</name></expr></argument>, <argument><expr><name>op_mr</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>op_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_mul</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<comment type="block">/* Register destination. */</comment>
	<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>src1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>src2</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>dst_r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>src2w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>src1w</name> <operator>&lt;=</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <name>src1w</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm_i8</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_s8</name><operator>)</operator><name>src1w</name></expr>;</expr_stmt>
		</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm_i32</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if type="elseif">else if <condition>(<expr><call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm_i32</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_unaligned_store_s32</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>src2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Note: src1 is NOT immediate. */</comment>

		<if_stmt><if>if <condition>(<expr><name>src2w</name> <operator>&lt;=</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <name>src2w</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">128</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm_i8</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_s8</name><operator>)</operator><name>src2w</name></expr>;</expr_stmt>
		</block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm_i32</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if type="elseif">else if <condition>(<expr><call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm_i32</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_unaligned_store_s32</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>src1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* Neither argument is immediate. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>ADDRESSING_DEPENDS_ON</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>IMUL_r_rm</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_lea_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>, <decl><type ref="prev"/><name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* These cases better be left to handled by normal way. */</comment>
	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src1</name> <operator>&amp;&amp;</operator> <name>dstw</name> <operator>==</operator> <name>src1w</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src2</name> <operator>&amp;&amp;</operator> <name>dstw</name> <operator>==</operator> <name>src2w</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SLJIT_MEM2</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>LEA_r_m</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>LEA_r_m</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>LEA_r_m</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>done</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_REG1</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_cmp_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>==</operator> <name>SLJIT_R0</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src2w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>==</operator> <name>SLJIT_R0</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src2w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>BINARY_EAX_IMM</name><argument_list>(<argument><expr><name>CMP_EAX_i32</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>CMP</name></expr></argument>, <argument><expr><name>CMP_rm_r</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CMP_r_rm</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CMP_rm_r</name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>src1w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>BINARY_IMM</name><argument_list>(<argument><expr><name>CMP</name></expr></argument>, <argument><expr><name>CMP_rm_r</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CMP_r_rm</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_test_binary</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>==</operator> <name>SLJIT_R0</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src2w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>==</operator> <name>SLJIT_R0</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src2w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>BINARY_EAX_IMM</name><argument_list>(<argument><expr><name>TEST_EAX_i32</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>==</operator> <name>SLJIT_R0</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src1w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>||</operator> <call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>==</operator> <name>SLJIT_R0</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>src1w</name> <operator>&gt;</operator> <literal type="number">127</literal> <operator>||</operator> <name>src1w</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">128</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>BINARY_EAX_IMM</name><argument_list>(<argument><expr><name>TEST_EAX_i32</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>TEST_rm_r</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>TEST_rm_r</name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>TEST_rm_r</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>TEST_rm_r</name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><call><name>IS_HALFWORD</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>TEST_rm_r</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>GROUP_F7</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>TEST_rm_r</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_shift</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_u8</name></type> <name>mode</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>src2</name> <operator>==</operator> <name>SLJIT_PREF_SHIFT_REG</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src1</name> <operator>&amp;&amp;</operator> <name>dstw</name> <operator>==</operator> <name>src1w</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_PREF_SHIFT_REG</name> <operator>&amp;&amp;</operator> <name>src2</name> <operator>==</operator> <name>SLJIT_PREF_SHIFT_REG</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_PREF_SHIFT_REG</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dst</name> <operator>!=</operator> <name>src2</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ADDRESSING_DEPENDS_ON</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>!=</operator> <name>dst</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<comment type="block">/* This case is complex since ecx itself may be used for
		   addressing, and this case must be supported as well. */</comment>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>|</operator> <name>EX86_SHIFT_INS</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <name>mode</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_PREF_SHIFT_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_shift_with_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_u8</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>set_flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* The CPU does not set flags if the shift count is 0. */</comment>
	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2w</name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>src2w</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_shift</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2w</name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_shift</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>set_flags</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<comment type="block">/* OR dst, src, 0 */</comment>
		<return>return <expr><call><name>emit_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>set_flags</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_shift</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_cmp_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_shift</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_cmp_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name><operator>)</operator></expr> ?</condition><then> <expr><name>TMP_REG1</name></expr> </then><else>: <expr><name>dst</name></expr></else></ternary></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>emit_lea_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_ERR_UNSUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>emit_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>ADD</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<return>return <expr><call><name>emit_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>ADC</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>emit_lea_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><operator>-</operator><name>src2w</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_ERR_UNSUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>src2</name> <operator>==</operator> <name>dst</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_non_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>emit_unary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NEG_rm</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_cmp_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>emit_non_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>SUB</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<return>return <expr><call><name>emit_non_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>SBB</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<return>return <expr><call><name>emit_mul</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_test_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>emit_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>AND</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
		<return>return <expr><call><name>emit_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>OR</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<return>return <expr><call><name>emit_cum_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>BINARY_OPCODE</name><argument_list>(<argument><expr><name>XOR</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
		<return>return <expr><call><name>emit_shift_with_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SHL</name></expr></argument>, <argument><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<return>return <expr><call><name>emit_shift_with_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SHR</name></expr></argument>, <argument><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<return>return <expr><call><name>emit_shift_with_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SAR</name></expr></argument>, <argument><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_src</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_FAST_RETURN</name></expr>:</case>
		<return>return <expr><call><name>emit_fast_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_FAST_RETURN</name></expr>:</case>
		<comment type="block">/* Don't adjust shadow stack if it isn't enabled.  */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cpu_has_shadow_stack</name> <argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>adjust_shadow_stack</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>SLJIT_UNUSED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_PREFETCH_L1</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L2</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L3</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_ONCE</name></expr>:</case>
		<return>return <expr><call><name>emit_prefetch</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>&gt;=</operator> <name>SLJIT_R3</name> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>SLJIT_R8</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_float_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_float_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<return>return <expr><name>reg</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><name><name>freg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_custom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_custom</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_MEMCPY</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Floating point operators                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* Alignment(3) + 4 * 16 bytes. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name><name>sse2_data</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_s32</name> <modifier>*</modifier></type><name>sse2_buffer</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_compiler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Align to 16 bytes. */</comment>
	<expr_stmt><expr><name>sse2_buffer</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>sse2_data</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* Single precision constants (each constant is 16 byte long). */</comment>
	<expr_stmt><expr><name><name>sse2_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sse2_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>
	<comment type="block">/* Double precision constants (each constant is 16 byte long). */</comment>
	<expr_stmt><expr><name><name>sse2_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sse2_buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80000000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sse2_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sse2_buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_sse2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name></type> <name>opcode</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>single</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>xmm1</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>xmm2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>xmm2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>single</name></expr> ?</condition><then> <expr><name>EX86_PREF_F3</name></expr> </then><else>: <expr><name>EX86_PREF_F2</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>EX86_SSE2</name></expr></argument>, <argument><expr><name>xmm1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xmm2</name></expr></argument>, <argument><expr><name>xmm2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_sse2_logic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_u8</name></type> <name>opcode</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>pref66</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>xmm1</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>xmm2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>xmm2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>pref66</name></expr> ?</condition><then> <expr><name>EX86_PREF_66</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>EX86_SSE2</name></expr></argument>, <argument><expr><name>xmm1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xmm2</name></expr></argument>, <argument><expr><name>xmm2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>opcode</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_sse2_load</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>single</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>emit_sse2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVSD_x_xm</name></expr></argument>, <argument><expr><name>single</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_sse2_store</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>single</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>emit_sse2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVSD_xm_x</name></expr></argument>, <argument><expr><name>single</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_sw_from_f64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_SW_FROM_F64</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>EX86_PREF_F3</name></expr> </then><else>: <expr><name>EX86_PREF_F2</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>EX86_SSE2_OP2</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CVTTSD2SI_r_xm</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_f64_from_sw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_SW</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_S32</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>srcw</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>srcw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>srcw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>EX86_PREF_F3</name></expr> </then><else>: <expr><name>EX86_PREF_F2</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>EX86_SSE2_OP1</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>CVTSI2SD_x_rm</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_FREG</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_sse2_store</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>emit_sse2_logic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>UCOMISD_x_xm</name></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT_FOP1_OPERATION_WITH_CHECKS</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_MOV_F64</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_sse2_store</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>emit_sse2_store</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_F32</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG</name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<comment type="block">/* We overwrite the high bits of source. From SLJIT point of view,
			   this is not an issue.
			   Note: In SSE3, we could also use MOVDDUP and MOVSLDUP. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_logic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>UNPCKLPD_x_xm</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_FREG</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_logic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CVTPD2PS_x_xm</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_FREG</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_sse2_store</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>TMP_FREG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_NEG_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_logic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORPD_x_xm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM0</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr> ?</condition><then> <expr><name>sse2_buffer</name></expr> </then><else>: <expr><name>sse2_buffer</name> <operator>+</operator> <literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_ABS_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_logic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDPD_x_xm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><call><name>SLJIT_MEM0</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr> ?</condition><then> <expr><name>sse2_buffer</name> <operator>+</operator> <literal type="number">4</literal></expr> </then><else>: <expr><name>sse2_buffer</name> <operator>+</operator> <literal type="number">12</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_FREG</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_sse2_store</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fop2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src1</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></if> <comment type="block">/* Do nothing here. */</comment>
		<if type="elseif">else if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src2</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>SLJIT_ADD_F64</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MUL_F64</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Swap arguments. */</comment>
			<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>src1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>src2w</name> <operator>=</operator> <name>src1w</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>TMP_FREG</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>TMP_FREG</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2_load</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDSD_x_xm</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_SUB_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBSD_x_xm</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_MUL_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULSD_x_xm</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_DIV_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_sse2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>DIVSD_x_xm</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_FREG</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_sse2_store</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_FREG</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Conditional instructions                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>sljit_emit_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>label</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF_NULL</name><argument_list>(<argument><expr><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>TYPE_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

	<comment type="block">/* Worst case size. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_JUMP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_JUMP</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">10</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF_NULL</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>jump</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_ijump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF_NULL</name><argument_list>(<argument><expr><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JUMP_ADDR</name> <operator>|</operator> <operator>(</operator><name>type</name> <operator>&lt;&lt;</operator> <name>TYPE_SHIFT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>srcw</name></expr>;</expr_stmt>

		<comment type="block">/* Worst case size. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF_NULL</name><argument_list>(<argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
		<comment type="block">/* REX_W is not necessary (src is not immediate). */</comment>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_FF</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>|=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>CALL_rm</name></expr> </then><else>: <expr><name>JMP_rm</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name>cond_set</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/* ADJUST_LOCAL_OFFSET and CHECK_EXTRA_REGS might overwrite these values. */</comment>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_save</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>dstw_save</name> <init>= <expr><name>dstw</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	<comment type="block">/* setcc = jcc + 0x10. */</comment>
	<expr_stmt><expr><name>cond_set</name> <operator>=</operator> <call><name>get_jump_code</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OR</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Set low register to conditional flag. */</comment>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal><operator>)</operator></expr> ?</condition><then> <expr><name>REX</name></expr> </then><else>: <expr><name>REX_B</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>cond_set</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <name><name>reg_lmap</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>REX</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>REX_R</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>REX_B</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>OR_rm8_r8</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><name><name>reg_lmap</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name><name>reg_lmap</name><index>[<expr><name>dst</name></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>reg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLJIT_ADD</name> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set low register to conditional flag. */</comment>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal><operator>)</operator></expr> ?</condition><then> <expr><name>REX</name></expr> </then><else>: <expr><name>REX_B</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>cond_set</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <name><name>reg_lmap</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>REX_W</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">7</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>REX_B</name> <operator>|</operator> <name>REX_R</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<comment type="block">/* The movzx instruction does not affect flags. */</comment>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOVZX_r_rm8</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><name><name>reg_lmap</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name><name>reg_lmap</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>reg</name> <operator>!=</operator> <name>TMP_REG1</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLJIT_ADD</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_MOV</name></expr>;</expr_stmt>
		<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst_save</name></expr></argument>, <argument><expr><name>dstw_save</name></expr></argument>, <argument><expr><name>dst_save</name></expr></argument>, <argument><expr><name>dstw_save</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* The SLJIT_CONFIG_X86_32 code path starts here. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLJIT_ADD</name> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Low byte is accessible. */</comment>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Set low byte to conditional flag. */</comment>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>cond_set</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOVZX_r_rm8</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Low byte is not accessible. */</comment>
		<if_stmt><if>if <condition>(<expr><name>cpu_has_cmov</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>get_cpu_features</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>cpu_has_cmov</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* a xor reg, reg operation would overwrite the flags. */</comment>
			<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
			<comment type="block">/* cmovcc = setcc - 0x50. */</comment>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>cond_set</name> <operator>-</operator> <literal type="number">0x50</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>XCHG_EAX_r</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="block">/* Set al to conditional flag. */</comment>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>cond_set</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <literal type="number">0</literal></expr> <comment type="block">/* eax */</comment>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOVZX_r_rm8</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr> <comment type="block">/* eax */</comment>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>XCHG_EAX_r</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OR</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>SLJIT_R0</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>SLJIT_R0</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Set low register to conditional flag. */</comment>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>XCHG_EAX_r</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>cond_set</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <literal type="number">0</literal></expr> <comment type="block">/* eax */</comment>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>OR_rm8_r8</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <comment type="block">/* eax */</comment> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>XCHG_EAX_r</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Set low register to conditional flag. */</comment>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>XCHG_r_rm</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <comment type="block">/* ecx */</comment> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>cond_set</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <literal type="number">1</literal></expr> <comment type="block">/* ecx */</comment>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>OR_rm8_r8</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <comment type="block">/* ecx */</comment> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr> <comment type="block">/* eax */</comment>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>XCHG_r_rm</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <comment type="block">/* ecx */</comment> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set TMP_REG1 to the bit. */</comment>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INC_SIZE</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>XCHG_EAX_r</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="block">/* Set al to conditional flag. */</comment>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>cond_set</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <literal type="number">0</literal></expr> <comment type="block">/* eax */</comment>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOVZX_r_rm8</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>MOD_REG</name> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <comment type="block">/* eax */</comment> <operator>|</operator> <literal type="number">0</literal></expr> <comment type="block">/* eax */</comment>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>XCHG_EAX_r</name> <operator>+</operator> <name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLJIT_ADD</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst_save</name></expr></argument>, <argument><expr><name>dstw_save</name></expr></argument>, <argument><expr><name>dst_save</name></expr></argument>, <argument><expr><name>dstw_save</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_X86_64 */</comment>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_cmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_cmov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>dst_reg</name> <operator>&amp;=</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sljit_has_cpu_feature</name><argument_list>(<argument><expr><name>SLJIT_HAS_CMOV</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>dst_reg</name> <operator>&gt;=</operator> <name>SLJIT_R3</name> <operator>&amp;&amp;</operator> <name>dst_reg</name> <operator>&lt;=</operator> <name>SLJIT_S3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>sljit_emit_cmov_generic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sljit_has_cpu_feature</name><argument_list>(<argument><expr><name>SLJIT_HAS_CMOV</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>sljit_emit_cmov_generic</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ADJUST_LOCAL_OFFSET is not needed. */</comment>
	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <name>dst_reg</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_reg</name> <operator>&amp;=</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>EMIT_MOV</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>srcw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>emit_x86_instruction</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <name>GROUP_0F</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <call><name>get_jump_code</name><argument_list>(<argument><expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_local_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_get_local_base</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>NOT_HALFWORD</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_DEBUG</name> <operator>&amp;&amp;</operator> <name>SLJIT_DEBUG</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><call><name>emit_lea_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_ERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><call><name>emit_lea_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_lea_binary</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_const</name></name><modifier>*</modifier></type> <name>sljit_emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>const_</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_const</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_const</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_const</name><argument_list>(<argument><expr><name>const_</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>reg</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>const_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_put_label</name></name><modifier>*</modifier></type> <name>sljit_emit_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>inst</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>start_size</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_put_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_EXTRA_REGS</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_put_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_put_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_put_label</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>mode32</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>reg</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>emit_load_imm64</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>start_size</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>emit_mov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>start_size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name><operator>++</operator> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<return>return <expr><name>put_label</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_target</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>new_target</name> <operator>-</operator> <operator>(</operator><name>addr</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>sljit_sw</name><operator>)</operator> <name>new_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sljit_unaligned_store_sw</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><name>new_constant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>addr</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>addr</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block_content></block></function></block_content></block></function></block_content></block></if></if_stmt></block_content></block></function>
</unit>
