<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitLir.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitLir.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _WIN32 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_STD_MACROS_DEFINED</name> <operator>&amp;&amp;</operator> <name>SLJIT_STD_MACROS_DEFINED</name><operator>)</operator></expr></cpp:if>

<comment type="block">/* These libraries are needed for the macros below. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_STD_MACROS_DEFINED */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ERROR</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(compiler-&gt;error)) \
			return compiler-&gt;error; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ERROR_PTR</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(compiler-&gt;error)) \
			return NULL; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL_IF</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(expr)) \
			return compiler-&gt;error; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_FAIL_IF</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(expr)) \
			return NULL; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL_IF_NULL</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(!(ptr))) { \
			compiler-&gt;error = SLJIT_ERR_ALLOC_FAILED; \
			return SLJIT_ERR_ALLOC_FAILED; \
		} \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_FAIL_IF_NULL</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(!(ptr))) { \
			compiler-&gt;error = SLJIT_ERR_ALLOC_FAILED; \
			return NULL; \
		} \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR_FAIL_WITH_EXEC_IF</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(!(ptr))) { \
			compiler-&gt;error = SLJIT_ERR_EX_ALLOC_FAILED; \
			return NULL; \
		} \
	} while (0)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_UNSUPPORTED</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_UNSUPPORTED</name><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIABLE_FLAG_SHIFT</name></cpp:macro> <cpp:value>(10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARIABLE_FLAG_MASK</name></cpp:macro> <cpp:value>(0x3f &lt;&lt; VARIABLE_FLAG_SHIFT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FLAG_TYPE</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((op) &gt;&gt; VARIABLE_FLAG_SHIFT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_OPCODE</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((op) &amp; ~(SLJIT_I32_OP | SLJIT_SET_Z | VARIABLE_FLAG_MASK))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAS_FLAGS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((op) &amp; (SLJIT_SET_Z | VARIABLE_FLAG_MASK))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_ALL_FLAGS</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((op) &amp; (SLJIT_I32_OP | SLJIT_SET_Z | VARIABLE_FLAG_MASK))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_64BIT_ARCHITECTURE</name> <operator>&amp;&amp;</operator> <name>SLJIT_64BIT_ARCHITECTURE</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_CAST_NEEDED</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((op) &gt;= SLJIT_MOV_U8 &amp;&amp; (op) &lt;= SLJIT_MOV_S32)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_CAST_NEEDED</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((op) &gt;= SLJIT_MOV_U8 &amp;&amp; (op) &lt;= SLJIT_MOV_S16)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro>	<cpp:value>4096</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_32BIT_ARCHITECTURE</name> <operator>&amp;&amp;</operator> <name>SLJIT_32BIT_ARCHITECTURE</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABUF_SIZE</name></cpp:macro>	<cpp:value>2048</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABUF_SIZE</name></cpp:macro>	<cpp:value>4096</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Parameter parsing. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG_MASK</name></cpp:macro>		<cpp:value>0x3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFS_REG</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(((reg) &gt;&gt; 8) &amp; REG_MASK)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFS_REG_MASK</name></cpp:macro>		<cpp:value>(REG_MASK &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_OFFS_REG</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((reg) &lt;&lt; 8)</cpp:value></cpp:define>
<comment type="block">/* When reg cannot be unused. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_IS_REG</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((reg) &lt;= REG_MASK)</cpp:value></cpp:define>
<comment type="block">/* When reg can be unused. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOW_IS_REG</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((reg) &gt; 0 &amp;&amp; (reg) &lt;= REG_MASK)</cpp:value></cpp:define>

<comment type="block">/* Mask for argument types. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_DEF_MASK</name></cpp:macro> <cpp:value>((1 &lt;&lt; SLJIT_DEF_SHIFT) - 1)</cpp:value></cpp:define>

<comment type="block">/* Jump flags. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_LABEL</name></cpp:macro>	<cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_ADDR</name></cpp:macro>	<cpp:value>0x2</cpp:value></cpp:define>
<comment type="block">/* SLJIT_REWRITABLE_JUMP is 0x1000. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_MB</name></cpp:macro>		<cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_MW</name></cpp:macro>		<cpp:value>0x8</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_MD</name></cpp:macro>		<cpp:value>0x10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_SHIFT</name></cpp:macro>	<cpp:value>13</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V7</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V7</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BL</name></cpp:macro>		<cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_B</name></cpp:macro>		<cpp:value>0x8</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>CPOOL_SIZE</name></cpp:macro>	<cpp:value>512</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_THUMB2</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_THUMB2</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_COND</name></cpp:macro>		<cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BL</name></cpp:macro>		<cpp:value>0x08</cpp:value></cpp:define>
	<comment type="block">/* conditional + imm8 */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_TYPE1</name></cpp:macro>	<cpp:value>0x10</cpp:value></cpp:define>
	<comment type="block">/* conditional + imm20 */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_TYPE2</name></cpp:macro>	<cpp:value>0x20</cpp:value></cpp:define>
	<comment type="block">/* IT + imm24 */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_TYPE3</name></cpp:macro>	<cpp:value>0x30</cpp:value></cpp:define>
	<comment type="block">/* imm11 */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_TYPE4</name></cpp:macro>	<cpp:value>0x40</cpp:value></cpp:define>
	<comment type="block">/* imm24 */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_TYPE5</name></cpp:macro>	<cpp:value>0x50</cpp:value></cpp:define>
	<comment type="block">/* BL + imm24 */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_BL</name></cpp:macro>		<cpp:value>0x60</cpp:value></cpp:define>
	<comment type="block">/* 0xf00 cc code for branches */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_COND</name></cpp:macro>		<cpp:value>0x004</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CBZ</name></cpp:macro>		<cpp:value>0x008</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BL</name></cpp:macro>		<cpp:value>0x010</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_B</name></cpp:macro>		<cpp:value>0x020</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_COND</name></cpp:macro>	<cpp:value>0x040</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_ABS48</name></cpp:macro>	<cpp:value>0x080</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_ABS64</name></cpp:macro>	<cpp:value>0x100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_COND</name></cpp:macro>		<cpp:value>0x004</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CALL</name></cpp:macro>		<cpp:value>0x008</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_B</name></cpp:macro>		<cpp:value>0x010</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_ABS_B</name></cpp:macro>	<cpp:value>0x020</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_ABS32</name></cpp:macro>	<cpp:value>0x040</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_ABS48</name></cpp:macro>	<cpp:value>0x080</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOVE_COND</name></cpp:macro>	<cpp:value>0x100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVABLE</name></cpp:macro>	<cpp:value>0x004</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_JAL</name></cpp:macro>		<cpp:value>0x008</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CALL</name></cpp:macro>		<cpp:value>0x010</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BIT26_COND</name></cpp:macro>	<cpp:value>0x020</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BIT16_COND</name></cpp:macro>	<cpp:value>0x040</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BIT23_COND</name></cpp:macro>	<cpp:value>0x080</cpp:value></cpp:define>

<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_COND</name></cpp:macro>		<cpp:value>(IS_BIT26_COND | IS_BIT16_COND | IS_BIT23_COND)</cpp:value></cpp:define>

<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_B</name></cpp:macro>		<cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_J</name></cpp:macro>		<cpp:value>0x200</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS_64</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_ABS32</name></cpp:macro>	<cpp:value>0x400</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_ABS48</name></cpp:macro>	<cpp:value>0x800</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* instruction types */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVABLE_INS</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
	<comment type="block">/* 1 - 31 last destination register */</comment>
	<comment type="block">/* no destination (i.e: store) */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>UNMOVABLE_INS</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>
	<comment type="block">/* FPU status register */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>FCSR_FCC</name></cpp:macro>		<cpp:value>33</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_SPARC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_SPARC_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_MOVABLE</name></cpp:macro>	<cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_COND</name></cpp:macro>		<cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CALL</name></cpp:macro>		<cpp:value>0x10</cpp:value></cpp:define>

<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_B</name></cpp:macro>		<cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>PATCH_CALL</name></cpp:macro>	<cpp:value>0x40</cpp:value></cpp:define>

	<comment type="block">/* instruction types */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVABLE_INS</name></cpp:macro>	<cpp:value>0</cpp:value></cpp:define>
	<comment type="block">/* 1 - 31 last destination register */</comment>
	<comment type="block">/* no destination (i.e: store) */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>UNMOVABLE_INS</name></cpp:macro>	<cpp:value>32</cpp:value></cpp:define>

<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>DST_INS_MASK</name></cpp:macro>	<cpp:value>0xff</cpp:value></cpp:define>

	<comment type="block">/* ICC_SET is the same as SET_FLAGS. */</comment>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>ICC_IS_SET</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 23)</cpp:value></cpp:define>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>FCC_IS_SET</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 24)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Stack management. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SAVED_REGISTERS_SIZE</name><parameter_list>(<parameter><type><name>scratches</name></type></parameter>, <parameter><type><name>saveds</name></type></parameter>, <parameter><type><name>extra</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((scratches &lt; SLJIT_NUMBER_OF_SCRATCH_REGISTERS ? 0 : (scratches - SLJIT_NUMBER_OF_SCRATCH_REGISTERS)) + \
		(saveds &lt; SLJIT_NUMBER_OF_SAVED_REGISTERS ? saveds : SLJIT_NUMBER_OF_SAVED_REGISTERS) + \
		extra) * sizeof(sljit_sw))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADJUST_LOCAL_OFFSET</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>if ((p) == (SLJIT_MEM1(SLJIT_SP))) \
		(i) += SLJIT_LOCALS_OFFSET;</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !(defined SLJIT_CONFIG_UNSUPPORTED &amp;&amp; SLJIT_CONFIG_UNSUPPORTED) */</comment>

<comment type="block">/* Utils can still be used even if SLJIT_CONFIG_UNSUPPORTED is set. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitUtils.c"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_UNSUPPORTED</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_UNSUPPORTED</name><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_EXECUTABLE_ALLOCATOR</name><operator>)</operator></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PROT_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_PROT_EXECUTABLE_ALLOCATOR</name><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitProtExecAllocator.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_WX_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_WX_EXECUTABLE_ALLOCATOR</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitWXExecAllocator.c"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sljitExecAllocator.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_PROT_EXECUTABLE_ALLOCATOR</name> <operator>&amp;&amp;</operator> <name>SLJIT_PROT_EXECUTABLE_ALLOCATOR</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ADD_EXEC_OFFSET</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>exec_offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sljit_u8 *)(ptr) + (exec_offset))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ADD_EXEC_OFFSET</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>exec_offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sljit_u8 *)(ptr))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SLJIT_UPDATE_WX_FLAGS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_UPDATE_WX_FLAGS</name><parameter_list>(<parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>, <parameter><type><name>enable_exec</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Argument checking features. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>

<comment type="block">/* Returns with error when an invalid argument is passed. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ARGUMENT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(!(x))) \
			return 1; \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RETURN_TYPE</name></cpp:macro> <cpp:value>sljit_s32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RETURN_OK</name></cpp:macro> <cpp:value>return 0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(x)) { \
			compiler-&gt;error = SLJIT_ERR_BAD_ARGUMENT; \
			return SLJIT_ERR_BAD_ARGUMENT; \
		} \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(x)) { \
			compiler-&gt;error = SLJIT_ERR_BAD_ARGUMENT; \
			return NULL; \
		} \
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REG_INDEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (SLJIT_UNLIKELY(x)) { \
			return -2; \
		} \
	} while (0)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_DEBUG</name> <operator>&amp;&amp;</operator> <name>SLJIT_DEBUG</name><operator>)</operator></expr></cpp:elif>

<comment type="block">/* Assertion failure occures if an invalid argument is passed. */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SLJIT_ARGUMENT_CHECKS</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_ARGUMENT_CHECKS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_ARGUMENT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SLJIT_ASSERT(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RETURN_TYPE</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RETURN_OK</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REG_INDEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:elif>

<comment type="block">/* Arguments are not checked. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RETURN_TYPE</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RETURN_OK</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REG_INDEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* Arguments are not checked. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_REG_INDEX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_ARGUMENT_CHECKS */</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Public functions                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_NEEDS_COMPILER_INIT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>compiler_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/* A thread safe initialization. */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>init_compiler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_compiler</name></name><modifier>*</modifier></type> <name>sljit_create_compiler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocator_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exec_allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name> <init>= <expr><operator>(</operator>struct <name>sljit_compiler</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_compiler</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compiler</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>SLJIT_ZEROMEM</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_compiler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s8</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u8</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">1</literal>
		<operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s16</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u16</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">2</literal>
		<operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_s32</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u32</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal>
		<operator>&amp;&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_p</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_p</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator>
		<operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_p</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof>
		<operator>&amp;&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator>
		<operator>&amp;&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>,
		<argument><expr><name>invalid_integer_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><name>SLJIT_I32_OP</name> <operator>==</operator> <name>SLJIT_F32_OP</name></expr></argument>,
		<argument><expr><name>int_op_and_single_op_must_be_the_same</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><name>SLJIT_REWRITABLE_JUMP</name> <operator>!=</operator> <name>SLJIT_F32_OP</name></expr></argument>,
		<argument><expr><name>rewritable_jump_and_single_op_must_not_be_the_same</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>SLJIT_EQUAL</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>SLJIT_LESS</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>SLJIT_EQUAL_F64</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>SLJIT_JUMP</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr></argument>,
		<argument><expr><name>conditional_flags_must_be_even_numbers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Only the non-zero members must be set. */</comment>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_SUCCESS</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>allocator_data</name></name> <operator>=</operator> <name>allocator_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name> <operator>=</operator> <name>exec_allocator_data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <operator>(</operator>struct <name>sljit_memory_fragment</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name></name> <operator>=</operator> <operator>(</operator>struct <name>sljit_memory_fragment</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><name>ABUF_SIZE</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name> <operator>||</operator> <operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name></name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name></name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>fscratches</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>fsaveds</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><name>CPOOL_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof>
		<operator>+</operator> <name>CPOOL_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_u8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>cpool</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name></name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_unique</name></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>cpool</name></name> <operator>+</operator> <name>CPOOL_SIZE</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>=</operator> <name>UNMOVABLE_INS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_SPARC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_SPARC_32</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>delay_slot</name></name> <operator>=</operator> <name>UNMOVABLE_INS</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_NEEDS_COMPILER_INIT</name> <operator>&amp;&amp;</operator> <name>SLJIT_NEEDS_COMPILER_INIT</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compiler_initialized</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>init_compiler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>compiler_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>compiler</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_compiler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>allocator_data</name> <init>= <expr><name><name>compiler</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>abuf</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>curr</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool</name></name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_compiler_memory_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>SLJIT_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_ALLOC_FAILED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_THUMB2</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_THUMB2</name><operator>)</operator></expr></cpp:if>
<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_code</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exec_allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>exec_allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Remove thumb mode flag. */</comment>
	<expr_stmt><expr><call><name>SLJIT_FREE_EXEC</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x1</literal><operator>)</operator></expr></argument>, <argument><expr><name>exec_allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_INDIRECT_CALL</name> <operator>&amp;&amp;</operator> <name>SLJIT_INDIRECT_CALL</name><operator>)</operator></expr></cpp:elif>
<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_code</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exec_allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>exec_allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Resolve indirection. */</comment>
	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name>code</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_FREE_EXEC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>exec_allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_code</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exec_allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>exec_allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_FREE_EXEC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>exec_allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_LIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SLJIT_LIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>JUMP_ADDR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>JUMP_LABEL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_target</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_LIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>JUMP_LABEL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>JUMP_ADDR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_LIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_current_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>current_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>current_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current_flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>VARIABLE_FLAG_MASK</name> <operator>|</operator> <name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_SET_Z</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>current_flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>current_flags</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_SET_Z</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Private functions                                                    */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ensure_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>new_frag</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>+</operator> <name>size</name> <operator>&lt;=</operator> <operator>(</operator><name>BUF_SIZE</name> <operator>-</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_OFFSETOF</name><argument_list>(<argument><expr>struct <name>sljit_memory_fragment</name></expr></argument>, <argument><expr><name>memory</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>used_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>new_frag</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_memory_fragment</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF_NULL</name><argument_list>(<argument><expr><name>new_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_frag</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>new_frag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_frag</name><operator>-&gt;</operator><name>used_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<return>return <expr><name><name>new_frag</name><operator>-&gt;</operator><name>memory</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>ensure_abuf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u8</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>new_frag</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>+</operator> <name>size</name> <operator>&lt;=</operator> <operator>(</operator><name>ABUF_SIZE</name> <operator>-</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_OFFSETOF</name><argument_list>(<argument><expr>struct <name>sljit_memory_fragment</name></expr></argument>, <argument><expr><name>memory</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>abuf</name><operator>-&gt;</operator><name>memory</name></name> <operator>+</operator> <name><name>compiler</name><operator>-&gt;</operator><name>abuf</name><operator>-&gt;</operator><name>used_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>new_frag</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_memory_fragment</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><name>ABUF_SIZE</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF_NULL</name><argument_list>(<argument><expr><name>new_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_frag</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>abuf</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>abuf</name></name> <operator>=</operator> <name>new_frag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_frag</name><operator>-&gt;</operator><name>used_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<return>return <expr><name><name>new_frag</name><operator>-&gt;</operator><name>memory</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_alloc_memory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_64BIT_ARCHITECTURE</name> <operator>&amp;&amp;</operator> <name>SLJIT_64BIT_ARCHITECTURE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>reverse_buf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>buf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>get_arg_count</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>arg_count</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Only used in RISC architectures where the instruction size is constant */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86</name><operator>)</operator> \
	<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_S390X</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_S390X</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_uw</name></type> <name>compute_next_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>,
	<parameter><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>result</name> <init>= <expr><operator>~</operator><operator>(</operator><name>sljit_uw</name><operator>)</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>label</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>jump</name> <operator>&amp;&amp;</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>const_</name> <operator>&amp;&amp;</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>put_label</name> <operator>&amp;&amp;</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&lt;</operator> <name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !SLJIT_CONFIG_X86 &amp;&amp; !SLJIT_CONFIG_S390X */</comment>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>set_emit_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>=</operator> <name>scratches</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>=</operator> <name>saveds</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>fscratches</name></name> <operator>=</operator> <name>fscratches</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>fsaveds</name></name> <operator>=</operator> <name>fsaveds</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>logical_local_size</name></name> <operator>=</operator> <name>local_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>set_set_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>=</operator> <name>scratches</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>=</operator> <name>saveds</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>fscratches</name></name> <operator>=</operator> <name>fscratches</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>fsaveds</name></name> <operator>=</operator> <name>fsaveds</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>logical_local_size</name></name> <operator>=</operator> <name>local_size</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>set_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>labels</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name> <operator>=</operator> <name>label</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>set_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_jump</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_jump</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>jump</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name> <operator>=</operator> <name>jump</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_jump</name></name> <operator>=</operator> <name>jump</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>set_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_const</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_const</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>const_</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>consts</name></name> <operator>=</operator> <name>const_</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_const</name></name> <operator>=</operator> <name>const_</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>set_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_put_label</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_put_label</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>put_label</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name> <operator>=</operator> <name>put_label</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_put_label</name></name> <operator>=</operator> <name>put_label</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDRESSING_DEPENDS_ON</name><parameter_list>(<parameter><type><name>exp</name></type></parameter>, <parameter><type><name>reg</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((exp) &amp; SLJIT_MEM) &amp;&amp; (((exp) &amp; REG_MASK) == reg || OFFS_REG(exp) == reg))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_CHECK_IS_REG</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((r) &gt;= SLJIT_R0 &amp;&amp; (r) &lt; (SLJIT_R0 + compiler-&gt;scratches)) \
	|| ((r) &gt; (SLJIT_S0 - compiler-&gt;saveds) &amp;&amp; (r) &lt;= SLJIT_S0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_CHECK_IS_FREG</name><parameter_list>(<parameter><type><name>fr</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((fr) &gt;= SLJIT_FR0 &amp;&amp; (fr) &lt; (SLJIT_FR0 + compiler-&gt;fscratches)) \
	|| ((fr) &gt; (SLJIT_FS0 - compiler-&gt;fsaveds) &amp;&amp; (fr) &lt;= SLJIT_FS0))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86_32</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_IF_VIRTUAL_REGISTER</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p) &lt;= SLJIT_S3 &amp;&amp; (p) &gt;= SLJIT_S8)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_IF_VIRTUAL_REGISTER</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>function_check_src_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>p</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_UNUSED</name> <operator>||</operator> <call><name>FUNCTION_CHECK_IS_REG</name><argument_list>(<argument><expr><name>p</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CHECK_IF_VIRTUAL_REGISTER</name><argument_list>(<argument><expr><name>p</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>FUNCTION_CHECK_IS_REG</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>CHECK_IF_VIRTUAL_REGISTER</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>p</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>SLJIT_MEM</name> <operator>|</operator> <name>REG_MASK</name> <operator>|</operator> <name>OFFS_REG_MASK</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_CHECK_SRC_MEM</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>CHECK_ARGUMENT(function_check_src_mem(compiler, p, i));</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>function_check_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FUNCTION_CHECK_IS_REG</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>logical_local_size</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>function_check_src_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_CHECK_SRC</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>CHECK_ARGUMENT(function_check_src(compiler, p, i));</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>function_check_dst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FUNCTION_CHECK_IS_REG</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name>unused</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name><operator>)</operator> <operator>==</operator> <name>SLJIT_UNUSED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>logical_local_size</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>function_check_src_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_CHECK_DST</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>unused</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>CHECK_ARGUMENT(function_check_dst(compiler, p, i, unused));</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>function_fcheck</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FUNCTION_CHECK_IS_FREG</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>logical_local_size</name></name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>function_check_src_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_FCHECK</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>CHECK_ARGUMENT(function_fcheck(compiler, p, i));</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_ARGUMENT_CHECKS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_compiler_verbose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>verbose</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_64BIT_ARCHITECTURE</name> <operator>&amp;&amp;</operator> <name>SLJIT_64BIT_ARCHITECTURE</name><operator>)</operator></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_PRINT_D</name></cpp:macro>	<cpp:value>"I64"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_PRINT_D</name></cpp:macro>	<cpp:value>"l"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#	<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_PRINT_D</name></cpp:macro>	<cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sljit_verbose_reg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <operator>(</operator><name>SLJIT_R0</name> <operator>+</operator> <name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"r%d"</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>r</name> <operator>!=</operator> <name>SLJIT_SP</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"s%d"</literal></expr></argument>, <argument><expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>-</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"sp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sljit_verbose_freg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <operator>(</operator><name>SLJIT_FR0</name> <operator>+</operator> <name><name>compiler</name><operator>-&gt;</operator><name>fscratches</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"fr%d"</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <name>SLJIT_FR0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"fs%d"</literal></expr></argument>, <argument><expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>-</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sljit_verbose_param</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"#%"</literal> <name>SLJIT_PRINT_D</name> <literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>REG_MASK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_verbose_reg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sljit_verbose_reg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">" * %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">" + %"</literal> <name>SLJIT_PRINT_D</name> <literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"[#%"</literal> <name>SLJIT_PRINT_D</name> <literal type="string">"d]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sljit_verbose_reg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sljit_verbose_fparam</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>REG_MASK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_verbose_reg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>p</name><operator>)</operator> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sljit_verbose_reg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">" + %"</literal> <name>SLJIT_PRINT_D</name> <literal type="string">"d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"[#%"</literal> <name>SLJIT_PRINT_D</name> <literal type="string">"d]"</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sljit_verbose_freg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>op0_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"breakpoint"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"nop"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"lmul.uw"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"lmul.sw"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"divmod.u"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"divmod.s"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"div.u"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"div.s"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"endbr"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"skip_frames_before_return"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>op1_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".u8"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".s8"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".u16"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".s16"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".u32"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".s32"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".p"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".u8"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".s8"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".u16"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".s16"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".u32"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".s32"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">".p"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"not"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"neg"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"clz"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>op2_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"add"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"addc"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"sub"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"subc"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"mul"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"and"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"or"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"xor"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"shl"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"lshr"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"ashr"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>op_src_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"fast_return"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"skip_frames_before_fast_return"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"prefetch_l1"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"prefetch_l2"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"prefetch_l3"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"prefetch_once"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>fop1_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"mov"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"conv"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"conv"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"conv"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"conv"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"conv"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"cmp"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"neg"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"abs"</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>fop2_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"add"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"sub"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"mul"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"div"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMP_POSTFIX</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((type &amp; 0xff) &lt;= SLJIT_MUL_NOT_OVERFLOW ? ((type &amp; SLJIT_I32_OP) ? "32" : "") \
	: ((type &amp; 0xff) &lt;= SLJIT_ORDERED_F64 ? ((type &amp; SLJIT_F32_OP) ? ".f32" : ".f64") : ""))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>jump_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"equal"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"not_equal"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"less"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"greater_equal"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"greater"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"less_equal"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"sig_less"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"sig_greater_equal"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"sig_greater"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"sig_less_equal"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"overflow"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"not_overflow"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"mul_overflow"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"mul_not_overflow"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"carry"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"equal"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"not_equal"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"less"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"greater_equal"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"greater"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"less_equal"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"unordered"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"ordered"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"jump"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"fast_call"</literal></expr>,
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"call"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"call.cdecl"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name><name>call_arg_names</name><index>[]</index></name> <init>= <expr><block>{
	<expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"void"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"sw"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"uw"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"s32"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"u32"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"f32"</literal></expr>, <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><literal type="string">"f64"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_VERBOSE */</comment>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Arch dependent                                                       */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator> \
	<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_generate_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>jump</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* All jumps have target. */</comment>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>JUMP_LABEL</name> <operator>|</operator> <name>JUMP_ADDR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>types</name></decl>, <decl><type ref="prev"/><name>arg_count</name></decl>, <decl><type ref="prev"/><name>curr_type</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <operator>~</operator><name>SLJIT_F64_ALIGNMENT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>scratches</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scratches</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>saveds</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>saveds</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>scratches</name> <operator>+</operator> <name>saveds</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>fscratches</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fscratches</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>fsaveds</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fsaveds</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>fscratches</name> <operator>+</operator> <name>fsaveds</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>local_size</name> <operator>&lt;=</operator> <name>SLJIT_MAX_LOCAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <operator>(</operator><name>arg_types</name> <operator>&gt;&gt;</operator> <name>SLJIT_DEF_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>types</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg_count</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>curr_type</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>curr_type</name> <operator>==</operator> <name>SLJIT_ARG_TYPE_SW</name> <operator>||</operator> <name>curr_type</name> <operator>==</operator> <name>SLJIT_ARG_TYPE_UW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>arg_count</name> <operator>&lt;=</operator> <name>saveds</name> <operator>&amp;&amp;</operator> <name>types</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  enter options:%s args["</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SLJIT_F64_ALIGNMENT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"f64_align"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>call_arg_names</name><index>[<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>arg_types</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"] scratches:%d saveds:%d fscratches:%d fsaveds:%d local_size:%d\n"</literal></expr></argument>,
			<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_set_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>types</name></decl>, <decl><type ref="prev"/><name>arg_count</name></decl>, <decl><type ref="prev"/><name>curr_type</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>options</name> <operator>&amp;</operator> <operator>~</operator><name>SLJIT_F64_ALIGNMENT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>scratches</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>scratches</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>saveds</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>saveds</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>scratches</name> <operator>+</operator> <name>saveds</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>fscratches</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fscratches</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>fsaveds</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>fsaveds</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>fscratches</name> <operator>+</operator> <name>fsaveds</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>local_size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>local_size</name> <operator>&lt;=</operator> <name>SLJIT_MAX_LOCAL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <operator>(</operator><name>arg_types</name> <operator>&gt;&gt;</operator> <name>SLJIT_DEF_SHIFT</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>types</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>arg_count</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>curr_type</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>curr_type</name> <operator>==</operator> <name>SLJIT_ARG_TYPE_SW</name> <operator>||</operator> <name>curr_type</name> <operator>==</operator> <name>SLJIT_ARG_TYPE_UW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>arg_count</name> <operator>&lt;=</operator> <name>saveds</name> <operator>&amp;&amp;</operator> <name>types</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  set_context options:%s args["</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>SLJIT_F64_ALIGNMENT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"f64_align"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>call_arg_names</name><index>[<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>arg_types</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"] scratches:%d saveds:%d fscratches:%d fsaveds:%d local_size:%d\n"</literal></expr></argument>,
			<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_return</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>src</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>srcw</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  return\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  return%s "</literal></expr></argument>, <argument><expr><name><name>op1_names</name><index>[<expr><name>op</name> <operator>-</operator> <name>SLJIT_OP1_BASE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_fast_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_DST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  fast_enter "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_op0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>SLJIT_BREAKPOINT</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_LMUL_SW</name><operator>)</operator>
		<operator>||</operator> <operator>(</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>~</operator><name>SLJIT_I32_OP</name><operator>)</operator> <operator>&gt;=</operator> <name>SLJIT_DIVMOD_UW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>~</operator><name>SLJIT_I32_OP</name><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_DIV_SW</name><operator>)</operator>
		<operator>||</operator> <operator>(</operator><name>op</name> <operator>&gt;=</operator> <name>SLJIT_ENDBR</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_SKIP_FRAMES_BEFORE_RETURN</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLJIT_LMUL_UW</name> <operator>||</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_ENDBR</name> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_LMUL_UW</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_DIV_SW</name><operator>)</operator> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_SKIP_FRAMES_BEFORE_RETURN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s"</literal></expr></argument>, <argument><expr><name><name>op0_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_OP0_BASE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_DIVMOD_UW</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_DIV_SW</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"32"</literal></expr> </then><else>: <expr><literal type="string">"w"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_op1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_CLZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<comment type="block">/* Only SLJIT_I32_OP and SLJIT_SET_Z are allowed. */</comment>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NEG</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator>
			<operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OVERFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<comment type="block">/* Nothing allowed */</comment>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_SET_Z</name> <operator>|</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<comment type="block">/* Only SLJIT_I32_OP is allowed. */</comment>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_SET_Z</name> <operator>|</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>FUNCTION_CHECK_DST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_NOT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>SLJIT_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_SET_Z</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  mov%s%s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></argument>,
				<argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>!=</operator> <name>SLJIT_MOV32</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>op1_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_OP1_BASE</name></expr>]</index></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s%s%s%s "</literal></expr></argument>, <argument><expr><name><name>op1_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_OP1_BASE</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></argument>,
				<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">".z"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>,
				<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>jump_names</name><index>[<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_op2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_ADD</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_ASHR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator>
			<operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_MUL_OVERFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator>
			<operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call>
			<operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_OVERFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator>
			<operator>||</operator> <operator>(</operator><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_LESS</name> <operator>&amp;&amp;</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_OVERFLOW</name><operator>)</operator>
			<operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator>
			<operator>||</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>FUNCTION_CHECK_DST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_SET_Z</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s%s%s%s "</literal></expr></argument>, <argument><expr><name><name>op2_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_OP2_BASE</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">".z"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"."</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>jump_names</name><index>[<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_op_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_FAST_RETURN</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_PREFETCH_ONCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_FAST_RETURN</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_SKIP_FRAMES_BEFORE_FAST_RETURN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>src</name> <operator>!=</operator> <name>SLJIT_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_PREFETCH_L1</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&lt;=</operator> <name>SLJIT_PREFETCH_ONCE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s "</literal></expr></argument>, <argument><expr><name><name>op_src_names</name><index>[<expr><name>op</name> <operator>-</operator> <name>SLJIT_OP_SRC_BASE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_get_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>reg</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_get_float_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>reg</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>reg</name> <operator>&lt;=</operator> <name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_op_custom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>instruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_THUMB2</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_THUMB2</name><operator>)</operator></expr></cpp:elif>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>instruction</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
		<operator>||</operator> <operator>(</operator><name>size</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>instruction</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_S390X</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_S390X</name><operator>)</operator></expr></cpp:elif>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>size</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>instruction</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  op_custom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">" 0x%x"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>sljit_u8</name><operator>*</operator><operator>)</operator><name>instruction</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_fop1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>sljit_has_cpu_feature</name><argument_list>(<argument><expr><name>SLJIT_HAS_FPU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_MOV_F64</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_ABS_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_SET_Z</name> <operator>|</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_F32</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s "</literal></expr></argument>, <argument><expr><name><name>fop1_names</name><index>[<expr><name>SLJIT_CONV_F64_FROM_F32</name> <operator>-</operator> <name>SLJIT_FOP1_BASE</name></expr>]</index></name></expr></argument>,
				<argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".f32.from.f64"</literal></expr> </then><else>: <expr><literal type="string">".f64.from.f32"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s "</literal></expr></argument>, <argument><expr><name><name>fop1_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_FOP1_BASE</name></expr>]</index></name></expr></argument>,
				<argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".f32"</literal></expr> </then><else>: <expr><literal type="string">".f64"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_fop1_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_SET_Z</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>sljit_has_cpu_feature</name><argument_list>(<argument><expr><name>SLJIT_HAS_FPU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CMP_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator>
		<operator>||</operator> <operator>(</operator><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_EQUAL_F64</name> <operator>&amp;&amp;</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_ORDERED_F64</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s"</literal></expr></argument>, <argument><expr><name><name>fop1_names</name><index>[<expr><name>SLJIT_CMP_F64</name> <operator>-</operator> <name>SLJIT_FOP1_BASE</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".f32"</literal></expr> </then><else>: <expr><literal type="string">".f64"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">".%s_f"</literal></expr></argument>, <argument><expr><name><name>jump_names</name><index>[<expr><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_fop1_conv_sw_from_f64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>sljit_has_cpu_feature</name><argument_list>(<argument><expr><name>SLJIT_HAS_FPU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_CONV_SW_FROM_F64</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_CONV_S32_FROM_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_SET_Z</name> <operator>|</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_DST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s.from%s "</literal></expr></argument>, <argument><expr><name><name>fop1_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_FOP1_BASE</name></expr>]</index></name></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_S32_FROM_F64</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".s32"</literal></expr> </then><else>: <expr><literal type="string">".sw"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".f32"</literal></expr> </then><else>: <expr><literal type="string">".f64"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_fop1_conv_f64_from_sw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>sljit_has_cpu_feature</name><argument_list>(<argument><expr><name>SLJIT_HAS_FPU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_CONV_F64_FROM_SW</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_CONV_F64_FROM_S32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_SET_Z</name> <operator>|</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s.from%s "</literal></expr></argument>, <argument><expr><name><name>fop1_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_FOP1_BASE</name></expr>]</index></name></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".f32"</literal></expr> </then><else>: <expr><literal type="string">".f64"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_CONV_F64_FROM_S32</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".s32"</literal></expr> </then><else>: <expr><literal type="string">".sw"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_fop2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>sljit_has_cpu_feature</name><argument_list>(<argument><expr><name>SLJIT_HAS_FPU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_ADD_F64</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_DIV_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_SET_Z</name> <operator>|</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s "</literal></expr></argument>, <argument><expr><name><name>fop2_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_FOP2_BASE</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".f32"</literal></expr> </then><else>: <expr><literal type="string">".f64"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"label:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xff</literal> <operator>|</operator> <name>SLJIT_REWRITABLE_JUMP</name> <operator>|</operator> <name>SLJIT_I32_OP</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&gt;=</operator> <name>SLJIT_EQUAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_FAST_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;</operator> <name>SLJIT_JUMP</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;</operator> <name>SLJIT_JUMP</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_NOT_ZERO</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator>
				<operator>||</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_NOT_OVERFLOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_OVERFLOW</name><operator>)</operator>
				<operator>||</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_MUL_NOT_OVERFLOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_MUL_OVERFLOW</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  jump%s %s%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">".r"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>jump_names</name><index>[<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>JUMP_POSTFIX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>types</name></decl>, <decl><type ref="prev"/><name>curr_type</name></decl>, <decl><type ref="prev"/><name>scratches</name></decl>, <decl><type ref="prev"/><name>fscratches</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xff</literal> <operator>|</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_CALL</name> <operator>||</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_CALL_CDECL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <name>arg_types</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>scratches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fscratches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>curr_type</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>curr_type</name> <operator>&lt;=</operator> <name>SLJIT_ARG_TYPE_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>curr_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>curr_type</name> <operator>&gt;=</operator> <name>SLJIT_ARG_TYPE_F32</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>fscratches</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>scratches</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>curr_type</name> <operator>&gt;=</operator> <name>SLJIT_ARG_TYPE_F32</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>fscratches</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curr_type</name> <operator>&gt;=</operator> <name>SLJIT_ARG_TYPE_SW</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;=</operator> <name>scratches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>fscratches</name></name> <operator>&gt;=</operator> <name>fscratches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>types</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  %s%s ret[%s"</literal></expr></argument>, <argument><expr><name><name>jump_names</name><index>[<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">".r"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>call_arg_names</name><index>[<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"], args["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<do>do <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>call_arg_names</name><index>[<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>arg_types</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block> while <condition>(<expr><name>arg_types</name></expr>)</condition>;</do>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xff</literal> <operator>|</operator> <name>SLJIT_REWRITABLE_JUMP</name> <operator>|</operator> <name>SLJIT_I32_OP</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&gt;=</operator> <name>SLJIT_EQUAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_SIG_LESS_EQUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  cmp%s %s%s, "</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">".r"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>jump_names</name><index>[<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"32"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_fcmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>sljit_has_cpu_feature</name><argument_list>(<argument><expr><name>SLJIT_HAS_FPU</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xff</literal> <operator>|</operator> <name>SLJIT_REWRITABLE_JUMP</name> <operator>|</operator> <name>SLJIT_F32_OP</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&gt;=</operator> <name>SLJIT_EQUAL_F64</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_ORDERED_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_FCHECK</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  fcmp%s %s%s, "</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">".r"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>jump_names</name><index>[<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".f32"</literal></expr> </then><else>: <expr><literal type="string">".f64"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_fparam</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_ijump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_JUMP</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name>SLJIT_FAST_CALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  ijump.%s "</literal></expr></argument>, <argument><expr><name><name>jump_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_icall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>types</name></decl>, <decl><type ref="prev"/><name>curr_type</name></decl>, <decl><type ref="prev"/><name>scratches</name></decl>, <decl><type ref="prev"/><name>fscratches</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>SLJIT_CALL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>SLJIT_CALL_CDECL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>types</name> <operator>=</operator> <name>arg_types</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>scratches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>fscratches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>curr_type</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>curr_type</name> <operator>&lt;=</operator> <name>SLJIT_ARG_TYPE_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>curr_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>curr_type</name> <operator>&gt;=</operator> <name>SLJIT_ARG_TYPE_F32</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>fscratches</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>scratches</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>curr_type</name> <operator>&gt;=</operator> <name>SLJIT_ARG_TYPE_F32</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>fscratches</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>curr_type</name> <operator>&gt;=</operator> <name>SLJIT_ARG_TYPE_SW</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;=</operator> <name>scratches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>fscratches</name></name> <operator>&gt;=</operator> <name>fscratches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>types</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  i%s%s ret[%s"</literal></expr></argument>, <argument><expr><name><name>jump_names</name><index>[<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">".r"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>call_arg_names</name><index>[<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"], args["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<do>do <block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>call_arg_names</name><index>[<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>arg_types</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block> while <condition>(<expr><name>arg_types</name></expr>)</condition>;</do>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"], "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_op_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xff</literal> <operator>|</operator> <name>SLJIT_I32_OP</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&gt;=</operator> <name>SLJIT_EQUAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_ORDERED_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <operator>(</operator><call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>SLJIT_SET_CARRY</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV32</name>
		<operator>||</operator> <operator>(</operator><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_AND</name> <operator>&amp;&amp;</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SLJIT_XOR</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>VARIABLE_FLAG_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_NOT_ZERO</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator>
			<operator>||</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_NOT_OVERFLOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_OVERFLOW</name><operator>)</operator>
			<operator>||</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_MUL_NOT_OVERFLOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_MUL_OVERFLOW</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>FUNCTION_CHECK_DST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>SLJIT_ADD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>=</operator> <call><name>GET_FLAG_TYPE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>op</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_SET_Z</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  flags%s %s%s, "</literal></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">".z"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLJIT_OP2_BASE</name></expr> ?</condition><then> <expr><literal type="string">"mov"</literal></expr> </then><else>: <expr><name><name>op2_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_OP2_BASE</name></expr>]</index></name></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SLJIT_OP2_BASE</name></expr> ?</condition><then> <expr><name><name>op1_names</name><index>[<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SLJIT_OP1_BASE</name></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"32"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", %s%s\n"</literal></expr></argument>, <argument><expr><name><name>jump_names</name><index>[<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>JUMP_POSTFIX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_cmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xff</literal> <operator>|</operator> <name>SLJIT_I32_OP</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&gt;=</operator> <name>SLJIT_EQUAL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_ORDERED_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>FUNCTION_CHECK_IS_REG</name><argument_list>(<argument><expr><name>dst_reg</name> <operator>&amp;</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>FUNCTION_CHECK_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name>srcw</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_NOT_ZERO</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator>
			<operator>||</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_NOT_OVERFLOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_OVERFLOW</name><operator>)</operator>
			<operator>||</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_MUL_NOT_OVERFLOW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>last_flags</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_MUL_OVERFLOW</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  cmov%s %s%s, "</literal></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>dst_reg</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>jump_names</name><index>[<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>JUMP_POSTFIX</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_reg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_reg</name> <operator>&amp;</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&gt;=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <name>SLJIT_MOV</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <name>SLJIT_MOV_U32</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>!=</operator> <name>SLJIT_MOV_P</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_POST</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_MEM_PRE</name> <operator>|</operator> <name>SLJIT_MEM_POST</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>SLJIT_MEM_PRE</name> <operator>|</operator> <name>SLJIT_MEM_POST</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xff</literal> <operator>|</operator> <name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_MEM_STORE</name> <operator>|</operator> <name>SLJIT_MEM_SUPP</name> <operator>|</operator> <name>SLJIT_MEM_PRE</name> <operator>|</operator> <name>SLJIT_MEM_POST</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC_MEM</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>FUNCTION_CHECK_IS_REG</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>!=</operator> <name>SLJIT_UNUSED</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>!=</operator> <name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>sljit_emit_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>|</operator> <name>SLJIT_MEM_SUPP</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_ERR_UNSUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  //"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  mem%s.%s%s%s "</literal></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"32"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"st"</literal></expr> </then><else>: <expr><literal type="string">"ld"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>op1_names</name><index>[<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>-</operator> <name>SLJIT_OP1_BASE</name></expr>]</index></name></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".pre"</literal></expr> </then><else>: <expr><literal type="string">".post"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_reg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_fmem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>freg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_MOV_F64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_POST</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_MEM_PRE</name> <operator>|</operator> <name>SLJIT_MEM_POST</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>SLJIT_MEM_PRE</name> <operator>|</operator> <name>SLJIT_MEM_POST</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xff</literal> <operator>|</operator> <name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_MEM_STORE</name> <operator>|</operator> <name>SLJIT_MEM_SUPP</name> <operator>|</operator> <name>SLJIT_MEM_PRE</name> <operator>|</operator> <name>SLJIT_MEM_POST</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FUNCTION_CHECK_SRC_MEM</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_ARGUMENT</name><argument_list>(<argument><expr><call><name>FUNCTION_CHECK_IS_FREG</name><argument_list>(<argument><expr><name>freg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>sljit_emit_fmem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>|</operator> <name>SLJIT_MEM_SUPP</name></expr></argument>, <argument><expr><name>freg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_ERR_UNSUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  //"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  fmem.%s%s%s "</literal></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"st"</literal></expr> </then><else>: <expr><literal type="string">"ld"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".f64"</literal></expr> </then><else>: <expr><literal type="string">".f32"</literal></expr></else></ternary></expr></argument>,
			<argument><expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".pre"</literal></expr> </then><else>: <expr><literal type="string">".post"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_freg</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>freg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_get_local_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Any offset is allowed. */</comment>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_DST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  local_base "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", #%"</literal> <name>SLJIT_PRINT_D</name> <literal type="string">"d\n"</literal></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_DST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  const "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">", #%"</literal> <name>SLJIT_PRINT_D</name> <literal type="string">"d\n"</literal></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>CHECK_RETURN_TYPE</name></type> <name>check_sljit_emit_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>FUNCTION_CHECK_DST</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>!</operator><operator>!</operator><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"  put_label "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sljit_verbose_param</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>verbose</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>CHECK_RETURN_OK</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_ARGUMENT_CHECKS || SLJIT_VERBOSE */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_FOP1_OPERATION_WITH_CHECKS</name><parameter_list>(<parameter><type><name>compiler</name></type></parameter>, <parameter><type><name>op</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>dstw</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>srcw</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>SLJIT_COMPILE_ASSERT(!(SLJIT_CONV_SW_FROM_F64 &amp; 0x1) &amp;&amp; !(SLJIT_CONV_F64_FROM_SW &amp; 0x1), \
		invalid_float_opcodes); \
	if (GET_OPCODE(op) &gt;= SLJIT_CONV_SW_FROM_F64 &amp;&amp; GET_OPCODE(op) &lt;= SLJIT_CMP_F64) { \
		if (GET_OPCODE(op) == SLJIT_CMP_F64) { \
			CHECK(check_sljit_emit_fop1_cmp(compiler, op, dst, dstw, src, srcw)); \
			ADJUST_LOCAL_OFFSET(dst, dstw); \
			ADJUST_LOCAL_OFFSET(src, srcw); \
			return sljit_emit_fop1_cmp(compiler, op, dst, dstw, src, srcw); \
		} \
		if ((GET_OPCODE(op) | 0x1) == SLJIT_CONV_S32_FROM_F64) { \
			CHECK(check_sljit_emit_fop1_conv_sw_from_f64(compiler, op, dst, dstw, src, srcw)); \
			ADJUST_LOCAL_OFFSET(dst, dstw); \
			ADJUST_LOCAL_OFFSET(src, srcw); \
			return sljit_emit_fop1_conv_sw_from_f64(compiler, op, dst, dstw, src, srcw); \
		} \
		CHECK(check_sljit_emit_fop1_conv_f64_from_sw(compiler, op, dst, dstw, src, srcw)); \
		ADJUST_LOCAL_OFFSET(dst, dstw); \
		ADJUST_LOCAL_OFFSET(src, srcw); \
		return sljit_emit_fop1_conv_f64_from_sw(compiler, op, dst, dstw, src, srcw); \
	} \
	CHECK(check_sljit_emit_fop1(compiler, op, dst, dstw, src, srcw)); \
	ADJUST_LOCAL_OFFSET(dst, dstw); \
	ADJUST_LOCAL_OFFSET(src, srcw);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_mov_before_return</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Return if don't need to do anything. */</comment>
	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_64BIT_ARCHITECTURE</name> <operator>&amp;&amp;</operator> <name>SLJIT_64BIT_ARCHITECTURE</name><operator>)</operator></expr></cpp:if>
	<comment type="block">/* At the moment the pointer size is always equal to sljit_sw. May be changed in the future. */</comment>
	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>SLJIT_RETURN_REG</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>SLJIT_MOV</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV_P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>SLJIT_RETURN_REG</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>op</name> <operator>==</operator> <name>SLJIT_MOV</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV_U32</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV_S32</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV_P</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>SLJIT_RETURN_REG</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_SPARC_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_SPARC_32</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_MIPS_REV</name> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>SLJIT_MIPS_REV</name> <operator>&lt;</operator> <literal type="number">6</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_cmov_generic</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>op</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dst_reg</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLJIT_MOV32</name></expr> </then><else>: <expr><name>SLJIT_MOV</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>^</operator> <literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst_reg</name> <operator>&amp;</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>sljit_emit_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sljit_set_label</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* CPU description section */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_32BIT_ARCHITECTURE</name> <operator>&amp;&amp;</operator> <name>SLJIT_32BIT_ARCHITECTURE</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CPUINFO_PART1</name></cpp:macro> <cpp:value>" 32bit ("</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_64BIT_ARCHITECTURE</name> <operator>&amp;&amp;</operator> <name>SLJIT_64BIT_ARCHITECTURE</name><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CPUINFO_PART1</name></cpp:macro> <cpp:value>" 64bit ("</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Internal error: CPU type info missing"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_LITTLE_ENDIAN</name> <operator>&amp;&amp;</operator> <name>SLJIT_LITTLE_ENDIAN</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CPUINFO_PART2</name></cpp:macro> <cpp:value>"little endian + "</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_BIG_ENDIAN</name> <operator>&amp;&amp;</operator> <name>SLJIT_BIG_ENDIAN</name><operator>)</operator></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CPUINFO_PART2</name></cpp:macro> <cpp:value>"big endian + "</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Internal error: CPU type info missing"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_UNALIGNED</name> <operator>&amp;&amp;</operator> <name>SLJIT_UNALIGNED</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CPUINFO_PART3</name></cpp:macro> <cpp:value>"unaligned)"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CPUINFO_PART3</name></cpp:macro> <cpp:value>"aligned)"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLJIT_CPUINFO</name></cpp:macro> <cpp:value>SLJIT_CPUINFO_PART1 SLJIT_CPUINFO_PART2 SLJIT_CPUINFO_PART3</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86</name><operator>)</operator></expr></cpp:if>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeX86_common.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeARM_32.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V7</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V7</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeARM_32.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_THUMB2</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_THUMB2</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeARM_T2_32.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_64</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeARM_64.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativePPC_common.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeMIPS_common.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_SPARC</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_SPARC</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeSPARC_common.c"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_S390X</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_S390X</name><operator>)</operator></expr></cpp:elif>
<cpp:include>#	<cpp:directive>include</cpp:directive> <cpp:file>"sljitNativeS390X.c"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_MIPS</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_MIPS</name><operator>)</operator></expr></cpp:if>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Default compare for most architectures. */</comment>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name></decl>, <decl><type ref="prev"/><name>tmp_src</name></decl>, <decl><type ref="prev"/><name>condition</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>tmp_srcw</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_cmp</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_64</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>condition</name> <operator>==</operator> <name>SLJIT_EQUAL</name> <operator>||</operator> <name>condition</name> <operator>==</operator> <name>SLJIT_NOT_EQUAL</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>src1w</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>SLJIT_IMM</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>src2w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>src2w</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_cmp_to0</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Immediate is preferred as second argument by most architectures. */</comment>
		<switch>switch <condition>(<expr><name>condition</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
			<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>SLJIT_GREATER</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
			<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>SLJIT_LESS_EQUAL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
			<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>SLJIT_LESS</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
			<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>SLJIT_GREATER_EQUAL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
			<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>SLJIT_SIG_GREATER</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
			<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>SLJIT_SIG_LESS_EQUAL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
			<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>SLJIT_SIG_LESS</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
			<expr_stmt><expr><name>condition</name> <operator>=</operator> <name>SLJIT_SIG_GREATER_EQUAL</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>condition</name> <operator>|</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_I32_OP</name> <operator>|</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp_src</name> <operator>=</operator> <name>src1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>tmp_src</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp_srcw</name> <operator>=</operator> <name>src1w</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2w</name> <operator>=</operator> <name>tmp_srcw</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>condition</name> <operator>&lt;=</operator> <name>SLJIT_NOT_ZERO</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>SLJIT_SET_Z</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>condition</name> <operator>&lt;&lt;</operator> <name>VARIABLE_FLAG_SHIFT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name> <operator>|</operator> <name>flags</name> <operator>|</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr></argument>,
		<argument><expr><name>SLJIT_UNUSED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>condition</name> <operator>|</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_REWRITABLE_JUMP</name> <operator>|</operator> <name>SLJIT_I32_OP</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_fcmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fcmp</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>sljit_emit_fop1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_CMP_F64</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>VARIABLE_FLAG_SHIFT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_I32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_32</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_32</name><operator>)</operator> \
	<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_64</name><operator>)</operator> \
	<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC</name><operator>)</operator></expr></cpp:if>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_64</name><operator>)</operator> \
	<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_PPC</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_PPC</name><operator>)</operator></expr></cpp:if>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fmem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>freg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>freg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fmem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>freg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_X86</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_X86</name><operator>)</operator> \
	<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_64</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_64</name><operator>)</operator></expr></cpp:if>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_local_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_get_local_base</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><call><name>SLJIT_MEM1</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* SLJIT_CONFIG_UNSUPPORTED */</comment>

<comment type="block">/* Empty function bodies for those machines, which are not (yet) supported. */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sljit_get_platform_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="string">"unsupported"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_compiler</name></name><modifier>*</modifier></type> <name>sljit_create_compiler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>allocator_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exec_allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>exec_allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_compiler</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_compiler_memory_error</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_alloc_memory</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator></expr></cpp:if>
<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_compiler_verbose</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>verbose</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_generate_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_has_cpu_feature</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>feature_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>feature_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_free_code</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>exec_allocator_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>exec_allocator_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>saveds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>fscratches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>fsaveds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_set_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>saveds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>fscratches</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>fsaveds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_return</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fast_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>reg</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_custom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>instruction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_current_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>current_flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>current_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>sljit_emit_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_fcmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_target</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_ijump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_icall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_cmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fmem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>freg</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>freg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_local_base</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_const</name></name><modifier>*</modifier></type> <name>sljit_emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>initval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>initval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_put_label</name></name><modifier>*</modifier></type> <name>sljit_emit_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_target</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>new_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>new_constant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !SLJIT_CONFIG_UNSUPPORTED */</comment>
</unit>
