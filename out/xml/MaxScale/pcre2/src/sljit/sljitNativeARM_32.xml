<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativeARM_32.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_ABI_INFO</name></cpp:macro> <cpp:value>" ABI:softfp"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARM_ABI_INFO</name></cpp:macro> <cpp:value>" ABI:hardfp"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sljit_get_platform_name</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V7</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V7</name><operator>)</operator></expr></cpp:if>
	<return>return <expr><literal type="string">"ARMv7"</literal> <name>SLJIT_CPUINFO</name> <name>ARM_ABI_INFO</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:elif>
	<return>return <expr><literal type="string">"ARMv5"</literal> <name>SLJIT_CPUINFO</name> <name>ARM_ABI_INFO</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Internal error: Unknown ARM architecture"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Last register + 1. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_REG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_PC</name></cpp:macro>		<cpp:value>(SLJIT_NUMBER_OF_REGISTERS + 4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG1</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TMP_FREG2</name></cpp:macro>	<cpp:value>(SLJIT_NUMBER_OF_FLOAT_REGISTERS + 2)</cpp:value></cpp:define>

<comment type="block">/* In ARM instruction words.
   Cache lines are usually 32 byte aligned. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_POOL_ALIGNMENT</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONST_POOL_EMPTY</name></cpp:macro>	<cpp:value>0xffffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN_INSTRUCTION</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(sljit_uw*)(((sljit_uw)(ptr) + (CONST_POOL_ALIGNMENT * sizeof(sljit_uw)) - 1) &amp; ~((CONST_POOL_ALIGNMENT * sizeof(sljit_uw)) - 1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DIFFERENCE</name><parameter_list>(<parameter><type><name>max_diff</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((max_diff) / (sljit_s32)sizeof(sljit_uw)) - (CONST_POOL_ALIGNMENT - 1))</cpp:value></cpp:define>

<comment type="block">/* See sljit_emit_enter and sljit_emit_op0 if you want to change them. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>reg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_REGISTERS</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_u8</name></type> <name><name>freg_map</name><index>[<expr><name>SLJIT_NUMBER_OF_FLOAT_REGISTERS</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RM</name><parameter_list>(<parameter><type><name>rm</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rm])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RD</name><parameter_list>(<parameter><type><name>rd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rd] &lt;&lt; 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RN</name><parameter_list>(<parameter><type><name>rn</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(reg_map[rn] &lt;&lt; 16)</cpp:value></cpp:define>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Instrucion forms                                                     */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* The instruction includes the AL condition.
   INST_NAME - CONDITIONAL remove this flag. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COND_MASK</name></cpp:macro>	<cpp:value>0xf0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONDITIONAL</name></cpp:macro>	<cpp:value>0xe0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_POOL</name></cpp:macro>	<cpp:value>0xff000000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADC</name></cpp:macro>		<cpp:value>0xe0a00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name></cpp:macro>		<cpp:value>0xe0800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AND</name></cpp:macro>		<cpp:value>0xe0000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro>		<cpp:value>0xea000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIC</name></cpp:macro>		<cpp:value>0xe1c00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BL</name></cpp:macro>		<cpp:value>0xeb000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLX</name></cpp:macro>		<cpp:value>0xe12fff30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BX</name></cpp:macro>		<cpp:value>0xe12fff10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLZ</name></cpp:macro>		<cpp:value>0xe16f0f10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMN</name></cpp:macro>		<cpp:value>0xe1600000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMP</name></cpp:macro>		<cpp:value>0xe1400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BKPT</name></cpp:macro>		<cpp:value>0xe1200070</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EOR</name></cpp:macro>		<cpp:value>0xe0200000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOV</name></cpp:macro>		<cpp:value>0xe1a00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name></cpp:macro>		<cpp:value>0xe0000090</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVN</name></cpp:macro>		<cpp:value>0xe1e00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOP</name></cpp:macro>		<cpp:value>0xe1a00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORR</name></cpp:macro>		<cpp:value>0xe1800000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH</name></cpp:macro>		<cpp:value>0xe92d0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP</name></cpp:macro>		<cpp:value>0xe8bd0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSB</name></cpp:macro>		<cpp:value>0xe0600000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSC</name></cpp:macro>		<cpp:value>0xe0e00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SBC</name></cpp:macro>		<cpp:value>0xe0c00000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMULL</name></cpp:macro>		<cpp:value>0xe0c00090</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB</name></cpp:macro>		<cpp:value>0xe0400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UMULL</name></cpp:macro>		<cpp:value>0xe0800090</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VABS_F32</name></cpp:macro>	<cpp:value>0xeeb00ac0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VADD_F32</name></cpp:macro>	<cpp:value>0xee300a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCMP_F32</name></cpp:macro>	<cpp:value>0xeeb40a40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCVT_F32_S32</name></cpp:macro>	<cpp:value>0xeeb80ac0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCVT_F64_F32</name></cpp:macro>	<cpp:value>0xeeb70ac0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VCVT_S32_F32</name></cpp:macro>	<cpp:value>0xeebd0ac0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VDIV_F32</name></cpp:macro>	<cpp:value>0xee800a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOV_F32</name></cpp:macro>	<cpp:value>0xeeb00a40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOV</name></cpp:macro>		<cpp:value>0xee000a10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMOV2</name></cpp:macro>		<cpp:value>0xec400a10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMRS</name></cpp:macro>		<cpp:value>0xeef1fa10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VMUL_F32</name></cpp:macro>	<cpp:value>0xee200a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNEG_F32</name></cpp:macro>	<cpp:value>0xeeb10a40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSTR_F32</name></cpp:macro>	<cpp:value>0xed000a00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSUB_F32</name></cpp:macro>	<cpp:value>0xee300a40</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V7</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V7</name><operator>)</operator></expr></cpp:if>
<comment type="block">/* Arm v7 specific instructions. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVW</name></cpp:macro>		<cpp:value>0xe3000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVT</name></cpp:macro>		<cpp:value>0xe3400000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SXTB</name></cpp:macro>		<cpp:value>0xe6af0070</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SXTH</name></cpp:macro>		<cpp:value>0xe6bf0070</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UXTB</name></cpp:macro>		<cpp:value>0xe6ef0070</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UXTH</name></cpp:macro>		<cpp:value>0xe6ff0070</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_cpool</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Pushing the constant pool into the instruction stream. */</comment>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>inst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>cpool_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>cpool_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* The label could point the address after the constant pool. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>+</operator> <operator>(</operator><name>CONST_POOL_ALIGNMENT</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>&lt;=</operator> <name>CPOOL_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <literal type="number">0xff000000</literal> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CONST_POOL_ALIGNMENT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>cpool_ptr</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cpool_end</name> <operator>=</operator> <name>cpool_ptr</name> <operator>+</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>cpool_ptr</name> <operator>&lt;</operator> <name>cpool_end</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>inst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <operator>*</operator><name>cpool_ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>=</operator> <name>CONST_POOL_EMPTY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>inst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>!=</operator> <name>CONST_POOL_EMPTY</name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>&gt;=</operator> <call><name>MAX_DIFFERENCE</name><argument_list>(<argument><expr><literal type="number">4092</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_cpool</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst_with_literal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>inst</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>literal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>cpool_index</name> <init>= <expr><name>CPOOL_SIZE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>cpool_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>cpool_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name><modifier>*</modifier></type> <name>cpool_unique_ptr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>!=</operator> <name>CONST_POOL_EMPTY</name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>&gt;=</operator> <call><name>MAX_DIFFERENCE</name><argument_list>(<argument><expr><literal type="number">4092</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_cpool</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cpool_ptr</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cpool_end</name> <operator>=</operator> <name>cpool_ptr</name> <operator>+</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cpool_unique_ptr</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_unique</name></name></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>cpool_ptr</name> <operator>==</operator> <name>literal</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>cpool_unique_ptr</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>cpool_index</name> <operator>=</operator> <name>cpool_ptr</name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool</name></name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>cpool_ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>cpool_unique_ptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>cpool_ptr</name> <operator>&lt;</operator> <name>cpool_end</name></expr>)</condition>;</do>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>cpool_index</name> <operator>==</operator> <name>CPOOL_SIZE</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Must allocate a new entry in the literal pool. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>&lt;</operator> <name>CPOOL_SIZE</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>cpool_index</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_cpool</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cpool_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>inst</name> <operator>|</operator> <name>cpool_index</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool</name><index>[<expr><name>cpool_index</name></expr>]</index></name> <operator>=</operator> <name>literal</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_unique</name><index>[<expr><name>cpool_index</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>==</operator> <name>CONST_POOL_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst_with_unique_literal</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>inst</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>literal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>!=</operator> <name>CONST_POOL_EMPTY</name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>&gt;=</operator> <call><name>MAX_DIFFERENCE</name><argument_list>(<argument><expr><literal type="number">4092</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>&gt;=</operator> <name>CPOOL_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_cpool</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>&lt;</operator> <name>CPOOL_SIZE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>inst</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>inst</name> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool</name><index>[<expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr>]</index></name> <operator>=</operator> <name>literal</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_unique</name><index>[<expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>==</operator> <name>CONST_POOL_EMPTY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>prepare_blx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Place for at least two instruction (doesn't matter whether the first has a literal). */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>!=</operator> <name>CONST_POOL_EMPTY</name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>&gt;=</operator> <call><name>MAX_DIFFERENCE</name><argument_list>(<argument><expr><literal type="number">4088</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_cpool</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_blx</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Must follow tightly the previous instruction (to be able to convert it to bl instruction). */</comment>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>==</operator> <name>CONST_POOL_EMPTY</name> <operator>||</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_diff</name></name> <operator>&lt;</operator> <call><name>MAX_DIFFERENCE</name><argument_list>(<argument><expr><literal type="number">4092</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>!=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BLX</name> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>patch_pc_relative_loads</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>last_pc_patch</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>const_pool</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>cpool_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>diff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>ind</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>clear_const_pool</name> <init>= <expr><name>const_pool</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>clear_const_pool_end</name> <init>= <expr><name>const_pool</name> <operator>+</operator> <name>cpool_size</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>const_pool</name> <operator>-</operator> <name>code_ptr</name> <operator>&lt;=</operator> <name>CONST_POOL_ALIGNMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Set unused flag for all literals in the constant pool.
	   I.e.: unused literals can belong to branches, which can be encoded as B or BL.
	   We can "compress" the constant pool by discarding these literals. */</comment>
	<while>while <condition>(<expr><name>clear_const_pool</name> <operator>&lt;</operator> <name>clear_const_pool_end</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>clear_const_pool</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

	<while>while <condition>(<expr><name>last_pc_patch</name> <operator>&lt;</operator> <name>code_ptr</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Data transfer instruction with Rn == r15. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>last_pc_patch</name> <operator>&amp;</operator> <literal type="number">0x0c0f0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x040f0000</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>diff</name> <operator>=</operator> <name>const_pool</name> <operator>-</operator> <name>last_pc_patch</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ind</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>last_pc_patch</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>

			<comment type="block">/* Must be a load instruction with immediate offset. */</comment>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>ind</name> <operator>&lt;</operator> <name>cpool_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>last_pc_patch</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>last_pc_patch</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sljit_s32</name><operator>)</operator><name><name>const_pool</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>const_pool</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ind</name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>ind</name> <operator>=</operator> <name><name>const_pool</name><index>[<expr><name>ind</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>diff</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>||</operator> <name>ind</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>+</operator> <name>ind</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>last_pc_patch</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>last_pc_patch</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfff</literal><operator>)</operator> <operator>|</operator> <name>diff</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>last_pc_patch</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>last_pc_patch</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xfff</literal> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>|</operator> <literal type="number">0x004</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>last_pc_patch</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>counter</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* In some rare ocasions we may need future patches. The probability is close to 0 in practice. */</comment>
<struct>struct <name>future_patch</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>future_patch</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>value</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>resolve_const_pool_index</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>future_patch</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>first_patch</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>cpool_current_index</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>cpool_start_address</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>buf_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>future_patch</name></name> <modifier>*</modifier></type><name>curr_patch</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev_patch</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Using the values generated by patch_pc_relative_loads. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>first_patch</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name><name>cpool_start_address</name><index>[<expr><name>cpool_current_index</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>curr_patch</name> <operator>=</operator> <operator>*</operator><name>first_patch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev_patch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curr_patch</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name><name>cpool_start_address</name><index>[<expr><name>cpool_current_index</name></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><name><name>curr_patch</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name>cpool_current_index</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>curr_patch</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>prev_patch</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>prev_patch</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>curr_patch</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>first_patch</name> <operator>=</operator> <name><name>curr_patch</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>curr_patch</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>prev_patch</name> <operator>=</operator> <name>curr_patch</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>curr_patch</name> <operator>=</operator> <name><name>curr_patch</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>value</name> <operator>&gt;</operator> <name>cpool_current_index</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>curr_patch</name> <operator>=</operator> <operator>(</operator>struct <name>future_patch</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>future_patch</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>curr_patch</name></expr>)</condition> <block>{<block_content>
				<while>while <condition>(<expr><operator>*</operator><name>first_patch</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>curr_patch</name> <operator>=</operator> <operator>*</operator><name>first_patch</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>first_patch</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>first_patch</name><operator>)</operator><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SLJIT_FREE</name><argument_list>(<argument><expr><name>curr_patch</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></while>
				<return>return <expr><name>SLJIT_ERR_ALLOC_FAILED</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>curr_patch</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>first_patch</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curr_patch</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>curr_patch</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>cpool_start_address</name><index>[<expr><name>value</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>first_patch</name> <operator>=</operator> <name>curr_patch</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>cpool_start_address</name><index>[<expr><name>value</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>push_inst</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>inst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>ensure_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>inst</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_imm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVW</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVT</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>detect_jump_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>code_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>diff</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_BL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>code_ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_ADDR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>executable_offset</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Branch to Thumb code has not been optimized yet. */</comment>
	<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_BL</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0x01ffffff</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x02000000</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <operator>(</operator><name>BL</name> <operator>-</operator> <name>CONDITIONAL</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>code_ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>COND_MASK</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0x01ffffff</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x02000000</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <operator>(</operator><name>B</name> <operator>-</operator> <name>CONDITIONAL</name><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>code_ptr</name> <operator>&amp;</operator> <name>COND_MASK</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_ADDR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>code_ptr</name> <operator>-</operator> <name>executable_offset</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>code</name> <operator>+</operator> <name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><name>code_ptr</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Branch to Thumb code has not been optimized yet. */</comment>
	<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0x01ffffff</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x02000000</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>code_ptr</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_BL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>BL</name> <operator>-</operator> <name>CONDITIONAL</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>B</name> <operator>-</operator> <name>CONDITIONAL</name><operator>)</operator></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>code_ptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>COND_MASK</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>PATCH_B</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>inline_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>jump_ptr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_addr</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flush_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><name>jump_ptr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>mov_pc</name> <init>= <expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>bl</name> <init>= <expr><operator>(</operator><name>mov_pc</name> <operator>&amp;</operator> <literal type="number">0x0000f000</literal><operator>)</operator> <operator>!=</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_PC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name>new_addr</name> <operator>-</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><operator>(</operator><name>inst</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>executable_offset</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">0x7fffff</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x800000</literal></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Turn to branch. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bl</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mov_pc</name> <operator>&amp;</operator> <name>COND_MASK</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>B</name> <operator>-</operator> <name>CONDITIONAL</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mov_pc</name> <operator>&amp;</operator> <name>COND_MASK</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>BL</name> <operator>-</operator> <name>CONDITIONAL</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <literal type="number">0xffffff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NOP</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/* Get the position of the constant. */</comment>
		<if_stmt><if>if <condition>(<expr><name>mov_pc</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>inst</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>mov_pc</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>inst</name> <operator>!=</operator> <name>mov_pc</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>!</operator><name>bl</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mov_pc</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bl</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>BLX</name> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>new_addr</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name>jump_ptr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff00000</literal><operator>)</operator> <operator>==</operator> <name>MOVW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff00000</literal><operator>)</operator> <operator>==</operator> <name>MOVT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MOVW</name> <operator>|</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_addr</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>new_addr</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVT</name> <operator>|</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_addr</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>get_imm</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>imm</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>void</name></type> <name>inline_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flush_cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>ldr_literal</name> <init>= <expr><name><name>ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>src2</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>new_constant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>src2</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <literal type="number">0xe3a00000</literal> <operator>|</operator> <operator>(</operator><name>ldr_literal</name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>|</operator> <name>src2</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>src2</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>~</operator><name>new_constant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>src2</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <literal type="number">0xe3e00000</literal> <operator>|</operator> <operator>(</operator><name>ldr_literal</name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>|</operator> <name>src2</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ldr_literal</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>inst</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>ldr_literal</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>inst</name> <operator>!=</operator> <name>ldr_literal</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>inst</name> <operator>=</operator> <name>ldr_literal</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>new_constant</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff00000</literal><operator>)</operator> <operator>==</operator> <name>MOVW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff00000</literal><operator>)</operator> <operator>==</operator> <name>MOVT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>MOVW</name> <operator>|</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_constant</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>new_constant</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>MOVT</name> <operator>|</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_constant</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_constant</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush_cache</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name><modifier>*</modifier></type> <name>sljit_generate_code</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_memory_fragment</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>code_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>buf_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>buf_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>word_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>next_addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>addr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>cpool_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>cpool_skip_alignment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>cpool_current_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>cpool_start_address</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name> <modifier>*</modifier></type><name>last_pc_patch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>future_patch</name></name> <modifier>*</modifier></type><name>first_patch</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_generate_code</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse_buf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Second code generation pass. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>patches</name></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>+</operator> <name>CONST_POOL_ALIGNMENT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><call><name>SLJIT_MALLOC_EXEC</name><argument_list>(<argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_WITH_EXEC_IF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>cpool_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cpool_skip_alignment</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cpool_current_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cpool_start_address</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>first_patch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>last_pc_patch</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>word_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>executable_offset</name> <operator>=</operator> <call><name>SLJIT_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>labels</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>consts</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>memory</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf_ptr</name> <operator>+</operator> <operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>used_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		<do>do <block>{<block_content>
			<expr_stmt><expr><name>word_count</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><name>cpool_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>cpool_skip_alignment</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>cpool_skip_alignment</name><operator>--</operator></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><call><name>resolve_const_pool_index</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first_patch</name></expr></argument>, <argument><expr><name>cpool_current_index</name></expr></argument>, <argument><expr><name>cpool_start_address</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>SLJIT_FREE_EXEC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_ALLOC_FAILED</name></expr>;</expr_stmt>
						<return>return <expr><name>NULL</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>++</operator><name>cpool_current_index</name> <operator>&gt;=</operator> <name>cpool_size</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>first_patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>cpool_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
							<comment type="block">/* Points after the current instruction. */</comment>
							<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>code_ptr</name> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

							<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <call><name>compute_next_addr</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>const_</name></expr></argument>, <argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>buf_ptr</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator> <operator>!=</operator> <name>PUSH_POOL</name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>next_addr</name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name> <operator>||</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name> <operator>||</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name> <operator>||</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name> <operator>||</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>&gt;=</operator> <name>word_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* These structures are ordered by their address. */</comment>
					<if_stmt><if>if <condition>(<expr><name>jump</name> <operator>&amp;&amp;</operator> <name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
						<if_stmt><if>if <condition>(<expr><call><name>detect_jump_type</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>code_ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><call><name>detect_jump_type</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>code_ptr</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>label</name> <operator>&amp;&amp;</operator> <name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
						<comment type="block">/* code_ptr can be affected above. */</comment>
						<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>label</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>code_ptr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>code</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>label</name> <operator>=</operator> <name><name>label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>const_</name> <operator>&amp;&amp;</operator> <name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
						<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><operator>(</operator><name>code_ptr</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>const_</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>put_label</name> <operator>&amp;&amp;</operator> <name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>==</operator> <name>word_count</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>put_label</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>next_addr</name> <operator>=</operator> <call><name>compute_next_addr</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>jump</name></expr></argument>, <argument><expr><name>const_</name></expr></argument>, <argument><expr><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>code_ptr</name><operator>++</operator></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<comment type="block">/* Fortunately, no need to shift. */</comment>
				<expr_stmt><expr><name>cpool_size</name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name><operator>++</operator> <operator>&amp;</operator> <operator>~</operator><name>PUSH_POOL</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>cpool_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cpool_start_address</name> <operator>=</operator> <call><name>ALIGN_INSTRUCTION</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cpool_current_index</name> <operator>=</operator> <call><name>patch_pc_relative_loads</name><argument_list>(<argument><expr><name>last_pc_patch</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>cpool_start_address</name></expr></argument>, <argument><expr><name>cpool_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>cpool_current_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
					<comment type="block">/* Unconditional branch. */</comment>
					<expr_stmt><expr><operator>*</operator><name>code_ptr</name> <operator>=</operator> <name>B</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>cpool_start_address</name> <operator>-</operator> <name>code_ptr</name><operator>)</operator> <operator>+</operator> <name>cpool_current_index</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>PUSH_POOL</name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <name>cpool_start_address</name> <operator>+</operator> <name>cpool_current_index</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>cpool_skip_alignment</name> <operator>=</operator> <name>CONST_POOL_ALIGNMENT</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>cpool_current_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>last_pc_patch</name> <operator>=</operator> <name>code_ptr</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block> while <condition>(<expr><name>buf_ptr</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition>;</do>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>buf</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>cpool_size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cpool_start_address</name> <operator>=</operator> <call><name>ALIGN_INSTRUCTION</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cpool_current_index</name> <operator>=</operator> <call><name>patch_pc_relative_loads</name><argument_list>(<argument><expr><name>last_pc_patch</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>cpool_start_address</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cpool_current_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <name>cpool_start_address</name> <operator>+</operator> <name>cpool_current_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_end</name> <operator>=</operator> <name>buf_ptr</name> <operator>+</operator> <name><name>compiler</name><operator>-&gt;</operator><name>cpool_fill</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cpool_current_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>buf_ptr</name> <operator>&lt;</operator> <name>buf_end</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><call><name>resolve_const_pool_index</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first_patch</name></expr></argument>, <argument><expr><name>cpool_current_index</name></expr></argument>, <argument><expr><name>cpool_start_address</name></expr></argument>, <argument><expr><name>buf_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_FREE_EXEC</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>exec_allocator_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_ALLOC_FAILED</name></expr>;</expr_stmt>
				<return>return <expr><name>NULL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>buf_ptr</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>cpool_current_index</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>first_patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>jumps</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>jump</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PATCH_B</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>sljit_sw</name><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>buf_ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_ADDR</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name>addr</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0x01ffffff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name>addr</name><operator>)</operator> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x02000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>buf_ptr</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name> <operator>-</operator> <name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <name>addr</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0x01ffffff</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <name>addr</name><operator>)</operator> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x02000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>buf_ptr</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>sljit_sw</name><operator>)</operator><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>-</operator> <name>addr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
			<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>buf_ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>inline_set_jump_addr</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>code_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>inline_set_jump_addr</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>buf_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>IS_BL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf_ptr</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf_ptr</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf_ptr</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>buf_ptr</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>inline_set_jump_addr</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>buf_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>JUMP_LABEL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>jump</name> <operator>=</operator> <name><name>jump</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>consts</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>const_</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>const_</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator><name>buf_ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>code_ptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>buf_ptr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf_ptr</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>buf_ptr</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>buf_ptr</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<comment type="block">/* Set the value again (can be a simple constant). */</comment>
		<expr_stmt><expr><call><name>inline_set_const</name><argument_list>(<argument><expr><operator>(</operator><name>sljit_uw</name><operator>)</operator><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>, <argument><expr><operator>*</operator><name>buf_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>code_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>const_</name> <operator>=</operator> <name><name>const_</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>put_labels</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>put_label</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name><name>put_label</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xe59f0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>buf_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff00000</literal><operator>)</operator> <operator>==</operator> <name>MOVW</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xfff00000</literal><operator>)</operator> <operator>==</operator> <name>MOVT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>addr</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>addr</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>put_label</name> <operator>=</operator> <name><name>put_label</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>code_ptr</name> <operator>-</operator> <name>code</name> <operator>&lt;=</operator> <operator>(</operator><name>sljit_s32</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <name>SLJIT_ERR_COMPILED</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_offset</name></name> <operator>=</operator> <name>executable_offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>executable_size</name></name> <operator>=</operator> <operator>(</operator><name>code_ptr</name> <operator>-</operator> <name>code</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_uw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>code_ptr</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>code_ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_has_cpu_feature</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>feature_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>feature_type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_HAS_FPU</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SLJIT_IS_FPU_AVAILABLE</name></cpp:ifdef>
		<return>return <expr><name>SLJIT_IS_FPU_AVAILABLE</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/* Available by default. */</comment>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<case>case <expr><name>SLJIT_HAS_CLZ</name></expr>:</case>
	<case>case <expr><name>SLJIT_HAS_CMOV</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V7</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V7</name><operator>)</operator></expr></cpp:if>
	<case>case <expr><name>SLJIT_HAS_PREFETCH</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><literal type="number">1</literal></expr>;</return>

	<default>default:</default>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Entry, exit                                                          */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* Creates an index in data_transfer_insts array. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_SIZE</name></cpp:macro>	<cpp:value>0x00</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTE_SIZE</name></cpp:macro>	<cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HALF_SIZE</name></cpp:macro>	<cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRELOAD</name></cpp:macro>		<cpp:value>0x03</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNED</name></cpp:macro>		<cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_DATA</name></cpp:macro>	<cpp:value>0x08</cpp:value></cpp:define>

<comment type="block">/* Flag bits for emit_op. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_IMM</name></cpp:macro>	<cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_INV_IMM</name></cpp:macro>	<cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_ANY_IMM</name></cpp:macro>	<cpp:value>(ALLOW_IMM | ALLOW_INV_IMM)</cpp:value></cpp:define>

<comment type="block">/* s/l - store/load (1 bit)
   u/s - signed/unsigned (1 bit)
   w/b/h/N - word/byte/half/NOT allowed (2 bit)
   Storing signed and unsigned values are the same operations. */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sljit_uw</name></type> <name><name>data_transfer_insts</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
<comment type="block">/* s u w */</comment> <expr><literal type="number">0xe5000000</literal></expr> <comment type="block">/* str */</comment>,
<comment type="block">/* s u b */</comment> <expr><literal type="number">0xe5400000</literal></expr> <comment type="block">/* strb */</comment>,
<comment type="block">/* s u h */</comment> <expr><literal type="number">0xe10000b0</literal></expr> <comment type="block">/* strh */</comment>,
<comment type="block">/* s u N */</comment> <expr><literal type="number">0x00000000</literal></expr> <comment type="block">/* not allowed */</comment>,
<comment type="block">/* s s w */</comment> <expr><literal type="number">0xe5000000</literal></expr> <comment type="block">/* str */</comment>,
<comment type="block">/* s s b */</comment> <expr><literal type="number">0xe5400000</literal></expr> <comment type="block">/* strb */</comment>,
<comment type="block">/* s s h */</comment> <expr><literal type="number">0xe10000b0</literal></expr> <comment type="block">/* strh */</comment>,
<comment type="block">/* s s N */</comment> <expr><literal type="number">0x00000000</literal></expr> <comment type="block">/* not allowed */</comment>,

<comment type="block">/* l u w */</comment> <expr><literal type="number">0xe5100000</literal></expr> <comment type="block">/* ldr */</comment>,
<comment type="block">/* l u b */</comment> <expr><literal type="number">0xe5500000</literal></expr> <comment type="block">/* ldrb */</comment>,
<comment type="block">/* l u h */</comment> <expr><literal type="number">0xe11000b0</literal></expr> <comment type="block">/* ldrh */</comment>,
<comment type="block">/* l u p */</comment> <expr><literal type="number">0xf5500000</literal></expr> <comment type="block">/* preload */</comment>,
<comment type="block">/* l s w */</comment> <expr><literal type="number">0xe5100000</literal></expr> <comment type="block">/* ldr */</comment>,
<comment type="block">/* l s b */</comment> <expr><literal type="number">0xe11000d0</literal></expr> <comment type="block">/* ldrsb */</comment>,
<comment type="block">/* l s h */</comment> <expr><literal type="number">0xe11000f0</literal></expr> <comment type="block">/* ldrsh */</comment>,
<comment type="block">/* l s N */</comment> <expr><literal type="number">0x00000000</literal></expr> <comment type="block">/* not allowed */</comment>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_DATA_TRANSFER</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>add</name></type></parameter>, <parameter><type><name>target_reg</name></type></parameter>, <parameter><type><name>base_reg</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(data_transfer_insts[(type) &amp; 0xf] | ((add) &lt;&lt; 23) | RD(target_reg) | RN(base_reg) | (arg))</cpp:value></cpp:define>

<comment type="block">/* Normal ldr/str instruction.
   Type2: ldrsb, ldrh, ldrsh */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_TYPE1_TRANSFER</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(data_transfer_insts[(type) &amp; 0xf] &amp; 0x04000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE2_TRANSFER_IMM</name><parameter_list>(<parameter><type><name>imm</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(((imm) &amp; 0xf) | (((imm) &amp; 0xf0) &lt;&lt; 4) | (1 &lt;&lt; 22))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>inp_flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>args</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>push</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_emit_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Push saved registers, temporary registers
	   stmdb sp!, {..., lr} */</comment>
	<expr_stmt><expr><name>push</name> <operator>=</operator> <name>PUSH</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name>saveds</name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>saveds</name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_S0</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>push</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>reg_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>scratches</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>push</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>reg_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>push</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Stack must be aligned to 8 bytes: */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>local_size</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>+</operator> <name>local_size</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <name>local_size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>local_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name></expr></argument>, <argument><expr><name>ALLOW_IMM</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>get_arg_count</name><argument_list>(<argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_S0</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_S1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>args</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_S2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>SLJIT_R2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_set_context</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>scratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>saveds</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>fscratches</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>fsaveds</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>local_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_set_context</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><name>fscratches</name></expr></argument>, <argument><expr><name>fsaveds</name></expr></argument>, <argument><expr><name>local_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>GET_SAVED_REGISTERS_SIZE</name><argument_list>(<argument><expr><name>scratches</name></expr></argument>, <argument><expr><name>saveds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>+</operator> <name>local_size</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>-</operator> <name>size</name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_return</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>pop</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_mov_before_return</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_ADD</name></expr></argument>, <argument><expr><name>ALLOW_IMM</name></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_SP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>local_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Push saved registers, temporary registers
	   ldmia sp!, {..., pc} */</comment>
	<expr_stmt><expr><name>pop</name> <operator>=</operator> <name>POP</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name> <operator>&lt;</operator> <name>SLJIT_NUMBER_OF_SAVED_REGISTERS</name></expr> ?</condition><then> <expr><operator>(</operator><name>SLJIT_S0</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>saveds</name></name><operator>)</operator></expr> </then><else>: <expr><name>SLJIT_FIRST_SAVED_REG</name></expr></else></ternary></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>SLJIT_S0</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>tmp</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pop</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>reg_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>SLJIT_FIRST_SAVED_REG</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pop</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>reg_map</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>pop</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Operators                                                            */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<comment type="block">/* flags: */</comment>
  <comment type="block">/* Arguments are swapped. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGS_SWAPPED</name></cpp:macro>	<cpp:value>0x01</cpp:value></cpp:define>
  <comment type="block">/* Inverted immediate. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INV_IMM</name></cpp:macro>		<cpp:value>0x02</cpp:value></cpp:define>
  <comment type="block">/* Source and destination is register. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOVE_REG_CONV</name></cpp:macro>	<cpp:value>0x04</cpp:value></cpp:define>
  <comment type="block">/* Unused return value. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_RETURN</name></cpp:macro>	<cpp:value>0x08</cpp:value></cpp:define>
<comment type="block">/* SET_FLAGS must be (1 &lt;&lt; 20) as it is also the value of S bit (can be used for optimization). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_FLAGS</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>
<comment type="block">/* dst: reg
   src1: reg
   src2: reg or imm (if allowed)
   SRC2_IMM must be (1 &lt;&lt; 25) as it is also the value of I bit (can be used for optimization). */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC2_IMM</name></cpp:macro>	<cpp:value>(1 &lt;&lt; 25)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_SHIFT_INS_AND_RETURN</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>SLJIT_ASSERT(!(flags &amp; INV_IMM) &amp;&amp; !(src2 &amp; SRC2_IMM)); \
	if (compiler-&gt;shift_imm != 0x20) { \
		SLJIT_ASSERT(src1 == TMP_REG1); \
		SLJIT_ASSERT(!(flags &amp; ARGS_SWAPPED)); \
		\
		if (compiler-&gt;shift_imm != 0) \
			return push_inst(compiler, MOV | (flags &amp; SET_FLAGS) | \
				RD(dst) | (compiler-&gt;shift_imm &lt;&lt; 7) | (opcode &lt;&lt; 5) | RM(src2)); \
		return push_inst(compiler, MOV | (flags &amp; SET_FLAGS) | RD(dst) | RM(src2)); \
	} \
	return push_inst(compiler, MOV | (flags &amp; SET_FLAGS) | RD(dst) | \
		(reg_map[(flags &amp; ARGS_SWAPPED) ? src1 : src2] &lt;&lt; 8) | (opcode &lt;&lt; 5) | 0x10 | RM((flags &amp; ARGS_SWAPPED) ? src2 : src1));</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_single_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARGS_SWAPPED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>MVN</name></expr> </then><else>: <expr><name>MOV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARGS_SWAPPED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOVE_REG_CONV</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_U8</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>AND</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>SRC2_IMM</name> <operator>|</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">24</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">24</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_U8</name></expr> ?</condition><then> <expr><literal type="number">0x20</literal></expr> </then><else>: <expr><literal type="number">0x40</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_U8</name></expr> ?</condition><then> <expr><name>UXTB</name></expr> </then><else>: <expr><name>SXTB</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>MVN</name></expr> </then><else>: <expr><name>MOV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARGS_SWAPPED</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MOVE_REG_CONV</name></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_U16</name></expr> ?</condition><then> <expr><literal type="number">0x20</literal></expr> </then><else>: <expr><literal type="number">0x40</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_U16</name></expr> ?</condition><then> <expr><name>UXTH</name></expr> </then><else>: <expr><name>SXTH</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>MVN</name></expr> </then><else>: <expr><name>MOV</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name></expr>)</condition> <block>{<block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>MOV</name></expr> </then><else>: <expr><name>MVN</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MVN</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CLZ</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>UNUSED_RETURN</name> <operator>|</operator> <name>SET_FLAGS</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>UNUSED_RETURN</name> <operator>|</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARGS_SWAPPED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMN</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADC</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>UNUSED_RETURN</name> <operator>|</operator> <name>SET_FLAGS</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>UNUSED_RETURN</name> <operator>|</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARGS_SWAPPED</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMP</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARGS_SWAPPED</name><operator>)</operator></expr> ?</condition><then> <expr><name>SUB</name></expr> </then><else>: <expr><name>RSB</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator>
			<operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ARGS_SWAPPED</name><operator>)</operator></expr> ?</condition><then> <expr><name>SBC</name></expr> </then><else>: <expr><name>RSC</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator>
			<operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MUL</name> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>src2</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>src1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SMULL</name> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>dst</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>src2</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>reg_map</name><index>[<expr><name>src1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* cmp TMP_REG1, dst asr #31. */</comment>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMP</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">0xfc0</literal></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>AND</name></expr> </then><else>: <expr><name>BIC</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator>
			<operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORR</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>INV_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EOR</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SET_FLAGS</name><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>src2</name> <operator>&amp;</operator> <name>SRC2_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><name>src2</name></expr> </then><else>: <expr><call><name>RM</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_SHIFT_INS_AND_RETURN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_SHIFT_INS_AND_RETURN</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<expr_stmt><expr><call><name>EMIT_SHIFT_INS_AND_RETURN</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMIT_SHIFT_INS_AND_RETURN</name></cpp:undef>

<comment type="block">/* Tests whether the immediate can be stored in the 12 bit imm field.
   Returns with 0 if not possible. */</comment>
<function><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>get_imm</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>rol</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SRC2_IMM</name> <operator>|</operator> <name>imm</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rol</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>rol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>rol</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>generate_int</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>imm</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>positive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>imm1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>imm2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>rol</name></decl>;</decl_stmt>

	<comment type="block">/* Step1: Search a zero byte (8 continous zero bit). */</comment>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff000000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>rol</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Rol imm by rol. */</comment>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <name>rol</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>rol</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<comment type="block">/* Calculate arm rol. */</comment>
			<expr_stmt><expr><name>rol</name> <operator>=</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>rol</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition> <block>{<block_content>
			<comment type="block">/* rol by 8. */</comment>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff00</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rol</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
			<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<comment type="block">/* Rol imm by rol. */</comment>
					<expr_stmt><expr><name>imm</name> <operator>=</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <name>rol</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>rol</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
					<comment type="block">/* Calculate arm rol. */</comment>
					<expr_stmt><expr><name>rol</name> <operator>=</operator> <operator>(</operator><name>rol</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></while>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* The low 8 bit must be zero. */</comment>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>imm1</name> <operator>=</operator> <name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>rol</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm2</name> <operator>=</operator> <name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>rol</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>imm</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>imm1</name> <operator>=</operator> <name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rol</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xff000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>imm2</name> <operator>=</operator> <name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rol</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>imm1</name> <operator>=</operator> <name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rol</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xf0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xc0000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>rol</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0x00ffffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>imm2</name> <operator>=</operator> <name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>rol</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>positive</name></expr> ?</condition><then> <expr><name>MOV</name></expr> </then><else>: <expr><name>MVN</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>positive</name></expr> ?</condition><then> <expr><name>ORR</name></expr> </then><else>: <expr><name>BIC</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>load_immediate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>tmp</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V7</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V7</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVW</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Create imm by 1 inst. */</comment>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>~</operator><name>imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MVN</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<comment type="block">/* Create imm by 2 inst. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>generate_int</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>imm</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>generate_int</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><operator>~</operator><name>imm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Load integer. */</comment>
	<return>return <expr><call><name>push_inst_with_literal</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>TMP_PC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVW</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOVT</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_op_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>tmp_reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>imm</name></decl>, <decl><type ref="prev"/><name>offset_reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>is_type1_transfer</name> <init>= <expr><call><name>IS_TYPE1_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name> <argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>!=</operator> <name>tmp_reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_UNUSED</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_type1_transfer</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>,
			<argument><expr><ternary><condition><expr><name>is_type1_transfer</name></expr> ?</condition><then> <expr><name>argw</name></expr> </then><else>: <expr><call><name>TYPE2_TRANSFER_IMM</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>offset_reg</name> <operator>=</operator> <call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg</name> <operator>&amp;=</operator> <name>REG_MASK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>argw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_type1_transfer</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>offset_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><call><name>TYPE2_TRANSFER_IMM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Bit 25: RM is offset. */</comment>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,
			<argument><expr><call><name>RM</name><argument_list>(<argument><expr><name>offset_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>is_type1_transfer</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <operator>(</operator><name>argw</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>arg</name> <operator>&amp;=</operator> <name>REG_MASK</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_type1_transfer</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&gt;</operator> <literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>argw</name> <operator>=</operator> <name>argw</name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>tmp_reg</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>argw</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0xfff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>-</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>tmp_reg</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&lt;=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>-</operator><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>argw</name> <operator>=</operator> <name>argw</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>tmp_reg</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>argw</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>imm</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>-</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>tmp_reg</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>TYPE2_TRANSFER_IMM</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>argw</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>argw</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>-</operator><name>argw</name></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><call><name>TYPE2_TRANSFER_IMM</name><argument_list>(<argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>tmp_reg</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>,
		<argument><expr><call><name>RM</name><argument_list>(<argument><expr><name>tmp_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>is_type1_transfer</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>inp_flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* src1 is reg or TMP_REG1
	   src2 is reg, TMP_REG2, or imm
	   result goes to TMP_REG2, so put result can use TMP_REG1. */</comment>

	<comment type="block">/* We prefers register and simple consts. */</comment>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src1_reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src2_reg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name> <init>= <expr><ternary><condition><expr><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Destination check. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>UNUSED_RETURN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>inp_flags</name> <operator>&amp;</operator> <name>ALLOW_INV_IMM</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>inp_flags</name> <operator>&amp;</operator> <name>ALLOW_IMM</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<do>do <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>inp_flags</name> <operator>&amp;</operator> <name>ALLOW_IMM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src2_reg</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>inp_flags</name> <operator>&amp;</operator> <name>ALLOW_INV_IMM</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>~</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>src2_reg</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>INV_IMM</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_ADD</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>src2_reg</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>op</name> <operator>=</operator> <name>SLJIT_SUB</name> <operator>|</operator> <call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_SUB</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>src2_reg</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>op</name> <operator>=</operator> <name>SLJIT_ADD</name> <operator>|</operator> <call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>src2_reg</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ARGS_SWAPPED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>inp_flags</name> <operator>&amp;</operator> <name>ALLOW_INV_IMM</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>~</operator><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>src2_reg</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>ARGS_SWAPPED</name> <operator>|</operator> <name>INV_IMM</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SLJIT_ADD</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>src2_reg</name></expr>)</condition> <block>{<block_content>
					<comment type="block">/* Note: add is commutative operation. */</comment>
					<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>src1w</name> <operator>=</operator> <name>src2w</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>op</name> <operator>=</operator> <name>SLJIT_SUB</name> <operator>|</operator> <call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block> while<condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>

	<comment type="block">/* Source 1. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>src1_reg</name> <operator>=</operator> <name>src1</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inp_flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1_reg</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1_reg</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Destination. */</comment>
	<expr_stmt><expr><name>dst_reg</name> <operator>=</operator> <ternary><condition><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>inp_flags</name> <operator>&amp;</operator> <name>BYTE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>inp_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>SIGNED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inp_flags</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dst_reg</name> <operator>!=</operator> <name>TMP_REG2</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MOVE_REG_CONV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Source 2. */</comment>
	<if_stmt><if>if <condition>(<expr><name>src2_reg</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>op</name> <operator>&lt;=</operator> <name>SLJIT_MOV_P</name><operator>)</operator></expr> ?</condition><then> <expr><name>dst_reg</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>src2_reg</name> <operator>=</operator> <name>src2</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inp_flags</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>src2_reg</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>src2_reg</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_single_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src1_reg</name></expr></argument>, <argument><expr><name>src2_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inp_flags</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>unsigned</name> <name>int</name></type> <name>__aeabi_uidivmod</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>numerator</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>denominator</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>__aeabi_idivmod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numerator</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>denominator</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Software divmod functions are needed"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op0</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name><name>saved_reg_list</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>saved_reg_count</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op0</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_BREAKPOINT</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BKPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NOP</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_LMUL_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_LMUL_SW</name></expr>:</case>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_LMUL_UW</name></expr> ?</condition><then> <expr><name>UMULL</name></expr> </then><else>: <expr><name>SMULL</name></expr></else></ternary><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>SLJIT_R0</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator>
			<operator>|</operator> <operator>(</operator><name><name>reg_map</name><index>[<expr><name>SLJIT_R0</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>
			<operator>|</operator> <name><name>reg_map</name><index>[<expr><name>SLJIT_R1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_DIVMOD_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIVMOD_SW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_UW</name></expr>:</case>
	<case>case <expr><name>SLJIT_DIV_SW</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>SLJIT_DIVMOD_UW</name> <operator>&amp;</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>SLJIT_DIV_UW</name> <operator>-</operator> <literal type="number">0x2</literal> <operator>==</operator> <name>SLJIT_DIVMOD_UW</name></expr></argument>, <argument><expr><name>bad_div_opcode_assignments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>reg_map</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>saved_reg_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>saved_reg_list</name><index>[<expr><name>saved_reg_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>scratches</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>saved_reg_list</name><index>[<expr><name>saved_reg_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&gt;=</operator> <name>SLJIT_DIV_UW</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>saved_reg_list</name><index>[<expr><name>saved_reg_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0xe52d0000</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator>
						<operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> <comment type="block">/* str rX, [sp, #-8/-16]! */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>saved_reg_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0xe58d0004</literal> <operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> <comment type="block">/* str rX, [sp, #4] */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>saved_reg_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0xe58d0008</literal> <operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> <comment type="block">/* str rX, [sp, #8] */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_FAST_CALL</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>,
			<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>op</name> <operator>|</operator> <literal type="number">0x2</literal><operator>)</operator> <operator>==</operator> <name>SLJIT_DIV_UW</name></expr> ?</condition><then> <expr><call><name>SLJIT_FUNC_OFFSET</name><argument_list>(<argument><expr><name>__aeabi_uidivmod</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>SLJIT_FUNC_OFFSET</name><argument_list>(<argument><expr><name>__aeabi_idivmod</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Software divmod functions are needed"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>saved_reg_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0xe59d0008</literal> <operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> <comment type="block">/* ldr rX, [sp, #8] */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>saved_reg_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0xe59d0004</literal> <operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> <comment type="block">/* ldr rX, [sp, #4] */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0xe49d0000</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>saved_reg_count</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator>
						<operator>|</operator> <operator>(</operator><name><name>saved_reg_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> <comment type="block">/* ldr rX, [sp], #8/16 */</comment>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	<case>case <expr><name>SLJIT_ENDBR</name></expr>:</case>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op1</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV</name></expr></argument>, <argument><expr><name>ALLOW_ANY_IMM</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_U8</name></expr></argument>, <argument><expr><name>ALLOW_ANY_IMM</name> <operator>|</operator> <name>BYTE_SIZE</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_u8</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_S8</name></expr></argument>, <argument><expr><name>ALLOW_ANY_IMM</name> <operator>|</operator> <name>SIGNED</name> <operator>|</operator> <name>BYTE_SIZE</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_s8</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_U16</name></expr></argument>, <argument><expr><name>ALLOW_ANY_IMM</name> <operator>|</operator> <name>HALF_SIZE</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_u16</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_MOV_S16</name></expr></argument>, <argument><expr><name>ALLOW_ANY_IMM</name> <operator>|</operator> <name>SIGNED</name> <operator>|</operator> <name>HALF_SIZE</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>sljit_s16</name><operator>)</operator><name>srcw</name></expr> </then><else>: <expr><name>srcw</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>ALLOW_ANY_IMM</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_NEG</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
			<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><call><name>sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SLJIT_SUB</name> <operator>|</operator> <call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>SLJIT_IMM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>SLJIT_UNUSED</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HAS_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>ALLOW_IMM</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
		<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>ALLOW_ANY_IMM</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>shift_imm</name></name> <operator>=</operator> <name>src2w</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
			<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>shift_imm</name></name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
			<return>return <expr><call><name>emit_op</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_src</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_src</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_FAST_RETURN</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG2</name></expr>]</index></name> <operator>==</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>BX</name> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	<case>case <expr><name>SLJIT_SKIP_FRAMES_BEFORE_FAST_RETURN</name></expr>:</case>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	<case>case <expr><name>SLJIT_PREFETCH_L1</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L2</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_L3</name></expr>:</case>
	<case>case <expr><name>SLJIT_PREFETCH_ONCE</name></expr>:</case>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V7</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V7</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>PRELOAD</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_PC</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SLJIT_CONFIG_ARM_V7 */</comment>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SLJIT_CONFIG_ARM_V7 */</comment>
	</block_content>}</block></switch>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>reg_map</name><index>[<expr><name>reg</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_get_float_register_index</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_REG_INDEX</name><argument_list>(<argument><expr><call><name>check_sljit_get_float_register_index</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>freg_map</name><index>[<expr><name>reg</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_custom</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>,
	<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>instruction</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_custom</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>instruction</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>sljit_uw</name><operator>*</operator><operator>)</operator><name>instruction</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Floating point operators                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPU_LOAD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_FPU_DATA_TRANSFER</name><parameter_list>(<parameter><type><name>inst</name></type></parameter>, <parameter><type><name>add</name></type></parameter>, <parameter><type><name>base</name></type></parameter>, <parameter><type><name>freg</name></type></parameter>, <parameter><type><name>offs</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((inst) | ((add) &lt;&lt; 23) | (reg_map[base] &lt;&lt; 16) | (freg_map[freg] &lt;&lt; 12) | (offs))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_FPU_OPERATION</name><parameter_list>(<parameter><type><name>opcode</name></type></parameter>, <parameter><type><name>mode</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src1</name></type></parameter>, <parameter><type><name>src2</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((opcode) | (mode) | (freg_map[dst] &lt;&lt; 12) | freg_map[src1] | (freg_map[src2] &lt;&lt; 16))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>emit_fop_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>argw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>imm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_sw</name></type> <name>inst</name> <init>= <expr><name>VSTR_F32</name> <operator>|</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SLJIT_F32_OP</name> <operator>|</operator> <name>FPU_LOAD</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>arg</name> <operator>&amp;=</operator> <operator>~</operator><name>SLJIT_MEM</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>argw</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fast loads and stores. */</comment>
	<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3fc</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_DATA_TRANSFER</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>argw</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>-</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3fc</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_DATA_TRANSFER</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><name>argw</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3fc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>imm</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_DATA_TRANSFER</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x3fc</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>imm</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>-</operator><name>argw</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x3fc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>imm</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>argw</name> <operator>=</operator> <operator>-</operator><name>argw</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_DATA_TRANSFER</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><operator>(</operator><name>argw</name> <operator>&amp;</operator> <literal type="number">0x3fc</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>arg</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>argw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_DATA_TRANSFER</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_sw_from_f64</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VCVT_S32_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name><name>freg_map</name><index>[<expr><name>TMP_FREG1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Store the integer value from a VFP register. */</comment>
	<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_conv_f64_from_sw</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name> <init>= <expr><ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name><name>freg_map</name><index>[<expr><name>TMP_FREG1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* Load the integer value into a VFP register. */</comment>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name><name>freg_map</name><index>[<expr><name>TMP_FREG1</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VCVT_F32_S32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1_cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VCMP_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMRS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_COMPILE_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>SLJIT_F32_OP</name> <operator>==</operator> <literal type="number">0x100</literal><operator>)</operator></expr></argument>, <argument><expr><name>float_transfer_bit_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SELECT_FOP1_OPERATION_WITH_CHECKS</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SLJIT_CONV_F64_FROM_F32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>dst_r</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV_F64</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>dst_r</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>!=</operator> <name>TMP_FREG1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VMOV_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_NEG_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VNEG_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_ABS_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VABS_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_CONV_F64_FROM_F32</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VCVT_F64_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fop2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src1w</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>src2w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fop2</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>^=</operator> <name>SLJIT_F32_OP</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_FREG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>src2</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_FREG2</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src1</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator> <operator>|</operator> <name>FPU_LOAD</name></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src1w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_FREG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_ADD_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VADD_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_SUB_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VSUB_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_MUL_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VMUL_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>

	<case>case <expr><name>SLJIT_DIV_F64</name></expr>:</case>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VDIV_F32</name></expr></argument>, <argument><expr><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>dst_r</name> <operator>==</operator> <name>TMP_FREG1</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_fop_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>op</name> <operator>&amp;</operator> <name>SLJIT_F32_OP</name><operator>)</operator></expr></argument>, <argument><expr><name>TMP_FREG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FPU_LOAD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMIT_FPU_DATA_TRANSFER</name></cpp:undef>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Other instructions                                                   */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_fast_enter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_fast_enter</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG2</name></expr>]</index></name> <operator>==</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Memory. */</comment>
	<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------- */</comment>
<comment type="block">/*  Conditional instructions                                             */</comment>
<comment type="block">/* --------------------------------------------------------------------- */</comment>

<function><type><specifier>static</specifier> <name>sljit_uw</name></type> <name>get_cc</name><parameter_list>(<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x00000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_MUL_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_NOT_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x10000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_LESS</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x30000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x20000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_GREATER</name></expr>:</case>
	<case>case <expr><name>SLJIT_GREATER_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x80000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_LESS_EQUAL</name></expr>:</case>
	<case>case <expr><name>SLJIT_LESS_EQUAL_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x90000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_LESS</name></expr>:</case>
		<return>return <expr><literal type="number">0xb0000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_GREATER_EQUAL</name></expr>:</case>
		<return>return <expr><literal type="number">0xa0000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_GREATER</name></expr>:</case>
		<return>return <expr><literal type="number">0xc0000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_SIG_LESS_EQUAL</name></expr>:</case>
		<return>return <expr><literal type="number">0xd0000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_UNORDERED_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x60000000</literal></expr>;</return>

	<case>case <expr><name>SLJIT_NOT_OVERFLOW</name></expr>:</case>
	<case>case <expr><name>SLJIT_ORDERED_F64</name></expr>:</case>
		<return>return <expr><literal type="number">0x70000000</literal></expr>;</return>

	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_JUMP</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>&lt;=</operator> <name>SLJIT_CALL_CDECL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0xe0000000</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_label</name></name><modifier>*</modifier></type> <name>sljit_emit_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_label</name></name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name> <operator>&amp;&amp;</operator> <name><name>compiler</name><operator>-&gt;</operator><name>last_label</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>compiler</name><operator>-&gt;</operator><name>last_label</name></name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_label</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>label</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_jump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>!=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>prepare_blx</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst_with_unique_literal</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
		<argument><expr><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>TMP_PC</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr></argument>, <argument><expr><name>TMP_PC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>patches</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_blx</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SLJIT_REWRITABLE_JUMP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>IS_BL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>BX</name></expr> </then><else>: <expr><name>BLX</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>jump</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>softfloat_call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>stack_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>word_arg_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>float_arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>types</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>src_offset</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u8</name></type> <name><name>offsets</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;&amp;</operator> <call><name>FAST_IS_REG</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>src_offset</name> <operator>=</operator> <name><name>reg_map</name><index>[<expr><operator>*</operator><name>src</name></expr>]</index></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>types</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&lt;&lt;</operator> <name>SLJIT_DEF_SHIFT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sljit_u8</name><operator>)</operator><name>stack_offset</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_arg_offset</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUB</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Process arguments in reversed direction. */</comment>
	<while>while <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>src_offset</name> <operator>==</operator> <name>stack_offset</name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>src_offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <literal type="number">0x100000</literal> <operator>|</operator> <operator>(</operator><name>float_arg_count</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>stack_offset</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VSTR_F32</name> <operator>|</operator> <literal type="number">0x800000</literal> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>float_arg_count</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>float_arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>stack_offset</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>src_offset</name> <operator>==</operator> <name>stack_offset</name> <operator>||</operator> <name>src_offset</name> <operator>==</operator> <name>stack_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>src_offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV2</name> <operator>|</operator> <literal type="number">0x100000</literal> <operator>|</operator> <operator>(</operator><name>stack_offset</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <name>float_arg_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VSTR_F32</name> <operator>|</operator> <literal type="number">0x800100</literal> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>float_arg_count</name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>stack_offset</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_arg_offset</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>stack_offset</name> <operator>=</operator> <name><name>offsets</name><index>[<expr><name>arg_count</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>stack_offset</name> <operator>&gt;=</operator> <name>word_arg_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>!=</operator> <name>word_arg_offset</name></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>stack_offset</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>src_offset</name> <operator>==</operator> <name>stack_offset</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>src_offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>src_offset</name> <operator>==</operator> <name>word_arg_offset</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>stack_offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>src_offset</name> <operator>=</operator> <name>stack_offset</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <operator>(</operator><name>stack_offset</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>word_arg_offset</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name><name>data_transfer_insts</name><index>[<expr><name>WORD_SIZE</name></expr>]</index></name> <operator>|</operator> <literal type="number">0x800000</literal> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>word_arg_offset</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>stack_offset</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>softfloat_post_call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>stack_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_ARG_TYPE_F32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV</name> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_ARG_TYPE_F64</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>VMOV2</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
			<expr_stmt><expr><name>stack_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>stack_size</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>stack_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>stack_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_f64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>stack_size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sljit_sw</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>stack_size</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>SLJIT_SP</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>SRC2_IMM</name> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>stack_size</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !__SOFTFP__ */</comment>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>hardfloat_call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>remap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_u32</name></type> <name>new_offset</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>

	<comment type="block">/* Remove return value. */</comment>
	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_ARG_TYPE_F32</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>new_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<while>while <condition>(<expr><name>remap</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>new_offset</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>mask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name>remap</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <name>new_offset</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VMOV_F32</name></expr></argument>,
					<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>new_offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>new_offset</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x400000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator> <operator>==</operator> <name>SLJIT_ARG_TYPE_F64</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>new_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

			<while>while <condition>(<expr><name>remap</name> <operator>&amp;</operator> <name>mask</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>new_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>mask</name> <operator>&lt;&lt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></while>
			<expr_stmt><expr><name>remap</name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <name>new_offset</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_FPU_OPERATION</name><argument_list>(<argument><expr><name>VMOV_F32</name></expr></argument>, <argument><expr><name>SLJIT_F32_OP</name></expr></argument>, <argument><expr><operator>(</operator><name>new_offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __SOFTFP__ */</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EMIT_FPU_OPERATION</name></cpp:undef>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_jump</name></name><modifier>*</modifier></type> <name>sljit_emit_call</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_call</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>softfloat_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>jump</name> <operator>=</operator> <call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><name>jump</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>softfloat_post_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>jump</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !__SOFTFP__ */</comment>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>hardfloat_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>sljit_emit_jump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __SOFTFP__ */</comment>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_ijump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_jump</name></name> <modifier>*</modifier></type><name>jump</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>TMP_REG1</name></expr>]</index></name> <operator>!=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name><operator>)</operator></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name><name>reg_map</name><index>[<expr><name>src</name></expr>]</index></name> <operator>!=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>BX</name></expr> </then><else>: <expr><name>BLX</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>BX</name></expr> </then><else>: <expr><name>BLX</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* These jumps are converted to jump/call instructions when possible. */</comment>
	<expr_stmt><expr><name>jump</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_jump</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_jump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>jump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_jump</name><argument_list>(<argument><expr><name>jump</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>JUMP_ADDR</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name><operator>)</operator></expr> ?</condition><then> <expr><name>IS_BL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>srcw</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>prepare_blx</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst_with_unique_literal</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>TMP_PC</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr></argument>, <argument><expr><name>TMP_PC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>SLJIT_FAST_CALL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_blx</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>type</name> <operator>&lt;=</operator> <name>SLJIT_JUMP</name></expr> ?</condition><then> <expr><name>BX</name></expr> </then><else>: <expr><name>BLX</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>jump</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name><name>compiler</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_icall</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_icall</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__SOFTFP__</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>softfloat_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>softfloat_post_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !__SOFTFP__ */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>hardfloat_call_with_args</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>arg_types</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_VERBOSE</name> <operator>&amp;&amp;</operator> <name>SLJIT_VERBOSE</name><operator>)</operator> \
		<operator>||</operator> <operator>(</operator><name>defined</name> <name>SLJIT_ARGUMENT_CHECKS</name> <operator>&amp;&amp;</operator> <name>SLJIT_ARGUMENT_CHECKS</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>skip_checks</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>sljit_emit_ijump</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __SOFTFP__ */</comment>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_op_flags</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl>, <decl><type ref="prev"/><name>flags</name> <init>= <expr><call><name>GET_ALL_FLAGS</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>ins</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_op_flags</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GET_OPCODE</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dst_reg</name> <operator>=</operator> <ternary><condition><expr><call><name>FAST_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG1</name></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>&lt;</operator> <name>SLJIT_ADD</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>SRC2_IMM</name> <operator>|</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>SRC2_IMM</name> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <name>cc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ins</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_AND</name></expr> ?</condition><then> <expr><name>AND</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>op</name> <operator>==</operator> <name>SLJIT_OR</name></expr> ?</condition><then> <expr><name>ORR</name></expr> </then><else>: <expr><name>EOR</name></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ins</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>SRC2_IMM</name> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <name>cc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_AND</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>ins</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RN</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>SRC2_IMM</name> <operator>|</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>cc</name> <operator>^</operator> <literal type="number">0x10000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SLJIT_SET_Z</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MOV</name> <operator>|</operator> <name>SET_FLAGS</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_cmov</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst_reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>srcw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>cc</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_cmov</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>dst_reg</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_reg</name> <operator>&amp;=</operator> <operator>~</operator><name>SLJIT_I32_OP</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cc</name> <operator>=</operator> <call><name>get_cc</name><argument_list>(<argument><expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>src</name> <operator>&amp;</operator> <name>SLJIT_IMM</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <name>cc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_imm</name><argument_list>(<argument><expr><operator>~</operator><name>srcw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MVN</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <name>cc</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V7</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V7</name><operator>)</operator></expr></cpp:if>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>sljit_uw</name><operator>)</operator> <name>srcw</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>MOVW</name> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <name>cc</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>tmp</name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><name>MOVT</name> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <name>cc</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>load_immediate</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>srcw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>MOV</name> <operator>|</operator> <call><name>RD</name><argument_list>(<argument><expr><name>dst_reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RM</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>COND_MASK</name><operator>)</operator> <operator>|</operator> <name>cc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>sljit_s32</name></type> <name>sljit_emit_mem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>type</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>mem</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>memw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>is_type1_transfer</name></decl>, <decl><type ref="prev"/><name>inst</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><name>check_sljit_emit_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>is_type1_transfer</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>type</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>BYTE_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>is_type1_transfer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>BYTE_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
		<expr_stmt><expr><name>is_type1_transfer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>HALF_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><name>is_type1_transfer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>HALF_SIZE</name> <operator>|</operator> <name>SIGNED</name></expr>;</expr_stmt>
		<break>break;</break>
	<default>default:</default>
		<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>WORD_SIZE</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_STORE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LOAD_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>is_type1_transfer</name> <operator>==</operator> <operator>!</operator><operator>!</operator><call><name>IS_TYPE1_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_type1_transfer</name> <operator>&amp;&amp;</operator> <name>memw</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>is_type1_transfer</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>&gt;</operator> <literal type="number">4095</literal> <operator>||</operator> <name>memw</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">4095</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>memw</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>SLJIT_ERR_UNSUPPORTED</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_SUPP</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SLJIT_UNLIKELY</name><argument_list>(<argument><expr><name>mem</name> <operator>&amp;</operator> <name>OFFS_REG_MASK</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>memw</name> <operator>&amp;=</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>, <argument><expr><call><name>RM</name><argument_list>(<argument><expr><call><name>OFFS_REG</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>memw</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_type1_transfer</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>inst</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">25</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>inst</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>inst</name> <operator>^=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>inst</name> <operator>=</operator> <call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>mem</name> <operator>&amp;</operator> <name>REG_MASK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;</operator> <name>SLJIT_MEM_PRE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>^=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_type1_transfer</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>inst</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>memw</name> <operator>=</operator> <operator>-</operator><name>memw</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <name>memw</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>memw</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>inst</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>memw</name> <operator>=</operator> <operator>-</operator><name>memw</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>inst</name> <operator>|</operator> <call><name>TYPE2_TRANSFER_IMM</name><argument_list>(<argument><expr><name>memw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_const</name></name><modifier>*</modifier></type> <name>sljit_emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_const</name></name> <modifier>*</modifier></type><name>const_</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_const</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst_with_unique_literal</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_PC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>patches</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>const_</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_const</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_const</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>const_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_const</name><argument_list>(<argument><expr><name>const_</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>const_</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name><name>struct</name> <name>sljit_put_label</name></name><modifier>*</modifier></type> <name>sljit_emit_put_label</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>dstw</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sljit_put_label</name></name> <modifier>*</modifier></type><name>put_label</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>dst_r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ERROR_PTR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_PTR</name><argument_list>(<argument><expr><call><name>check_sljit_emit_put_label</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ADJUST_LOCAL_OFFSET</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dst_r</name> <operator>=</operator> <ternary><condition><expr><call><name>SLOW_IS_REG</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>dst</name></expr> </then><else>: <expr><name>TMP_REG2</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>SLJIT_CONFIG_ARM_V5</name> <operator>&amp;&amp;</operator> <name>SLJIT_CONFIG_ARM_V5</name><operator>)</operator></expr></cpp:if>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst_with_unique_literal</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>EMIT_DATA_TRANSFER</name><argument_list>(<argument><expr><name>WORD_SIZE</name> <operator>|</operator> <name>LOAD_DATA</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><name>TMP_PC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>patches</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_imm</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>dst_r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>put_label</name> <operator>=</operator> <operator>(</operator>struct <name>sljit_put_label</name><operator>*</operator><operator>)</operator><call><name>ensure_abuf</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sljit_put_label</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><operator>!</operator><name>put_label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_put_label</name><argument_list>(<argument><expr><name>put_label</name></expr></argument>, <argument><expr><name>compiler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&amp;</operator> <name>SLJIT_MEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PTR_FAIL_IF</name><argument_list>(<argument><expr><call><name>emit_op_mem</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>WORD_SIZE</name></expr></argument>, <argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstw</name></expr></argument>, <argument><expr><name>TMP_REG1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>put_label</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_target</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>inline_set_jump_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>, <argument><expr><name>new_target</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>inline_set_const</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>, <argument><expr><name>new_constant</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
