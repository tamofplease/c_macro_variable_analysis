<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/sljit/sljitNativePPC_64.c"><comment type="block">/*
 *    Stack-less Just-In-Time compiler
 *
 *    Copyright Zoltan Herczeg (hzmester@freemail.hu). All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this list of
 *      conditions and the following disclaimer.
 *
 *   2. Redistributions in binary form must reproduce the above copyright notice, this list
 *      of conditions and the following disclaimer in the documentation and/or other materials
 *      provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER(S) AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>

<comment type="block">/* ppc 64-bit arch dependent functions. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__IBM_GCC_ASM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__IBM_GCC_ASM</name><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASM_SLJIT_CLZ</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>__asm__ volatile ( "cntlzd %0, %1" : "=r"(dst) : "r"(src) )</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__xlc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Please enable GCC syntax for inline assembly statements"</cpp:literal></cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Must implement count leading zeroes"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_RLDICR</name><parameter_list>(<parameter><type><name>reg</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>push_inst(compiler, RLDI(reg, reg, 63 - shift, shift, 1))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>load_immediate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>imm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>shift</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>tmp2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_uw</name></type> <name>shift2</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <name>SIMM_MAX</name> <operator>&amp;&amp;</operator> <name>imm</name> <operator>&gt;=</operator> <name>SIMM_MIN</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>imm</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffff</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>TMP_ZERO</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>imm</name> <operator>&lt;=</operator> <literal type="number">0x7fffffffl</literal> <operator>&amp;&amp;</operator> <name>imm</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">0x80000000l</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>SLJIT_SUCCESS</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Count leading zeroes. */</comment>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>imm</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>imm</name></expr> </then><else>: <expr><operator>~</operator><name>imm</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ASM_SLJIT_CLZ</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>shift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>shift</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>imm</name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffff000000000000ul</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>PUSH_RLDICR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffffffff00000000ul</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>PUSH_RLDICR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Cut out the 16 bit from immediate. */</comment>
	<expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>imm</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1ul</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">63</literal> <operator>-</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tmp2</name> <operator>&lt;=</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>PUSH_RLDICR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <name>tmp2</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>tmp2</name> <operator>&lt;=</operator> <literal type="number">0xffffffff</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>PUSH_RLDICR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>tmp2</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>imm</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>SLJIT_SUCCESS</name></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ASM_SLJIT_CLZ</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp2</name> <operator>&lt;&lt;=</operator> <name>shift2</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp2</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xffff000000000000ul</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>shift2</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>shift</name> <operator>+=</operator> <operator>(</operator><literal type="number">63</literal> <operator>-</operator> <name>shift2</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>PUSH_RLDICR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name>tmp2</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>PUSH_RLDICR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* The general version. */</comment>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>PUSH_RLDICR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>imm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Simplified mnemonics: clrldi. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INS_CLEAR_LEFT</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>from</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(RLDICL | S(src) | A(dst) | ((from) &lt;&lt; 6) | (1 &lt;&lt; 5))</cpp:value></cpp:define>

<comment type="block">/* Sign extension for integer operations. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UN_EXTS</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>if ((flags &amp; (ALT_SIGN_EXT | REG2_SOURCE)) == (ALT_SIGN_EXT | REG2_SOURCE)) { \
		FAIL_IF(push_inst(compiler, EXTSW | S(src2) | A(TMP_REG2))); \
		src2 = TMP_REG2; \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_EXTS</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>if (flags &amp; ALT_SIGN_EXT) { \
		if (flags &amp; REG1_SOURCE) { \
			FAIL_IF(push_inst(compiler, EXTSW | S(src1) | A(TMP_REG1))); \
			src1 = TMP_REG1; \
		} \
		if (flags &amp; REG2_SOURCE) { \
			FAIL_IF(push_inst(compiler, EXTSW | S(src2) | A(TMP_REG2))); \
			src2 = TMP_REG2; \
		} \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIN_IMM_EXTS</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>if ((flags &amp; (ALT_SIGN_EXT | REG1_SOURCE)) == (ALT_SIGN_EXT | REG1_SOURCE)) { \
		FAIL_IF(push_inst(compiler, EXTSW | S(src1) | A(TMP_REG1))); \
		src1 = TMP_REG1; \
	}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_single_op</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>flags</name></decl></parameter>,
	<parameter><decl><type><name>sljit_s32</name></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src1</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>src2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{<block_content>
	<case>case <expr><name>SLJIT_MOV</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_P</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>src2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U32</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S32</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S32</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EXTSW</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INS_CLEAR_LEFT</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U8</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S8</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S8</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EXTSB</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INS_CLEAR_LEFT</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>REG_DEST</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>op</name> <operator>==</operator> <name>SLJIT_MOV_S8</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EXTSB</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_MOV_U16</name></expr>:</case>
	<case>case <expr><name>SLJIT_MOV_S16</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>REG_DEST</name> <operator>|</operator> <name>REG2_SOURCE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>SLJIT_MOV_S16</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>EXTSH</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>INS_CLEAR_LEFT</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if>
		<else>else <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>dst</name> <operator>==</operator> <name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>

	<case>case <expr><name>SLJIT_NOT</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>UN_EXTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NOR</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_NEG</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>ALT_FORM1</name> <operator>|</operator> <name>ALT_SIGN_EXT</name><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><name>ALT_FORM1</name> <operator>|</operator> <name>ALT_SIGN_EXT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NEG</name> <operator>|</operator> <call><name>OE</name><argument_list>(<argument><expr><name>ALT_SET_FLAGS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>ALT_SET_FLAGS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>UN_EXTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Setting XER SO is not enough, CR SO is also needed. */</comment>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>NEG</name> <operator>|</operator> <call><name>OE</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name><operator>)</operator></expr> ?</condition><then> <expr><name>ALT_SET_FLAGS</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_CLZ</name></expr>:</case>
		<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src1</name> <operator>==</operator> <name>TMP_REG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CNTLZW</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CNTLZD</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_ADD</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_SIGN_EXT</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Setting XER SO is not enough, CR SO is also needed. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>OE</name><argument_list>(<argument><expr><name>ALT_SET_FLAGS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>ALT_SET_FLAGS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_SIGN_EXT</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Flags does not set: BIN_IMM_EXTS unnecessary. */</comment>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM3</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM4</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM3</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BIN_IMM_EXTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIC</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_SET_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>BIN_EXTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM4</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDC</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>ALT_SET_FLAGS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADD</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_ADDC</name></expr>:</case>
		<expr_stmt><expr><call><name>BIN_EXTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDE</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUB</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMPLI</name> <operator>|</operator> <call><name>CRD</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_SIGN_EXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>-</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMPL</name> <operator>|</operator> <call><name>CRD</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_SIGN_EXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM3</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBF</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_SIGN_EXT</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>TMP_REG1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>src1</name> <operator>=</operator> <name>TMP_REG1</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>TMP_REG2</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>TMP_REG2</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Setting XER SO is not enough, CR SO is also needed. */</comment>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBF</name> <operator>|</operator> <call><name>OE</name><argument_list>(<argument><expr><name>ALT_SET_FLAGS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>ALT_SET_FLAGS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_SIGN_EXT</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM3</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Flags does not set: BIN_IMM_EXTS unnecessary. */</comment>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBFIC</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM4</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM5</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMPI</name> <operator>|</operator> <call><name>CRD</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_SIGN_EXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>CMP</name> <operator>|</operator> <call><name>CRD</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_SIGN_EXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_SET_FLAGS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBF</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>BIN_EXTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM5</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBFC</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>ALT_SET_FLAGS</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBF</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SUBC</name></expr>:</case>
		<expr_stmt><expr><call><name>BIN_EXTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SUBFE</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_MUL</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULLI</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>BIN_EXTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULLW</name> <operator>|</operator> <call><name>OE</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>MULLD</name> <operator>|</operator> <call><name>OE</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_AND</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ANDIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>AND</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_OR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM3</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_XOR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM3</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>XOR</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_SHL</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RLWINM</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>, <argument><expr><literal type="number">63</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name><operator>)</operator></expr> ?</condition><then> <expr><name>SLW</name></expr> </then><else>: <expr><name>SLD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_LSHR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>RLWINM</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">31</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><call><name>RLDI</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>-</operator> <name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>, <argument><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name><operator>)</operator></expr> ?</condition><then> <expr><name>SRW</name></expr> </then><else>: <expr><name>SRD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

	<case>case <expr><name>SLJIT_ASHR</name></expr>:</case>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM1</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>SLJIT_ASSERT</name><argument_list>(<argument><expr><name>src2</name> <operator>==</operator> <name>TMP_REG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;=</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>
				<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRAWI</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
			<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>SRADI</name> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>compiler</name><operator>-&gt;</operator><name>imm</name></name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>ALT_FORM2</name><operator>)</operator></expr> ?</condition><then> <expr><name>SRAW</name></expr> </then><else>: <expr><name>SRAD</name></expr></else></ternary><operator>)</operator> <operator>|</operator> <call><name>RC</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>SLJIT_UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sljit_s32</name></type> <name>call_with_args</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>arg_types</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>word_arg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>types</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sljit_s32</name></type> <name>reg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>reg</name> <operator>=</operator> <operator>*</operator><name>src</name> <operator>&amp;</operator> <name>REG_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>arg_types</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>types</name> <operator>=</operator> <operator>(</operator><name>types</name> <operator>&lt;&lt;</operator> <name>SLJIT_DEF_SHIFT</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name><operator>)</operator></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>arg_types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>arg_count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_arg_count</name><operator>++</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>arg_count</name> <operator>!=</operator> <name>word_arg_count</name> <operator>&amp;&amp;</operator> <name>arg_count</name> <operator>==</operator> <name>reg</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>TMP_CALL_REG</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>src</name> <operator>=</operator> <name>TMP_CALL_REG</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>arg_types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<while>while <condition>(<expr><name>types</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>types</name> <operator>&amp;</operator> <name>SLJIT_DEF_MASK</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>SLJIT_ARG_TYPE_F32</name></expr>:</case>
		<case>case <expr><name>SLJIT_ARG_TYPE_F64</name></expr>:</case>
			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<if_stmt><if>if <condition>(<expr><name>arg_count</name> <operator>!=</operator> <name>word_arg_count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>OR</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>word_arg_count</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>arg_count</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>B</name><argument_list>(<argument><expr><name>word_arg_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>word_arg_count</name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>types</name> <operator>&gt;&gt;=</operator> <name>SLJIT_DEF_SHIFT</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>SLJIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SLJIT_INLINE</name> <name>sljit_s32</name></type> <name>emit_const</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sljit_compiler</name></name> <modifier>*</modifier></type><name>compiler</name></decl></parameter>, <parameter><decl><type><name>sljit_s32</name></type> <name>reg</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>init_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ADDIS</name> <operator>|</operator> <call><name>D</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>init_value</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>init_value</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>PUSH_RLDICR</name><argument_list>(<argument><expr><name>reg</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FAIL_IF</name><argument_list>(<argument><expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORIS</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>init_value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>push_inst</name><argument_list>(<argument><expr><name>compiler</name></expr></argument>, <argument><expr><name>ORI</name> <operator>|</operator> <call><name>S</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>A</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>IMM</name><argument_list>(<argument><expr><name>init_value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_jump_addr</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_uw</name></type> <name>new_target</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>sljit_ins</name> <modifier>*</modifier></type><name>inst</name> <init>= <expr><operator>(</operator><name>sljit_ins</name><operator>*</operator><operator>)</operator><name>addr</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SLJIT_UNUSED_ARG</name><argument_list>(<argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_target</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_target</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>new_target</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffff0000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>new_target</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_UPDATE_WX_FLAGS</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>inst</name> <operator>=</operator> <operator>(</operator><name>sljit_ins</name> <operator>*</operator><operator>)</operator><call><name>SLJIT_ADD_EXEC_OFFSET</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SLJIT_CACHE_FLUSH</name><argument_list>(<argument><expr><name>inst</name></expr></argument>, <argument><expr><name>inst</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>SLJIT_API_FUNC_ATTRIBUTE</name> <name>void</name></type> <name>sljit_set_const</name><parameter_list>(<parameter><decl><type><name>sljit_uw</name></type> <name>addr</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>new_constant</name></decl></parameter>, <parameter><decl><type><name>sljit_sw</name></type> <name>executable_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sljit_set_jump_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>new_constant</name></expr></argument>, <argument><expr><name>executable_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
