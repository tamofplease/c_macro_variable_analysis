<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_fuzzsupport.c"><comment type="block" format="doxygen">/***************************************************************************
Fuzzer driver for PCRE2. Given an arbitrary string of bytes and a length, it
tries to compile and match it, deriving options from the string itself. If
STANDALONE is defined, a main program that calls the driver with the contents
of specified files is compiled, and commentary on what is happening is output.
If an argument starts with '=' the rest of it it is taken as a literal string
rather than a file name. This allows easy testing of short strings.

Written by Philip Hazel, October 2016
***************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCRE2_CODE_UNIT_WIDTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MATCH_SIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFA_WORKSPACE_COUNT</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOWED_COMPILE_OPTIONS</name></cpp:macro> \
  <cpp:value>(PCRE2_ANCHORED|PCRE2_ALLOW_EMPTY_CLASS|PCRE2_ALT_BSUX|PCRE2_ALT_CIRCUMFLEX| \
   PCRE2_ALT_VERBNAMES|PCRE2_AUTO_CALLOUT|PCRE2_CASELESS|PCRE2_DOLLAR_ENDONLY| \
   PCRE2_DOTALL|PCRE2_DUPNAMES|PCRE2_ENDANCHORED|PCRE2_EXTENDED|PCRE2_FIRSTLINE| \
   PCRE2_MATCH_UNSET_BACKREF|PCRE2_MULTILINE|PCRE2_NEVER_BACKSLASH_C| \
   PCRE2_NO_AUTO_CAPTURE| \
   PCRE2_NO_AUTO_POSSESS|PCRE2_NO_DOTSTAR_ANCHOR|PCRE2_NO_START_OPTIMIZE| \
   PCRE2_UCP|PCRE2_UNGREEDY|PCRE2_USE_OFFSET_LIMIT| \
   PCRE2_UTF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOWED_MATCH_OPTIONS</name></cpp:macro> \
  <cpp:value>(PCRE2_ANCHORED|PCRE2_ENDANCHORED|PCRE2_NOTBOL|PCRE2_NOTEOL|PCRE2_NOTEMPTY| \
   PCRE2_NOTEMPTY_ATSTART|PCRE2_PARTIAL_HARD| \
   PCRE2_PARTIAL_SOFT|PCRE2_NO_JIT)</cpp:value></cpp:define>

<comment type="block">/* This is the callout function. Its only purpose is to halt matching if there
are more than 100 callouts, as one way of stopping too much time being spent on
fruitless matches. The callout data is a pointer to the counter. */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>callout_function</name><parameter_list>(<parameter><decl><type><name>pcre2_callout_block</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callout_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>cb</name></expr>;</expr_stmt>  <comment type="block">/* Avoid unused parameter warning */</comment>
<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>callout_data</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<return>return <expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>callout_data</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">100</literal><operator>)</operator></expr>?</condition><then> <expr><name>PCRE2_ERROR_CALLOUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Putting in this apparently unnecessary prototype prevents gcc from giving a
"no previous prototype" warning when compiling at high warning level. */</comment>

<function_decl><type><name>int</name></type> <name>LLVMFuzzerTestOneInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Here's the driving function. */</comment>

<function><type><name>int</name></type> <name>LLVMFuzzerTestOneInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>compile_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>match_options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>match_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>match_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>match_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dfa_workspace</name><index>[<expr><name>DFA_WORKSPACE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<comment type="block">/* Limiting the length of the subject for matching stops fruitless searches
in large trees taking too much time. */</comment>

<expr_stmt><expr><name>match_size</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>size</name> <operator>&gt;</operator> <name>MAX_MATCH_SIZE</name><operator>)</operator></expr>?</condition><then> <expr><name>MAX_MATCH_SIZE</name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>

<comment type="block">/* Figure out some options to use. Initialize the random number to ensure
repeatability. Ensure that we get a 32-bit unsigned random number for testing
options. (RAND_MAX is required to be at least 32767, but is commonly
2147483647, which excludes the top bit.) */</comment>

<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name><name>data</name><index>[<expr><name>size</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* Ensure that all undefined option bits are zero (waste of time trying them)
and also that PCRE2_NO_UTF_CHECK is unset, as there is no guarantee that the
input is UTF-8. Also unset PCRE2_NEVER_UTF and PCRE2_NEVER_UCP as there is no
reason to disallow UTF and UCP. Force PCRE2_NEVER_BACKSLASH_C to be set because
\C in random patterns is highly likely to cause a crash. */</comment>

<expr_stmt><expr><name>compile_options</name> <operator>=</operator>
  <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>r2</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>ALLOWED_COMPILE_OPTIONS</name><operator>)</operator> <operator>|</operator>
  <name>PCRE2_NEVER_BACKSLASH_C</name></expr>;</expr_stmt>
  
<expr_stmt><expr><name>match_options</name> <operator>=</operator>
  <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name>r2</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>ALLOWED_MATCH_OPTIONS</name><operator>)</operator></expr>;</expr_stmt>
  
<comment type="block">/* Discard partial matching if PCRE2_ENDANCHORED is set, because they are not
allowed together and just give an immediate error return. */</comment>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>compile_options</name><operator>|</operator><name>match_options</name><operator>)</operator> <operator>&amp;</operator> <name>PCRE2_ENDANCHORED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><name>match_options</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>PCRE2_PARTIAL_HARD</name><operator>|</operator><name>PCRE2_PARTIAL_SOFT</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<comment type="block">/* Do the compile with and without the options, and after a successful compile,
likewise do the match with and without the options. */</comment>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>callout_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>errorcode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PCRE2_SIZE</name></type> <name>erroroffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pcre2_code</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Compile options %.8x never_backslash_c"</literal></expr></argument>, <argument><expr><name>compile_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s\n"</literal></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_ALT_BSUX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",alt_bsux"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_ALT_CIRCUMFLEX</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",alt_circumflex"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_ALT_VERBNAMES</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",alt_verbnames"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_ALLOW_EMPTY_CLASS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",allow_empty_class"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_ANCHORED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",anchored"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_AUTO_CALLOUT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",auto_callout"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_CASELESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",caseless"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_DOLLAR_ENDONLY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",dollar_endonly"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_DOTALL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",dotall"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_DUPNAMES</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",dupnames"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_ENDANCHORED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",endanchored"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_EXTENDED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",extended"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_FIRSTLINE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",firstline"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_MATCH_UNSET_BACKREF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",match_unset_backref"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_MULTILINE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",multiline"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_NEVER_UCP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",never_ucp"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_NEVER_UTF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",never_utf"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_NO_AUTO_CAPTURE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",no_auto_capture"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_NO_AUTO_POSSESS</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",no_auto_possess"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_NO_DOTSTAR_ANCHOR</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",no_dotstar_anchor"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_NO_UTF_CHECK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",no_utf_check"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_NO_START_OPTIMIZE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",no_start_optimize"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_UCP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",ucp"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_UNGREEDY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",ungreedy"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_USE_OFFSET_LIMIT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",use_offset_limit"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>compile_options</name> <operator>&amp;</operator> <name>PCRE2_UTF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",utf"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pcre2_compile</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR</name><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_SIZE</name><operator>)</operator><name>size</name></expr></argument>, <argument><expr><name>compile_options</name></expr></argument>,
    <argument><expr><operator>&amp;</operator><name>errorcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroroffset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Compilation succeeded */</comment>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>save_match_options</name> <init>= <expr><name>match_options</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Create match data and context blocks only when we first need them. Set
    low match and depth limits to avoid wasting too much searching large
    pattern trees. Almost all matches are going to fail. */</comment>

    <if_stmt><if>if <condition>(<expr><name>match_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
      <expr_stmt><expr><name>match_data</name> <operator>=</operator> <call><name>pcre2_match_data_create</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>match_data</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** Failed to create match data block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>match_context</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
      <block>{<block_content>
      <expr_stmt><expr><name>match_context</name> <operator>=</operator> <call><name>pcre2_match_context_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>match_context</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** Failed to create match context block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcre2_set_match_limit</name><argument_list>(<argument><expr><name>match_context</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcre2_set_depth_limit</name><argument_list>(<argument><expr><name>match_context</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>pcre2_set_callout</name><argument_list>(<argument><expr><name>match_context</name></expr></argument>, <argument><expr><name>callout_function</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>callout_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

    <comment type="block">/* Match twice, with and without options. */</comment>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Match options %.8x"</literal></expr></argument>, <argument><expr><name>match_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s%s%s%s%s%s%s\n"</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_ANCHORED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",anchored"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_ENDANCHORED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",endanchored"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NO_JIT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",no_jit"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NO_UTF_CHECK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",no_utf_check"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NOTBOL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",notbol"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NOTEMPTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",notempty"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NOTEMPTY_ATSTART</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",notempty_atstart"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NOTEOL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",noteol"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_PARTIAL_HARD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",partial_hard"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_PARTIAL_SOFT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",partial_soft"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><name>callout_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <call><name>pcre2_match</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_SPTR</name><operator>)</operator><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_SIZE</name><operator>)</operator><name>match_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
        <argument><expr><name>match_options</name></expr></argument>, <argument><expr><name>match_data</name></expr></argument>, <argument><expr><name>match_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name>errorcode</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Match returned %d\n"</literal></expr></argument>, <argument><expr><name>errorcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else
        <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pcre2_get_error_message</name><argument_list>(<argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Match failed: error %d: %s\n"</literal></expr></argument>, <argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><name>match_options</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* For second time */</comment>
      </block_content>}</block></for>

    <comment type="block">/* Match with DFA twice, with and without options. */</comment>

    <expr_stmt><expr><name>match_options</name> <operator>=</operator> <name>save_match_options</name> <operator>&amp;</operator> <operator>~</operator><name>PCRE2_NO_JIT</name></expr>;</expr_stmt>  <comment type="block">/* Not valid for DFA */</comment>

    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DFA match options %.8x"</literal></expr></argument>, <argument><expr><name>match_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s%s%s%s%s%s\n"</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_ANCHORED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",anchored"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_ENDANCHORED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",endanchored"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NO_UTF_CHECK</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",no_utf_check"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NOTBOL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",notbol"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NOTEMPTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",notempty"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NOTEMPTY_ATSTART</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",notempty_atstart"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_NOTEOL</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",noteol"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_PARTIAL_HARD</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",partial_hard"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>match_options</name> <operator>&amp;</operator> <name>PCRE2_PARTIAL_SOFT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="string">",partial_soft"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><name>callout_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>errorcode</name> <operator>=</operator> <call><name>pcre2_dfa_match</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_SPTR</name><operator>)</operator><name>data</name></expr></argument>,
        <argument><expr><operator>(</operator><name>PCRE2_SIZE</name><operator>)</operator><name>match_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>match_options</name></expr></argument>, <argument><expr><name>match_data</name></expr></argument>, <argument><expr><name>match_context</name></expr></argument>,
        <argument><expr><name>dfa_workspace</name></expr></argument>, <argument><expr><name>DFA_WORKSPACE_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name>errorcode</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Match returned %d\n"</literal></expr></argument>, <argument><expr><name>errorcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <else>else
        <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pcre2_get_error_message</name><argument_list>(<argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Match failed: error %d: %s\n"</literal></expr></argument>, <argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><name>match_options</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="block">/* For second time */</comment>
      </block_content>}</block></for>

    <expr_stmt><expr><name>match_options</name> <operator>=</operator> <name>save_match_options</name></expr>;</expr_stmt>  <comment type="block">/* Reset for the second compile */</comment>
    <expr_stmt><expr><call><name>pcre2_code_free</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

  <comment type="block">/* Compilation failed */</comment>

  <else>else
    <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pcre2_get_error_message</name><argument_list>(<argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error %d at offset %lu: %s\n"</literal></expr></argument>, <argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>erroroffset</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>compile_options</name> <operator>=</operator> <name>PCRE2_NEVER_BACKSLASH_C</name></expr>;</expr_stmt>  <comment type="block">/* For second time */</comment>
  </block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>match_data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>pcre2_match_data_free</name><argument_list>(<argument><expr><name>match_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>match_context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>pcre2_match_context_free</name><argument_list>(<argument><expr><name>match_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Optional main program.  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STANDALONE</name></cpp:ifdef>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
  <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** No arguments given\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>filelen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>readsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

  <comment type="block">/* Handle a literal string. Copy to an exact size buffer so that checks for
  overrunning work. */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition>
    <block>{<block_content>
    <expr_stmt><expr><name>readsize</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------ &lt;Literal&gt; ------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Length = %lu\n"</literal></expr></argument>, <argument><expr><name>readsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>readsize</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>readsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** Failed to allocate %lu bytes of memory\n"</literal></expr></argument>, <argument><expr><name>readsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
      <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>readsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>LLVMFuzzerTestOneInput</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>readsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Handle a string given in a file */</comment>

  <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** Failed to open %s: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"------ %s ------\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>filelen</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>filelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** Failed to allocate %lu bytes of memory\n"</literal></expr></argument>, <argument><expr><name>filelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>readsize</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>filelen</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>readsize</name> <operator>!=</operator> <name>filelen</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** File size is %lu but fread() returned %lu\n"</literal></expr></argument>, <argument><expr><name>filelen</name></expr></argument>, <argument><expr><name>readsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Length = %lu\n"</literal></expr></argument>, <argument><expr><name>filelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LLVMFuzzerTestOneInput</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>filelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* STANDALONE */</comment>

<comment type="block">/* End */</comment>
</unit>
