<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_context.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2018 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2_internal.h"</cpp:file></cpp:include>



<comment type="block" format="doxygen">/*************************************************
*          Default malloc/free functions         *
*************************************************/</comment>

<comment type="block">/* Ignore the "user data" argument in each case. */</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>default_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>default_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*        Get a block and save memory control     *
*************************************************/</comment>

<comment type="block">/* This internal function is called to get a block of memory in which the
memory control data is to be stored at the start for future use.

Arguments:
  size        amount of memory required
  memctl      pointer to a memctl block or NULL

Returns:      pointer to memory or NULL on failure
*/</comment>

<function><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier>
<name>PRIV</name></type>(<name>memctl_malloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>pcre2_memctl</name> <modifier>*</modifier></type><name>memctl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_memctl</name> <modifier>*</modifier></type><name>newmemctl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>yield</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>memctl</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then> <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> </then><else>:
  <expr><call><name><name>memctl</name><operator>-&gt;</operator><name>malloc</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>memctl</name><operator>-&gt;</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>yield</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name>newmemctl</name> <operator>=</operator> <operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>yield</name></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>memctl</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
  <expr_stmt><expr><name><name>newmemctl</name><operator>-&gt;</operator><name>malloc</name></name> <operator>=</operator> <name>default_malloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newmemctl</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>default_free</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newmemctl</name><operator>-&gt;</operator><name>memory_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if>
<else>else<block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>newmemctl</name> <operator>=</operator> <operator>*</operator><name>memctl</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<return>return <expr><name>yield</name></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*          Create and initialize contexts        *
*************************************************/</comment>

<comment type="block">/* Initializing for compile and match contexts is done in separate, private
functions so that these can be called from functions such as pcre2_compile()
when an external context is not supplied. The initializing functions have an
option to set up default memory management. */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_general_context</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_general_context_create</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>private_malloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>private_free</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>memory_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>gcontext</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>private_malloc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>private_malloc</name> <operator>=</operator> <name>default_malloc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<if_stmt><if>if <condition>(<expr><name>private_free</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>private_free</name> <operator>=</operator> <name>default_free</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>gcontext</name> <operator>=</operator> <call><name>private_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_general_context</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>memory_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gcontext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>gcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>malloc</name></name> <operator>=</operator> <name>private_malloc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>free</name></name> <operator>=</operator> <name>private_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name> <operator>=</operator> <name>memory_data</name></expr>;</expr_stmt>
<return>return <expr><name>gcontext</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* A default compile context is set up to save having to initialize at run time
when no context is supplied to the compile function. */</comment>

<function_decl><type><specifier>const</specifier> <name>pcre2_compile_context</name></type> <name>PRIV</name><parameter_list>(<parameter><decl><type><name>default_compile_context</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
  <expr><block>{ <expr><name>default_malloc</name></expr></block></expr></block></expr></init><operator>,</operator> default_free<operator>,</operator> NULL</function_decl> },    <comment type="block">/* Default memory handling */</comment>
  <expr_stmt><expr><name>NULL</name></expr><operator>,</operator>                                      <comment type="block">/* Stack guard */</comment>
  <expr><name>NULL</name></expr><operator>,</operator>                                      <comment type="block">/* Stack guard data */</comment>
  <expr><call><name>PRIV</name><argument_list>(<argument><expr><name>default_tables</name></expr></argument>)</argument_list></call></expr><operator>,</operator>                      <comment type="block">/* Character tables */</comment>
  <expr><name>PCRE2_UNSET</name></expr><operator>,</operator>                               <comment type="block">/* Max pattern length */</comment>
  <expr><name>BSR_DEFAULT</name></expr><operator>,</operator>                               <comment type="block">/* Backslash R default */</comment>
  <expr><name>NEWLINE_DEFAULT</name></expr><operator>,</operator>                           <comment type="block">/* Newline convention */</comment>
  <expr><name>PARENS_NEST_LIMIT</name></expr><operator>,</operator>                         <comment type="block">/* As it says */</comment>
  <expr><literal type="number">0</literal></expr></expr_stmt> };                                       <comment type="block">/* Extra options */</comment>

<comment type="block">/* The create function copies the default into the new memory, but must
override the default memory handling functions if a gcontext was provided. */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_compile_context</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_compile_context_create</name><parameter_list>(<parameter><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>gcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name> <init>= <expr><call><call><name>PRIV</name><argument_list>(<argument><expr><name>memctl_malloc</name></expr></argument>)</argument_list></call><argument_list>(
  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_compile_context</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>gcontext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ccontext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ccontext</name> <operator>=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>default_compile_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gcontext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>ccontext</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>gcontext</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ccontext</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* A default match context is set up to save having to initialize at run time
when no context is supplied to a match function. */</comment>

<function_decl><type><specifier>const</specifier> <name>pcre2_match_context</name></type> <name>PRIV</name><parameter_list>(<parameter><decl><type><name>default_match_context</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
  <expr><block>{ <expr><name>default_malloc</name></expr></block></expr></block></expr></init><operator>,</operator> default_free<operator>,</operator> NULL</function_decl> },
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_JIT</name></cpp:ifdef>
  <expr_stmt><expr><name>NULL</name></expr><operator>,</operator>          <comment type="block">/* JIT callback */</comment>
  <expr><name>NULL</name></expr><operator>,</operator>          <comment type="block">/* JIT callback data */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>NULL</name></expr><operator>,</operator>          <comment type="block">/* Callout function */</comment>
  <expr><name>NULL</name></expr><operator>,</operator>          <comment type="block">/* Callout data */</comment>
  <expr><name>NULL</name></expr><operator>,</operator>          <comment type="block">/* Substitute callout function */</comment>
  <expr><name>NULL</name></expr><operator>,</operator>          <comment type="block">/* Substitute callout data */</comment>
  <expr><name>PCRE2_UNSET</name></expr><operator>,</operator>   <comment type="block">/* Offset limit */</comment>
  <expr><name>HEAP_LIMIT</name></expr><operator>,</operator>
  <expr><name>MATCH_LIMIT</name></expr><operator>,</operator>
  <expr><name>MATCH_LIMIT_DEPTH</name></expr></expr_stmt> };

<comment type="block">/* The create function copies the default into the new memory, but must
override the default memory handling functions if a gcontext was provided. */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_match_context</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_match_context_create</name><parameter_list>(<parameter><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>gcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name> <init>= <expr><call><call><name>PRIV</name><argument_list>(<argument><expr><name>memctl_malloc</name></expr></argument>)</argument_list></call><argument_list>(
  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_match_context</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>gcontext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>mcontext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>mcontext</name> <operator>=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>default_match_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gcontext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>mcontext</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>gcontext</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>mcontext</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* A default convert context is set up to save having to initialize at run time
when no context is supplied to the convert function. */</comment>

<function_decl><type><specifier>const</specifier> <name>pcre2_convert_context</name></type> <name>PRIV</name><parameter_list>(<parameter><decl><type><name>default_convert_context</name></type></decl></parameter>)</parameter_list> <init>= <expr><block>{
  <expr><block>{ <expr><name>default_malloc</name></expr></block></expr></block></expr></init><operator>,</operator> default_free<operator>,</operator> NULL</function_decl> },    <comment type="block">/* Default memory handling */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
  <expr_stmt><expr><name>CHAR_BACKSLASH</name></expr><operator>,</operator>                            <comment type="block">/* Default path separator */</comment>
  <expr><name>CHAR_GRAVE_ACCENT</name>                          <comment type="block">/* Default escape character */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* Not Windows */</comment>
  <name>CHAR_SLASH</name></expr><operator>,</operator>                                <comment type="block">/* Default path separator */</comment>
  <expr><name>CHAR_BACKSLASH</name></expr></expr_stmt>                             <comment type="block">/* Default escape character */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  };

<comment type="block">/* The create function copies the default into the new memory, but must
override the default memory handling functions if a gcontext was provided. */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_convert_context</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_convert_context_create</name><parameter_list>(<parameter><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>gcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_convert_context</name> <modifier>*</modifier></type><name>ccontext</name> <init>= <expr><call><call><name>PRIV</name><argument_list>(<argument><expr><name>memctl_malloc</name></expr></argument>)</argument_list></call><argument_list>(
  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_convert_context</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>gcontext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>ccontext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><operator>*</operator><name>ccontext</name> <operator>=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>default_convert_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>gcontext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>ccontext</name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>gcontext</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><name>ccontext</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************
*              Context copy functions            *
*************************************************/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_general_context</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_general_context_copy</name><parameter_list>(<parameter><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>gcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>new</name> <init>=
  <expr><call><name><name>gcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>malloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_general_context</name></expr></argument>)</argument_list></sizeof></expr></argument>,
  <argument><expr><name><name>gcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>gcontext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_general_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_compile_context</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_compile_context_copy</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>new</name> <init>=
  <expr><call><name><name>ccontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>malloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_compile_context</name></expr></argument>)</argument_list></sizeof></expr></argument>,
  <argument><expr><name><name>ccontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_compile_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_match_context</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_match_context_copy</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>new</name> <init>=
  <expr><call><name><name>mcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>malloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_match_context</name></expr></argument>)</argument_list></sizeof></expr></argument>,
  <argument><expr><name><name>mcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>mcontext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_match_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>



<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_convert_context</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_convert_context_copy</name><parameter_list>(<parameter><decl><type><name>pcre2_convert_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_convert_context</name> <modifier>*</modifier></type><name>new</name> <init>=
  <expr><call><name><name>ccontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>malloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_convert_context</name></expr></argument>)</argument_list></sizeof></expr></argument>,
  <argument><expr><name><name>ccontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_convert_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************
*              Context free functions            *
*************************************************/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>void</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_general_context_free</name><parameter_list>(<parameter><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>gcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gcontext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><call><name><name>gcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>gcontext</name></expr></argument>, <argument><expr><name><name>gcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>PCRE2_EXP_DEFN</name> <name>void</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_compile_context_free</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ccontext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><call><name><name>ccontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name><name>ccontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>PCRE2_EXP_DEFN</name> <name>void</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_match_context_free</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>mcontext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><call><name><name>mcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>mcontext</name></expr></argument>, <argument><expr><name><name>mcontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>PCRE2_EXP_DEFN</name> <name>void</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_convert_context_free</name><parameter_list>(<parameter><decl><type><name>pcre2_convert_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>ccontext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><call><name><name>ccontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name><name>ccontext</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************
*             Set values in contexts             *
*************************************************/</comment>

<comment type="block">/* All these functions return 0 for success or PCRE2_ERROR_BADDATA if invalid
data is given. Only some of the functions are able to test the validity of the
data. */</comment>


<comment type="block">/* ------------ Compile context ------------ */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_character_tables</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tables</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>tables</name></name> <operator>=</operator> <name>tables</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_bsr</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>value</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>PCRE2_BSR_ANYCRLF</name></expr>:</case>
  <case>case <expr><name>PCRE2_BSR_UNICODE</name></expr>:</case>
  <expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>bsr_convention</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

  <default>default:</default>
  <return>return <expr><name>PCRE2_ERROR_BADDATA</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_max_pattern_length</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>PCRE2_SIZE</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>max_pattern_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_newline</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>newline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<switch>switch<condition>(<expr><name>newline</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>PCRE2_NEWLINE_CR</name></expr>:</case>
  <case>case <expr><name>PCRE2_NEWLINE_LF</name></expr>:</case>
  <case>case <expr><name>PCRE2_NEWLINE_CRLF</name></expr>:</case>
  <case>case <expr><name>PCRE2_NEWLINE_ANY</name></expr>:</case>
  <case>case <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>:</case>
  <case>case <expr><name>PCRE2_NEWLINE_NUL</name></expr>:</case>
  <expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>newline_convention</name></name> <operator>=</operator> <name>newline</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

  <default>default:</default>
  <return>return <expr><name>PCRE2_ERROR_BADDATA</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_parens_nest_limit</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>parens_nest_limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_compile_extra_options</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>extra_options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_compile_recursion_guard</name><parameter_list>(<parameter><decl><type><name>pcre2_compile_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>guard</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>user_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>stack_guard</name></name> <operator>=</operator> <name>guard</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>stack_guard_data</name></name> <operator>=</operator> <name>user_data</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ------------ Match context ------------ */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_callout</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callout</name>)<parameter_list>(<parameter><decl><type><name>pcre2_callout_block</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callout_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mcontext</name><operator>-&gt;</operator><name>callout</name></name> <operator>=</operator> <name>callout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mcontext</name><operator>-&gt;</operator><name>callout_data</name></name> <operator>=</operator> <name>callout_data</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_substitute_callout</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>substitute_callout</name>)<parameter_list>(<parameter><decl><type><name>pcre2_substitute_callout_block</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>substitute_callout_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mcontext</name><operator>-&gt;</operator><name>substitute_callout</name></name> <operator>=</operator> <name>substitute_callout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mcontext</name><operator>-&gt;</operator><name>substitute_callout_data</name></name> <operator>=</operator> <name>substitute_callout_data</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_heap_limit</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mcontext</name><operator>-&gt;</operator><name>heap_limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_match_limit</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mcontext</name><operator>-&gt;</operator><name>match_limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_depth_limit</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mcontext</name><operator>-&gt;</operator><name>depth_limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_offset_limit</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>, <parameter><decl><type><name>PCRE2_SIZE</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><name><name>mcontext</name><operator>-&gt;</operator><name>offset_limit</name></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function became obsolete at release 10.30. It is kept as a synonym for
backwards compatibility. */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_recursion_limit</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>pcre2_set_depth_limit</name><argument_list>(<argument><expr><name>mcontext</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_recursion_memory_management</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>mymalloc</name>)<parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>myfree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mydata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mcontext</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mymalloc</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>myfree</name></expr>;</expr_stmt>
<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mydata</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ------------ Convert context ------------ */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_glob_separator</name><parameter_list>(<parameter><decl><type><name>pcre2_convert_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>separator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>separator</name> <operator>!=</operator> <name>CHAR_SLASH</name> <operator>&amp;&amp;</operator> <name>separator</name> <operator>!=</operator> <name>CHAR_BACKSLASH</name> <operator>&amp;&amp;</operator>
    <name>separator</name> <operator>!=</operator> <name>CHAR_DOT</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_BADDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>glob_separator</name></name> <operator>=</operator> <name>separator</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_set_glob_escape</name><parameter_list>(<parameter><decl><type><name>pcre2_convert_context</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>escape</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>escape</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <operator>(</operator><name>escape</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ispunct</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
  <return>return <expr><name>PCRE2_ERROR_BADDATA</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>ccontext</name><operator>-&gt;</operator><name>glob_escape</name></name> <operator>=</operator> <name>escape</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* End of pcre2_context.c */</comment>

</unit>
