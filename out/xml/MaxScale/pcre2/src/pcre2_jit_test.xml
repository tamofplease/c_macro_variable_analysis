<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_jit_test.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
         New API code Copyright (c) 2016 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCRE2_CODE_UNIT_WIDTH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2.h"</cpp:file></cpp:include>

<comment type="block">/*
 Letter characters:
   \xe6\x92\xad = 0x64ad = 25773 (kanji)
 Non-letter characters:
   \xc2\xa1 = 0xa1 =  (Inverted Exclamation Mark)
   \xf3\xa9\xb7\x80 = 0xe9dc0 = 957888
   \xed\xa0\x80 = 55296 = 0xd800 (Invalid UTF character)
   \xed\xb0\x80 = 56320 = 0xdc00 (Invalid UTF character)
 Newlines:
   \xc2\x85 = 0x85 = 133 (NExt Line = NEL)
   \xe2\x80\xa8 = 0x2028 = 8232 (Line Separator)
 Othercase pairs:
   \xc3\xa9 = 0xe9 = 233 (e')
      \xc3\x89 = 0xc9 = 201 (E')
   \xc3\xa1 = 0xe1 = 225 (a')
      \xc3\x81 = 0xc1 = 193 (A')
   \x53 = 0x53 = S
     \x73 = 0x73 = s
     \xc5\xbf = 0x17f = 383 (long S)
   \xc8\xba = 0x23a = 570
      \xe2\xb1\xa5 = 0x2c65 = 11365
   \xe1\xbd\xb8 = 0x1f78 = 8056
      \xe1\xbf\xb8 = 0x1ff8 = 8184
   \xf0\x90\x90\x80 = 0x10400 = 66560
      \xf0\x90\x90\xa8 = 0x10428 = 66600
   \xc7\x84 = 0x1c4 = 452
     \xc7\x85 = 0x1c5 = 453
     \xc7\x86 = 0x1c6 = 454
 Caseless sets:
   ucp_Armenian - \x{531}-\x{556} -&gt; \x{561}-\x{586}
   ucp_Coptic - \x{2c80}-\x{2ce3} -&gt; caseless: XOR 0x1
   ucp_Latin - \x{ff21}-\x{ff3a} -&gt; \x{ff41]-\x{ff5a}

 Mark property:
   \xcc\x8d = 0x30d = 781
 Special:
   \xc2\x80 = 0x80 = 128 (lowest 2 byte character)
   \xdf\xbf = 0x7ff = 2047 (highest 2 byte character)
   \xe0\xa0\x80 = 0x800 = 2048 (lowest 2 byte character)
   \xef\xbf\xbf = 0xffff = 65535 (highest 3 byte character)
   \xf0\x90\x80\x80 = 0x10000 = 65536 (lowest 4 byte character)
   \xf4\x8f\xbf\xbf = 0x10ffff = 1114111 (highest allowed utf character)
*/</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf8_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf16_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf32_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>jit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_8</name></expr></cpp:if>
	<expr_stmt><expr><call><name>pcre2_config_8</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_JIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_16</name></expr></cpp:elif>
	<expr_stmt><expr><call><name>pcre2_config_16</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_JIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:elif>
	<expr_stmt><expr><call><name>pcre2_config_32</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_JIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jit</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"JIT must be enabled to run pcre_jit_test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>regression_tests</name><argument_list>()</argument_list></call>
		<operator>|</operator> <call><name>invalid_utf8_regression_tests</name><argument_list>()</argument_list></call>
		<operator>|</operator> <call><name>invalid_utf16_regression_tests</name><argument_list>()</argument_list></call>
		<operator>|</operator> <call><name>invalid_utf32_regression_tests</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------------------------- */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><operator>(</operator><name>defined</name> <name>SUPPORT_PCRE2_8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SUPPORT_PCRE2_16</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>defined</name> <name>SUPPORT_PCRE2_32</name><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> SUPPORT_PCRE2_8 or SUPPORT_PCRE2_16 or SUPPORT_PCRE2_32 must be defined</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MU</name></cpp:macro>	<cpp:value>(PCRE2_MULTILINE | PCRE2_UTF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUP</name></cpp:macro>	<cpp:value>(PCRE2_MULTILINE | PCRE2_UTF | PCRE2_UCP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMU</name></cpp:macro>	<cpp:value>(PCRE2_CASELESS | PCRE2_MULTILINE | PCRE2_UTF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUP</name></cpp:macro>	<cpp:value>(PCRE2_CASELESS | PCRE2_MULTILINE | PCRE2_UTF | PCRE2_UCP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro>	<cpp:value>(PCRE2_MULTILINE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro>	<cpp:value>(PCRE2_MULTILINE | PCRE2_UCP)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U</name></cpp:macro>	<cpp:value>(PCRE2_UTF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CM</name></cpp:macro>	<cpp:value>(PCRE2_CASELESS | PCRE2_MULTILINE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BSR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((x) &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name></cpp:macro>	<cpp:value>PCRE2_NEWLINE_ANYCRLF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_NEWLINE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((x) &amp; 0xffff)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_BSR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((x) &gt;&gt; 16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET_MASK</name></cpp:macro>	<cpp:value>0x00ffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_NO8</name></cpp:macro>		<cpp:value>0x010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_NO16</name></cpp:macro>		<cpp:value>0x020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_NO32</name></cpp:macro>		<cpp:value>0x020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_NOMATCH</name></cpp:macro>	<cpp:value>0x040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_DIFF</name></cpp:macro>		<cpp:value>0x080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_FORCECONV</name></cpp:macro>	<cpp:value>0x100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F_PROPERTY</name></cpp:macro>	<cpp:value>0x200000</cpp:value></cpp:define>

<struct>struct <name>regression_test_case</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>compile_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>newline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>match_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>start_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>regression_test_case</name></name></type> <name><name>regression_test_cases</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* Constant strings. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"AbC"</literal></expr>, <expr><literal type="string">"AbAbC"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ACCEPT"</literal></expr>, <expr><literal type="string">"AACACCACCEACCEPACCEPTACCEPTT"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"aA#\xc3\xa9\xc3\x81"</literal></expr>, <expr><literal type="string">"aA#Aa#\xc3\x89\xc3\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^a]"</literal></expr>, <expr><literal type="string">"aAbB"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^m]"</literal></expr>, <expr><literal type="string">"mMnN"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a[^b][^#]"</literal></expr>, <expr><literal type="string">"abacd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"A[^B][^E]"</literal></expr>, <expr><literal type="string">"abacd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^x][^#]"</literal></expr>, <expr><literal type="string">"XxBll"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^a]"</literal></expr>, <expr><literal type="string">"aaa\xc3\xa1#Ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^A]"</literal></expr>, <expr><literal type="string">"aA\xe6\x92\xad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\W(\\W)?\\w"</literal></expr>, <expr><literal type="string">"\r\n+bc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\W(\\W)?\\w"</literal></expr>, <expr><literal type="string">"\n\r+bc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\W(\\W)?\\w"</literal></expr>, <expr><literal type="string">"\r\r+bc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\W(\\W)?\\w"</literal></expr>, <expr><literal type="string">"\n\n+bc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[axd]"</literal></expr>, <expr><literal type="string">"sAXd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[axd]"</literal></expr>, <expr><literal type="string">"sAXd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"[^axd]"</literal></expr>, <expr><literal type="string">"DxA"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[a-dA-C]"</literal></expr>, <expr><literal type="string">"\xe6\x92\xad\xc3\xa9.B"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^a-dA-C]"</literal></expr>, <expr><literal type="string">"\xe6\x92\xad\xc3\xa9"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\xc3\xa9]"</literal></expr>, <expr><literal type="string">"\xc3\xa9\xc3\x89."</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\xc3\xa9]"</literal></expr>, <expr><literal type="string">"\xc3\xa9\xc3\x89."</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^a]"</literal></expr>, <expr><literal type="string">"\xc2\x80[]"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\xa7"</literal></expr>, <expr><literal type="string">"\xf0\x90\x91\x8f"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"1a2b3c4"</literal></expr>, <expr><literal type="string">"1a2B3c51A2B3C4"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_CASELESS</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xff#a"</literal></expr>, <expr><literal type="string">"\xff#\xff\xfe##\xff#A"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_CASELESS</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xfe"</literal></expr>, <expr><literal type="string">"\xff\xfc#\xfe\xfe"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_CASELESS</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a1"</literal></expr>, <expr><literal type="string">"Aa1"</literal></expr> }</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NEVER_BACKSLASH_C</name></cpp:ifndef>
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\Ca"</literal></expr>, <expr><literal type="string">"cda"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\Ca"</literal></expr>, <expr><literal type="string">"CDA"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\Cx"</literal></expr>, <expr><literal type="string">"cda"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\Cx"</literal></expr>, <expr><literal type="string">"CDA"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !NEVER_BACKSLASH_C */</comment>
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\x80\xf0\x90\x90\xa8"</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\xa8\xf0\x90\x90\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\x80{2}"</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\x80#\xf0\x90\x90\xa8\xf0\x90\x90\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\xa8{2}"</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\x80#\xf0\x90\x90\xa8\xf0\x90\x90\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xe1\xbd\xb8\xe1\xbf\xb8"</literal></expr>, <expr><literal type="string">"\xe1\xbf\xb8\xe1\xbd\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[3-57-9]"</literal></expr>, <expr><literal type="string">"5"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_AUTO_CALLOUT</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"12345678901234567890123456789012345678901234567890123456789012345678901234567890"</literal></expr>,
		<expr><literal type="string">"12345678901234567890123456789012345678901234567890123456789012345678901234567890"</literal></expr> }</block></expr>,

	<comment type="block">/* Assertions. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\b[^A]"</literal></expr>, <expr><literal type="string">"A_B#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\b\\W"</literal></expr>, <expr><literal type="string">"\n*"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\B[^,]\\b[^s]\\b"</literal></expr>, <expr><literal type="string">"#X"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"_\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\b_\\b[,A]\\B"</literal></expr>, <expr><literal type="string">"_,"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\b"</literal></expr>, <expr><literal type="string">"\xe6\x92\xad!"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"_\xc2\xa1\xc3\xa1\xc2\x85"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\b[^A]\\B[^c]\\b[^_]\\B"</literal></expr>, <expr><literal type="string">"_\xc3\xa1\xe2\x80\xa8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\b\\w+\\B"</literal></expr>, <expr><literal type="string">"\xc3\x89\xc2\xa1\xe6\x92\xad\xc3\x81\xc3\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\b."</literal></expr>, <expr><literal type="string">"\xcd\xbe"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\By"</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\xa8y"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\R^"</literal></expr>, <expr><literal type="string">"\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^"</literal></expr>, <expr><literal type="string">"\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"^ab"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^ab"</literal></expr>, <expr><literal type="string">"aab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"^a"</literal></expr>, <expr><literal type="string">"\r\raa\n\naa\r\naa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"^-"</literal></expr>, <expr><literal type="string">"\xe2\x80\xa8--\xc2\x85-\r\n-"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"^-"</literal></expr>, <expr><literal type="string">"a--b--\x85--"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"^-"</literal></expr>, <expr><literal type="string">"a--\xe2\x80\xa8--"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"^-"</literal></expr>, <expr><literal type="string">"a--\xc2\x85--"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ab$"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"ab$"</literal></expr>, <expr><literal type="string">"abab\n\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_DOLLAR_ENDONLY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"ab$"</literal></expr>, <expr><literal type="string">"abab\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a$"</literal></expr>, <expr><literal type="string">"\r\raa\n\naa\r\naa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a$"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"#$"</literal></expr>, <expr><literal type="string">"#\xc2\x85###\r#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"#$"</literal></expr>, <expr><literal type="string">"#\xe2\x80\xa9"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><name>PCRE2_NOTBOL</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^a"</literal></expr>, <expr><literal type="string">"aa\naa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><name>PCRE2_NOTBOL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"^a"</literal></expr>, <expr><literal type="string">"aa\naa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><name>PCRE2_NOTEOL</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a$"</literal></expr>, <expr><literal type="string">"aa\naa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><name>PCRE2_NOTEOL</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a$"</literal></expr>, <expr><literal type="string">"aa\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name> <operator>|</operator> <name>PCRE2_DOLLAR_ENDONLY</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\p{Any}{2,}$"</literal></expr>, <expr><literal type="string">"aa\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><name>PCRE2_NOTEOL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a$"</literal></expr>, <expr><literal type="string">"aa\naa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_CR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_CR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a\\Z"</literal></expr>, <expr><literal type="string">"aaa\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_CR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\xe2\x80\xa8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\xc2\x85"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".\\Z"</literal></expr>, <expr><literal type="string">"aaa\xe2\x80\xa8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\Aa"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\Aa"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"\\Ga"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\Ga"</literal></expr>, <expr><literal type="string">"aba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a\\z"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a\\z"</literal></expr>, <expr><literal type="string">"aab"</literal></expr> }</block></expr>,

	<comment type="block">/* Brackets and alternatives. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(ab|bb|cd)"</literal></expr>, <expr><literal type="string">"bacde"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:ab|a)(bc|c)"</literal></expr>, <expr><literal type="string">"ababc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((ab|(cc))|(bb)|(?:cd|efg))"</literal></expr>, <expr><literal type="string">"abac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((aB|(Cc))|(bB)|(?:cd|EFg))"</literal></expr>, <expr><literal type="string">"AcCe"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((ab|(cc))|(bb)|(?:cd|ebg))"</literal></expr>, <expr><literal type="string">"acebebg"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(a)|(?:b))(cc|(?:d|e))(a|b)k"</literal></expr>, <expr><literal type="string">"accabdbbccbk"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xc7\x82|\xc6\x82"</literal></expr>, <expr><literal type="string">"\xf1\x83\x82\x82\xc7\x82\xc7\x83"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"=\xc7\x82|#\xc6\x82"</literal></expr>, <expr><literal type="string">"\xf1\x83\x82\x82=\xc7\x82\xc7\x83"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xc7\x82\xc7\x83|\xc6\x82\xc6\x82"</literal></expr>, <expr><literal type="string">"\xf1\x83\x82\x82\xc7\x82\xc7\x83"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xc6\x82\xc6\x82|\xc7\x83\xc7\x83|\xc8\x84\xc8\x84"</literal></expr>, <expr><literal type="string">"\xf1\x83\x82\x82\xc8\x84\xc8\x84"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xe1\x81\x80|\xe2\x82\x80|\xe4\x84\x80"</literal></expr>, <expr><literal type="string">"\xdf\xbf\xc2\x80\xe4\x84\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:\xe1\x81\x80|\xe2\x82\x80|\xe4\x84\x80)#"</literal></expr>, <expr><literal type="string">"\xdf\xbf\xc2\x80#\xe4\x84\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ab|cd"</literal></expr>, <expr><literal type="string">"CD"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a1277|a1377|bX487"</literal></expr>, <expr><literal type="string">"bx487"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a1277|a1377|bx487"</literal></expr>, <expr><literal type="string">"bX487"</literal></expr> }</block></expr>,

	<comment type="block">/* Greedy and non-greedy ? operators. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:a)?a"</literal></expr>, <expr><literal type="string">"laab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(A)?A"</literal></expr>, <expr><literal type="string">"llaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a)?\?a"</literal></expr>, <expr><literal type="string">"aab"</literal></expr> }</block></expr>, <comment type="block">/* ?? is the prefix of trygraphs in GCC. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a)?a"</literal></expr>, <expr><literal type="string">"manm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|b)?\?d((?:e)?)"</literal></expr>, <expr><literal type="string">"ABABdx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|b)?\?d((?:e)?)"</literal></expr>, <expr><literal type="string">"abcde"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:ab)?\?g|b(?:g(nn|d)?\?)?)?\?(?:n)?m"</literal></expr>, <expr><literal type="string">"abgnbgnnbgdnmm"</literal></expr> }</block></expr>,

	<comment type="block">/* Greedy and non-greedy + operators */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa)+aa"</literal></expr>, <expr><literal type="string">"aaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa)+?aa"</literal></expr>, <expr><literal type="string">"aaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:aba|ab|a)+l"</literal></expr>, <expr><literal type="string">"ababamababal"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:aba|ab|a)+?l"</literal></expr>, <expr><literal type="string">"ababamababal"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(?:bc|cb|b|c)+?|ss)+e"</literal></expr>, <expr><literal type="string">"accssabccbcacbccbbXaccssabccbcacbccbbe"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(?:bc|cb|b|c)+|ss)+?e"</literal></expr>, <expr><literal type="string">"accssabccbcacbccbbXaccssabccbcacbccbbe"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(b(c)+?)+)?\?(?:(bc)+|(cb)+)+(?:m)+"</literal></expr>, <expr><literal type="string">"bccbcccbcbccbcbPbccbcccbcbccbcbmmn"</literal></expr> }</block></expr>,

	<comment type="block">/* Greedy and non-greedy * operators */</comment>
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:AA)*AB"</literal></expr>, <expr><literal type="string">"aaaaaaamaaaaaaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:aa)*?ab"</literal></expr>, <expr><literal type="string">"aaaaaaamaaaaaaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|ab)*ab"</literal></expr>, <expr><literal type="string">"aaabaaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|Ab)*?aB"</literal></expr>, <expr><literal type="string">"aaabaaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|b)*(?:a)*(?:b)*m"</literal></expr>, <expr><literal type="string">"abbbaaababanabbbaaababamm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|b)*?(?:a)*?(?:b)*?m"</literal></expr>, <expr><literal type="string">"abbbaaababanabbbaaababamm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(a(\\1*)a|(b)b+){0}a"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:a|)*){0}a"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,

	<comment type="block">/* Combining ? + * operators */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((bm)+)?\?(?:a)*(bm)+n|((am)+?)?(?:a)+(am)*n"</literal></expr>, <expr><literal type="string">"bmbmabmamaaamambmaman"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(((ab)?cd)*ef)+g"</literal></expr>, <expr><literal type="string">"abcdcdefcdefefmabcdcdefcdefefgg"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(((ab)?\?cd)*?ef)+?g"</literal></expr>, <expr><literal type="string">"abcdcdefcdefefmabcdcdefcdefefgg"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(ab)?c|(?:ab)+?d)*g"</literal></expr>, <expr><literal type="string">"ababcdccababddg"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?:ab)?\?c|(ab)+d)*?g"</literal></expr>, <expr><literal type="string">"ababcdccababddg"</literal></expr> }</block></expr>,

	<comment type="block">/* Single character iterators. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a+aab)+aaaab"</literal></expr>, <expr><literal type="string">"aaaabcaaaabaabcaabcaaabaaaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a*a*aab)+x"</literal></expr>, <expr><literal type="string">"aaaaabaabaaabmaabx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a*?(b|ab)a*?)+x"</literal></expr>, <expr><literal type="string">"aaaabcxbbaabaacbaaabaabax"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a+(ab|ad)a+)+x"</literal></expr>, <expr><literal type="string">"aaabaaaadaabaaabaaaadaaax"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a?(a)a?)+(aaa)"</literal></expr>, <expr><literal type="string">"abaaabaaaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a?\?(a)a?\?)+(b)"</literal></expr>, <expr><literal type="string">"aaaacaaacaacacbaaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a{0,4}(b))+d"</literal></expr>, <expr><literal type="string">"aaaaaabaabcaaaaabaaaaabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a{0,4}?[^b])+d+(a{0,4}[^b])d+"</literal></expr>, <expr><literal type="string">"aaaaadaaaacaadddaaddd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(ba{2})+c"</literal></expr>, <expr><literal type="string">"baabaaabacbaabaac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a*+bc++)+"</literal></expr>, <expr><literal type="string">"aaabbcaaabcccab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a?+[^b])+"</literal></expr>, <expr><literal type="string">"babaacacb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a{0,3}+b)(a{0,3}+b)(a{0,3}+)[^c]"</literal></expr>, <expr><literal type="string">"abaabaaacbaabaaaac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"([a-c]+[d-f]+?)+?g"</literal></expr>, <expr><literal type="string">"aBdacdehAbDaFgA"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[c-f]+k"</literal></expr>, <expr><literal type="string">"DemmFke"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"([DGH]{0,4}M)+"</literal></expr>, <expr><literal type="string">"GGDGHDGMMHMDHHGHM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"([a-c]{4,}s)+"</literal></expr>, <expr><literal type="string">"abasabbasbbaabsbba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[ace]{3,7}"</literal></expr>, <expr><literal type="string">"AcbDAcEEcEd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[ace]{3,7}?"</literal></expr>, <expr><literal type="string">"AcbDAcEEcEd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[ace]{3,}"</literal></expr>, <expr><literal type="string">"AcbDAcEEcEd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[ace]{3,}?"</literal></expr>, <expr><literal type="string">"AcbDAcEEcEd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[ckl]{2,}?g"</literal></expr>, <expr><literal type="string">"cdkkmlglglkcg"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[ace]{5}?"</literal></expr>, <expr><literal type="string">"AcCebDAcEEcEd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"([AbC]{3,5}?d)+"</literal></expr>, <expr><literal type="string">"BACaAbbAEAACCbdCCbdCCAAbb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"([^ab]{0,}s){2}"</literal></expr>, <expr><literal type="string">"abaabcdsABamsDDs"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\b\\w+\\B"</literal></expr>, <expr><literal type="string">"x,a_cd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\b[^\xc2\xa1]+\\B"</literal></expr>, <expr><literal type="string">"\xc3\x89\xc2\xa1\xe6\x92\xad\xc3\x81\xc3\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^b]+(a*)([^c]?d{3})"</literal></expr>, <expr><literal type="string">"aaaaddd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xe1\xbd\xb8{2}"</literal></expr>, <expr><literal type="string">"\xe1\xbf\xb8#\xe1\xbf\xb8\xe1\xbd\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\xf0\x90\x90\x80]{2,4}@"</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\xa8\xf0\x90\x90\x80###\xf0\x90\x90\x80@@@"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\xe1\xbd\xb8][^\xc3\xa9]"</literal></expr>, <expr><literal type="string">"\xe1\xbd\xb8\xe1\xbf\xb8\xc3\xa9\xc3\x89#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\xe1\xbd\xb8][^\xc3\xa9]"</literal></expr>, <expr><literal type="string">"\xe1\xbd\xb8\xe1\xbf\xb8\xc3\xa9\xc3\x89#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\xe1\xbd\xb8]{3,}?"</literal></expr>, <expr><literal type="string">"##\xe1\xbd\xb8#\xe1\xbd\xb8#\xc3\x89#\xe1\xbd\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\d+123"</literal></expr>, <expr><literal type="string">"987654321,01234"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"abcd*|\\w+xy"</literal></expr>, <expr><literal type="string">"aaaaa,abxyz"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:abc|((?:amc|\\b\\w*xy)))"</literal></expr>, <expr><literal type="string">"aaaaa,abxyz"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(?R)|([a-z]++)#"</literal></expr>, <expr><literal type="string">".abcd.abcd#."</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(?R)|([a-z]++)#"</literal></expr>, <expr><literal type="string">".abcd.mbcd#."</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".[ab]*."</literal></expr>, <expr><literal type="string">"xx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".[ab]*a"</literal></expr>, <expr><literal type="string">"xxa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".[ab]?."</literal></expr>, <expr><literal type="string">"xx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"_[ab]+_*a"</literal></expr>, <expr><literal type="string">"_aa"</literal></expr> }</block></expr>,

	<comment type="block">/* Bracket repeats with limit. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(ab){2}){5}M"</literal></expr>, <expr><literal type="string">"abababababababababababM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:ab|abab){1,5}M"</literal></expr>, <expr><literal type="string">"abababababababababababM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;ab|abab){1,5}M"</literal></expr>, <expr><literal type="string">"abababababababababababM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:ab|abab){1,5}?M"</literal></expr>, <expr><literal type="string">"abababababababababababM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;ab|abab){1,5}?M"</literal></expr>, <expr><literal type="string">"abababababababababababM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(ab){1,4}?){1,3}?M"</literal></expr>, <expr><literal type="string">"abababababababababababababM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(ab){1,4}){1,3}abababababababababababM"</literal></expr>, <expr><literal type="string">"ababababababababababababM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?:(ab){1,4}){1,3}abababababababababababM"</literal></expr>, <expr><literal type="string">"abababababababababababM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(ab){4,6}?M"</literal></expr>, <expr><literal type="string">"abababababababM"</literal></expr> }</block></expr>,

	<comment type="block">/* Basic character sets. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:\\s)+(?:\\S)+"</literal></expr>, <expr><literal type="string">"ab \t\xc3\xa9\xe6\x92\xad "</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(\\w)*(k)(\\W)?\?"</literal></expr>, <expr><literal type="string">"abcdef abck11"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\((\\d)+\\)\\D"</literal></expr>, <expr><literal type="string">"a() (83 (8)2 (9)ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\w(\\s|(?:\\d)*,)+\\w\\wb"</literal></expr>, <expr><literal type="string">"a 5, 4,, bb 5, 4,, aab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(\\v+)(\\V+)"</literal></expr>, <expr><literal type="string">"\x0e\xc2\x85\xe2\x80\xa8\x0b\x09\xe2\x80\xa9"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(\\h+)(\\H+)"</literal></expr>, <expr><literal type="string">"\xe2\x80\xa8\xe2\x80\x80\x20\xe2\x80\x8a\xe2\x81\x9f\xe3\x80\x80\x09\x20\xc2\xa0\x0a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"x[bcef]+"</literal></expr>, <expr><literal type="string">"xaxdxecbfg"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"x[bcdghij]+"</literal></expr>, <expr><literal type="string">"xaxexfxdgbjk"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"x[^befg]+"</literal></expr>, <expr><literal type="string">"xbxexacdhg"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"x[^bcdl]+"</literal></expr>, <expr><literal type="string">"xlxbxaekmd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"x[^bcdghi]+"</literal></expr>, <expr><literal type="string">"xbxdxgxaefji"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"x[B-Fb-f]+"</literal></expr>, <expr><literal type="string">"xaxAxgxbfBFG"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\x{e9}+"</literal></expr>, <expr><literal type="string">"#\xf0\x90\x90\xa8\xc3\xa8\xc3\xa9\xc3\x89\xc3\x88"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\\x{e9}]+"</literal></expr>, <expr><literal type="string">"\xc3\xa9#\xf0\x90\x90\xa8\xc3\xa8\xc3\x88\xc3\x89"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[\\x02\\x7e]+"</literal></expr>, <expr><literal type="string">"\xc3\x81\xe1\xbf\xb8\xf0\x90\x90\xa8\x01\x02\x7e\x7f"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\\x02\\x7e]+"</literal></expr>, <expr><literal type="string">"\x02\xc3\x81\xe1\xbf\xb8\xf0\x90\x90\xa8\x01\x7f\x7e"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[\\x{81}-\\x{7fe}]+"</literal></expr>, <expr><literal type="string">"#\xe1\xbf\xb8\xf0\x90\x90\xa8\xc2\x80\xc2\x81\xdf\xbe\xdf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\\x{81}-\\x{7fe}]+"</literal></expr>, <expr><literal type="string">"\xc2\x81#\xe1\xbf\xb8\xf0\x90\x90\xa8\xc2\x80\xdf\xbf\xdf\xbe"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[\\x{801}-\\x{fffe}]+"</literal></expr>, <expr><literal type="string">"#\xc3\xa9\xf0\x90\x90\x80\xe0\xa0\x80\xe0\xa0\x81\xef\xbf\xbe\xef\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\\x{801}-\\x{fffe}]+"</literal></expr>, <expr><literal type="string">"\xe0\xa0\x81#\xc3\xa9\xf0\x90\x90\x80\xe0\xa0\x80\xef\xbf\xbf\xef\xbf\xbe"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[\\x{10001}-\\x{10fffe}]+"</literal></expr>, <expr><literal type="string">"#\xc3\xa9\xe2\xb1\xa5\xf0\x90\x80\x80\xf0\x90\x80\x81\xf4\x8f\xbf\xbe\xf4\x8f\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^\\x{10001}-\\x{10fffe}]+"</literal></expr>, <expr><literal type="string">"\xf0\x90\x80\x81#\xc3\xa9\xe2\xb1\xa5\xf0\x90\x80\x80\xf4\x8f\xbf\xbf\xf4\x8f\xbf\xbe"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^[\\x{0100}-\\x{017f}]"</literal></expr>, <expr><literal type="string">" "</literal></expr> }</block></expr>,

	<comment type="block">/* Unicode properties. */</comment>
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[1-5\xc3\xa9\\w]"</literal></expr>, <expr><literal type="string">"\xc3\xa1_"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[\xc3\x81\\p{Ll}]"</literal></expr>, <expr><literal type="string">"A_\xc3\x89\xc3\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[\\Wd-h_x-z]+"</literal></expr>, <expr><literal type="string">"a\xc2\xa1#_yhzdxi"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[\\P{Any}]"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[^\\p{Any}]"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[\\P{Any}\xc3\xa1-\xc3\xa8]"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[^\\p{Any}\xc3\xa1-\xc3\xa8]"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[\xc3\xa1-\xc3\xa8\\P{Any}]"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[^\xc3\xa1-\xc3\xa8\\p{Any}]"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[\xc3\xa1-\xc3\xa8\\p{Any}]"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[^\xc3\xa1-\xc3\xa8\\P{Any}]"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[b-\xc3\xa9\\s]"</literal></expr>, <expr><literal type="string">"a\xc\xe6\x92\xad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[\xc2\x85-\xc2\x89\xc3\x89]"</literal></expr>, <expr><literal type="string">"\xc2\x84\xc3\xa9"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[^b-d^&amp;\\s]{3,}"</literal></expr>, <expr><literal type="string">"db^ !a\xe2\x80\xa8_ae"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[^\\S\\P{Any}][\\sN]{1,3}[\\P{N}]{4}"</literal></expr>, <expr><literal type="string">"\xe2\x80\xaa\xa N\x9\xc3\xa9_0"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[^\\P{L}\x9!D-F\xa]{2,3}"</literal></expr>, <expr><literal type="string">"\x9,.DF\xa.CG\xc3\x81"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[\xc3\xa1-\xc3\xa9_\xe2\x80\xa0-\xe2\x80\xaf]{1,5}[^\xe2\x80\xa0-\xe2\x80\xaf]"</literal></expr>, <expr><literal type="string">"\xc2\xa1\xc3\x89\xc3\x89\xe2\x80\xaf_\xe2\x80\xa0"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[\xc3\xa2-\xc3\xa6\xc3\x81-\xc3\x84\xe2\x80\xa8-\xe2\x80\xa9\xe6\x92\xad\\p{Zs}]{2,}"</literal></expr>, <expr><literal type="string">"\xe2\x80\xa7\xe2\x80\xa9\xe6\x92\xad \xe6\x92\xae"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[\\P{L&amp;}]{2}[^\xc2\x85-\xc2\x89\\p{Ll}\\p{Lu}]{2}"</literal></expr>, <expr><literal type="string">"\xc3\xa9\xe6\x92\xad.a\xe6\x92\xad|\xc2\x8a#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UCP</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"[a-b\\s]{2,5}[^a]"</literal></expr>, <expr><literal type="string">"AB  baaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"[^\\p{Hangul}\\p{Z}]"</literal></expr>, <expr><literal type="string">" "</literal></expr> }</block></expr>,

	<comment type="block">/* Possible empty brackets. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:|ab||bc|a)+d"</literal></expr>, <expr><literal type="string">"abcxabcabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(|ab||bc|a)+d"</literal></expr>, <expr><literal type="string">"abcxabcabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:|ab||bc|a)*d"</literal></expr>, <expr><literal type="string">"abcxabcabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(|ab||bc|a)*d"</literal></expr>, <expr><literal type="string">"abcxabcabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:|ab||bc|a)+?d"</literal></expr>, <expr><literal type="string">"abcxabcabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(|ab||bc|a)+?d"</literal></expr>, <expr><literal type="string">"abcxabcabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:|ab||bc|a)*?d"</literal></expr>, <expr><literal type="string">"abcxabcabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(|ab||bc|a)*?d"</literal></expr>, <expr><literal type="string">"abcxabcabd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(((a)*?|(?:ba)+)+?|(?:|c|ca)*)*m"</literal></expr>, <expr><literal type="string">"abaacaccabacabalabaacaccabacabamm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:((?:a)*|(ba)+?)+|(|c|ca)*?)*?m"</literal></expr>, <expr><literal type="string">"abaacaccabacabalabaacaccabacabamm"</literal></expr> }</block></expr>,

	<comment type="block">/* Start offset. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="string">"(\\d|(?:\\w)*\\w)+"</literal></expr>, <expr><literal type="string">"0ac01Hb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(\\w\\W\\w)+"</literal></expr>, <expr><literal type="string">"ab#d"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(\\w\\W\\w)+"</literal></expr>, <expr><literal type="string">"ab#d"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"(\\w\\W\\w)+"</literal></expr>, <expr><literal type="string">"ab#d"</literal></expr> }</block></expr>,

	<comment type="block">/* Newline. */</comment>
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\W{0,2}[^#]{3}"</literal></expr>, <expr><literal type="string">"\r\n#....."</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_CR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\W{0,2}[^#]{3}"</literal></expr>, <expr><literal type="string">"\r\n#....."</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\W{1,3}[^#]"</literal></expr>, <expr><literal type="string">"\r\n##...."</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NO_UTF_CHECK</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"^.a"</literal></expr>, <expr><literal type="string">"\n\x80\nxa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"^"</literal></expr>, <expr><literal type="string">"\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^"</literal></expr>, <expr><literal type="string">"\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"^"</literal></expr>, <expr><literal type="string">"\r\na"</literal></expr> }</block></expr>,

	<comment type="block">/* Any character except newline or any newline. */</comment>
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"."</literal></expr>, <expr><literal type="string">"\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".(.)."</literal></expr>, <expr><literal type="string">"a\xc3\xa1\r\n\n\r\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".(.)"</literal></expr>, <expr><literal type="string">"a\rb\nc\r\n\xc2\x85\xe2\x80\xa8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">".(.)"</literal></expr>, <expr><literal type="string">"a\rb\nc\r\n\xc2\x85\xe2\x80\xa8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(.)."</literal></expr>, <expr><literal type="string">"a\rb\nc\r\n\xc2\x85\xe2\x80\xa9$de"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANYCRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">".(.)."</literal></expr>, <expr><literal type="string">"\xe2\x80\xa8\nb\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(.)(.)"</literal></expr>, <expr><literal type="string">"#\x85#\r#\n#\r\n#\x84"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(.+)#"</literal></expr>, <expr><literal type="string">"#\rMn\xc2\x85#\n###"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><call><name>BSR</name><argument_list>(<argument><expr><name>PCRE2_BSR_ANYCRLF</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R"</literal></expr>, <expr><literal type="string">"\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><call><name>BSR</name><argument_list>(<argument><expr><name>PCRE2_BSR_ANYCRLF</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R"</literal></expr>, <expr><literal type="string">"\x85#\r\n#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><call><name>BSR</name><argument_list>(<argument><expr><name>PCRE2_BSR_UNICODE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R"</literal></expr>, <expr><literal type="string">"ab\xe2\x80\xa8#c"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><call><name>BSR</name><argument_list>(<argument><expr><name>PCRE2_BSR_UNICODE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R"</literal></expr>, <expr><literal type="string">"ab\r\nc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>U</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name> <operator>|</operator> <call><name>BSR</name><argument_list>(<argument><expr><name>PCRE2_BSR_UNICODE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(\\R.)+"</literal></expr>, <expr><literal type="string">"\xc2\x85\r\n#\xe2\x80\xa8\n\r\n\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\R+"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R+"</literal></expr>, <expr><literal type="string">"ab\r\n\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R*"</literal></expr>, <expr><literal type="string">"ab\r\n\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R*"</literal></expr>, <expr><literal type="string">"\r\n\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R{2,4}"</literal></expr>, <expr><literal type="string">"\r\nab\r\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R{2,4}"</literal></expr>, <expr><literal type="string">"\r\nab\n\n\n\r\r\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R{2,}"</literal></expr>, <expr><literal type="string">"\r\nab\n\n\n\r\r\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R{0,3}"</literal></expr>, <expr><literal type="string">"\r\n\r\n\r\n\r\n\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\R+\\R\\R"</literal></expr>, <expr><literal type="string">"\r\n\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R+\\R\\R"</literal></expr>, <expr><literal type="string">"\r\r\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R*\\R\\R"</literal></expr>, <expr><literal type="string">"\n\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\R{2,4}\\R\\R"</literal></expr>, <expr><literal type="string">"\r\r\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\R{2,4}\\R\\R"</literal></expr>, <expr><literal type="string">"\r\r\r\r"</literal></expr> }</block></expr>,

	<comment type="block">/* Atomic groups (no fallback from "next" direction). */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?&gt;ab)ab"</literal></expr>, <expr><literal type="string">"bab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?&gt;(ab))ab"</literal></expr>, <expr><literal type="string">"bab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;ab)+abc(?&gt;de)*def(?&gt;gh)?ghe(?&gt;ij)+?k(?&gt;lm)*?n(?&gt;op)?\?op"</literal></expr>,
			<expr><literal type="string">"bababcdedefgheijijklmlmnop"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(b)+a|(ab)?\?(b))an"</literal></expr>, <expr><literal type="string">"abban"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;ab+a|(?:ab)?\?b)an"</literal></expr>, <expr><literal type="string">"abban"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?&gt;ab|ad|)*?)(?&gt;|c)*abad"</literal></expr>, <expr><literal type="string">"abababcababad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(aa|b|)*+(?&gt;(##)|###)*d|(aa)(?&gt;(baa)?)m)"</literal></expr>, <expr><literal type="string">"aabaa#####da"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?&gt;a|)+?)b"</literal></expr>, <expr><literal type="string">"aaacaaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;x|)*$"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(x)|)*$"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;x|())*$"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?&gt;[cxy]a|[a-d])*?)b"</literal></expr>, <expr><literal type="string">"aaa+ aaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?&gt;[cxy](a)|[a-d])*?)b"</literal></expr>, <expr><literal type="string">"aaa+ aaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;((?&gt;(a+))))bab|(?&gt;((?&gt;(a+))))bb"</literal></expr>, <expr><literal type="string">"aaaabaaabaabab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(?&gt;a+))bab|(?&gt;(?&gt;a+))bb"</literal></expr>, <expr><literal type="string">"aaaabaaabaabab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(a)c|(?&gt;(c)|(a))a)b*?bab"</literal></expr>, <expr><literal type="string">"aaaabaaabaabab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;ac|(?&gt;c|a)a)b*?bab"</literal></expr>, <expr><literal type="string">"aaaabaaabaabab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(b)b|(a))*b(?&gt;(c)|d)?x"</literal></expr>, <expr><literal type="string">"ababcaaabdbx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;bb|a)*b(?&gt;c|d)?x"</literal></expr>, <expr><literal type="string">"ababcaaabdbx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(bb)|a)*b(?&gt;c|(d))?x"</literal></expr>, <expr><literal type="string">"ababcaaabdbx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(a))*?(?&gt;(a))+?(?&gt;(a))??x"</literal></expr>, <expr><literal type="string">"aaaaaacccaaaaabax"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a)*?(?&gt;a)+?(?&gt;a)??x"</literal></expr>, <expr><literal type="string">"aaaaaacccaaaaabax"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(a)|)*?(?&gt;(a)|)+?(?&gt;(a)|)??x"</literal></expr>, <expr><literal type="string">"aaaaaacccaaaaabax"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a|)*?(?&gt;a|)+?(?&gt;a|)??x"</literal></expr>, <expr><literal type="string">"aaaaaacccaaaaabax"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(?&gt;(a{0,2}))*?b|aac)+b"</literal></expr>, <expr><literal type="string">"aaaaaaacaaaabaaaaacaaaabaacaaabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;((?&gt;a{32}|b+|(a*))?(?&gt;c+|d*)?\?)+e)+?f"</literal></expr>, <expr><literal type="string">"aaccebbdde bbdaaaccebbdee bbdaaaccebbdeef"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(?:(?&gt;aa|a||x)+?b|(?&gt;aa|a||(x))+?c)?(?&gt;[ad]{0,2})*?d)+d"</literal></expr>, <expr><literal type="string">"aaacdbaabdcabdbaaacd aacaabdbdcdcaaaadaabcbaadd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(?:(?&gt;aa|a||(x))+?b|(?&gt;aa|a||x)+?c)?(?&gt;[ad]{0,2})*?d)+d"</literal></expr>, <expr><literal type="string">"aaacdbaabdcabdbaaacd aacaabdbdcdcaaaadaabcbaadd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\X"</literal></expr>, <expr><literal type="string">"\xcc\x8d\xcc\x8d"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\X"</literal></expr>, <expr><literal type="string">"\xcc\x8d\xcc\x8d#\xcc\x8d\xcc\x8d"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\X+.."</literal></expr>, <expr><literal type="string">"\xcc\x8d#\xcc\x8d#\xcc\x8d\xcc\x8d"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\X{2,4}"</literal></expr>, <expr><literal type="string">"abcdef"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\X{2,4}?"</literal></expr>, <expr><literal type="string">"abcdef"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\X{2,4}.."</literal></expr>, <expr><literal type="string">"#\xcc\x8d##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\X{2,4}.."</literal></expr>, <expr><literal type="string">"#\xcc\x8d#\xcc\x8d##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(c(ab)?+ab)+"</literal></expr>, <expr><literal type="string">"cabcababcab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;(a+)b)+aabab"</literal></expr>, <expr><literal type="string">"aaaabaaabaabab"</literal></expr> }</block></expr>,

	<comment type="block">/* Possessive quantifiers. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:a|b)++m"</literal></expr>, <expr><literal type="string">"mababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:a|b)*+m"</literal></expr>, <expr><literal type="string">"mababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:a|b)*+m"</literal></expr>, <expr><literal type="string">"ababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|b)++m"</literal></expr>, <expr><literal type="string">"mababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|b)*+m"</literal></expr>, <expr><literal type="string">"mababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|b)*+m"</literal></expr>, <expr><literal type="string">"ababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|b(*ACCEPT))++m"</literal></expr>, <expr><literal type="string">"maaxab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:b*)++m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:b*)++m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:b*)*+m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:b*)*+m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(b*)++m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(b*)++m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(b*)*+m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(b*)*+m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:a|(b))++m"</literal></expr>, <expr><literal type="string">"mababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(a)|b)*+m"</literal></expr>, <expr><literal type="string">"mababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(a)|(b))*+m"</literal></expr>, <expr><literal type="string">"ababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|(b))++m"</literal></expr>, <expr><literal type="string">"mababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a)|b)*+m"</literal></expr>, <expr><literal type="string">"mababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a)|(b))*+m"</literal></expr>, <expr><literal type="string">"ababbaaxababbaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a|(b)(*ACCEPT))++m"</literal></expr>, <expr><literal type="string">"maaxab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(b*))++m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(b*))++m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(b*))*+m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(b*))*+m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((b*))++m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((b*))++m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((b*))*+m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((b*))*+m"</literal></expr>, <expr><literal type="string">"bxbbxbbbxbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?&gt;(b{2,4}))(?:(?:(aa|c))++m|(?:(aa|c))+n)"</literal></expr>, <expr><literal type="string">"bbaacaaccaaaacxbbbmbn"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:b)++a)+(cd)*+m"</literal></expr>, <expr><literal type="string">"bbababbacdcdnbbababbacdcdm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:(b))++a)+((c)d)*+m"</literal></expr>, <expr><literal type="string">"bbababbacdcdnbbababbacdcdm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?:(?:ab)*+k)++(?:n(?:cd)++)*+)*+m"</literal></expr>, <expr><literal type="string">"ababkkXababkkabkncXababkkabkncdcdncdXababkkabkncdcdncdkkabkncdXababkkabkncdcdncdkkabkncdm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:((ab)*+(k))++(n(?:c(d))++)*+)*+m"</literal></expr>, <expr><literal type="string">"ababkkXababkkabkncXababkkabkncdcdncdXababkkabkncdcdncdkkabkncdXababkkabkncdcdncdkkabkncdm"</literal></expr> }</block></expr>,

	<comment type="block">/* Back references. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|bb)(\\1*)(ll|)(\\3*)bbbbbbc"</literal></expr>, <expr><literal type="string">"aaaaaabbbbbbbbc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|bb)(\\1+)(ll|)(\\3+)bbbbbbc"</literal></expr>, <expr><literal type="string">"bBbbBbCbBbbbBbbcbbBbbbBBbbC"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a{2,4})\\1"</literal></expr>, <expr><literal type="string">"AaAaaAaA"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|bb)(\\1?)aa(\\1?)(ll|)(\\4+)bbc"</literal></expr>, <expr><literal type="string">"aaaaaaaabbaabbbbaabbbbc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|bb)(\\1{0,5})(ll|)(\\3{0,5})cc"</literal></expr>, <expr><literal type="string">"bbxxbbbbxxaaaaaaaaaaaaaaaacc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|bb)(\\1{3,5})(ll|)(\\3{3,5})cc"</literal></expr>, <expr><literal type="string">"bbbbbbbbbbbbaaaaaaccbbbbbbbbbbbbbbcc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|bb)(\\1{3,})(ll|)(\\3{3,})cc"</literal></expr>, <expr><literal type="string">"bbbbbbbbbbbbaaaaaaccbbbbbbbbbbbbbbcc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(\\w+)b(\\1+)c"</literal></expr>, <expr><literal type="string">"GabGaGaDbGaDGaDc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(aa)|b)\\1?b"</literal></expr>, <expr><literal type="string">"bb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|bb)(\\1*?)aa(\\1+?)"</literal></expr>, <expr><literal type="string">"bBBbaaAAaaAAaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(aa|bb)(\\1*?)(dd|)cc(\\3+?)"</literal></expr>, <expr><literal type="string">"aaaaaccdd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(aa|bb)(\\1?\?)cc){2}(\\1?\?)"</literal></expr>, <expr><literal type="string">"aAaABBbbAAaAcCaAcCaA"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(aa|bb)(\\1{3,5}?)){2}(dd|)(\\3{3,5}?)"</literal></expr>, <expr><literal type="string">"aaaaaabbbbbbbbbbaaaaaaaaaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(aa|bb)(\\1{3,}?)){2}(dd|)(\\3{3,}?)"</literal></expr>, <expr><literal type="string">"aaaaaabbbbbbbbbbaaaaaaaaaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(aa|bb)(\\1{0,3}?)){2}(dd|)(\\3{0,3}?)b(\\1{0,3}?)(\\1{0,3})"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaaabaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(?:\\1|)a){3}b"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a?)b(\\1\\1*\\1+\\1?\\1*?\\1+?\\1??\\1*+\\1++\\1?+\\1{4}\\1{3,5}\\1{4,}\\1{0,5}\\1{3,5}?\\1{4,}?\\1{0,5}?\\1{3,5}+\\1{4,}+\\1{0,5}+#){2}d"</literal></expr>, <expr><literal type="string">"bb#b##d"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"(\\P{N})\\1{2,}"</literal></expr>, <expr><literal type="string">".www."</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"(\\P{N})\\1{0,2}"</literal></expr>, <expr><literal type="string">"wwwww."</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"(\\P{N})\\1{1,2}ww"</literal></expr>, <expr><literal type="string">"wwww"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"(\\P{N})\\1{1,2}ww"</literal></expr>, <expr><literal type="string">"wwwww"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UCP</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"(\\P{N})\\1{2,}"</literal></expr>, <expr><literal type="string">".www."</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMUP</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(\xf0\x90\x90\x80)\\1"</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\xa8\xf0\x90\x90\xa8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\k&lt;A&gt;{1,3}(?&lt;A&gt;aa)(?&lt;A&gt;bb)"</literal></expr>, <expr><literal type="string">"aabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name> <operator>|</operator> <name>PCRE2_MATCH_UNSET_BACKREF</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\k&lt;A&gt;{1,3}(?&lt;A&gt;aa)(?&lt;A&gt;bb)"</literal></expr>, <expr><literal type="string">"aabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name> <operator>|</operator> <name>PCRE2_MATCH_UNSET_BACKREF</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\k&lt;A&gt;*(?&lt;A&gt;aa)(?&lt;A&gt;bb)"</literal></expr>, <expr><literal type="string">"aabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&lt;A&gt;aa)(?&lt;A&gt;bb)\\k&lt;A&gt;{0,3}aaaaaa"</literal></expr>, <expr><literal type="string">"aabbaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&lt;A&gt;aa)(?&lt;A&gt;bb)\\k&lt;A&gt;{2,5}bb"</literal></expr>, <expr><literal type="string">"aabbaaaabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?&lt;A&gt;aa)|(?&lt;A&gt;bb))\\k&lt;A&gt;{0,3}m"</literal></expr>, <expr><literal type="string">"aaaaaaaabbbbaabbbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\k&lt;A&gt;{1,3}?(?&lt;A&gt;aa)(?&lt;A&gt;bb)"</literal></expr>, <expr><literal type="string">"aabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name> <operator>|</operator> <name>PCRE2_MATCH_UNSET_BACKREF</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\k&lt;A&gt;{1,3}?(?&lt;A&gt;aa)(?&lt;A&gt;bb)"</literal></expr>, <expr><literal type="string">"aabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\k&lt;A&gt;*?(?&lt;A&gt;aa)(?&lt;A&gt;bb)"</literal></expr>, <expr><literal type="string">"aabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?&lt;A&gt;aa)|(?&lt;A&gt;bb))\\k&lt;A&gt;{0,3}?m"</literal></expr>, <expr><literal type="string">"aaaaaabbbbbbaabbbbbbbbbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?&lt;A&gt;aa)|(?&lt;A&gt;bb))\\k&lt;A&gt;*?m"</literal></expr>, <expr><literal type="string">"aaaaaabbbbbbaabbbbbbbbbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?&lt;A&gt;aa)|(?&lt;A&gt;bb))\\k&lt;A&gt;{2,3}?"</literal></expr>, <expr><literal type="string">"aaaabbbbaaaabbbbbbbbbb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?&lt;A&gt;AA)|(?&lt;A&gt;BB))\\k&lt;A&gt;{0,3}M"</literal></expr>, <expr><literal type="string">"aaaaaaaabbbbaabbbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?&lt;A&gt;AA)|(?&lt;A&gt;BB))\\k&lt;A&gt;{1,3}M"</literal></expr>, <expr><literal type="string">"aaaaaaaabbbbaabbbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?&lt;A&gt;AA)|(?&lt;A&gt;BB))\\k&lt;A&gt;{0,3}?M"</literal></expr>, <expr><literal type="string">"aaaaaabbbbbbaabbbbbbbbbbm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CMU</name> <operator>|</operator> <name>PCRE2_DUPNAMES</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?&lt;A&gt;AA)|(?&lt;A&gt;BB))\\k&lt;A&gt;{2,3}?"</literal></expr>, <expr><literal type="string">"aaaabbbbaaaabbbbbbbbbb"</literal></expr> }</block></expr>,

	<comment type="block">/* Assertions. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=xx|yy|zz)\\w{4}"</literal></expr>, <expr><literal type="string">"abczzdefg"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=((\\w+)b){3}|ab)"</literal></expr>, <expr><literal type="string">"dbbbb ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?!ab|bc|cd)[a-z]{2}"</literal></expr>, <expr><literal type="string">"Xabcdef"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&lt;=aaa|aa|a)a"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"(?&lt;=aaa|aa|a)a"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&lt;=aaa|aa|a)a"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="string">"(?&lt;=aaa|aa|a)a"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(\\d{2})(?!\\w+c|(((\\w?)m){2}n)+|\\1)"</literal></expr>, <expr><literal type="string">"x5656"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?=((\\d{2,6}\\w){2,}))\\w{5,20}K){2,}"</literal></expr>, <expr><literal type="string">"567v09708K12l00M00 567v09708K12l00M00K45K"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=(?:(?=\\S+a)\\w*(b)){3})\\w+\\d"</literal></expr>, <expr><literal type="string">"bba bbab nbbkba nbbkba0kl"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(?&gt;(b+))a(?=(..)))*?k"</literal></expr>, <expr><literal type="string">"acabbcabbaabacabaabbakk"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?(?=(a))a)+k)"</literal></expr>, <expr><literal type="string">"bbak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?(?=a)a)+k)"</literal></expr>, <expr><literal type="string">"bbak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?=(?&gt;(a))m)amk"</literal></expr>, <expr><literal type="string">"a k"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?!(?&gt;(a))m)amk"</literal></expr>, <expr><literal type="string">"a k"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?&gt;(?=(a))am)amk"</literal></expr>, <expr><literal type="string">"a k"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=(?&gt;a|(?=(?&gt;(b+))a|c)[a-c]+)*?m)[a-cm]+k"</literal></expr>, <expr><literal type="string">"aaam bbam baaambaam abbabba baaambaamk"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt; ?\?\\b(?(?=\\w{1,4}(a))m)\\w{0,8}bc){2,}?"</literal></expr>, <expr><literal type="string">"bca ssbc mabd ssbc mabc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?=ab)?[^n][^n])+m"</literal></expr>, <expr><literal type="string">"ababcdabcdcdabnababcdabcdcdabm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?=a(b))?[^n][^n])+m"</literal></expr>, <expr><literal type="string">"ababcdabcdcdabnababcdabcdcdabm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?=.(.))??\\1.)+m"</literal></expr>, <expr><literal type="string">"aabbbcbacccanaabbbcbacccam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:(?=.)??[a-c])+m"</literal></expr>, <expr><literal type="string">"abacdcbacacdcaccam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?!a)?(?!([^a]))?)+$"</literal></expr>, <expr><literal type="string">"acbab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?!a)?\?(?!([^a]))?\?)+$"</literal></expr>, <expr><literal type="string">"acbab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(?=(?C)\\B(?C`x`))b"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(?!(?C)\\B(?C`x`))bb|ab"</literal></expr>, <expr><literal type="string">"abb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(?=\\b|(?C)\\B(?C`x`))b"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(?!\\b|(?C)\\B(?C`x`))bb|ab"</literal></expr>, <expr><literal type="string">"abb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"c(?(?=(?C)\\B(?C`x`))ab|a)"</literal></expr>, <expr><literal type="string">"cab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"c(?(?!(?C)\\B(?C`x`))ab|a)"</literal></expr>, <expr><literal type="string">"cab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"c(?(?=\\b|(?C)\\B(?C`x`))ab|a)"</literal></expr>, <expr><literal type="string">"cab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"c(?(?!\\b|(?C)\\B(?C`x`))ab|a)"</literal></expr>, <expr><literal type="string">"cab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(?=)b"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a(?!)b"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,

	<comment type="block">/* Not empty, ACCEPT, FAIL */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a*"</literal></expr>, <expr><literal type="string">"bcx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a*"</literal></expr>, <expr><literal type="string">"bcaad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a*?"</literal></expr>, <expr><literal type="string">"bcaad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY_ATSTART</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a*"</literal></expr>, <expr><literal type="string">"bcaad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(*ACCEPT)b"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a*(*ACCEPT)b"</literal></expr>, <expr><literal type="string">"bcx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a*(*ACCEPT)b"</literal></expr>, <expr><literal type="string">"bcaad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a*?(*ACCEPT)b"</literal></expr>, <expr><literal type="string">"bcaad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?:z|a*(*ACCEPT)b)"</literal></expr>, <expr><literal type="string">"bcx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:z|a*(*ACCEPT)b)"</literal></expr>, <expr><literal type="string">"bcaad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:z|a*?(*ACCEPT)b)"</literal></expr>, <expr><literal type="string">"bcaad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY_ATSTART</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a*(*ACCEPT)b"</literal></expr>, <expr><literal type="string">"bcx"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY_ATSTART</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a*(*ACCEPT)b"</literal></expr>, <expr><literal type="string">""</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a(*ACCEPT)b))"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(*FAIL)a|a)"</literal></expr>, <expr><literal type="string">"aaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=ab(*ACCEPT)b)a"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=(?:x|ab(*ACCEPT)b))"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=(a(b(*ACCEPT)b)))a"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=a*(*ACCEPT))c"</literal></expr>, <expr><literal type="string">"c"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?=A)"</literal></expr>, <expr><literal type="string">"AB"</literal></expr> }</block></expr>,

	<comment type="block">/* Conditional blocks. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=(a))a|b)+k"</literal></expr>, <expr><literal type="string">"ababbalbbadabak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!(b))a|b)+k"</literal></expr>, <expr><literal type="string">"ababbalbbadabak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=a)a|b)+k"</literal></expr>, <expr><literal type="string">"ababbalbbadabak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!b)a|b)+k"</literal></expr>, <expr><literal type="string">"ababbalbbadabak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=(a))a*|b*)+k"</literal></expr>, <expr><literal type="string">"ababbalbbadabak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!(b))a*|b*)+k"</literal></expr>, <expr><literal type="string">"ababbalbbadabak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!(b))(?:aaaaaa|a)|(?:bbbbbb|b))+aaaak"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaa bbbbbbbbbbbbbbb aaaaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!b)(?:aaaaaa|a)|(?:bbbbbb|b))+aaaak"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaa bbbbbbbbbbbbbbb aaaaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_DIFF</name></expr>, <expr><literal type="string">"(?(?!(b))(?:aaaaaa|a)|(?:bbbbbb|b))+bbbbk"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaa bbbbbbbbbbbbbbb bbbbbbbk"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!b)(?:aaaaaa|a)|(?:bbbbbb|b))+bbbbk"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaa bbbbbbbbbbbbbbb bbbbbbbk"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=a)a*|b*)+k"</literal></expr>, <expr><literal type="string">"ababbalbbadabak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!b)a*|b*)+k"</literal></expr>, <expr><literal type="string">"ababbalbbadabak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=a)ab)"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?&lt;!b)c)"</literal></expr>, <expr><literal type="string">"b"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(DEFINE)a(b))"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(?(DEFINE)(?:b|(?:c?)+)*)"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=.[a-c])[k-l]|[A-D])"</literal></expr>, <expr><literal type="string">"kdB"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!.{0,4}[cd])(aa|bb)|(cc|dd))+"</literal></expr>, <expr><literal type="string">"aabbccddaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=[^#@]*@)(aaab|aa|aba)|(aba|aab)){3,}"</literal></expr>, <expr><literal type="string">"aaabaaaba#aaabaaaba#aaabaaaba@"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?=\\w{5})\\w(?(?=\\w*k)\\d|[a-f_])*\\w\\s)+"</literal></expr>, <expr><literal type="string">"mol m10kk m088k _f_a_ mbkkl"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(c)?\?(?(1)a|b)"</literal></expr>, <expr><literal type="string">"cdcaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(c)?\?(?(1)a|b)"</literal></expr>, <expr><literal type="string">"cbb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_DIFF</name></expr>, <expr><literal type="string">"(?(?=(a))(aaaa|a?))+aak"</literal></expr>, <expr><literal type="string">"aaaaab aaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=a)(aaaa|a?))+aak"</literal></expr>, <expr><literal type="string">"aaaaab aaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!(b))(aaaa|a?))+aak"</literal></expr>, <expr><literal type="string">"aaaaab aaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!b)(aaaa|a?))+aak"</literal></expr>, <expr><literal type="string">"aaaaab aaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_DIFF</name></expr>, <expr><literal type="string">"(?(?=(a))a*)+aak"</literal></expr>, <expr><literal type="string">"aaaaab aaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=a)a*)+aak"</literal></expr>, <expr><literal type="string">"aaaaab aaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!(b))a*)+aak"</literal></expr>, <expr><literal type="string">"aaaaab aaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!b)a*)+aak"</literal></expr>, <expr><literal type="string">"aaaaab aaaaak"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=(?=(?!(x))a)aa)aaa|(?(?=(?!y)bb)bbb))*k"</literal></expr>, <expr><literal type="string">"abaabbaaabbbaaabbb abaabbaaabbbaaabbbk"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?P&lt;Name&gt;a)?(?P&lt;Name2&gt;b)?(?(Name)c|d)*l"</literal></expr>, <expr><literal type="string">"bc ddd abccabccl"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?P&lt;Name&gt;a)?(?P&lt;Name2&gt;b)?(?(Name)c|d)+?dd"</literal></expr>, <expr><literal type="string">"bcabcacdb bdddd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?P&lt;Name&gt;a)?(?P&lt;Name2&gt;b)?(?(Name)c|d)+l"</literal></expr>, <expr><literal type="string">"ababccddabdbccd abcccl"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:a|aa)(?(1)aaa))x"</literal></expr>, <expr><literal type="string">"aax"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!)a|b)"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!)a)"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?(?!)a|b)"</literal></expr>, <expr><literal type="string">"ac"</literal></expr> }</block></expr>,

	<comment type="block">/* Set start of match. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:\\Ka)*aaaab"</literal></expr>, <expr><literal type="string">"aaaaaaaa aaaaaaabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;\\Ka\\Ka)*aaaab"</literal></expr>, <expr><literal type="string">"aaaaaaaa aaaaaaaaaabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a+\\K(?&lt;=\\Gaa)a"</literal></expr>, <expr><literal type="string">"aaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY</name></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a\\K(*ACCEPT)b"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_NOTEMPTY_ATSTART</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a\\K(*ACCEPT)b"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,

	<comment type="block">/* First line. */</comment>
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\p{Any}a"</literal></expr>, <expr><literal type="string">"bb\naaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\p{Any}a"</literal></expr>, <expr><literal type="string">"bb\r\naaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&lt;=a)"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"[^a][^b]"</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"\na"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"[abc]"</literal></expr>, <expr><literal type="string">"\na"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^a"</literal></expr>, <expr><literal type="string">"\na"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^(?&lt;=\n)"</literal></expr>, <expr><literal type="string">"\na"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\x80"</literal></expr>, <expr><literal type="string">"\xf0\x90\x90\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"#"</literal></expr>, <expr><literal type="string">"\xc2\x85#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"#"</literal></expr>, <expr><literal type="string">"\x85#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^#"</literal></expr>, <expr><literal type="string">"\xe2\x80\xa8#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\p{Any}"</literal></expr>, <expr><literal type="string">"\r\na"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"."</literal></expr>, <expr><literal type="string">"\r"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"\ra"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"ba"</literal></expr>, <expr><literal type="string">"bbb\r\nba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_PROPERTY</name></expr>, <expr><literal type="string">"\\p{Any}{4}|a"</literal></expr>, <expr><literal type="string">"\r\na"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>PCRE2_NEWLINE_CRLF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"."</literal></expr>, <expr><literal type="string">"\r\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_FIRSTLINE</name> <operator>|</operator> <name>PCRE2_DOTALL</name></expr>, <expr><name>PCRE2_NEWLINE_LF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"ab."</literal></expr>, <expr><literal type="string">"ab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"^[a-d0-9]"</literal></expr>, <expr><literal type="string">"\nxx\nd"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_FIRSTLINE</name> <operator>|</operator> <name>PCRE2_DOTALL</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"....a"</literal></expr>, <expr><literal type="string">"012\n0a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"[aC]"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,

	<comment type="block">/* Recurse. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a)(?1)"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a))(?1)"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(b|a)(?1)"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(b|(a))(?1)"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"((a)(b)(?:a*))(?1)"</literal></expr>, <expr><literal type="string">"aba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a)(b)(?:a*))(?1)"</literal></expr>, <expr><literal type="string">"abab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a+)c(?2))b(?1)"</literal></expr>, <expr><literal type="string">"aacaabaca"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?2)b|(a)){2}(?1)"</literal></expr>, <expr><literal type="string">"aabab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?1)(a)*+(?2)(b(?1))"</literal></expr>, <expr><literal type="string">"aababa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?1)(((a(*ACCEPT)))b)"</literal></expr>, <expr><literal type="string">"axaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?1)(?(DEFINE) (((ac(*ACCEPT)))b) )"</literal></expr>, <expr><literal type="string">"akaac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a+)b(?1)b\\1"</literal></expr>, <expr><literal type="string">"abaaabaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(DEFINE)(aa|a))(?1)ab"</literal></expr>, <expr><literal type="string">"aab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(DEFINE)(a\\Kb))(?1)+ababc"</literal></expr>, <expr><literal type="string">"abababxabababc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a\\Kb)(?1)+ababc"</literal></expr>, <expr><literal type="string">"abababxababababc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(a\\Kb)(?1)+ababc"</literal></expr>, <expr><literal type="string">"abababxababababxc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"b|&lt;(?R)*&gt;"</literal></expr>, <expr><literal type="string">"&lt;&lt;b&gt;"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a\\K){0}(?:(?1)b|ac)"</literal></expr>, <expr><literal type="string">"ac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(DEFINE)(a(?2)|b)(b(?1)|(a)))(?:(?1)|(?2))m"</literal></expr>, <expr><literal type="string">"ababababnababababaam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a)((?(R)a|b))(?2)"</literal></expr>, <expr><literal type="string">"aabbabaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a)((?(R2)a|b))(?2)"</literal></expr>, <expr><literal type="string">"aabbabaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a)((?(R1)a|b))(?2)"</literal></expr>, <expr><literal type="string">"ababba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(R0)aa|bb(?R))"</literal></expr>, <expr><literal type="string">"abba aabb bbaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?(R)(?:aaaa|a)|(?:(aaaa)|(a)))+)(?1)$"</literal></expr>, <expr><literal type="string">"aaaaaaaaaa aaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?P&lt;Name&gt;a(?(R&amp;Name)a|b))(?1)"</literal></expr>, <expr><literal type="string">"aab abb abaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?(R)a|(?1)){3})"</literal></expr>, <expr><literal type="string">"XaaaaaaaaaX"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:(?(R)a|(?1))){3})"</literal></expr>, <expr><literal type="string">"XaaaaaaaaaX"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?(R)a|(?1)){1,3})aaaaaa"</literal></expr>, <expr><literal type="string">"aaaaaaaaXaaaaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?(R)a|(?1)){1,3}?)M"</literal></expr>, <expr><literal type="string">"aaaM"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((.)(?:.|\\2(?1))){0}#(?1)#"</literal></expr>, <expr><literal type="string">"#aabbccdde# #aabbccddee#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((.)(?:\\2|\\2{4}b)){0}#(?:(?1))+#"</literal></expr>, <expr><literal type="string">"#aaaab# #aaaaab#"</literal></expr> }</block></expr>,

	<comment type="block">/* 16 bit specific tests. */</comment>
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\xc3\xa1"</literal></expr>, <expr><literal type="string">"\xc3\x81\xc3\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\xe1\xbd\xb8"</literal></expr>, <expr><literal type="string">"\xe1\xbf\xb8\xe1\xbd\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\xc3\xa1]"</literal></expr>, <expr><literal type="string">"\xc3\x81\xc3\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\xe1\xbd\xb8]"</literal></expr>, <expr><literal type="string">"\xe1\xbf\xb8\xe1\xbd\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[a-\xed\xb0\x80]"</literal></expr>, <expr><literal type="string">"A"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[a-\\x{dc00}]"</literal></expr>, <expr><literal type="string">"B"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_NOMATCH</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[b-\\x{dc00}]"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\xed\xa0\x80\\x{d800}\xed\xb0\x80\\x{dc00}"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xa0\x80\xed\xb0\x80\xed\xb0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\xed\xa0\x80\\x{d800}]{1,2}?[\xed\xb0\x80\\x{dc00}]{1,2}?#"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xa0\x80\xed\xb0\x80\xed\xb0\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\xed\xa0\x80\xed\xb0\x80#]{0,3}(?&lt;=\xed\xb0\x80.)"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80#\xed\xa0\x80##\xed\xb0\x80\xed\xa0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\xed\xa0\x80-\xed\xb3\xbf]"</literal></expr>, <expr><literal type="string">"\xed\x9f\xbf\xed\xa0\x83"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\xed\xa0\x80-\xed\xb3\xbf]"</literal></expr>, <expr><literal type="string">"\xed\xb4\x80\xed\xb3\xb0"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\\x{d800}-\\x{dcff}]"</literal></expr>, <expr><literal type="string">"\xed\x9f\xbf\xed\xa0\x83"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\\x{d800}-\\x{dcff}]"</literal></expr>, <expr><literal type="string">"\xed\xb4\x80\xed\xb3\xb0"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\xed\xa0\x80-\xef\xbf\xbf]+[\x1-\xed\xb0\x80]+#"</literal></expr>, <expr><literal type="string">"\xed\xa0\x85\xc3\x81\xed\xa0\x85\xef\xbf\xb0\xc2\x85\xed\xa9\x89#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[\xed\xa0\x80][\xed\xb0\x80]{2,}"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xb0\x80\xed\xa0\x80\xed\xb0\x80\xed\xb0\x80\xed\xb0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[^\xed\xb0\x80]{3,}?"</literal></expr>, <expr><literal type="string">"##\xed\xb0\x80#\xed\xb0\x80#\xc3\x89#\xed\xb0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"[^\\x{dc00}]{3,}?"</literal></expr>, <expr><literal type="string">"##\xed\xb0\x80#\xed\xb0\x80#\xc3\x89#\xed\xb0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">".\\B."</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xb0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\\D+(?:\\d+|.)\\S+(?:\\s+|.)\\W+(?:\\w+|.)\xed\xa0\x80\xed\xa0\x80"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xa0\x80\xed\xa0\x80\xed\xa0\x80\xed\xa0\x80\xed\xa0\x80\xed\xa0\x80\xed\xa0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\\d*\\s*\\w*\xed\xa0\x80\xed\xa0\x80"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xa0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"\\d*?\\D*?\\s*?\\S*?\\w*?\\W*?##"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xa0\x80\xed\xa0\x80\xed\xa0\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name> <operator>|</operator> <name>PCRE2_EXTENDED</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\xed\xa0\x80 \xed\xb0\x80 !"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xb0\x80!"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\xed\xa0\x80+#[^#]+\xed\xa0\x80"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80#a\xed\xa0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>CM</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"(\xed\xa0\x80+)#\\1"</literal></expr>, <expr><literal type="string">"\xed\xa0\x80\xed\xa0\x80#\xed\xa0\x80\xed\xa0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>PCRE2_NEWLINE_ANY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"^-"</literal></expr>, <expr><literal type="string">"a--\xe2\x80\xa8--"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><call><name>BSR</name><argument_list>(<argument><expr><name>PCRE2_BSR_UNICODE</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\\R"</literal></expr>, <expr><literal type="string">"ab\xe2\x80\xa8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\\v"</literal></expr>, <expr><literal type="string">"ab\xe2\x80\xa9"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\\h"</literal></expr>, <expr><literal type="string">"ab\xe1\xa0\x8e"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\\v+?\\V+?#"</literal></expr>, <expr><literal type="string">"\xe2\x80\xa9\xe2\x80\xa9\xef\xbf\xbf\xef\xbf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NO8</name> <operator>|</operator> <name>F_FORCECONV</name></expr>, <expr><literal type="string">"\\h+?\\H+?#"</literal></expr>, <expr><literal type="string">"\xe1\xa0\x8e\xe1\xa0\x8e\xef\xbf\xbf\xef\xbf\xbf#"</literal></expr> }</block></expr>,

	<comment type="block">/* Partial matching. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_SOFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ab"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_SOFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ab|a"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_HARD</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ab|a"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_SOFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\b#"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_SOFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&lt;=a)b"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_SOFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"abc|(?&lt;=xxa)bc"</literal></expr>, <expr><literal type="string">"xxab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_SOFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a\\B"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_HARD</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a\\b"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,

	<comment type="block">/* (*MARK) verb. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(*MARK:aa)a"</literal></expr>, <expr><literal type="string">"ababaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a(*:aa)a"</literal></expr>, <expr><literal type="string">"abab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(*:aa)(b(*:bb)b|bc)"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a(*:1)x|b(*:2)y"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(*:aa))b|ac"</literal></expr>, <expr><literal type="string">"ac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(DEFINE)(a(*:aa)))(?1)"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?(DEFINE)((a)(*:aa)))(?1)b"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(DEFINE)(a(*:aa)))a(?1)b|aac"</literal></expr>, <expr><literal type="string">"aac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(*:aa)){0}(?:b(?1)b|c)+c"</literal></expr>, <expr><literal type="string">"babbab cc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(*:aa)){0}(?:b(?1)b)+"</literal></expr>, <expr><literal type="string">"babba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(a(*:aa)){0}(?:b(?1)b)+"</literal></expr>, <expr><literal type="string">"ba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a\\K(*:aa)){0}(?:b(?1)b|c)+c"</literal></expr>, <expr><literal type="string">"babbab cc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a\\K(*:aa)){0}(?:b(?1)b)+"</literal></expr>, <expr><literal type="string">"babba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(a\\K(*:aa)){0}(?:b(?1)b)+"</literal></expr>, <expr><literal type="string">"ba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*:mark)m"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,

	<comment type="block">/* (*COMMIT) verb. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a(*COMMIT)b"</literal></expr>, <expr><literal type="string">"ac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"aa(*COMMIT)b"</literal></expr>, <expr><literal type="string">"xaxaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a(*COMMIT)(*:msg)b|ac"</literal></expr>, <expr><literal type="string">"ac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(a(*COMMIT)b)++"</literal></expr>, <expr><literal type="string">"abac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"((a)(*COMMIT)b)++"</literal></expr>, <expr><literal type="string">"abac"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?=a(*COMMIT)b)ab|ad"</literal></expr>, <expr><literal type="string">"ad"</literal></expr> }</block></expr>,

	<comment type="block">/* (*PRUNE) verb. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"aa\\K(*PRUNE)b"</literal></expr>, <expr><literal type="string">"aaab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"aa(*PRUNE:bb)b|a"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a)(a)(*PRUNE)b|(a)"</literal></expr>, <expr><literal type="string">"aa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a)(a)(a)(a)(a)(a)(a)(a)(*PRUNE)b|(a)"</literal></expr>, <expr><literal type="string">"aaaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_SOFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(*PRUNE)a|"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><name>PCRE2_PARTIAL_SOFT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(*PRUNE)a|m"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?=a(*PRUNE)b)ab|ad"</literal></expr>, <expr><literal type="string">"ad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(*COMMIT)(*PRUNE)d|bc"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=a(*COMMIT)b)a(*PRUNE)c|bc"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(?=a(*COMMIT)b)a(*PRUNE)c|bc"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=(a)(*COMMIT)b)a(*PRUNE)c|bc"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(?=(a)(*COMMIT)b)a(*PRUNE)c|bc"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(*COMMIT)b){0}a(?1)(*PRUNE)c|bc"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(a(*COMMIT)b){0}a(*COMMIT)(?1)(*PRUNE)c|bc"</literal></expr>, <expr><literal type="string">"abc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(*COMMIT)b)++(*PRUNE)d|c"</literal></expr>, <expr><literal type="string">"ababc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(a(*COMMIT)b)++(*PRUNE)d|c"</literal></expr>, <expr><literal type="string">"ababc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a)(*COMMIT)b)++(*PRUNE)d|c"</literal></expr>, <expr><literal type="string">"ababc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)((a)(*COMMIT)b)++(*PRUNE)d|c"</literal></expr>, <expr><literal type="string">"ababc"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(*COMMIT)b)*abab(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"ababab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(?&gt;a(*COMMIT)b)*abab(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"ababab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(*COMMIT)b)+abab(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"ababab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(?&gt;a(*COMMIT)b)+abab(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"ababab"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(*COMMIT)b)?ab(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"aba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(?&gt;a(*COMMIT)b)?ab(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"aba"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(*COMMIT)b)*?n(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"abababn"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(?&gt;a(*COMMIT)b)*?n(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"abababn"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(*COMMIT)b)+?n(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"abababn"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(?&gt;a(*COMMIT)b)+?n(*PRUNE)d|ba"</literal></expr>, <expr><literal type="string">"abababn"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?&gt;a(*COMMIT)b)??n(*PRUNE)d|bn"</literal></expr>, <expr><literal type="string">"abn"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(*COMMIT)(?&gt;a(*COMMIT)b)??n(*PRUNE)d|bn"</literal></expr>, <expr><literal type="string">"abn"</literal></expr> }</block></expr>,

	<comment type="block">/* (*SKIP) verb. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?=a(*SKIP)b)ab|ad"</literal></expr>, <expr><literal type="string">"ad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(\\w+(*SKIP)#)"</literal></expr>, <expr><literal type="string">"abcd,xyz#,"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\\w+(*SKIP)#|mm"</literal></expr>, <expr><literal type="string">"abcd,xyz#,"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"b+(?&lt;=(*SKIP)#c)|b+"</literal></expr>, <expr><literal type="string">"#bbb"</literal></expr> }</block></expr>,

	<comment type="block">/* (*THEN) verb. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:a(*THEN)|aab)(*THEN)c|a+)+m"</literal></expr>, <expr><literal type="string">"aabcaabcaabcaabcnacm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"((?:a(*THEN)|aab)(*THEN)c|a+)+m"</literal></expr>, <expr><literal type="string">"aabcm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:a(*THEN)|aab)c|a+)+m"</literal></expr>, <expr><literal type="string">"aabcaabcnmaabcaabcm"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:a|aab)(*THEN)c|a+)+m"</literal></expr>, <expr><literal type="string">"aam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((?:a(*COMMIT)|aab)(*THEN)c|a+)+m"</literal></expr>, <expr><literal type="string">"aam"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?=a(*THEN)b)ab|ad)"</literal></expr>, <expr><literal type="string">"ad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?(?!a(*THEN)b)ad|add)"</literal></expr>, <expr><literal type="string">"add"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?(?=a)a(*THEN)b|ad)"</literal></expr>, <expr><literal type="string">"ad"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?!(?(?=a)ab|b(*THEN)d))bn|bnn"</literal></expr>, <expr><literal type="string">"bnn"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?=(*THEN: ))* "</literal></expr>, <expr><literal type="string">" "</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"a(*THEN)(?R) |"</literal></expr>, <expr><literal type="string">"a"</literal></expr> }</block></expr>,

	<comment type="block">/* Recurse and control verbs. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(*ACCEPT)b){0}a(?1)b"</literal></expr>, <expr><literal type="string">"aacaabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a)\\2(*ACCEPT)b){0}a(?1)b"</literal></expr>, <expr><literal type="string">"aaacaaabb"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((ab|a(*ACCEPT)x)+|ababababax){0}_(?1)_"</literal></expr>, <expr><literal type="string">"_ababababax_ _ababababa_"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((.)(?:A(*ACCEPT)|(?1)\\2)){0}_(?1)_"</literal></expr>, <expr><literal type="string">"_bcdaAdcb_bcdaAdcb_"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((*MARK:m)(?:a|a(*COMMIT)b|aa)){0}_(?1)_"</literal></expr>, <expr><literal type="string">"_ab_"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((*MARK:m)(?:a|a(*COMMIT)b|aa)){0}_(?1)_|(_aa_)"</literal></expr>, <expr><literal type="string">"_aa_"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(a(*COMMIT)(?:b|bb)|c(*ACCEPT)d|dd){0}_(?1)+_"</literal></expr>, <expr><literal type="string">"_ax_ _cd_ _abbb_ _abcd_ _abbcdd_"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((.)(?:.|(*COMMIT)\\2{3}(*ACCEPT).*|.*)){0}_(?1){0,4}_"</literal></expr>, <expr><literal type="string">"_aaaabbbbccccddd_ _aaaabbbbccccdddd_"</literal></expr> }</block></expr>,

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
	<comment type="block">/* Script runs and iterations. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"!(*sr:\\w\\w|\\w\\w\\w)*#"</literal></expr>, <expr><literal type="string">"!abcdefghijklmno!abcdefghijklmno!abcdef#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"!(*sr:\\w\\w|\\w\\w\\w)+#"</literal></expr>, <expr><literal type="string">"!abcdefghijklmno!abcdefghijklmno!abcdef#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"!(*sr:\\w\\w|\\w\\w\\w)*?#"</literal></expr>, <expr><literal type="string">"!abcdefghijklmno!abcdefghijklmno!abcdef#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"!(*sr:\\w\\w|\\w\\w\\w)+?#"</literal></expr>, <expr><literal type="string">"!abcdefghijklmno!abcdefghijklmno!abcdef#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"!(*sr:\\w\\w|\\w\\w\\w)*+#"</literal></expr>, <expr><literal type="string">"!abcdefghijklmno!abcdefghijklmno!abcdef#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"!(*sr:\\w\\w|\\w\\w\\w)++#"</literal></expr>, <expr><literal type="string">"!abcdefghijklmno!abcdefghijklmno!abcdef#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"!(*sr:\\w\\w|\\w\\w\\w)?#"</literal></expr>, <expr><literal type="string">"!ab!abc!ab!ab#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"!(*sr:\\w\\w|\\w\\w\\w)??#"</literal></expr>, <expr><literal type="string">"!ab!abc!ab!ab#"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Deep recursion. */</comment>
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((((?:(?:(?:\\w)+)?)*|(?&gt;\\w)+?)+|(?&gt;\\w)?\?)*)?\\s"</literal></expr>, <expr><literal type="string">"aaaaa+ "</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"(?:((?:(?:(?:\\w*?)+)??|(?&gt;\\w)?|\\w*+)*)+)+?\\s"</literal></expr>, <expr><literal type="string">"aa+ "</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>MU</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"((a?)+)+b"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaa b"</literal></expr> }</block></expr>,

	<comment type="block">/* Deep recursion: Stack limit reached. */</comment>
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?a?aaaaaaaaaaaaaaaaaaaaaaa"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaaaaaaaaaaa"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?:a+)+b"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaaaaaaaaaaaa b"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?:a+?)+?b"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaaaaaaaaaaaa b"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?:a*)*b"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaaaaaaaaaaaa b"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>M</name></expr>, <expr><name>A</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal> <operator>|</operator> <name>F_NOMATCH</name></expr>, <expr><literal type="string">"(?:a*?)*?b"</literal></expr>, <expr><literal type="string">"aaaaaaaaaaaaaaaaaaaaaaaa b"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>pcre2_jit_stack_8</name><modifier>*</modifier></type> <name>callback8</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>pcre2_jit_stack_8</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>pcre2_jit_stack_16</name><modifier>*</modifier></type> <name>callback16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>pcre2_jit_stack_16</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>pcre2_jit_stack_32</name><modifier>*</modifier></type> <name>callback32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>pcre2_jit_stack_32</name> <operator>*</operator><operator>)</operator><name>arg</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pcre2_jit_stack_8</name> <modifier>*</modifier></type><name>stack8</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>pcre2_jit_stack_8</name> <modifier>*</modifier></type><name>getstack8</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack8</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stack8</name> <operator>=</operator> <call><name>pcre2_jit_stack_create_8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>stack8</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setstack8</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context_8</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mcontext</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>stack8</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pcre2_jit_stack_free_8</name><argument_list>(<argument><expr><name>stack8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>stack8</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_jit_stack_assign_8</name><argument_list>(<argument><expr><name>mcontext</name></expr></argument>, <argument><expr><name>callback8</name></expr></argument>, <argument><expr><call><name>getstack8</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_PCRE2_8 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pcre2_jit_stack_16</name> <modifier>*</modifier></type><name>stack16</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>pcre2_jit_stack_16</name> <modifier>*</modifier></type><name>getstack16</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack16</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stack16</name> <operator>=</operator> <call><name>pcre2_jit_stack_create_16</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>stack16</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setstack16</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context_16</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mcontext</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>stack16</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pcre2_jit_stack_free_16</name><argument_list>(<argument><expr><name>stack16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>stack16</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_jit_stack_assign_16</name><argument_list>(<argument><expr><name>mcontext</name></expr></argument>, <argument><expr><name>callback16</name></expr></argument>, <argument><expr><call><name>getstack16</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_PCRE2_16 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pcre2_jit_stack_32</name> <modifier>*</modifier></type><name>stack32</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>pcre2_jit_stack_32</name> <modifier>*</modifier></type><name>getstack32</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stack32</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>stack32</name> <operator>=</operator> <call><name>pcre2_jit_stack_create_32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>stack32</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setstack32</name><parameter_list>(<parameter><decl><type><name>pcre2_match_context_32</name> <modifier>*</modifier></type><name>mcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mcontext</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>stack32</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pcre2_jit_stack_free_32</name><argument_list>(<argument><expr><name>stack32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>stack32</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_jit_stack_assign_32</name><argument_list>(<argument><expr><name>mcontext</name></expr></argument>, <argument><expr><name>callback32</name></expr></argument>, <argument><expr><call><name>getstack32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_PCRE2_32 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_utf8_to_utf16</name><parameter_list>(<parameter><decl><type><name>PCRE2_SPTR8</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>PCRE2_UCHAR16</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offsetmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PCRE2_SPTR8</name></type> <name>iptr</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_UCHAR16</name> <modifier>*</modifier></type><name>optr</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>iptr</name> <operator>&amp;&amp;</operator> <name>max_length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>offsetmap</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>offsetmap</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iptr</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>iptr</name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>iptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>iptr</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>iptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>iptr</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>iptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>iptr</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>iptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>max_length</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>max_length</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>optr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>optr</name> <operator>-</operator> <name>output</name><operator>)</operator></expr>;</return>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">0x10000</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator> <operator>=</operator> <literal type="number">0xd800</literal> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator> <operator>=</operator> <literal type="number">0xdc00</literal> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>max_length</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>offsetmap</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>offsetmap</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>offsetmap</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>offsetmap</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iptr</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>optr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>optr</name> <operator>-</operator> <name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_char8_to_char16</name><parameter_list>(<parameter><decl><type><name>PCRE2_SPTR8</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>PCRE2_UCHAR16</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PCRE2_SPTR8</name></type> <name>iptr</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_UCHAR16</name> <modifier>*</modifier></type><name>optr</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>iptr</name> <operator>&amp;&amp;</operator> <name>max_length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>iptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_length</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>optr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>optr</name> <operator>-</operator> <name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGTEST_MAX_LENGTH16</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>regtest_buf16</name><index>[<expr><name>REGTEST_MAX_LENGTH16</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>regtest_offsetmap16</name><index>[<expr><name>REGTEST_MAX_LENGTH16</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_PCRE2_16 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_utf8_to_utf32</name><parameter_list>(<parameter><decl><type><name>PCRE2_SPTR8</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>PCRE2_UCHAR32</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>offsetmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PCRE2_SPTR8</name></type> <name>iptr</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_UCHAR32</name> <modifier>*</modifier></type><name>optr</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>iptr</name> <operator>&amp;&amp;</operator> <name>max_length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>offsetmap</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>offsetmap</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iptr</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>iptr</name> <operator>&lt;</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>iptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>iptr</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>iptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>iptr</name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>iptr</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>iptr</name> <operator>&amp;</operator> <literal type="number">0x08</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>iptr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>iptr</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_length</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>offsetmap</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>offsetmap</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iptr</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>input</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>optr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>optr</name> <operator>-</operator> <name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>copy_char8_to_char32</name><parameter_list>(<parameter><decl><type><name>PCRE2_SPTR8</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>PCRE2_UCHAR32</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PCRE2_SPTR8</name></type> <name>iptr</name> <init>= <expr><name>input</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_UCHAR32</name> <modifier>*</modifier></type><name>optr</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>iptr</name> <operator>&amp;&amp;</operator> <name>max_length</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>optr</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>iptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_length</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>optr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>optr</name> <operator>-</operator> <name>output</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGTEST_MAX_LENGTH32</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>regtest_buf32</name><index>[<expr><name>REGTEST_MAX_LENGTH32</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>regtest_offsetmap32</name><index>[<expr><name>REGTEST_MAX_LENGTH32</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_PCRE2_32 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_ascii</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&gt;</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OVECTOR_SIZE</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>regression_test_case</name></name> <modifier>*</modifier></type><name>current</name> <init>= <expr><name>regression_test_cases</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name></type> <name>err_offs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>is_successful</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>is_ascii</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>successful</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>successful_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>jit_compile_mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>utf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>disabled_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
	<decl_stmt><decl><type><name>pcre2_code_8</name> <modifier>*</modifier></type><name>re8</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_compile_context_8</name> <modifier>*</modifier></type><name>ccontext8</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_8</name> <modifier>*</modifier></type><name>mdata8_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_8</name> <modifier>*</modifier></type><name>mdata8_2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_context_8</name> <modifier>*</modifier></type><name>mcontext8</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector8_1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector8_2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>return_value8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
	<decl_stmt><decl><type><name>pcre2_code_16</name> <modifier>*</modifier></type><name>re16</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_compile_context_16</name> <modifier>*</modifier></type><name>ccontext16</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_16</name> <modifier>*</modifier></type><name>mdata16_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_16</name> <modifier>*</modifier></type><name>mdata16_2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_context_16</name> <modifier>*</modifier></type><name>mcontext16</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector16_1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector16_2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>return_value16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>length16</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
	<decl_stmt><decl><type><name>pcre2_code_32</name> <modifier>*</modifier></type><name>re32</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_compile_context_32</name> <modifier>*</modifier></type><name>ccontext32</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_32</name> <modifier>*</modifier></type><name>mdata32_1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_32</name> <modifier>*</modifier></type><name>mdata32_2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_context_32</name> <modifier>*</modifier></type><name>mcontext32</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector32_1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector32_2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>return_value32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>length32</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_8</name></expr></cpp:if>
	<decl_stmt><decl><type><name>PCRE2_UCHAR8</name></type> <name><name>cpu_info</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_16</name></expr></cpp:elif>
	<decl_stmt><decl><type><name>PCRE2_UCHAR16</name></type> <name><name>cpu_info</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:elif>
	<decl_stmt><decl><type><name>PCRE2_UCHAR32</name></type> <name><name>cpu_info</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_UNICODE</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_PCRE2_8</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_PCRE2_16</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_PCRE2_32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type> <name>return_value</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* This test compares the behaviour of interpreter and JIT. Although disabling
	utf or ucp may make tests fail, if the pcre_exec result is the SAME, it is
	still considered successful from pcre_jit_test point of view. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_8</name></expr></cpp:if>
	<expr_stmt><expr><call><name>pcre2_config_8</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_JITTARGET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_16</name></expr></cpp:elif>
	<expr_stmt><expr><call><name>pcre2_config_16</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_JITTARGET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:elif>
	<expr_stmt><expr><call><name>pcre2_config_32</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_JITTARGET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Running JIT regression tests\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  target CPU of SLJIT compiler: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>cpu_info</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name><name>cpu_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_8</name></expr></cpp:if>
	<expr_stmt><expr><call><name>pcre2_config_8</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_UNICODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_16</name></expr></cpp:elif>
	<expr_stmt><expr><call><name>pcre2_config_16</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_UNICODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:elif>
	<expr_stmt><expr><call><name>pcre2_config_32</name><argument_list>(<argument><expr><name>PCRE2_CONFIG_UNICODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>utf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>utf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>disabled_options</name> <operator>|=</operator> <name>PCRE2_UTF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  in  8 bit mode with UTF-8  %s:\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>utf</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  in 16 bit mode with UTF-16 %s:\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>utf</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  in 32 bit mode with UTF-32 %s:\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>utf</name></expr> ?</condition><then> <expr><literal type="string">"enabled"</literal></expr> </then><else>: <expr><literal type="string">"disabled"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<while>while <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr>)</condition> <block>{<block_content>
		<comment type="block">/* printf("\nPattern: %s :\n", current-&gt;pattern); */</comment>
		<expr_stmt><expr><name>total</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_ascii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_PROPERTY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>is_ascii</name> <operator>=</operator> <call><name>check_ascii</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check_ascii</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name> <operator>&amp;</operator> <name>PCRE2_PARTIAL_SOFT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>jit_compile_mode</name> <operator>=</operator> <name>PCRE2_JIT_PARTIAL_SOFT</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name> <operator>&amp;</operator> <name>PCRE2_PARTIAL_HARD</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>jit_compile_mode</name> <operator>=</operator> <name>PCRE2_JIT_PARTIAL_HARD</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>jit_compile_mode</name> <operator>=</operator> <name>PCRE2_JIT_COMPLETE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>error</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
		<expr_stmt><expr><name>re8</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ccontext8</name> <operator>=</operator> <call><name>pcre2_compile_context_create_8</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ccontext8</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>GET_NEWLINE</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pcre2_set_newline_8</name><argument_list>(<argument><expr><name>ccontext8</name></expr></argument>, <argument><expr><call><name>GET_NEWLINE</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GET_BSR</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pcre2_set_bsr_8</name><argument_list>(<argument><expr><name>ccontext8</name></expr></argument>, <argument><expr><call><name>GET_BSR</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO8</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>re8</name> <operator>=</operator> <call><name>pcre2_compile_8</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>PCRE2_ZERO_TERMINATED</name></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name> <operator>&amp;</operator> <operator>~</operator><name>disabled_options</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_offs</name></expr></argument>, <argument><expr><name>ccontext8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>re8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>utf</name> <operator>||</operator> <name>is_ascii</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 bit: Cannot compile pattern \"%s\": %d\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>pcre2_compile_context_free_8</name><argument_list>(<argument><expr><name>ccontext8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 bit: Cannot allocate compile context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_UTF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_FORCECONV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>convert_utf8_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>regtest_buf16</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>REGTEST_MAX_LENGTH16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>copy_char8_to_char16</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>regtest_buf16</name></expr></argument>, <argument><expr><name>REGTEST_MAX_LENGTH16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>re16</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ccontext16</name> <operator>=</operator> <call><name>pcre2_compile_context_create_16</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ccontext16</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>GET_NEWLINE</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pcre2_set_newline_16</name><argument_list>(<argument><expr><name>ccontext16</name></expr></argument>, <argument><expr><call><name>GET_NEWLINE</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GET_BSR</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pcre2_set_bsr_16</name><argument_list>(<argument><expr><name>ccontext16</name></expr></argument>, <argument><expr><call><name>GET_BSR</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO16</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>re16</name> <operator>=</operator> <call><name>pcre2_compile_16</name><argument_list>(<argument><expr><name>regtest_buf16</name></expr></argument>, <argument><expr><name>PCRE2_ZERO_TERMINATED</name></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name> <operator>&amp;</operator> <operator>~</operator><name>disabled_options</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_offs</name></expr></argument>, <argument><expr><name>ccontext16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>re16</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>utf</name> <operator>||</operator> <name>is_ascii</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 bit: Cannot compile pattern \"%s\": %d\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>pcre2_compile_context_free_16</name><argument_list>(<argument><expr><name>ccontext16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 bit: Cannot allocate compile context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_UTF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_FORCECONV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>convert_utf8_to_utf32</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>regtest_buf32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>REGTEST_MAX_LENGTH32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>copy_char8_to_char32</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>regtest_buf32</name></expr></argument>, <argument><expr><name>REGTEST_MAX_LENGTH32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>re32</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ccontext32</name> <operator>=</operator> <call><name>pcre2_compile_context_create_32</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ccontext32</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>GET_NEWLINE</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pcre2_set_newline_32</name><argument_list>(<argument><expr><name>ccontext32</name></expr></argument>, <argument><expr><call><name>GET_NEWLINE</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>GET_BSR</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pcre2_set_bsr_32</name><argument_list>(<argument><expr><name>ccontext32</name></expr></argument>, <argument><expr><call><name>GET_BSR</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>newline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO32</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>re32</name> <operator>=</operator> <call><name>pcre2_compile_32</name><argument_list>(<argument><expr><name>regtest_buf32</name></expr></argument>, <argument><expr><name>PCRE2_ZERO_TERMINATED</name></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name> <operator>&amp;</operator> <operator>~</operator><name>disabled_options</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err_offs</name></expr></argument>, <argument><expr><name>ccontext32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>re32</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>utf</name> <operator>||</operator> <name>is_ascii</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n32 bit: Cannot compile pattern \"%s\": %d\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>pcre2_compile_context_free_32</name><argument_list>(<argument><expr><name>ccontext32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n32 bit: Cannot allocate compile context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>counter</name> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
			<expr_stmt><expr><call><name>setstack8</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
			<expr_stmt><expr><call><name>setstack16</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
			<expr_stmt><expr><call><name>setstack32</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
		<expr_stmt><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>return_value8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mdata8_1</name> <operator>=</operator> <call><name>pcre2_match_data_create_8</name><argument_list>(<argument><expr><name>OVECTOR_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mdata8_2</name> <operator>=</operator> <call><name>pcre2_match_data_create_8</name><argument_list>(<argument><expr><name>OVECTOR_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcontext8</name> <operator>=</operator> <call><name>pcre2_match_context_create_8</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mdata8_1</name> <operator>||</operator> <operator>!</operator><name>mdata8_2</name> <operator>||</operator> <operator>!</operator><name>mcontext8</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 bit: Cannot allocate match data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_data_free_8</name><argument_list>(<argument><expr><name>mdata8_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_data_free_8</name><argument_list>(<argument><expr><name>mdata8_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_context_free_8</name><argument_list>(<argument><expr><name>mcontext8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_code_free_8</name><argument_list>(<argument><expr><name>re8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>re8</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>ovector8_1</name> <operator>=</operator> <call><name>pcre2_get_ovector_pointer_8</name><argument_list>(<argument><expr><name>mdata8_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ovector8_2</name> <operator>=</operator> <call><name>pcre2_get_ovector_pointer_8</name><argument_list>(<argument><expr><name>mdata8_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OVECTOR_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OVECTOR_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ovector8_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>pcre2_set_match_limit_8</name><argument_list>(<argument><expr><name>mcontext8</name></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>re8</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>return_value8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_match_8</name><argument_list>(<argument><expr><name>re8</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata8_2</name></expr></argument>, <argument><expr><name>mcontext8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>pcre2_jit_compile_8</name><argument_list>(<argument><expr><name>re8</name></expr></argument>, <argument><expr><name>jit_compile_mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 bit: JIT compiler does not support \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>counter</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>setstack8</name><argument_list>(<argument><expr><name>mcontext8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_match_8</name><argument_list>(<argument><expr><name>re8</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata8_1</name></expr></argument>, <argument><expr><name>mcontext8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>pcre2_jit_stack_assign_8</name><argument_list>(<argument><expr><name>mcontext8</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>getstack8</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_jit_match_8</name><argument_list>(<argument><expr><name>re8</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata8_1</name></expr></argument>, <argument><expr><name>mcontext8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
		<expr_stmt><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>return_value16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mdata16_1</name> <operator>=</operator> <call><name>pcre2_match_data_create_16</name><argument_list>(<argument><expr><name>OVECTOR_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mdata16_2</name> <operator>=</operator> <call><name>pcre2_match_data_create_16</name><argument_list>(<argument><expr><name>OVECTOR_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcontext16</name> <operator>=</operator> <call><name>pcre2_match_context_create_16</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mdata16_1</name> <operator>||</operator> <operator>!</operator><name>mdata16_2</name> <operator>||</operator> <operator>!</operator><name>mcontext16</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 bit: Cannot allocate match data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_data_free_16</name><argument_list>(<argument><expr><name>mdata16_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_data_free_16</name><argument_list>(<argument><expr><name>mdata16_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_context_free_16</name><argument_list>(<argument><expr><name>mcontext16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_code_free_16</name><argument_list>(<argument><expr><name>re16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>re16</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>ovector16_1</name> <operator>=</operator> <call><name>pcre2_get_ovector_pointer_16</name><argument_list>(<argument><expr><name>mdata16_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ovector16_2</name> <operator>=</operator> <call><name>pcre2_get_ovector_pointer_16</name><argument_list>(<argument><expr><name>mdata16_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OVECTOR_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OVECTOR_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>pcre2_set_match_limit_16</name><argument_list>(<argument><expr><name>mcontext16</name></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>re16</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_UTF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_FORCECONV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>length16</name> <operator>=</operator> <call><name>convert_utf8_to_utf16</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>regtest_buf16</name></expr></argument>, <argument><expr><name>regtest_offsetmap16</name></expr></argument>, <argument><expr><name>REGTEST_MAX_LENGTH16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>length16</name> <operator>=</operator> <call><name>copy_char8_to_char16</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>regtest_buf16</name></expr></argument>, <argument><expr><name>REGTEST_MAX_LENGTH16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name><name>return_value16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_match_16</name><argument_list>(<argument><expr><name>re16</name></expr></argument>, <argument><expr><name>regtest_buf16</name></expr></argument>, <argument><expr><name>length16</name></expr></argument>,
				<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata16_2</name></expr></argument>, <argument><expr><name>mcontext16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>pcre2_jit_compile_16</name><argument_list>(<argument><expr><name>re16</name></expr></argument>, <argument><expr><name>jit_compile_mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 bit: JIT compiler does not support \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>counter</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>setstack16</name><argument_list>(<argument><expr><name>mcontext16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_match_16</name><argument_list>(<argument><expr><name>re16</name></expr></argument>, <argument><expr><name>regtest_buf16</name></expr></argument>, <argument><expr><name>length16</name></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata16_1</name></expr></argument>, <argument><expr><name>mcontext16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>pcre2_jit_stack_assign_16</name><argument_list>(<argument><expr><name>mcontext16</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>getstack16</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_jit_match_16</name><argument_list>(<argument><expr><name>re16</name></expr></argument>, <argument><expr><name>regtest_buf16</name></expr></argument>, <argument><expr><name>length16</name></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata16_1</name></expr></argument>, <argument><expr><name>mcontext16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
		<expr_stmt><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>return_value32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mdata32_1</name> <operator>=</operator> <call><name>pcre2_match_data_create_32</name><argument_list>(<argument><expr><name>OVECTOR_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mdata32_2</name> <operator>=</operator> <call><name>pcre2_match_data_create_32</name><argument_list>(<argument><expr><name>OVECTOR_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mcontext32</name> <operator>=</operator> <call><name>pcre2_match_context_create_32</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mdata32_1</name> <operator>||</operator> <operator>!</operator><name>mdata32_2</name> <operator>||</operator> <operator>!</operator><name>mcontext32</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n32 bit: Cannot allocate match data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_data_free_32</name><argument_list>(<argument><expr><name>mdata32_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_data_free_32</name><argument_list>(<argument><expr><name>mdata32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_match_context_free_32</name><argument_list>(<argument><expr><name>mcontext32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pcre2_code_free_32</name><argument_list>(<argument><expr><name>re32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>re32</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>ovector32_1</name> <operator>=</operator> <call><name>pcre2_get_ovector_pointer_32</name><argument_list>(<argument><expr><name>mdata32_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ovector32_2</name> <operator>=</operator> <call><name>pcre2_get_ovector_pointer_32</name><argument_list>(<argument><expr><name>mdata32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OVECTOR_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>OVECTOR_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>pcre2_set_match_limit_32</name><argument_list>(<argument><expr><name>mcontext32</name></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>re32</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_UTF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_FORCECONV</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>length32</name> <operator>=</operator> <call><name>convert_utf8_to_utf32</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>regtest_buf32</name></expr></argument>, <argument><expr><name>regtest_offsetmap32</name></expr></argument>, <argument><expr><name>REGTEST_MAX_LENGTH32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>length32</name> <operator>=</operator> <call><name>copy_char8_to_char32</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_SPTR8</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>regtest_buf32</name></expr></argument>, <argument><expr><name>REGTEST_MAX_LENGTH32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name><name>return_value32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_match_32</name><argument_list>(<argument><expr><name>re32</name></expr></argument>, <argument><expr><name>regtest_buf32</name></expr></argument>, <argument><expr><name>length32</name></expr></argument>,
				<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata32_2</name></expr></argument>, <argument><expr><name>mcontext32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>pcre2_jit_compile_32</name><argument_list>(<argument><expr><name>re32</name></expr></argument>, <argument><expr><name>jit_compile_mode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n32 bit: JIT compiler does not support \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><name>counter</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>setstack32</name><argument_list>(<argument><expr><name>mcontext32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_match_32</name><argument_list>(<argument><expr><name>re32</name></expr></argument>, <argument><expr><name>regtest_buf32</name></expr></argument>, <argument><expr><name>length32</name></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata32_1</name></expr></argument>, <argument><expr><name>mcontext32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>pcre2_jit_stack_assign_32</name><argument_list>(<argument><expr><name>mcontext32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>getstack32</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pcre2_jit_match_32</name><argument_list>(<argument><expr><name>re32</name></expr></argument>, <argument><expr><name>regtest_buf32</name></expr></argument>, <argument><expr><name>length32</name></expr></argument>,
					<argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>OFFSET_MASK</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_options</name></name></expr></argument>, <argument><expr><name>mdata32_1</name></expr></argument>, <argument><expr><name>mcontext32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* printf("[%d-%d-%d|%d-%d|%d-%d|%d-%d]%s",
			return_value8[0], return_value16[0], return_value32[0],
			(int)ovector8_1[0], (int)ovector8_1[1],
			(int)ovector16_1[0], (int)ovector16_1[1],
			(int)ovector32_1[0], (int)ovector32_1[1],
			(current-&gt;compile_options &amp; PCRE2_CASELESS) ? "C" : ""); */</comment>

		<comment type="block">/* If F_DIFF is set, just run the test, but do not compare the results.
		Segfaults can still be captured. */</comment>

		<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_DIFF</name><operator>)</operator></expr>)</condition> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_UNICODE</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_PCRE2_8</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_PCRE2_16</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SUPPORT_PCRE2_32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator></expr></cpp:if>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_FORCECONV</name><operator>)</operator></expr>)</condition> <block>{<block_content>

				<comment type="block">/* All results must be the same. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>=</operator> <name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name><name>return_value8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 bit: Return value differs(J8:%d,I8:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
				if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>=</operator> <name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name><name>return_value16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 bit: Return value differs(J16:%d,I16:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
				if <condition>(<expr><operator>(</operator><name>return_value</name> <operator>=</operator> <name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>!=</operator> <name><name>return_value32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n32 bit: Return value differs(J32:%d,I32:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_8</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_16</name></expr></cpp:if>
				if <condition>(<expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 and 16 bit: Return value differs(J8:%d,J16:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_8</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:if>
				if <condition>(<expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 and 32 bit: Return value differs(J8:%d,J32:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_16</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:if>
				if <condition>(<expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 and 32 bit: Return value differs(J16:%d,J32:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				if <condition>(<expr><name>return_value</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>return_value</name> <operator>==</operator> <name>PCRE2_ERROR_PARTIAL</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>return_value</name> <operator>==</operator> <name>PCRE2_ERROR_PARTIAL</name></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name>return_value</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					</block_content>}</block></if> <else>else <block>{<block_content>
						<expr_stmt><expr><name>return_value</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
					<expr_stmt><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>return_value</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
					<expr_stmt><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>return_value</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
					<expr_stmt><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>return_value</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					<comment type="block">/* Transform back the results. */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_UTF</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>return_value</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
							<if_stmt><if>if <condition>(<expr><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>PCRE2_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>regtest_offsetmap16</name><index>[<expr><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<if_stmt><if>if <condition>(<expr><name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>PCRE2_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>regtest_offsetmap16</name><index>[<expr><name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
						<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>return_value</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
							<if_stmt><if>if <condition>(<expr><name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>PCRE2_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>regtest_offsetmap32</name><index>[<expr><name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<if_stmt><if>if <condition>(<expr><name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>PCRE2_UNSET</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>regtest_offsetmap32</name><index>[<expr><name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					</block_content>}</block></if></if_stmt>

					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>return_value</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_8</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_16</name></expr></cpp:if>
						<if_stmt><if>if <condition>(<expr><name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector8_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 and 16 bit: Ovector[%d] value differs(J8:%d,I8:%d,J16:%d,I16:%d): [%d] '%s' @ '%s' \n"</literal></expr></argument>,
								<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector8_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
								<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_8</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:if>
						<if_stmt><if>if <condition>(<expr><name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector8_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 and 32 bit: Ovector[%d] value differs(J8:%d,I8:%d,J32:%d,I32:%d): [%d] '%s' @ '%s' \n"</literal></expr></argument>,
								<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector8_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
								<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_PCRE2_16</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:if>
						<if_stmt><if>if <condition>(<expr><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 and 32 bit: Ovector[%d] value differs(J16:%d,I16:%d,J32:%d,I32:%d): [%d] '%s' @ '%s' \n"</literal></expr></argument>,
								<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
								<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					</block_content>}</block></for>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* more than one of SUPPORT_PCRE2_8, SUPPORT_PCRE2_16 and SUPPORT_PCRE2_32 */</comment>
			<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>return_value8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 bit: Return value differs(%d:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>PCRE2_ERROR_PARTIAL</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>PCRE2_ERROR_PARTIAL</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
						<if_stmt><if>if <condition>(<expr><name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector8_2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n8 bit: Ovector[%d] value differs(%d:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
								<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector8_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector8_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt></block_content></block></for>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>return_value16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 bit: Return value differs(%d:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>PCRE2_ERROR_PARTIAL</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>PCRE2_ERROR_PARTIAL</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
						<if_stmt><if>if <condition>(<expr><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n16 bit: Ovector[%d] value differs(%d:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
								<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector16_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector16_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt></block_content></block></for>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>return_value32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n32 bit: Return value differs(%d:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>return_value32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>PCRE2_ERROR_PARTIAL</name></expr>)</condition> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>PCRE2_ERROR_PARTIAL</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
						<if_stmt><if>if <condition>(<expr><name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n32 bit: Ovector[%d] value differs(%d:%d): [%d] '%s' @ '%s'\n"</literal></expr></argument>,
								<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector32_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector32_2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt></block_content></block></for>
				</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_successful</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>utf</name> <operator>||</operator> <name>is_ascii</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NOMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"8 bit: Test should match: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>return_value8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NOMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"8 bit: Test should not match: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO16</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>utf</name> <operator>||</operator> <name>is_ascii</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NOMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"16 bit: Test should match: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>return_value16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NOMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"16 bit: Test should not match: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO32</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>utf</name> <operator>||</operator> <name>is_ascii</name><operator>)</operator></expr>)</condition> <block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NOMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"32 bit: Test should match: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>return_value32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NOMATCH</name><operator>)</operator></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"32 bit: Test should not match: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
						<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_successful</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name>re8</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO8</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>pcre2_get_mark_8</name><argument_list>(<argument><expr><name>mdata8_1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>pcre2_get_mark_8</name><argument_list>(<argument><expr><name>mdata8_2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"8 bit: Mark value mismatch: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
					<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name>re16</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO16</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>pcre2_get_mark_16</name><argument_list>(<argument><expr><name>mdata16_1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>pcre2_get_mark_16</name><argument_list>(<argument><expr><name>mdata16_2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"16 bit: Mark value mismatch: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
					<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><name>re32</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>&amp;</operator> <name>F_NO32</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>pcre2_get_mark_32</name><argument_list>(<argument><expr><name>mdata32_1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>pcre2_get_mark_32</name><argument_list>(<argument><expr><name>mdata32_2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"32 bit: Mark value mismatch: [%d] '%s' @ '%s'\n"</literal></expr></argument>,
					<argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_successful</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
		<expr_stmt><expr><call><name>pcre2_code_free_8</name><argument_list>(<argument><expr><name>re8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_data_free_8</name><argument_list>(<argument><expr><name>mdata8_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_data_free_8</name><argument_list>(<argument><expr><name>mdata8_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_context_free_8</name><argument_list>(<argument><expr><name>mcontext8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
		<expr_stmt><expr><call><name>pcre2_code_free_16</name><argument_list>(<argument><expr><name>re16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_data_free_16</name><argument_list>(<argument><expr><name>mdata16_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_data_free_16</name><argument_list>(<argument><expr><name>mdata16_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_context_free_16</name><argument_list>(<argument><expr><name>mcontext16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
		<expr_stmt><expr><call><name>pcre2_code_free_32</name><argument_list>(<argument><expr><name>re32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_data_free_32</name><argument_list>(<argument><expr><name>mdata32_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_data_free_32</name><argument_list>(<argument><expr><name>mdata32_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_match_context_free_32</name><argument_list>(<argument><expr><name>mcontext32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><name>is_successful</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>successful</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>successful_row</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>successful_row</name> <operator>&gt;=</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>successful_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>successful_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>current</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_8</name></cpp:ifdef>
	<expr_stmt><expr><call><name>setstack8</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_16</name></cpp:ifdef>
	<expr_stmt><expr><call><name>setstack16</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_PCRE2_32</name></cpp:ifdef>
	<expr_stmt><expr><call><name>setstack32</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <name>successful</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nAll JIT regression tests are successfully passed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nSuccessful test ratio: %d%% (%d failed)\n"</literal></expr></argument>, <argument><expr><name>successful</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>total</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <name>successful</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_UNICODE</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_invalid_utf_result</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pattern_index</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>match_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_end</name></decl></parameter>, <parameter><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>match_start</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d] %s result is not -1.\n"</literal></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d] %s result (%d) is not greater than 0.\n"</literal></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ovector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>PCRE2_SIZE</name><operator>)</operator><name>match_start</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d] %s ovector[0] is unexpected (%d instead of %d)\n"</literal></expr></argument>,
			<argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>match_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ovector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>PCRE2_SIZE</name><operator>)</operator><name>match_end</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d] %s ovector[1] is unexpected (%d instead of %d)\n"</literal></expr></argument>,
			<argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>ovector</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>match_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_UNICODE */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_UNICODE</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_8</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDA</name></cpp:macro> <cpp:value>(PCRE2_UTF | PCRE2_DOTALL | PCRE2_ANCHORED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI</name></cpp:macro> <cpp:value>(PCRE2_JIT_COMPLETE | PCRE2_JIT_INVALID_UTF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPI</name></cpp:macro> <cpp:value>(PCRE2_JIT_COMPLETE | PCRE2_JIT_PARTIAL_SOFT | PCRE2_JIT_INVALID_UTF)</cpp:value></cpp:define>

<struct>struct <name>invalid_utf8_regression_test_case</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>compile_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>jit_compile_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>start_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>skip_left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>skip_right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>match_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>match_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name>invalid_utf8_newline_cr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>invalid_utf8_regression_test_case</name></name></type> <name><name>invalid_utf8_regression_test_cases</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf4\x8f\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x90\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf4\x90\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf4\x8f\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x90\x80\x7f"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x90\x80\xc0"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x8f\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe0\xa0\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe0\xa0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\x7f#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\xc0"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe0\x9f\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe0\x9f\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xed\x9f\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xed\xa0\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xee\x80\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xed\xbf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xdf\xbf##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xdf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xdf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc2\x80##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc2\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc2\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe0\x80##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xdf\xc0##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xdf\xc0"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc1\xbf##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc1\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x80###"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf8###"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"."</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x7f"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf4\x8f\xbf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xf4\xa0\x80\x80\xf4\xa0\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xf4\x8f\xbf\xbf\xf4\x8f\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"#\xef\xbf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"#\xe0\xa0\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x90\x80\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf3\xbf\xbf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xf0\x8f\xbf\xbf\xf0\x8f\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xf5\x80\x80\x80\xf5\x80\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xf4\x90\x80\x80\xf4\x90\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xf4\x8f\xbf\xff\xf4\x8f\xbf\xff"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xf4\x8f\xff\xbf\xf4\x8f\xff\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xef\x80\x80\x80\xef\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\x80\x80\x80\x80\x80\x80\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"#\xe0\x9f\xbf\xe0\x9f\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"#\xe0\xa0\x80\xe0\xa0\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"#\xf0\x80\x80\xf0\x80\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"#\xed\xa0\x80\xed\xa0\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"##\xdf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"##\xdf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"##\xc2\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"##\xc2\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"##\xc1\xbf\xc1\xbf##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"##\xdf\xc0\xdf\xc0##"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"##\xe0\x80\xe0\x80##"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe0\xa0\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xe0\x9f\xbf\xe0\x9f\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\xbf\xef\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xdf\x80\x80\xdf\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xef\xbf\xff\xef\xbf\xff"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xef\xff\xbf\xef\xff\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xed\xbf\xbf\xed\xbf\xbf"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xdf\xbf#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc2\x80#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xdf\xbf\xdf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xc1\xbf\xc1\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xe0\x80\xe0\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xdf\xff\xdf\xff"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xff\xbf\xff\xbf"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x7f#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x01#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\B"</literal></expr>, <expr><literal type="string">"\\b"</literal></expr> }</block></expr>, <expr><literal type="string">"\xb0\xb0"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"aA"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"a\xff"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc3\xa1\xc3\x81"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc3\xa1\xc3\x81"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc2\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe1\xbd\xb8\xe1\xbf\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe1\xbd\xb8\xe1\xbf\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x90\x90\x80\xf0\x90\x90\xa8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"(.)\\1"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x90\x90\x80\xf0\x90\x90\xa8"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"A"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xff"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc3\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc3\xa1"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc3\x7f"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe1\xbd\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe1\xbd\xb8"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x90\x90\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf0\x90\x90\x80"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"[^#]"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"[^#]"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf4\x8f\xbf\xbf"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"[^#]"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xf4\x90\x80\x80"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"[^#]"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xc1\x80"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xc0\x8a#\xe0\x80\x8a#\xf0\x80\x80\x8a#\x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xf8\x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xc3\x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xf1\x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xf2\xbf\x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xf2\xbf\xbf\x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xef\x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xef\xbf\x0a#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \x85#\xc2\x85#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><block>{ <expr><literal type="string">"^\\W"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">" \xe2\x80\xf8\xe2\x80\xa8#"</literal></expr>}</block></expr>,

	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe2\x80\xf8\xe2\x80\xa8#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><literal type="string">"#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xe2\x80\xf8#\xe2\x80\xa8#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"abcd\xc2\x85#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><literal type="string">"#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x85#\xc2\x85#"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><block>{ <expr><literal type="string">"#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef,\x80,\xf8#\x0a"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_FIRSTLINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xef,\x80,\xf8\x0a#"</literal></expr>}</block></expr>,

	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_NO_START_OPTIMIZE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><block>{ <expr><literal type="string">"#\xc7\x85#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x80\x80#\xc7#\xc7\x85#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_NO_START_OPTIMIZE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><block>{ <expr><literal type="string">"#\xc7\x85#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x80\x80#\xc7\x80\x80\x80#\xc7\x85#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><block>{ <expr><literal type="string">"#\xc7\x85#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x80\x80#\xc7#\xc7\x85#"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><block>{ <expr><literal type="string">"#\xc7\x85#"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\x80\x80#\xc7\x80\x80\x80#\xc7\x85#"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_UCP</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"[\\s]"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\xed\xa0\x80"</literal></expr> }</block></expr>,

	<comment type="block">/* These two are not invalid UTF tests, but this infrastructure fits better for them. */</comment>
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_JIT_COMPLETE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\X{2}"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\r\n\n"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>PCRE2_JIT_COMPLETE</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"\\R{2}"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><literal type="string">"\r\n\n"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><literal type="string">"^.a"</literal></expr>, <expr><operator>&amp;</operator><name>invalid_utf8_newline_cr</name></expr> }</block></expr>, <expr><literal type="string">"\xc3\xa7#a"</literal></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UDA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CI</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CPI</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_invalid_utf8_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>invalid_utf8_regression_test_case</name></name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>pattern_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>pcre2_compile_context_8</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>pcre2_match_data_8</name> <modifier>*</modifier></type><name>mdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pcre2_code_8</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>errorcode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>erroroffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector</name> <init>= <expr><call><name>pcre2_get_ovector_pointer_8</name><argument_list>(<argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pcre2_compile_8</name><argument_list>(<argument><expr><operator>(</operator><name>PCRE2_UCHAR8</name><operator>*</operator><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PCRE2_ZERO_TERMINATED</name></expr></argument>,
		<argument><expr><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errorcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroroffset</name></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d:0] cannot be compiled. Error offset: %d\n"</literal></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>erroroffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pcre2_jit_compile_8</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d:0] cannot be compiled by the JIT compiler.\n"</literal></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_code_free_8</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>length</name> <operator>=</operator> <operator>(</operator><name>PCRE2_SIZE</name><operator>)</operator><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_right</name></name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_JIT_COMPLETE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcre2_jit_match_8</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_UCHAR8</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name><operator>)</operator></expr></argument>,
			<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>check_invalid_utf_result</name><argument_list>(<argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_start</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pcre2_code_free_8</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_JIT_PARTIAL_SOFT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcre2_jit_match_8</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name>PCRE2_UCHAR8</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name><operator>)</operator></expr></argument>,
			<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name></expr></argument>, <argument><expr><name>PCRE2_PARTIAL_SOFT</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>check_invalid_utf_result</name><argument_list>(<argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><literal type="string">"partial match"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_start</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pcre2_code_free_8</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_code_free_8</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf8_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>invalid_utf8_regression_test_case</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_compile_context_8</name> <modifier>*</modifier></type><name>ccontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_8</name> <modifier>*</modifier></type><name>mdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>successful</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nRunning invalid-utf8 JIT regression tests\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ccontext</name> <operator>=</operator> <call><name>pcre2_compile_context_create_8</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pcre2_set_newline_8</name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>PCRE2_NEWLINE_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mdata</name> <operator>=</operator> <call><name>pcre2_match_data_create_8</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>current</name> <operator>=</operator> <name>invalid_utf8_regression_test_cases</name></expr>;</init> <condition><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>current</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* printf("\nPattern: %s :\n", current-&gt;pattern); */</comment>
		<expr_stmt><expr><name>total</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>&amp;</operator><name>invalid_utf8_newline_cr</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_invalid_utf8_test</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_invalid_utf8_test</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>pcre2_set_newline_8</name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>PCRE2_NEWLINE_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_invalid_utf8_test</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>pcre2_set_newline_8</name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>PCRE2_NEWLINE_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>successful</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_match_data_free_8</name><argument_list>(<argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pcre2_compile_context_free_8</name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <name>successful</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nAll invalid UTF8 JIT regression tests are successfully passed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nInvalid UTF8 successful test ratio: %d%% (%d failed)\n"</literal></expr></argument>, <argument><expr><name>successful</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>total</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <name>successful</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SUPPORT_UNICODE || !SUPPORT_PCRE2_8 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf8_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_UNICODE &amp;&amp; SUPPORT_PCRE2_8 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_UNICODE</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_16</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDA</name></cpp:macro> <cpp:value>(PCRE2_UTF | PCRE2_DOTALL | PCRE2_ANCHORED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI</name></cpp:macro> <cpp:value>(PCRE2_JIT_COMPLETE | PCRE2_JIT_INVALID_UTF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPI</name></cpp:macro> <cpp:value>(PCRE2_JIT_COMPLETE | PCRE2_JIT_PARTIAL_SOFT | PCRE2_JIT_INVALID_UTF)</cpp:value></cpp:define>

<struct>struct <name>invalid_utf16_regression_test_case</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>compile_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>jit_compile_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>start_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>skip_left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>skip_right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>match_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>match_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>PCRE2_UCHAR16</name> <modifier>*</modifier></type><name><name>pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>PCRE2_UCHAR16</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>allany16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'.'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>non_word_boundary16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>word_boundary16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>backreference16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'('</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">')'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>grapheme16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>nothashmark16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'['</literal></expr>, <expr><literal type="char">'^'</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">']'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>afternl16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'^'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>generic16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xd7ff</literal></expr>, <expr><literal type="number">0xe000</literal></expr>, <expr><literal type="number">0xffff</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xdbff</literal></expr>, <expr><literal type="number">0xdfff</literal></expr>, <expr><literal type="number">0xdbff</literal></expr>, <expr><literal type="number">0xdfff</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdbff</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdbff</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_5</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_6</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="number">0xdc28</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_7</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xd801</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xd801</literal></expr>, <expr><literal type="number">0xdc28</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_9</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">' '</literal></expr>, <expr><literal type="number">0x2028</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_10</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">' '</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0x2028</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_11</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR16</name></type> <name><name>test16_12</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdc00</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>invalid_utf16_regression_test_case</name></name></type> <name><name>invalid_utf16_regression_test_cases</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_3</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_3</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_3</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_3</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>word_boundary16</name></expr> }</block></expr>, <expr><name>test16_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>word_boundary16</name></expr> }</block></expr>, <expr><name>test16_3</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>word_boundary16</name></expr> }</block></expr>, <expr><name>test16_4</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary16</name></expr>, <expr><name>word_boundary16</name></expr> }</block></expr>, <expr><name>test16_5</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>backreference16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_6</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>backreference16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_6</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><name>backreference16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_7</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>backreference16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_7</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>grapheme16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_6</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>grapheme16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_6</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>grapheme16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_6</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>grapheme16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_7</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><name>grapheme16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_7</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>grapheme16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_7</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>nothashmark16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_8</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><name>nothashmark16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_8</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>nothashmark16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_8</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><name>afternl16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_9</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><block>{ <expr><name>afternl16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_10</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_NO_START_OPTIMIZE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><block>{ <expr><name>generic16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_11</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_NO_START_OPTIMIZE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><block>{ <expr><name>generic16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_12</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><block>{ <expr><name>generic16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_11</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><block>{ <expr><name>generic16</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test16_12</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UDA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CI</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CPI</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_invalid_utf16_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>invalid_utf16_regression_test_case</name></name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>pattern_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>pcre2_compile_context_16</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>pcre2_match_data_16</name> <modifier>*</modifier></type><name>mdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pcre2_code_16</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>errorcode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>erroroffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>PCRE2_UCHAR16</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector</name> <init>= <expr><call><name>pcre2_get_ovector_pointer_16</name><argument_list>(<argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pcre2_compile_16</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PCRE2_ZERO_TERMINATED</name></expr></argument>,
		<argument><expr><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errorcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroroffset</name></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d:0] cannot be compiled. Error offset: %d\n"</literal></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>erroroffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pcre2_jit_compile_16</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d:0] cannot be compiled by the JIT compiler.\n"</literal></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_code_free_16</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>input</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>input</name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><name>length</name> <operator>-=</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_right</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_JIT_COMPLETE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcre2_jit_match_16</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name><operator>)</operator></expr></argument>,
			<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>check_invalid_utf_result</name><argument_list>(<argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_start</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pcre2_code_free_16</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_JIT_PARTIAL_SOFT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcre2_jit_match_16</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name><operator>)</operator></expr></argument>,
			<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name></expr></argument>, <argument><expr><name>PCRE2_PARTIAL_SOFT</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>check_invalid_utf_result</name><argument_list>(<argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><literal type="string">"partial match"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_start</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pcre2_code_free_16</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_code_free_16</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf16_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>invalid_utf16_regression_test_case</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_compile_context_16</name> <modifier>*</modifier></type><name>ccontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_16</name> <modifier>*</modifier></type><name>mdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>successful</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nRunning invalid-utf16 JIT regression tests\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ccontext</name> <operator>=</operator> <call><name>pcre2_compile_context_create_16</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pcre2_set_newline_16</name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>PCRE2_NEWLINE_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mdata</name> <operator>=</operator> <call><name>pcre2_match_data_create_16</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>current</name> <operator>=</operator> <name>invalid_utf16_regression_test_cases</name></expr>;</init> <condition><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>current</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* printf("\nPattern: %s :\n", current-&gt;pattern); */</comment>
		<expr_stmt><expr><name>total</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_invalid_utf16_test</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_invalid_utf16_test</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>successful</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_match_data_free_16</name><argument_list>(<argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pcre2_compile_context_free_16</name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <name>successful</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nAll invalid UTF16 JIT regression tests are successfully passed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nInvalid UTF16 successful test ratio: %d%% (%d failed)\n"</literal></expr></argument>, <argument><expr><name>successful</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>total</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <name>successful</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SUPPORT_UNICODE || !SUPPORT_PCRE2_16 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf16_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_UNICODE &amp;&amp; SUPPORT_PCRE2_16 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_UNICODE</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>SUPPORT_PCRE2_32</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UDA</name></cpp:macro> <cpp:value>(PCRE2_UTF | PCRE2_DOTALL | PCRE2_ANCHORED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CI</name></cpp:macro> <cpp:value>(PCRE2_JIT_COMPLETE | PCRE2_JIT_INVALID_UTF)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPI</name></cpp:macro> <cpp:value>(PCRE2_JIT_COMPLETE | PCRE2_JIT_PARTIAL_SOFT | PCRE2_JIT_INVALID_UTF)</cpp:value></cpp:define>

<struct>struct <name>invalid_utf32_regression_test_case</name> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>compile_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>jit_compile_options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>start_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>skip_left</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>skip_right</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>match_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>match_end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>PCRE2_UCHAR32</name> <modifier>*</modifier></type><name><name>pattern</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>PCRE2_UCHAR32</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>allany32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'.'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>non_word_boundary32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>word_boundary32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>backreference32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'('</literal></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><literal type="char">')'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>grapheme32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>nothashmark32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'['</literal></expr>, <expr><literal type="char">'^'</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="char">']'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>afternl32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'^'</literal></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>test32_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x10ffff</literal></expr>, <expr><literal type="number">0x10ffff</literal></expr>, <expr><literal type="number">0x110000</literal></expr>, <expr><literal type="number">0x110000</literal></expr>, <expr><literal type="number">0x10ffff</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>test32_2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xd7ff</literal></expr>, <expr><literal type="number">0xe000</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0xdfff</literal></expr>, <expr><literal type="number">0xe000</literal></expr>, <expr><literal type="number">0xdfff</literal></expr>, <expr><literal type="number">0xd800</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>test32_3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="number">0x110000</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>test32_4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0x10ffff</literal></expr>, <expr><literal type="number">0x110000</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>test32_5</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">' '</literal></expr>, <expr><literal type="number">0x2028</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PCRE2_UCHAR32</name></type> <name><name>test32_6</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">' '</literal></expr>, <expr><literal type="number">0x110000</literal></expr>, <expr><literal type="number">0x2028</literal></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>invalid_utf32_regression_test_case</name></name></type> <name><name>invalid_utf32_regression_test_cases</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>allany32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>allany32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary32</name></expr>, <expr><name>word_boundary32</name></expr> }</block></expr>, <expr><name>test32_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary32</name></expr>, <expr><name>word_boundary32</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>non_word_boundary32</name></expr>, <expr><name>word_boundary32</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>backreference32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_3</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name> <operator>|</operator> <name>PCRE2_CASELESS</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>backreference32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_3</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>grapheme32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>grapheme32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_1</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>grapheme32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>grapheme32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>grapheme32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><block>{ <expr><name>grapheme32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>nothashmark32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_4</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>nothashmark32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_4</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>nothashmark32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_4</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><block>{ <expr><name>nothashmark32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>UDA</name></expr>, <expr><name>CPI</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><block>{ <expr><name>nothashmark32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_2</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><block>{ <expr><name>afternl32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_5</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>PCRE2_UTF</name> <operator>|</operator> <name>PCRE2_MULTILINE</name></expr>, <expr><name>CI</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><block>{ <expr><name>afternl32</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>test32_6</name></expr> }</block></expr>,

	<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>UDA</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CI</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CPI</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_invalid_utf32_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>invalid_utf32_regression_test_case</name></name> <modifier>*</modifier></type><name>current</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>pattern_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>pcre2_compile_context_32</name> <modifier>*</modifier></type><name>ccontext</name></decl></parameter>, <parameter><decl><type><name>pcre2_match_data_32</name> <modifier>*</modifier></type><name>mdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pcre2_code_32</name> <modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>errorcode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>erroroffset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>PCRE2_UCHAR32</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PCRE2_SIZE</name> <modifier>*</modifier></type><name>ovector</name> <init>= <expr><call><name>pcre2_get_ovector_pointer_32</name><argument_list>(<argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>pcre2_compile_32</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PCRE2_ZERO_TERMINATED</name></expr></argument>,
		<argument><expr><name><name>current</name><operator>-&gt;</operator><name>compile_options</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errorcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>erroroffset</name></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d:0] cannot be compiled. Error offset: %d\n"</literal></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>erroroffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pcre2_jit_compile_32</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pattern[%d:0] cannot be compiled by the JIT compiler.\n"</literal></expr></argument>, <argument><expr><name>pattern_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pcre2_code_free_32</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>input</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>input</name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<expr_stmt><expr><name>length</name> <operator>-=</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_right</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_JIT_COMPLETE</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcre2_jit_match_32</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name><operator>)</operator></expr></argument>,
			<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>check_invalid_utf_result</name><argument_list>(<argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><literal type="string">"match"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_start</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pcre2_code_free_32</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>jit_compile_options</name></name> <operator>&amp;</operator> <name>PCRE2_JIT_PARTIAL_SOFT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pcre2_jit_match_32</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>input</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name><operator>)</operator></expr></argument>,
			<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>skip_left</name></name></expr></argument>, <argument><expr><name>PCRE2_PARTIAL_SOFT</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>check_invalid_utf_result</name><argument_list>(<argument><expr><name>pattern_index</name></expr></argument>, <argument><expr><literal type="string">"partial match"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_start</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>match_end</name></name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>pcre2_code_free_32</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_code_free_32</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf32_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>invalid_utf32_regression_test_case</name></name> <modifier>*</modifier></type><name>current</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_compile_context_32</name> <modifier>*</modifier></type><name>ccontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pcre2_match_data_32</name> <modifier>*</modifier></type><name>mdata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>successful</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nRunning invalid-utf32 JIT regression tests\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ccontext</name> <operator>=</operator> <call><name>pcre2_compile_context_create_32</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pcre2_set_newline_32</name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>PCRE2_NEWLINE_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mdata</name> <operator>=</operator> <call><name>pcre2_match_data_create_32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>current</name> <operator>=</operator> <name>invalid_utf32_regression_test_cases</name></expr>;</init> <condition><expr><name><name>current</name><operator>-&gt;</operator><name>pattern</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>current</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<comment type="block">/* printf("\nPattern: %s :\n", current-&gt;pattern); */</comment>
		<expr_stmt><expr><name>total</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_invalid_utf32_test</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_invalid_utf32_test</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ccontext</name></expr></argument>, <argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>successful</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>%</operator> <literal type="number">60</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pcre2_match_data_free_32</name><argument_list>(<argument><expr><name>mdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pcre2_compile_context_free_32</name><argument_list>(<argument><expr><name>ccontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <name>successful</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nAll invalid UTF32 JIT regression tests are successfully passed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nInvalid UTF32 successful test ratio: %d%% (%d failed)\n"</literal></expr></argument>, <argument><expr><name>successful</name> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>total</name></expr></argument>, <argument><expr><name>total</name> <operator>-</operator> <name>successful</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !SUPPORT_UNICODE || !SUPPORT_PCRE2_32 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>invalid_utf32_regression_tests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SUPPORT_UNICODE &amp;&amp; SUPPORT_PCRE2_32 */</comment>

<comment type="block">/* End of pcre2_jit_test.c */</comment>
</unit>
