<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_match_data.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2019 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2_internal.h"</cpp:file></cpp:include>



<comment type="block" format="doxygen">/*************************************************
*  Create a match data block given ovector size  *
*************************************************/</comment>

<comment type="block">/* A minimum of 1 is imposed on the number of ovector pairs. */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_match_data</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_match_data_create</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>oveccount</name></decl></parameter>, <parameter><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>gcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>yield</name></decl>;</decl_stmt>
<if_stmt><if>if <condition>(<expr><name>oveccount</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>oveccount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<expr_stmt><expr><name>yield</name> <operator>=</operator> <call><call><name>PRIV</name><argument_list>(<argument><expr><name>memctl_malloc</name></expr></argument>)</argument_list></call><argument_list>(
  <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>pcre2_match_data</name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>oveccount</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>PCRE2_SIZE</name></expr></argument>)</argument_list></sizeof></expr></argument>,
  <argument><expr><operator>(</operator><name>pcre2_memctl</name> <operator>*</operator><operator>)</operator><name>gcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if_stmt><if>if <condition>(<expr><name>yield</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<expr_stmt><expr><name><name>yield</name><operator>-&gt;</operator><name>oveccount</name></name> <operator>=</operator> <name>oveccount</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>yield</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<return>return <expr><name>yield</name></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*  Create a match data block using pattern data  *
*************************************************/</comment>

<comment type="block">/* If no context is supplied, use the memory allocator from the code. */</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>pcre2_match_data</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_match_data_create_from_pattern</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcre2_code</name> <modifier>*</modifier></type><name>code</name></decl></parameter>,
  <parameter><decl><type><name>pcre2_general_context</name> <modifier>*</modifier></type><name>gcontext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>gcontext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>gcontext</name> <operator>=</operator> <operator>(</operator><name>pcre2_general_context</name> <operator>*</operator><operator>)</operator><name>code</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<return>return <expr><call><name>pcre2_match_data_create</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>pcre2_real_code</name> <operator>*</operator><operator>)</operator><name>code</name><operator>)</operator><operator>-&gt;</operator><name>top_bracket</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
  <argument><expr><name>gcontext</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*            Free a match data block             *
*************************************************/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>void</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_match_data_free</name><parameter_list>(<parameter><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>match_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<if_stmt><if>if <condition>(<expr><name>match_data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>match_data</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_MD_COPIED_SUBJECT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>match_data</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>match_data</name><operator>-&gt;</operator><name>subject</name></name></expr></argument>,
      <argument><expr><name><name>match_data</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name><name>match_data</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>free</name></name><argument_list>(<argument><expr><name>match_data</name></expr></argument>, <argument><expr><name><name>match_data</name><operator>-&gt;</operator><name>memctl</name><operator>.</operator><name>memory_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*         Get last mark in match                 *
*************************************************/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>PCRE2_SPTR</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_get_mark</name><parameter_list>(<parameter><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>match_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>match_data</name><operator>-&gt;</operator><name>mark</name></name></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*          Get pointer to ovector                *
*************************************************/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>PCRE2_SIZE</name> <modifier>*</modifier> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_get_ovector_pointer</name><parameter_list>(<parameter><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>match_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>match_data</name><operator>-&gt;</operator><name>ovector</name></name></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*          Get number of ovector slots           *
*************************************************/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>uint32_t</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_get_ovector_count</name><parameter_list>(<parameter><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>match_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>match_data</name><operator>-&gt;</operator><name>oveccount</name></name></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*         Get starting code unit in match        *
*************************************************/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>PCRE2_SIZE</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_get_startchar</name><parameter_list>(<parameter><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>match_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><name><name>match_data</name><operator>-&gt;</operator><name>startchar</name></name></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*         Get size of match data block           *
*************************************************/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>PCRE2_SIZE</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_get_match_data_size</name><parameter_list>(<parameter><decl><type><name>pcre2_match_data</name> <modifier>*</modifier></type><name>match_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<return>return <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>pcre2_match_data</name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call> <operator>+</operator>
  <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>match_data</name><operator>-&gt;</operator><name>oveccount</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PCRE2_SIZE</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* End of pcre2_match_data.c */</comment>
</unit>
