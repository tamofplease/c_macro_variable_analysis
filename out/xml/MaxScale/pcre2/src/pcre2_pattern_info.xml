<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/pcre2/src/pcre2_pattern_info.c"><comment type="block" format="doxygen">/*************************************************
*      Perl-Compatible Regular Expressions       *
*************************************************/</comment>

<comment type="block">/* PCRE is a library of functions to support regular expressions whose syntax
and semantics are as close as possible to those of the Perl 5 language.

                       Written by Philip Hazel
     Original API code Copyright (c) 1997-2012 University of Cambridge
          New API code Copyright (c) 2016-2018 University of Cambridge

-----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the University of Cambridge nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
-----------------------------------------------------------------------------
*/</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_CONFIG_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcre2_internal.h"</cpp:file></cpp:include>


<comment type="block" format="doxygen">/*************************************************
*        Return info about compiled pattern      *
*************************************************/</comment>

<comment type="block">/*
Arguments:
  code          points to compiled code
  what          what information is required
  where         where to put the information; if NULL, return length

Returns:        0 when data returned
                &gt; 0 when length requested
                &lt; 0 on error or unset value
*/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_pattern_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcre2_code</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>what</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>where</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><specifier>const</specifier> <name>pcre2_real_code</name> <modifier>*</modifier></type><name>re</name> <init>= <expr><operator>(</operator><name>pcre2_real_code</name> <operator>*</operator><operator>)</operator><name>code</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>where</name> <operator>==</operator> <name>NULL</name></expr>)</condition>   <comment type="block">/* Requests field length */</comment>
  <block>{<block_content>
  <switch>switch<condition>(<expr><name>what</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>PCRE2_INFO_ALLOPTIONS</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_ARGOPTIONS</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_BACKREFMAX</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_BSR</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_CAPTURECOUNT</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_DEPTHLIMIT</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_EXTRAOPTIONS</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_FIRSTCODETYPE</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_FIRSTCODEUNIT</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_HASBACKSLASHC</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_HASCRORLF</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_HEAPLIMIT</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_JCHANGED</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_LASTCODETYPE</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_LASTCODEUNIT</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_MATCHEMPTY</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_MATCHLIMIT</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_MAXLOOKBEHIND</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_MINLENGTH</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_NAMEENTRYSIZE</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_NAMECOUNT</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_NEWLINE</name></expr>:</case>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

    <case>case <expr><name>PCRE2_INFO_FIRSTBITMAP</name></expr>:</case>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>

    <case>case <expr><name>PCRE2_INFO_JITSIZE</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_SIZE</name></expr>:</case>
    <case>case <expr><name>PCRE2_INFO_FRAMESIZE</name></expr>:</case>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

    <case>case <expr><name>PCRE2_INFO_NAMETABLE</name></expr>:</case>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>PCRE2_SPTR</name></expr></argument>)</argument_list></sizeof></expr>;</return>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>re</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_NULL</name></expr>;</return></block_content></block></if></if_stmt>

<comment type="block">/* Check that the first field in the block is the magic number. If it is not,
return with PCRE2_ERROR_BADMAGIC. */</comment>

<if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>magic_number</name></name> <operator>!=</operator> <name>MAGIC_NUMBER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_BADMAGIC</name></expr>;</return></block_content></block></if></if_stmt>

<comment type="block">/* Check that this pattern was compiled in the correct bit mode */</comment>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PCRE2_CODE_UNIT_WIDTH</name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_BADMODE</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>what</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>PCRE2_INFO_ALLOPTIONS</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>overall_options</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_ARGOPTIONS</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>compile_options</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_BACKREFMAX</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>top_backref</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_BSR</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>bsr_convention</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_CAPTURECOUNT</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>top_bracket</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_DEPTHLIMIT</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>limit_depth</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>limit_depth</name></name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_UNSET</name></expr>;</return></block_content></block></if></if_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_EXTRAOPTIONS</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>extra_options</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_FIRSTCODETYPE</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_FIRSTSET</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:
                         <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_STARTLINE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_FIRSTCODEUNIT</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_FIRSTSET</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then>
    <expr><name><name>re</name><operator>-&gt;</operator><name>first_codeunit</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_FIRSTBITMAP</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_FIRSTMAPSET</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then>
    <expr><operator>&amp;</operator><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>start_bitmap</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_FRAMESIZE</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>heapframe</name></expr></argument>, <argument><expr><name>ovector</name></expr></argument>)</argument_list></call> <operator>+</operator>
    <name><name>re</name><operator>-&gt;</operator><name>top_bracket</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PCRE2_SIZE</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_HASBACKSLASHC</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_HASBKC</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_HASCRORLF</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_HASCRORLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_HEAPLIMIT</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>limit_heap</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>limit_heap</name></name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_UNSET</name></expr>;</return></block_content></block></if></if_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_JCHANGED</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_JCHANGED</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_JITSIZE</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_JIT</name></cpp:ifdef>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>executable_jit</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>?</condition><then>
    <expr><call><call><name>PRIV</name><argument_list>(<argument><expr><name>jit_get_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>re</name><operator>-&gt;</operator><name>executable_jit</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_LASTCODETYPE</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_LASTSET</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_LASTCODEUNIT</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_LASTSET</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>?</condition><then>
    <expr><name><name>re</name><operator>-&gt;</operator><name>last_codeunit</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_MATCHEMPTY</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PCRE2_MATCH_EMPTY</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_MATCHLIMIT</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>limit_match</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>limit_match</name></name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_UNSET</name></expr>;</return></block_content></block></if></if_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_MAXLOOKBEHIND</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>max_lookbehind</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_MINLENGTH</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>minlength</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_NAMEENTRYSIZE</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>name_entry_size</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_NAMECOUNT</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>name_count</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_NAMETABLE</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>PCRE2_SPTR</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PCRE2_SPTR</name><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>re</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_code</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_NEWLINE</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>newline_convention</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <case>case <expr><name>PCRE2_INFO_SIZE</name></expr>:</case>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name>where</name><operator>)</operator> <operator>=</operator> <name><name>re</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt>
  <break>break;</break>

  <default>default:</default> <return>return <expr><name>PCRE2_ERROR_BADOPTION</name></expr>;</return>
  </block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************
*              Callout enumerator                *
*************************************************/</comment>

<comment type="block">/*
Arguments:
  code          points to compiled code
  callback      function called for each callout block
  callout_data  user data passed to the callback

Returns:        0 when successfully completed
                &lt; 0 on local error
               != 0 for callback error
*/</comment>

<function><type><name>PCRE2_EXP_DEFN</name> <name>int</name> <name>PCRE2_CALL_CONVENTION</name></type>
<name>pcre2_callout_enumerate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pcre2_code</name> <modifier>*</modifier></type><name>code</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>pcre2_callout_enumerate_block</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callout_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<decl_stmt><decl><type><name>pcre2_real_code</name> <modifier>*</modifier></type><name>re</name> <init>= <expr><operator>(</operator><name>pcre2_real_code</name> <operator>*</operator><operator>)</operator><name>code</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pcre2_callout_enumerate_block</name></type> <name>cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCRE2_SPTR</name></type> <name>cc</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
<decl_stmt><decl><type><name>BOOL</name></type> <name>utf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>re</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
<expr_stmt><expr><name>utf</name> <operator>=</operator> <operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>overall_options</name></name> <operator>&amp;</operator> <name>PCRE2_UTF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Check that the first field in the block is the magic number. If it is not,
return with PCRE2_ERROR_BADMAGIC. */</comment>

<if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>magic_number</name></name> <operator>!=</operator> <name>MAGIC_NUMBER</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_BADMAGIC</name></expr>;</return></block_content></block></if></if_stmt>

<comment type="block">/* Check that this pattern was compiled in the correct bit mode */</comment>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>re</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>PCRE2_CODE_UNIT_WIDTH</name><operator>/</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>PCRE2_ERROR_BADMODE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>.</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cc</name> <operator>=</operator> <operator>(</operator><name>PCRE2_SPTR</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>re</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pcre2_real_code</name></expr></argument>)</argument_list></sizeof><operator>)</operator>
     <operator>+</operator> <name><name>re</name><operator>-&gt;</operator><name>name_count</name></name> <operator>*</operator> <name><name>re</name><operator>-&gt;</operator><name>name_entry_size</name></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>TRUE</name></expr>)</condition>
  <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><operator>*</operator><name>cc</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>OP_END</name></expr>:</case>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

    <case>case <expr><name>OP_CHAR</name></expr>:</case>
    <case>case <expr><name>OP_CHARI</name></expr>:</case>
    <case>case <expr><name>OP_NOT</name></expr>:</case>
    <case>case <expr><name>OP_NOTI</name></expr>:</case>
    <case>case <expr><name>OP_STAR</name></expr>:</case>
    <case>case <expr><name>OP_MINSTAR</name></expr>:</case>
    <case>case <expr><name>OP_PLUS</name></expr>:</case>
    <case>case <expr><name>OP_MINPLUS</name></expr>:</case>
    <case>case <expr><name>OP_QUERY</name></expr>:</case>
    <case>case <expr><name>OP_MINQUERY</name></expr>:</case>
    <case>case <expr><name>OP_UPTO</name></expr>:</case>
    <case>case <expr><name>OP_MINUPTO</name></expr>:</case>
    <case>case <expr><name>OP_EXACT</name></expr>:</case>
    <case>case <expr><name>OP_POSSTAR</name></expr>:</case>
    <case>case <expr><name>OP_POSPLUS</name></expr>:</case>
    <case>case <expr><name>OP_POSQUERY</name></expr>:</case>
    <case>case <expr><name>OP_POSUPTO</name></expr>:</case>
    <case>case <expr><name>OP_STARI</name></expr>:</case>
    <case>case <expr><name>OP_MINSTARI</name></expr>:</case>
    <case>case <expr><name>OP_PLUSI</name></expr>:</case>
    <case>case <expr><name>OP_MINPLUSI</name></expr>:</case>
    <case>case <expr><name>OP_QUERYI</name></expr>:</case>
    <case>case <expr><name>OP_MINQUERYI</name></expr>:</case>
    <case>case <expr><name>OP_UPTOI</name></expr>:</case>
    <case>case <expr><name>OP_MINUPTOI</name></expr>:</case>
    <case>case <expr><name>OP_EXACTI</name></expr>:</case>
    <case>case <expr><name>OP_POSSTARI</name></expr>:</case>
    <case>case <expr><name>OP_POSPLUSI</name></expr>:</case>
    <case>case <expr><name>OP_POSQUERYI</name></expr>:</case>
    <case>case <expr><name>OP_POSUPTOI</name></expr>:</case>
    <case>case <expr><name>OP_NOTSTAR</name></expr>:</case>
    <case>case <expr><name>OP_NOTMINSTAR</name></expr>:</case>
    <case>case <expr><name>OP_NOTPLUS</name></expr>:</case>
    <case>case <expr><name>OP_NOTMINPLUS</name></expr>:</case>
    <case>case <expr><name>OP_NOTQUERY</name></expr>:</case>
    <case>case <expr><name>OP_NOTMINQUERY</name></expr>:</case>
    <case>case <expr><name>OP_NOTUPTO</name></expr>:</case>
    <case>case <expr><name>OP_NOTMINUPTO</name></expr>:</case>
    <case>case <expr><name>OP_NOTEXACT</name></expr>:</case>
    <case>case <expr><name>OP_NOTPOSSTAR</name></expr>:</case>
    <case>case <expr><name>OP_NOTPOSPLUS</name></expr>:</case>
    <case>case <expr><name>OP_NOTPOSQUERY</name></expr>:</case>
    <case>case <expr><name>OP_NOTPOSUPTO</name></expr>:</case>
    <case>case <expr><name>OP_NOTSTARI</name></expr>:</case>
    <case>case <expr><name>OP_NOTMINSTARI</name></expr>:</case>
    <case>case <expr><name>OP_NOTPLUSI</name></expr>:</case>
    <case>case <expr><name>OP_NOTMINPLUSI</name></expr>:</case>
    <case>case <expr><name>OP_NOTQUERYI</name></expr>:</case>
    <case>case <expr><name>OP_NOTMINQUERYI</name></expr>:</case>
    <case>case <expr><name>OP_NOTUPTOI</name></expr>:</case>
    <case>case <expr><name>OP_NOTMINUPTOI</name></expr>:</case>
    <case>case <expr><name>OP_NOTEXACTI</name></expr>:</case>
    <case>case <expr><name>OP_NOTPOSSTARI</name></expr>:</case>
    <case>case <expr><name>OP_NOTPOSPLUSI</name></expr>:</case>
    <case>case <expr><name>OP_NOTPOSQUERYI</name></expr>:</case>
    <case>case <expr><name>OP_NOTPOSUPTOI</name></expr>:</case>
    <expr_stmt><expr><name>cc</name> <operator>+=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>OP_lengths</name></expr></argument>)</argument_list></call><index>[<expr><operator>*</operator><name>cc</name></expr>]</index></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>utf</name> <operator>&amp;&amp;</operator> <call><name>HAS_EXTRALEN</name><argument_list>(<argument><expr><name><name>cc</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cc</name> <operator>+=</operator> <call><name>GET_EXTRALEN</name><argument_list>(<argument><expr><name><name>cc</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <break>break;</break>

    <case>case <expr><name>OP_TYPESTAR</name></expr>:</case>
    <case>case <expr><name>OP_TYPEMINSTAR</name></expr>:</case>
    <case>case <expr><name>OP_TYPEPLUS</name></expr>:</case>
    <case>case <expr><name>OP_TYPEMINPLUS</name></expr>:</case>
    <case>case <expr><name>OP_TYPEQUERY</name></expr>:</case>
    <case>case <expr><name>OP_TYPEMINQUERY</name></expr>:</case>
    <case>case <expr><name>OP_TYPEUPTO</name></expr>:</case>
    <case>case <expr><name>OP_TYPEMINUPTO</name></expr>:</case>
    <case>case <expr><name>OP_TYPEEXACT</name></expr>:</case>
    <case>case <expr><name>OP_TYPEPOSSTAR</name></expr>:</case>
    <case>case <expr><name>OP_TYPEPOSPLUS</name></expr>:</case>
    <case>case <expr><name>OP_TYPEPOSQUERY</name></expr>:</case>
    <case>case <expr><name>OP_TYPEPOSUPTO</name></expr>:</case>
    <expr_stmt><expr><name>cc</name> <operator>+=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>OP_lengths</name></expr></argument>)</argument_list></call><index>[<expr><operator>*</operator><name>cc</name></expr>]</index></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUPPORT_UNICODE</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name><name>cc</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OP_PROP</name> <operator>||</operator> <name><name>cc</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>OP_NOTPROP</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cc</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>SUPPORT_UNICODE</name> <operator>||</operator> <name>PCRE2_CODE_UNIT_WIDTH</name> <operator>!=</operator> <literal type="number">8</literal></expr></cpp:if>
    <case>case <expr><name>OP_XCLASS</name></expr>:</case>
    <expr_stmt><expr><name>cc</name> <operator>+=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <case>case <expr><name>OP_MARK</name></expr>:</case>
    <case>case <expr><name>OP_COMMIT_ARG</name></expr>:</case>
    <case>case <expr><name>OP_PRUNE_ARG</name></expr>:</case>
    <case>case <expr><name>OP_SKIP_ARG</name></expr>:</case>
    <case>case <expr><name>OP_THEN_ARG</name></expr>:</case>
    <expr_stmt><expr><name>cc</name> <operator>+=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>OP_lengths</name></expr></argument>)</argument_list></call><index>[<expr><operator>*</operator><name>cc</name></expr>]</index> <operator>+</operator> <name><name>cc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <break>break;</break>

    <case>case <expr><name>OP_CALLOUT</name></expr>:</case>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>pattern_position</name></name> <operator>=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>next_item_length</name></name> <operator>=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>LINK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>callout_number</name></name> <operator>=</operator> <name><name>cc</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>LINK_SIZE</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>callout_string_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>callout_string_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>callout_string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>callout_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cc</name> <operator>+=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>OP_lengths</name></expr></argument>)</argument_list></call><index>[<expr><operator>*</operator><name>cc</name></expr>]</index></expr>;</expr_stmt>
    <break>break;</break>

    <case>case <expr><name>OP_CALLOUT_STR</name></expr>:</case>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>pattern_position</name></name> <operator>=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>next_item_length</name></name> <operator>=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>LINK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>callout_number</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>callout_string_offset</name></name> <operator>=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>LINK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>callout_string_length</name></name> <operator>=</operator>
      <call><name>GET</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>LINK_SIZE</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>LINK_SIZE</name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>callout_string</name></name> <operator>=</operator> <name>cc</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>LINK_SIZE</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>callback</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>callout_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cc</name> <operator>+=</operator> <call><name>GET</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>LINK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>

    <default>default:</default>
    <expr_stmt><expr><name>cc</name> <operator>+=</operator> <call><name>PRIV</name><argument_list>(<argument><expr><name>OP_lengths</name></expr></argument>)</argument_list></call><index>[<expr><operator>*</operator><name>cc</name></expr>]</index></expr>;</expr_stmt>
    <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* End of pcre2_pattern_info.c */</comment>
</unit>
