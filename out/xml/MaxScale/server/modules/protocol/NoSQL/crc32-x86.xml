<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/MaxScale/server/modules/protocol/NoSQL/crc32-x86.c"><comment type="block">/*-
 * Public Domain 2014-2019 MongoDB, Inc.
 * Public Domain 2008-2014 WiredTiger, Inc.
 *
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or
 * distribute this software, either in source code form or as a compiled
 * binary, for any purpose, commercial or non-commercial, and by any
 * means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors
 * of this software dedicate any and all copyright interest in the
 * software to the public domain. We make this dedication for the benefit
 * of the public at large and to the detriment of our heirs and
 * successors. We intend this dedication to be an overt act of
 * relinquishment in perpetuity of all present and future rights to this
 * software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NO_CRC32_HARDWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__amd64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<comment type="block">/*
 * __wt_checksum_hw --
 *     Return a checksum for a chunk of memory, computed in hardware using 8 byte steps.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>__wt_checksum_hw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nqwords</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>p64</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>crc</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

    <comment type="block">/* Checksum one byte at a time to the first 4B boundary. */</comment>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>chunk</name></expr>;</init> <condition><expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>--</operator><name>len</name></expr></incr>)</control> <block>{<block_content>
        <asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xF2, 0x0F, 0x38, 0xF0, 0xF1" : "=S"(crc) : "0"(crc), "c"(*p));</asm>
    </block_content>}</block></for>

    <expr_stmt><expr><name>p64</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    <comment type="block">/* Checksum in 8B chunks. */</comment>
    <for>for <control>(<init><expr><name>nqwords</name> <operator>=</operator> <name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>nqwords</name></expr>;</condition> <incr><expr><name>nqwords</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xF2, 0x48, 0x0F, 0x38, 0xF1, 0xF1"
                             : "=S"(crc)
                             : "0"(crc), "c"(*p64));</asm>
        <expr_stmt><expr><name>p64</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Checksum trailing bytes one byte at a time. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p64</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>len</name> <operator>&amp;=</operator> <literal type="number">0x7</literal></expr>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><name>len</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <asm>__asm__ <specifier>__volatile__</specifier>(".byte 0xF2, 0x0F, 0x38, 0xF0, 0xF1" : "=S"(crc) : "0"(crc), "c"(*p));</asm>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><operator>~</operator><name>crc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
 * __wt_checksum_hw --
 *     Return a checksum for a chunk of memory, computed in hardware using 8 byte steps.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type>
<name>__wt_checksum_hw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>nqwords</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>p64</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>crc</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

    <comment type="block">/* Checksum one byte at a time to the first 4B boundary. */</comment>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>chunk</name></expr>;</init> <condition><expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><operator>--</operator><name>len</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>_mm_crc32_u8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>p64</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint64_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    <comment type="block">/* Checksum in 8B chunks. */</comment>
    <for>for <control>(<init><expr><name>nqwords</name> <operator>=</operator> <name>len</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>nqwords</name></expr>;</condition> <incr><expr><name>nqwords</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>crc</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>_mm_crc32_u64</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>*</operator><name>p64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p64</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Checksum trailing bytes one byte at a time. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p64</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>len</name> <operator>&amp;=</operator> <literal type="number">0x7</literal></expr>;</init> <condition><expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><name>len</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>_mm_crc32_u8</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><operator>(</operator><operator>~</operator><name>crc</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>__wt_checksum_sw</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern uint32_t (*wiredtiger_crc32c_func(void</extern>))<expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>,</operator> <name>size_t</name><operator>)</operator>
  <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><call><name>visibility</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<extern>extern uint32_t (*wiredtiger_crc32c_func(void</extern>))<expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>,</operator> <name>size_t</name><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * wiredtiger_crc32c_func --
 *     WiredTiger: detect CRC hardware and return the checksum function.
 */</comment>
<macro><name>uint32_t</name> <argument_list>(<argument>*wiredtiger_crc32c_func(void)</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>,</operator> <name>size_t</name><operator>)</operator>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_NO_CRC32_HARDWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__amd64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
    <expr><name>unsigned</name> <name>int</name> <name>eax</name></expr>, <expr><name>ebx</name></expr>, <expr><name>ecx</name></expr>, <expr><name>edx</name></expr>;

    <expr><name>__asm__</name> <specifier>__volatile__</specifier><operator>(</operator><literal type="string">"cpuid"</literal> <operator>:</operator> <literal type="string">"=a"</literal><operator>(</operator><name>eax</name><operator>)</operator><operator>,</operator> <literal type="string">"=b"</literal><operator>(</operator><name>ebx</name><operator>)</operator><operator>,</operator> <literal type="string">"=c"</literal><operator>(</operator><name>ecx</name><operator>)</operator><operator>,</operator> <literal type="string">"=d"</literal><operator>(</operator><name>edx</name><operator>)</operator> <operator>:</operator> <literal type="string">"a"</literal><operator>(</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUID_ECX_HAS_SSE42</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>
    <if_stmt><if>if <condition>(<expr><name>ecx</name> <operator>&amp;</operator> <name>CPUID_ECX_HAS_SSE42</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><name>__wt_checksum_hw</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt></block></expr></expr_stmt>
    <return>return <expr><operator>(</operator><name>__wt_checksum_sw</name><operator>)</operator></expr>;</return>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>int</name></type> <name><name>cpuInfo</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>__cpuid</name><argument_list>(<argument><expr><name>cpuInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPUID_ECX_HAS_SSE42</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>
    <if_stmt><if>if <condition>(<expr><name><name>cpuInfo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <name>CPUID_ECX_HAS_SSE42</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><name>__wt_checksum_hw</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>__wt_checksum_sw</name><operator>)</operator></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><operator>(</operator><name>__wt_checksum_sw</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr><operator>(</operator><name>__wt_checksum_sw</name><operator>)</operator></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
</unit>
