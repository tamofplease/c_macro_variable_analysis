<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/bin/gpfdist/gpfdist.c"><cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/* exclude transformation features on windows for now */</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GPFXDIST</name></cpp:undef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32_WINNT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0501</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_env.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_info.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;event.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;gpfxdist.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream/fstream.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOCKET</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>closesocket</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>closesocket</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>close(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_LEAN_AND_MEAN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHUT_WR</name></cpp:macro> <cpp:value>SD_SEND</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>socklen_t</name></cpp:macro> <cpp:value>int</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ECONNRESET</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECONNRESET</name></cpp:macro>   <cpp:value>WSAECONNRESET</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;postgres.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pg_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pg_config_manual.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gpfdist_helper.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zstd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_COMPRESS_LEVEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FRAME_SIZE</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>

<comment type="block">/*  A data block */</comment>
<typedef>typedef <type><name><name>struct</name> <name>blockhdr_t</name></name></type> <name>blockhdr_t</name>;</typedef>
<struct>struct <name>blockhdr_t</name>
<block>{
	<decl_stmt><decl><type><name>char</name></type> 	<name><name>hbyte</name><index>[<expr><literal type="number">293</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 	<name>hbot</name></decl>, <decl><type ref="prev"/><name>htop</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * Data that is sent from server to client
 */</comment>
<typedef>typedef <type><name><name>struct</name> <name>block_t</name></name></type> <name>block_t</name>;</typedef>
<struct>struct <name>block_t</name>
<block>{
	<decl_stmt><decl><type><name>blockhdr_t</name></type> 	<name>hdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>bot</name></decl>, <decl><type ref="prev"/><name>top</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>      	<name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>cdata</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*  Get session id for this request */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_SID</name><parameter_list>(<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((r-&gt;sid))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>REQUEST_SEQ</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/*  sequence number for request */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>SESSION_SEQ</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/*  sequence number for session */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>OUT_BUFFER_SIZE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* zstd out buffer size */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>base16_decode</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
<comment type="block">/* SSL additions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_RENEGOTIATE_TIMEOUT_SEC</name></cpp:macro>	<cpp:value>(600)</cpp:value></cpp:define> <comment type="block">/* 10 minutes */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>CertificateFilename</name> <init>= <expr><literal type="string">"server.crt"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>PrivateKeyFilename</name> <init>= <expr><literal type="string">"server.key"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>TrustedCaFilename</name> <init>= <expr><literal type="string">"root.crt"</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type><name>initialize_ctx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_ssl_error</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>sbio</name></decl></parameter>, <parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>flush_ssl_buffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* SSL end */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**************

 NOTE on GP_PROTO
 ================
 When a gpdb segment connects to gpfdist, it provides the following parameters:
 X-GP-XID   - transaction ID
 X-GP-CID   - command ID to distinguish different queries.
 X-GP-SN    - scan number to distinguish scans on the same external tables
              within the same query.
 X-GP-PROTO - protocol number, report error if not provided:

 X-GP-PROTO = 0
 return the content of the file without any kind of meta info

 X-GP-PROTO = 1
 each data block is tagged by meta info like this:
 byte 0: type (can be 'F'ilename, 'O'ffset, 'D'ata, 'E'rror, 'L'inenumber)
 byte 1-4: length. # bytes of following data block. in network-order.
 byte 5-X: the block itself.

 The stream is terminated by a Data block of length 0. If the stream is
 not property terminated, then gpfdist encountered some error, and caller
 should check the gpfdist error log.

 **************/</comment>

<typedef>typedef <type><name><name>struct</name> <name>gnet_request_t</name></name></type> <name>gnet_request_t</name>;</typedef>
<struct>struct <name>gnet_request_t</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type> 	<name>argc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> 	<name>argv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 	<name>hc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> 	<name><name>hname</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> 	<name><name>hvalue</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>gnet_request_t</name><modifier>*</modifier></type> <name>gnet_parse_request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>len</name></decl></parameter>,
										  <parameter><decl><type><name>apr_pool_t</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>gstring_trim</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>percent_encoding_to_char</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* CR-2723 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPFDIST_MAX_LINE_LOWER_LIMIT</name></cpp:macro> <cpp:value>(32*1024)</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPFDIST_MAX_LINE_UPPER_LIMIT</name></cpp:macro> <cpp:value>(256*1024*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPFDIST_MAX_LINE_MESSAGE</name></cpp:macro>     <cpp:value>"Error: -m max row length must be between 32KB and 256MB"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPFDIST_MAX_LINE_UPPER_LIMIT</name></cpp:macro> <cpp:value>(1024*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPFDIST_MAX_LINE_MESSAGE</name></cpp:macro>     <cpp:value>"Error: -m max row length must be between 32KB and 1MB"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*	Struct of command line options */</comment>
<struct><specifier>static</specifier> struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>p</name></decl>;</decl_stmt> <comment type="block">/* port */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>last_port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>v</name></decl>;</decl_stmt> <comment type="block">/* verbose */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>V</name></decl>;</decl_stmt> <comment type="block">/* very verbose */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>d</name></decl>;</decl_stmt> <comment type="block">/* directory */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>l</name></decl>;</decl_stmt> <comment type="block">/* log filename */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>	<name>f</name></decl>;</decl_stmt> <comment type="block">/* forced filename */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>g</name></decl>;</decl_stmt> <comment type="block">/* gp_proto (0 or 1) (internal, not documented) */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>t</name></decl>;</decl_stmt> <comment type="block">/* timeout in seconds */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt> <comment type="block">/* IP address to bind (internal, not documented) */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>m</name></decl>;</decl_stmt> <comment type="block">/* max data line len */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>S</name></decl>;</decl_stmt> <comment type="block">/* use O_SYNC when opening files for write  */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>z</name></decl>;</decl_stmt> <comment type="block">/* listen queue size (hidden option currently for debugging) */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>c</name></decl>;</decl_stmt> <comment type="block">/* config file */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>transform</name></name><modifier>*</modifier></type> <name>trlist</name></decl>;</decl_stmt> <comment type="block">/* transforms from config file */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ssl</name></decl>;</decl_stmt> <comment type="block">/* path to certificates in case we use gpfdist with ssl */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>w</name></decl>;</decl_stmt> <comment type="block">/* The time used for session timeout in seconds */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>compress</name></decl>;</decl_stmt> <comment type="block">/* The flag to indicate whether comopression transmission is open */</comment>
}</block> <decl><name>opt</name> <init>= <expr><block>{ <expr><literal type="number">8080</literal></expr>, <expr><literal type="number">8080</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"."</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32768</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>


<typedef>typedef <type><union>union <name>address</name>
<block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name></type> <name>sa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>sa_in</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>sa_in6</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>sa_stor</name></decl>;</decl_stmt>
}</block></union></type>
<name>address_t</name>;</typedef>

<comment type="block">/*  Global control block */</comment>

<struct><specifier>static</specifier> struct
<block>{
	<decl_stmt><decl><type><name>apr_pool_t</name><modifier>*</modifier></type> 	<name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>listen_sock_count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SOCKET</name></type> 			<name><name>listen_socks</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> 	<name><name>listen_events</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type>    <name>signal_event</name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>int</name></type> 		<name>gen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>apr_hash_t</name><modifier>*</modifier></type> <name>tab</name></decl>;</decl_stmt>
	}</block> <decl><name>session</name></decl>;</struct>
	<decl_stmt><decl><type><name>apr_int64_t</name></type> 	<name>read_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>apr_int64_t</name></type> 	<name>total_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 			<name>total_sessions</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<decl_stmt><decl><type><name>BIO</name> 			<modifier>*</modifier></type><name>bio_err</name></decl>;</decl_stmt>	<comment type="block">/* for SSL */</comment>
	<decl_stmt><decl><type><name>SSL_CTX</name> 		<modifier>*</modifier></type><name>server_ctx</name></decl>;</decl_stmt><comment type="block">/* for SSL */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> 			<name>wdtimer</name></decl>;</decl_stmt> <comment type="block">/* Kill gpfdist after k seconds of inactivity. 0 to disable. */</comment>
}</block> <decl><name>gcb</name></decl>;</struct>

<comment type="block">/*  A session */</comment>
<typedef>typedef <type><name><name>struct</name> <name>session_t</name></name></type> <name>session_t</name>;</typedef>
<struct>struct <name>session_t</name>
<block>{
	<decl_stmt><decl><type><name>long</name></type>			<name>id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>apr_pool_t</name><modifier>*</modifier></type> 	<name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> 	<name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> 	<name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> 	<name>path</name></decl>;</decl_stmt>			<comment type="block">/* path requested */</comment>
	<decl_stmt><decl><type><name>fstream_t</name><modifier>*</modifier></type> 		<name>fstream</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 			<name>is_error</name></decl>;</decl_stmt>		<comment type="block">/* error flag */</comment>
	<decl_stmt><decl><type><name>int</name></type> 			<name>nrequest</name></decl>;</decl_stmt>		<comment type="block">/* # requests attached to this session */</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>is_get</name></decl>;</decl_stmt>     	<comment type="block">/* true for GET, false for POST */</comment>
	<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type>			<name>active_segids</name></decl>;</decl_stmt>	<comment type="block">/* array indexed by segid. used for write operations
									   to indicate which segdbs are writing and when each
									   is done (sent a final request) */</comment>
	<decl_stmt><decl><type><name>apr_int64_t</name><modifier>*</modifier></type>	<name>seq_segs</name></decl>;</decl_stmt>       <comment type="block">/* array indexed by segid. used for write operations to record the sequence number
						   of data which has been written to disk*/</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>maxsegs</name></decl>;</decl_stmt> 		<comment type="block">/* same as request-&gt;totalsegs. length of active_segs arr */</comment>
	<decl_stmt><decl><type><name>apr_time_t</name></type>		<name>mtime</name></decl>;</decl_stmt> 			<comment type="block">/* time when nrequest was modified */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> 	<name>tm</name></decl>;</decl_stmt>             <comment type="block">/* timeout for struct event */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type>   	<name>ev</name></decl>;</decl_stmt>             <comment type="block">/* event we are watching for this session*/</comment>
	<decl_stmt><decl><type><name>apr_hash_t</name>		<modifier>*</modifier></type><name>requests</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*  An http request */</comment>
<typedef>typedef <type><name><name>struct</name> <name>request_t</name></name></type> <name>request_t</name>;</typedef>
<struct>struct <name>request_t</name>
<block>{
	<decl_stmt><decl><type><name>long</name></type>			<name>id</name></decl>;</decl_stmt>			<comment type="block">/* request id (auto increment) */</comment>
	<decl_stmt><decl><type><name>long</name></type>			<name>sid</name></decl>;</decl_stmt>		<comment type="block">/* session id (auto increment) */</comment>
	<decl_stmt><decl><type><name>long</name></type>			<name>bytes</name></decl>;</decl_stmt> 		<comment type="block">/* bytes sent to TCP or receive from TCP */</comment>
	<decl_stmt><decl><type><name>apr_time_t</name></type>		<name>last</name></decl>;</decl_stmt> 		<comment type="block">/* last timestamp for send/receive data */</comment>
	<decl_stmt><decl><type><name>apr_int64_t</name></type>     <name>seq</name></decl>;</decl_stmt>        <comment type="block">/* sequence number */</comment>

	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type>  <name>port</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SOCKET</name></type> 			<name>sock</name></decl>;</decl_stmt> 		<comment type="block">/* the socket */</comment>
	<decl_stmt><decl><type><name>apr_pool_t</name><modifier>*</modifier></type> 	<name>pool</name></decl>;</decl_stmt> 		<comment type="block">/* memory pool container */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> 	<name>tm</name></decl>;</decl_stmt> 		<comment type="block">/* timeout for struct event */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>event</name></name></type> 	<name>ev</name></decl>;</decl_stmt> 		<comment type="block">/* event we are watching for this request */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> 	<name>peer</name></decl>;</decl_stmt> 		<comment type="block">/* peer IP:port string */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> 	<name>path</name></decl>;</decl_stmt> 		<comment type="block">/* path to file */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> 	<name>tid</name></decl>;</decl_stmt> 		<comment type="block">/* transaction id */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> 	<name>csvopt</name></decl>;</decl_stmt> 	<comment type="block">/* options for csv file */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>		<comment type="block">/* requested transformation */</comment>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>command</name></decl>;</decl_stmt>	<comment type="block">/* command associated with transform */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>paths</name></decl>;</decl_stmt>		<comment type="block">/* 1 if filename passed to transform should contain paths to data files */</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errfilename</name></decl>;</decl_stmt> <comment type="block">/* name of temporary file holding stderr to send to server */</comment>
		<decl_stmt><decl><type><name>apr_file_t</name><modifier>*</modifier></type> <name>errfile</name></decl>;</decl_stmt>	<comment type="block">/* temporary file holding stderr to send to server */</comment>
	}</block> <decl><name>trans</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>session_t</name><modifier>*</modifier></type> 		<name>session</name></decl>;</decl_stmt> 	<comment type="block">/* the session this request is attached to */</comment>
	<decl_stmt><decl><type><name>int</name></type> 			<name>gp_proto</name></decl>;</decl_stmt> 	<comment type="block">/* the protocol to use, sent from client */</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>is_get</name></decl>;</decl_stmt>     <comment type="block">/* true for GET, false for POST */</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>is_final</name></decl>;</decl_stmt>	<comment type="block">/* the final POST request. a signal from client to end session */</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>segid</name></decl>;</decl_stmt>		<comment type="block">/* the segment id of the segdb with the request */</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>totalsegs</name></decl>;</decl_stmt>	<comment type="block">/* the total number of segdbs */</comment>

	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> 	<name>hbuf</name></decl>;</decl_stmt> 		<comment type="block">/* buffer for raw incoming HTTP request */</comment>
		<decl_stmt><decl><type><name>int</name></type> 	<name>hbuftop</name></decl>;</decl_stmt> 	<comment type="block">/* # bytes used in hbuf */</comment>
		<decl_stmt><decl><type><name>int</name></type> 	<name>hbufmax</name></decl>;</decl_stmt> 	<comment type="block">/* size of hbuf[] */</comment>
		<decl_stmt><decl><type><name>gnet_request_t</name><modifier>*</modifier></type> <name>req</name></decl>;</decl_stmt> <comment type="block">/* a parsed HTTP request, NULL if still incomplete. */</comment>
		<decl_stmt><decl><type><name>int</name></type>		<name>davailable</name></decl>;</decl_stmt>	<comment type="block">/* number of data bytes available to consume */</comment>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>	<name>dbuf</name></decl>;</decl_stmt>		<comment type="block">/* buffer for raw data from a POST request */</comment>
		<decl_stmt><decl><type><name>int</name></type> 	<name>dbuftop</name></decl>;</decl_stmt> 	<comment type="block">/* # bytes used in dbuf */</comment>
		<decl_stmt><decl><type><name>int</name></type> 	<name>dbufmax</name></decl>;</decl_stmt> 	<comment type="block">/* size of dbuf[] */</comment>
	}</block> <decl><name>in</name></decl>;</struct>

	<decl_stmt><decl><type><name>block_t</name></type>	<name>outblock</name></decl>;</decl_stmt>	<comment type="block">/* next block to send out */</comment>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>           <name>line_delim_str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>             <name>line_delim_length</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<decl_stmt><decl><type><name>ZSTD_CCtx</name><modifier>*</modifier></type>		<name>zstd_cctx</name></decl>;</decl_stmt>	<comment type="block">/* zstd context */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	
	<decl_stmt><decl><type><name>int</name></type>				<name>zstd</name></decl>;</decl_stmt>		<comment type="block">/* request use zstd compress */</comment>
	<decl_stmt><decl><type><name>int</name></type>				<name>zstd_err_len</name></decl>;</decl_stmt> 	<comment type="block">/* space allocate for zstd_error string */</comment>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>				<name>zstd_error</name></decl>;</decl_stmt>	<comment type="block">/* string contains zstd error*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<comment type="block">/* SSL related */</comment>
	<decl_stmt><decl><type><name>BIO</name>			<modifier>*</modifier></type><name>io</name></decl>;</decl_stmt>		<comment type="block">/* for the i.o. */</comment>
	<decl_stmt><decl><type><name>BIO</name>			<modifier>*</modifier></type><name>sbio</name></decl>;</decl_stmt>		<comment type="block">/* for the accept */</comment>
	<decl_stmt><decl><type><name>BIO</name>			<modifier>*</modifier></type><name>ssl_bio</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SSL</name>			<modifier>*</modifier></type><name>ssl</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>



<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_IS_BIGENDIAN</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local_htonll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local_ntohll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(n)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local_htonll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((((apr_uint64_t) htonl(n)) &lt;&lt; 32LL) | htonl((n) &gt;&gt; 32LL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>local_ntohll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((((apr_uint64_t) ntohl(n)) &lt;&lt; 32LL) | (apr_uint32_t) ntohl(((apr_uint64_t)n) &gt;&gt; 32LL))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_SEQ</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPEN_SEQ</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ggetpid</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log_gpfdist_status</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log_request_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gprintln</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gprintlnif</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gfatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gwarning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gdebug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>2<operator>,</operator> 3</function_decl>)<empty_stmt>;</empty_stmt>

<comment type="block">/* send gp-proto==1 ctl info */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gp1_send_eof</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gp1_send_errmsg</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gp1_send_errfile</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>apr_file_t</name><modifier>*</modifier></type> <name>errfile</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>datetime_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>datetime</name><parameter_list>(<parameter><decl><type><name>apr_time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>setup_read</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>setup_write</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setup_do_close</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>session_attach</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>session_detach</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>session_end</name><parameter_list>(<parameter><decl><type><name>session_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>session_free</name><parameter_list>(<parameter><decl><type><name>session_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>session_active_segs_dump</name><parameter_list>(<parameter><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>session_active_segs_isempty</name><parameter_list>(<parameter><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>request_validate</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>request_set_path</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>request_path_validate</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>compress_zstd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>request_parse_gp_headers</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_g</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_session_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>request_set_transform</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_post_request</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>header_end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_get_request</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gpfdist_socket_send</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>gpfdist_send</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* function pointer */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gpfdist_socket_receive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (<modifier>*</modifier><name>gpfdist_receive</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* function pointer */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>request_cleanup</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gpfdist_SSL_send</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>gpfdist_SSL_receive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_SSL_resources</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setup_flush_ssl_buffer</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>request_cleanup_and_free_SSL_resources</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>local_send</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>get_unsent_bytes</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>palloc_safe</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>apr_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>apr_size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>4<operator>,</operator> 5</function_decl>)<empty_stmt>;</empty_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>pcalloc_safe</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>apr_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>apr_size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>4<operator>,</operator> 5</function_decl>)<empty_stmt>;</empty_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_term_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>,<parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gpfdist_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>gpfdist_run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>delay_watchdog_timer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_time_t</name></type> <name>shutdown_time</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>watchdog_thread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>EMPTY_HTTP_RES</name> <init>= <expr><literal type="string">"HTTP/1.0 200 ok\r\n"</literal>
		<literal type="string">"Content-type: text/plain\r\n"</literal>
		<literal type="string">"Content-length: 0\r\n"</literal>
		<literal type="string">"Expires: 0\r\n"</literal>
		<literal type="string">"X-GPFDIST-VERSION: "</literal> <name>GP_VERSION</name> <literal type="string">"\r\n"</literal>
		<literal type="string">"Cache-Control: no-cache\r\n"</literal>
		<literal type="string">"Connection: close\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>HTTP_RESPONSE_ZSTD</name> <init>= <expr><literal type="string">"HTTP/1.0 200 ok\r\n"</literal>
		<literal type="string">"Content-type: text/plain\r\n"</literal>
		<literal type="string">"Expires: 0\r\n"</literal>
		<literal type="string">"X-GPFDIST-VERSION: "</literal> <name>GP_VERSION</name> <literal type="string">"\r\n"</literal>
		<literal type="string">"X-GP-PROTO: %d\r\n"</literal>
		<literal type="string">"Cache-Control: no-cache\r\n"</literal>
		<literal type="string">"Connection: close\r\n"</literal>
		<literal type="string">"X-GP-ZSTD: %d\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>HTTP_RESPONSE</name> <init>= <expr><literal type="string">"HTTP/1.0 200 ok\r\n"</literal>
		<literal type="string">"Content-type: text/plain\r\n"</literal>
		<literal type="string">"Expires: 0\r\n"</literal>
		<literal type="string">"X-GPFDIST-VERSION: "</literal> <name>GP_VERSION</name> <literal type="string">"\r\n"</literal>
		<literal type="string">"X-GP-PROTO: %d\r\n"</literal>
		<literal type="string">"Cache-Control: no-cache\r\n"</literal>
		<literal type="string">"Connection: close\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * block_fill_header
 *
 * Prepare a block header for sending to the client. It includes various meta
 * data information such as filename, initial linenumber, etc. This will only
 * get used in PROTO-1. We store this header in block_t-&gt;hdr (a blockhdr_t)
 * and PROTO-0 never uses it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>block_fill_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type> <name>b</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>fstream_filename_and_offset</name></name><modifier>*</modifier></type> <name>fos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>blockhdr_t</name><modifier>*</modifier></type>		<name>h</name> <init>= <expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>hdr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>apr_int32_t</name></type> 	<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>apr_int64_t</name></type> 	<name>len8</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>			<name>p</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>hbyte</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 			<name>fname_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>fos</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hbot</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* FILENAME: 'F' + len + fname */</comment>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'F'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>fname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>fos</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>, <argument><expr><name>fname_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>fname_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"F %u %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>fos</name><operator>-&gt;</operator><name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* OFFSET: 'O' + len + foff */</comment>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'O'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len8</name> <operator>=</operator> <call><name>local_htonll</name><argument_list>(<argument><expr><name><name>fos</name><operator>-&gt;</operator><name>foff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"O %llu"</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>local_ntohll</name><argument_list>(<argument><expr><name>len8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"O %lu"</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>local_ntohll</name><argument_list>(<argument><expr><name>len8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* LINENUMBER: 'L' + len + linenumber */</comment>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len8</name> <operator>=</operator> <call><name>local_htonll</name><argument_list>(<argument><expr><name><name>fos</name><operator>-&gt;</operator><name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"L %llu"</literal></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator> <call><name>local_ntohll</name><argument_list>(<argument><expr><name>len8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"L %lu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><call><name>local_ntohll</name><argument_list>(<argument><expr><name>len8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* DATA: 'D' + len */</comment>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'D'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>top</name></name><operator>-</operator><name><name>b</name><operator>-&gt;</operator><name>bot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"D %u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>htop</name></name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>hbyte</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>htop</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>hbyte</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"assert failed, h-&gt;htop = %d, max = %d"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>htop</name></name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>hbyte</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"header size: %d"</literal></expr></argument>,<argument><expr><name><name>h</name><operator>-&gt;</operator><name>htop</name></name><operator>-</operator><name><name>h</name><operator>-&gt;</operator><name>hbot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name>get_client_port</name><parameter_list>(<parameter><decl><type><name>address_t</name> <modifier>*</modifier></type><name>clientInformation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">//check the family version of client IP address, so you</comment>
	<comment type="line">//can know where to cast, either to sockaddr_in or sockaddr_in6</comment>
	<comment type="line">//and then grab the port after casting</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>clientInformation</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>ipv4</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>clientInformation</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><name><name>ipv4</name><operator>-&gt;</operator><name>sin_port</name></name></expr>;</return>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>ipv6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>clientInformation</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><name><name>ipv6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>



<comment type="block">/* Print usage */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>print_usage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>print_usage</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>GPHOME</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE</name><modifier>*</modifier></type> <name>fp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>gcb</name><operator>.</operator><name>pool</name></name> <operator>&amp;&amp;</operator> <call><name>apr_env_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>GPHOME</name></expr></argument>, <argument><expr><literal type="string">"GPHOME"</literal></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>GPHOME</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>GPHOME</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="string">"%s/docs/cli_help/gpfdist_help"</literal></expr></argument>,
					<argument><expr><name>GPHOME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>path</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
			<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>getc</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
					<argument><expr><literal type="string">"gpfdist -- file distribution web server\n\n"</literal>
						<literal type="string">"usage: gpfdist [--ssl &lt;certificates_directory&gt;] [-d &lt;directory&gt;] [-p &lt;http(s)_port&gt;] [-l &lt;log_file&gt;] [-t &lt;timeout&gt;] [-v | -V | -s] [-m &lt;maxlen&gt;] [-w &lt;timeout&gt;]"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
					    <literal type="string">"[-c file]"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					    <literal type="string">"\n\n"</literal>
						<literal type="string">"       gpfdist [-? | --help] | --version\n\n"</literal>
						<literal type="string">"        -?, --help : print this screen\n"</literal>
						<literal type="string">"        -v         : verbose mode\n"</literal>
						<literal type="string">"        -V         : more verbose\n"</literal>
						<literal type="string">"        -s         : simplified minimum log\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
						<literal type="string">"        -p port    : port to serve HTTP(S), default is 8080\n"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<literal type="string">"        -p port    : port to serve HTTP, default is 8080\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<literal type="string">"        -d dir     : serve files under the specified directory,  default is '.'\n"</literal>
						<literal type="string">"        -l logfn   : log filename\n"</literal>
						<literal type="string">"        -t tm      : timeout in seconds \n"</literal>
						<literal type="string">"        -m maxlen  : max data row length expected, in bytes. default is 32768\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
						<literal type="string">"        --ssl dir  : start HTTPS server. Use the certificates from the specified directory\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
					    <literal type="string">"        -c file    : configuration file for transformations\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<literal type="string">"        --version  : print version information\n"</literal>
						<literal type="string">"        -w timeout : timeout in seconds before close target file\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><ternary><condition><expr><name>msg</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"gpfdist version \"%s\"\n"</literal></expr></argument>, <argument><expr><name>GP_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_q_x_h_are_gone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"The -q, -h and -x options are gone.  Please specify these as in this example:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"create external table a (a int) location ('gpfdist://...') format 'csv' (escape as '\"' quote as '\"' header);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Parse command line */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_command_line</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>,
		<parameter><decl><type><name>apr_pool_t</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>apr_getopt_t</name><modifier>*</modifier></type> 	<name>os</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> 	<name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> 			<name><name>apr_errbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 			<name>ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 			<name>e</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>current_directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>option</name><index>[]</index></name> <init>=
	<expr><block>{
	<comment type="block">/* long-option, short-option, has-arg flag, description */</comment>
	<expr><block>{ <expr><literal type="string">"help"</literal></expr>, <expr><literal type="char">'?'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"print help screen"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"very verbose"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"verbose mode"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"simplified log without request header"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"which port to serve HTTP(S)"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"last port of range of ports to serve HTTP(S)"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"serve files under this directory"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"internal - force file to be given file name"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"internal - bind to ip4 address"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"gone"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"gone"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"gone"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"log filename"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="string">"timeout in seconds"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"internal - gp_proto number"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"max data row length expected"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"use O_SYNC when opening files for write"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"internal - queue size for listen call"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"ssl"</literal></expr>, <expr><literal type="number">257</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"ssl - certificates files under this directory"</literal></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"transform configuration file"</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{ <expr><literal type="string">"version"</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"print version number"</literal></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"wait for session timeout in seconds"</literal></expr> }</block></expr>,
	<expr><block>{<expr><literal type="string">"compress"</literal></expr>, <expr><literal type="number">258</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"turn on compressed transmission"</literal></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>apr_getopt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>os</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>APR_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"apt_getopt_init failed: %s"</literal></expr></argument>,
			   <argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>apr_errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>APR_SUCCESS</name> <operator>==</operator> <operator>(</operator><name>e</name> <operator>=</operator> <call><name>apr_getopt_long</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>ch</name></expr>)</condition>
		<block>{<block_content>
		<case>case <expr><literal type="char">'?'</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'v'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>v</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'V'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>V</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'h'</literal></expr>:</case>
			<expr_stmt><expr><call><name>print_q_x_h_are_gone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'q'</literal></expr>:</case>
			<expr_stmt><expr><call><name>print_q_x_h_are_gone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'x'</literal></expr>:</case>
			<expr_stmt><expr><call><name>print_q_x_h_are_gone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'p'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>last_port</name></name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>p</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'P'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>last_port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'l'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>l</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>t</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'g'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>g</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'b'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'m'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>m</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'S'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>S</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'z'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>z</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'c'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
			<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
		<case>case <expr><literal type="number">257</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
			<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<case>case <expr><literal type="number">257</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"SSL is not supported by this build"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<case>case <expr><literal type="number">256</literal></expr>:</case>
			<expr_stmt><expr><call><name>print_version</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'w'</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>w</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
		<case>case <expr><literal type="number">258</literal></expr>:</case>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>compress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<case>case <expr><literal type="number">258</literal></expr>:</case>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"ZSTD is not supported by this build"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>e</name> <operator>!=</operator> <name>APR_EOF</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Error: illegal arguments"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><literal type="number">0</literal> <operator>&lt;</operator> <name><name>opt</name><operator>.</operator><name>p</name></name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>.</operator><name>p</name></name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Error: please specify a valid port number for -p switch"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <name><name>opt</name><operator>.</operator><name>g</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name><name>opt</name><operator>.</operator><name>g</name></name> <operator>||</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>opt</name><operator>.</operator><name>g</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Error: please specify 0 or 1 for -g switch (note: this is internal)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_timeout</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Error: -t timeout must be between 2 and 7200, or 0 for no timeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_session_timeout</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>w</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Error: -w timeout must be between 1 and 7200, or 0 for no timeout"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* validate max row length */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><operator>(</operator><name>GPFDIST_MAX_LINE_LOWER_LIMIT</name> <operator>&lt;=</operator> <name><name>opt</name><operator>.</operator><name>m</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>opt</name><operator>.</operator><name>m</name></name> <operator>&lt;=</operator> <name>GPFDIST_MAX_LINE_UPPER_LIMIT</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    	<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><name>GPFDIST_MAX_LINE_MESSAGE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_valid_listen_queue_size</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Error: -z listen queue size must be between 16 and 512 (default is 256)"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* get current directory, for ssl directory validation */</comment>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_filepath_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_directory</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot access directory '.'\n"</literal>
									   <literal type="string">"Please run gpfdist from a different location"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* validate opt.d */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>gstring_trim</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* collapse // */</comment>
		<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

		<comment type="block">/* disallow / */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Security Error:  You cannot specify the root"</literal>
						<literal type="string">" directory (/) as the source files directory."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* strip ending / */</comment>
		<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>d</name></name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* check that the dir exists */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_filepath_set</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot access directory '%s'\n"</literal>
				<literal type="string">"Please specify a valid directory for -d switch"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_filepath_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot access directory '%s'\n"</literal>
				<literal type="string">"Please specify a valid directory for -d switch"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>d</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* validate opt.l */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>l</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>gstring_trim</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>l</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* collapse // */</comment>
		<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

		<comment type="block">/* disallow / */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Security Error: You cannot specify the root"</literal>
						<literal type="string">" directory (/) as the log file directory."</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* strip ending / */</comment>
		<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>l</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>l</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>l</name></name> <operator>=</operator> <literal type="string">"."</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* check that the file exists */</comment>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unable to create log file %s: %s\n"</literal></expr></argument>,
					<argument><expr><name><name>opt</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<comment type="block">/* validate opt.ssl */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>gstring_trim</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* collapse // */</comment>
		<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

		<comment type="block">/* disallow / */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Security Error: You cannot specify the root"</literal>
						<literal type="string">" directory (/) as the certificates directory"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* strip ending / */</comment>
		<while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>p</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>
		<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

		<comment type="block">/* change current directory to original one (after -d changed it) */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_filepath_set</name><argument_list>(<argument><expr><name>current_directory</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot access directory '%s'\n"</literal>
											   <literal type="string">"Please run gpfdist from a different location"</literal></expr></argument>, <argument><expr><name>current_directory</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/* check that the dir exists */</comment>
		<if_stmt><if>if <condition>( <expr><operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_filepath_set</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_filepath_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">"Error: cannot access directory '%s'\n"</literal>
				<literal type="string">"Please specify a valid directory for --ssl switch"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
    <comment type="block">/* validate opt.c */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>c</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>transform_config</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>filename</name></expr></argument>, <argument><expr>struct <name>transform</name><operator>*</operator><operator>*</operator> <name>trlistp</name></expr></argument>, <argument><expr><name>int</name> <name>verbose</name></expr></argument>)</argument_list></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>transform_config</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>.</operator><name>trlist</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* transform_config has already printed a message to stderr on failure */</comment>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* there should not be any more args left */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>os</name><operator>-&gt;</operator><name>ind</name></name> <operator>!=</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>usage_error</name><argument_list>(<argument><expr><literal type="string">"Error: illegal arguments"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* http error codes used by gpfdist */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIST_OK</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIST_BAD_REQUEST</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIST_TIMEOUT</name></cpp:macro> <cpp:value>408</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FDIST_INTERNAL_ERROR</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>

<comment type="block">/* send an error response */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_error</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"HTTP ERROR: %s - %d %s\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"HTTP/1.0 %d %s\r\n"</literal>
		<literal type="string">"Content-length: 0\r\n"</literal>
		<literal type="string">"Expires: 0\r\n"</literal>
		<literal type="string">"X-GPFDIST-VERSION: "</literal> <name>GP_VERSION</name> <literal type="string">"\r\n"</literal>
		<literal type="string">"Cache-Control: no-cache\r\n"</literal>
		<literal type="string">"Connection: close\r\n\r\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* send an empty response */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_empty</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"HTTP EMPTY: %s %s %s - OK"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>EMPTY_HTTP_RES</name></expr></argument>, <argument><expr><call><name>strlen</name> <argument_list>(<argument><expr><name>EMPTY_HTTP_RES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* send a Continue response */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http_continue</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>buf</name><index>[]</index></name> <init>= <expr><literal type="string">"HTTP/1.1 100 Continue\r\n\r\n"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s - Continue"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof <name>buf</name></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* send an OK response */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>http_ok</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>HTTP_RESPONSE_ZSTD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>HTTP_RESPONSE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"internal error - buffer overflow during http_ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>n</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"%s - socket error\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"%s %s %s - OK"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_gpfdist_status</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>num_sessions</name> <init>= <expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"---------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"STATUS: total session(s) %d\n"</literal></expr></argument>, <argument><expr><name>num_sessions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>apr_hash_index_t</name><modifier>*</modifier></type> <name>hi</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hi</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_sessions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>hi</name> <operator>=</operator> <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>session_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>session_t</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"session %d: NULL\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ferror</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>fstream</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>fstream_get_error</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"session %d: tid=%s, fs_error=%s, is_error=%d, nrequest=%d is_get=%d, maxsegs=%d\n"</literal></expr></argument>,
				<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>ferror</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"N/A"</literal></expr> </then><else>: <expr><name>ferror</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>is_error</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nrequest</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>is_get</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxsegs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>session_active_segs_dump</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"session: [\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hi</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num_sessions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>hi</name> <operator>=</operator> <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>session_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>session_t</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						<argument><expr><literal type="string">"\t%s :{\r\n"</literal>
						<literal type="string">"\t\tnrequest: %d\r\n"</literal>
						<literal type="string">"\t\tis_get: %d\r\n"</literal>
						<literal type="string">"\t\tpath: %s\r\n"</literal>
						<literal type="string">"\t\trequest: [\r\n"</literal></expr></argument>,
						<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nrequest</name></name></expr></argument>,
						<argument><expr><name><name>s</name><operator>-&gt;</operator><name>is_get</name></name></expr></argument>,<argument><expr><name><name>s</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>num_requests</name> <init>= <expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>apr_hash_index_t</name><modifier>*</modifier></type> <name>hj</name> <init>= <expr><call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hj</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>num_requests</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>hj</name> <operator>=</operator> <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hj</name></expr></argument>)</argument_list></call></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hj</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><operator>(</operator><name>request_t</name><operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>r</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						<argument><expr><literal type="string">"\t\t\t%ld : {\r\n"</literal>
						<literal type="string">"\t\t\t\tbytes: %ld\r\n"</literal>
						<literal type="string">"\t\t\t\tunsent_bytes: %d\r\n"</literal>
						<literal type="string">"\t\t\t\tlast: %s\r\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
						<literal type="string">"\t\t\t\tseq: %ld\r\n"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<literal type="string">"\t\t\t\tseq: %"</literal><name>APR_INT64_T_FMT</name><literal type="string">"\r\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<literal type="string">"\t\t\t\tis_final: %d\r\n"</literal>
						<literal type="string">"\t\t\t\tsegid: %d\r\n"</literal>
						<literal type="string">"\t\t\t}\r\n"</literal></expr></argument>,
						<argument><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
						<argument><expr><name><name>r</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>,
						<argument><expr><call><name>get_unsent_bytes</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>datetime</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
						<argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
						<argument><expr><name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<argument><expr><name><name>r</name><operator>-&gt;</operator><name>is_final</name></name></expr></argument>,
						<argument><expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t\t]\r\n\t}\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"]\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"---------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * send_gpfdist_status
 *
 * send some server status back to the client. This is a debug utility and is
 * not normally used in normal production environment unless triggered for
 * debugging purposes. For more information see do_read, search for
 * 'gpfdist/status'.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_gpfdist_status</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>log_gpfdist_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * TODO: return response body is json encoded like:
	 * {
	 *   "request_time": "requst_time 2014-08-13 16:17:13",
	 *   "read_bytes": 1787522407,
	 *   "total_bytes": 3147292500,
	 *   "total_sessions": 2,
	 *   sessions: [
	 *   	"1" : {
	 *   	   	"tid": session-&gt;tid,
	 *   	   	"nrequest": session-&gt;nrequest,
	 *		   	"is_get": session-&gt;is_get,
	 *		   	"path": session-&gt;path,
	 *		   	"requests": [
	 *		   		"segid1": {
	 *					"bytes": request-&gt;bytes,
	 *					"last": request-&gt;last,
	 *					"seq": request-&gt;seq,
	 *					"is_final": request-&gt;is_final,
	 *					"segid": request-&gt;segid,
	 *
	 *		   		},
	 *		   		"segid2": {
	 *
	 *		   		}
	 *		   	]
	 *   	},
	 *   	"2" : {
	 *   	}
	 *   ]
	 * }
	 */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>time</name> <init>= <expr><call><name>datetime_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,	<argument><expr><literal type="string">"HTTP/1.0 200 ok\r\n"</literal>
										<literal type="string">"Content-type: text/plain\r\n"</literal>
										<literal type="string">"Expires: 0\r\n"</literal>
										<literal type="string">"X-GPFDIST-VERSION: "</literal> <name>GP_VERSION</name> <literal type="string">"\r\n"</literal>
										<literal type="string">"Cache-Control: no-cache\r\n"</literal>
										<literal type="string">"Connection: close\r\n\r\n"</literal>
										<literal type="string">"requst_time %s\r\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
										<literal type="string">"read_bytes %ld\r\n"</literal>
										<literal type="string">"total_bytes %ld\r\n"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
 										<literal type="string">"read_bytes %"</literal><name>APR_INT64_T_FMT</name><literal type="string">"\r\n"</literal>
 										<literal type="string">"total_bytes %"</literal><name>APR_INT64_T_FMT</name><literal type="string">"\r\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
										<literal type="string">"total_sessions %d\r\n"</literal></expr></argument>,
										<argument><expr><name>time</name></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
										<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>gcb</name><operator>.</operator><name>read_bytes</name></name></expr></argument>,
										<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>gcb</name><operator>.</operator><name>total_bytes</name></name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
										<argument><expr><name><name>gcb</name><operator>.</operator><name>read_bytes</name></name></expr></argument>,
										<argument><expr><name><name>gcb</name><operator>.</operator><name>total_bytes</name></name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
										<argument><expr><name><name>gcb</name><operator>.</operator><name>total_sessions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <sizeof>sizeof <name>buf</name></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"internal error - buffer overflow during send_gpfdist_status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>n</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"%s - socket error\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * request_end
 *
 * Finished a request. Close socket and cleanup.
 * Note: ending a request does not mean that the session is ended.
 * Maybe there is a request out there (of the same session), that still
 * has a block to send out.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>request_end</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>session_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * close and then re-open (for reading) the temporary file we've used to capture stderr
		 */</comment>
		<expr_stmt><expr><call><name>apr_file_flush</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"request closed stderr file %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * send the first 8K of stderr to the server
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>apr_file_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfilename</name></name></expr></argument>, <argument><expr><name>APR_READ</name><operator>|</operator><name>APR_BUFFERED</name></expr></argument>, <argument><expr><name>APR_UREAD</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>APR_SUCCESS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gp1_send_errfile</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * remove the temp file
		 */</comment>
		<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfilename</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"request removed stderr file %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gp1_send_eof</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gp1_send_errmsg</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"request end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we still have a block outstanding, the session is corrupted. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>top</name></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>bot</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"request failure resulting in session failure: top = %d, bot = %d"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>bot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>session_end</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* detach this request from its session */</comment>
		<expr_stmt><expr><call><name>session_detach</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* If we still have data in the buffer - flush it */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>flush_ssl_buffer</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>request_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>request_cleanup</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>local_send</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>gpfdist_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>(</operator><name>e</name> <operator>==</operator> <name>WSAEINTR</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>(</operator><name>e</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>( <expr><name>e</name> <operator>==</operator> <name>EPIPE</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>ECONNRESET</name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"gpfdist_send failed - the connection was terminated by the client (%d: %s)"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* close stream and release fd &amp; flock on pipe file*/</comment>
			<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>session_end</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<comment type="block">/* For post requests, the error msg may not be transmited
 			 * to the client side because of network failure. So the 
 			 * session has to be set an error to inform the client
 			 * through the following request response with an 
 			 * internal error. */</comment>
			<if type="elseif">else if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>session_end</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"gpfdist_send failed - due to (%d: %s)"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"gpfdist_send failed - due to (%d: %s), should try again"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
		<return>return <expr><ternary><condition><expr><name>ok</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>local_sendall</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>oldlen</name> <init>= <expr><name>buflen</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>buflen</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buflen</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>oldlen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * gp1_send_header
 *
 * In PROTO-1 we can send all kinds of data blocks to the client. each data
 * block is tagged by meta info like this:
 * byte 0: type (can be 'F'ilename, 'O'ffset, 'D'ata, 'E'rror, 'L'inenumber)
 * byte 1-4: length. # bytes of following data block. in network-order.
 * byte 5-X: the block itself.
 *
 * this function creates and sends the meta info according to the passed in
 * arguments. It does not send the block itself (bytes 5-X).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gp1_send_header</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>letter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> 		<name><name>hdr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>	<name>p</name> <init>= <expr><name>hdr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>letter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hdr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><call><name>local_sendall</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Send a message to the client to indicate EOF - no more data. This is done
 * by sending a 'D' message type (Data) with length 0.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gp1_send_eof</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>gp1_send_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"sent EOF: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"succeed"</literal></expr> </then><else>: <expr><literal type="string">"fail"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Send an error message to the client, using the 'E' message type.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gp1_send_errmsg</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>errmsg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"send error message: %s"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>gp1_send_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>local_sendall</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"failed to send error message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
<comment type="block">/*
 * Send the first 8k of the specified file as an error message
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gp1_send_errfile</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>apr_file_t</name><modifier>*</modifier></type> <name>errfile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>         <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>apr_size_t</name></type>   <name>nbytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>apr_file_read</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>APR_SUCCESS</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator> <call><name>gp1_send_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>local_sendall</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"[%d] request sent %"</literal><name>APR_SIZE_T_FMT</name><literal type="string">" stderr bytes to server"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * session_get_block
 *
 * Get a block out of the session. return error string. This includes a block
 * header (metadata for client such as filename, etc) and the data itself.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>
<name>session_get_block</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>block_t</name><modifier>*</modifier></type> <name>retblock</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>line_delim_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_delim_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 		<name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> 	<name>whole_rows</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* gpfdist must not read data with partial rows */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>fstream_filename_and_offset</name></name></type> <name>fos</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>session_t</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>retblock</name><operator>-&gt;</operator><name>bot</name></name> <operator>=</operator> <name><name>retblock</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>is_error</name></name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"session_get_block: end session is_error: %d"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>is_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>session_end</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>read_bytes</name></name> <operator>-=</operator> <call><name>fstream_get_compressed_position</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* read data from our filestream as a chunk with whole data rows */</comment>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>fstream_read</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>, <argument><expr><name><name>retblock</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fos</name></expr></argument>, <argument><expr><name>whole_rows</name></expr></argument>, <argument><expr><name>line_delim_str</name></expr></argument>, <argument><expr><name>line_delim_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>delay_watchdog_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"session_get_block: end session due to EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>read_bytes</name></name> <operator>+=</operator> <call><name>fstream_get_compressed_size</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>session_end</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>read_bytes</name></name> <operator>+=</operator> <call><name>fstream_get_compressed_position</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ferror</name> <init>= <expr><call><name>fstream_get_error</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"session_get_block end session due to %s"</literal></expr></argument>, <argument><expr><name>ferror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>session_end</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ferror</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>retblock</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<comment type="block">/* fill the block header with meta data for the client to parse and use */</comment>
	<expr_stmt><expr><call><name>block_fill_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>retblock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>compress_zstd</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>retblock</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>retblock</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* finish the session - close the file */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>session_end</name><parameter_list>(<parameter><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"session end. id = %ld, is_error = %d, error = %d"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>is_error</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>is_error</name></name> <operator>=</operator> <name>error</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"close fstream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fstream_close</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* deallocate session, remove from hashtable */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>session_free</name><parameter_list>(<parameter><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"free session %s"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fstream_close</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* detach a request from a session */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>session_detach</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"detach segment request from session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>session</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>nrequest</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"internal error - detaching a request from an empty session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>nrequest</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>is_get</name></name> <operator>&amp;&amp;</operator> <name><name>session</name><operator>-&gt;</operator><name>nrequest</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"session has finished all segment requests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* for auto-tid sessions, we can free it now */</comment>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"auto-tid."</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>nrequest</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"internal error - expected an empty auto-tid session but saw %d requests"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>nrequest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>session_free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator> <name><name>session</name><operator>-&gt;</operator><name>is_get</name></name> <operator>&amp;&amp;</operator> <name><name>session</name><operator>-&gt;</operator><name>nrequest</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>session_active_segs_isempty</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * free the session if this is a POST request and it's
			 * the last request for this session (we can tell is all
			 * segments sent a "done" request by calling session_active_isempty.
			 * (nrequest == 0 test isn't sufficient by itself).
			 *
			 * this is needed in order to make sure to close the out file
			 * when we're done writing. (only in write operations, not in read).
			 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
			<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>fstream_is_win_pipe</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>session_free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>w</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>session_free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>evtimer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>free_session_cb</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <name><name>opt</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>evtimer_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>tm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sessions_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>apr_hash_index_t</name><modifier>*</modifier></type>	<name>hi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 				<name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> 				<name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>session_t</name><modifier>*</modifier><modifier>*</modifier></type>			<name>session</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>session_t</name><modifier>*</modifier></type>			<name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 				<name>numses</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"remove sessions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>numses</name> <operator>=</operator> <call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>numses</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>session</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numses</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"out of memory in sessions_cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hi</name> <operator>=</operator> <call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>hi</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>numses</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>hi</name> <operator>=</operator> <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>session_t</name><operator>*</operator><operator>)</operator> <name>entry</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nrequest</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mtime</name></name> <operator>&lt;</operator> <call><name>apr_time_now</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">300</literal>
				<operator>*</operator> <name>APR_USEC_PER_SEC</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>session</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"remove out-dated session %s\n"</literal></expr></argument>, <argument><expr><name><name>session</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>session_free</name><argument_list>(<argument><expr><name><name>session</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * session_attach
 *
 * attach a request to a session (create the session if not already exists).
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>session_attach</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * create the session key (tid:path)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>,
										<argument><expr><name><name>r</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"path too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>


	<comment type="block">/* check if such session already exists in hashtable */</comment>
	<expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>session</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* not in hashtable - create new session */</comment>

		<decl_stmt><decl><type><name>fstream_t</name><modifier>*</modifier></type> 	<name>fstream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>apr_pool_t</name><modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> 		<name>response_code</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>	<name>response_string</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>fstream_options</name></name></type> <name>fstream_options</name></decl>;</decl_stmt>

		<comment type="block">/* remove any outdated sessions*/</comment>
		<expr_stmt><expr><call><name>sessions_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * this is the special WET "session-end" request. Another similar
		 * request must have already came in from another segdb and finished
		 * the session we were at. we don't want to create a new session now,
		 * so just exit instead
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_final</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got a final write request. skipping session creation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_empty</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error - out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* parse csvopt header */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fstream_options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>fstream_options</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>bufsize</name></name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>m</name></name></expr>;</expr_stmt>

		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>quote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>escape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>eol_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<comment type="block">/* csvopt is different in gp4 and later version */</comment>
			<comment type="block">/* for gp4, csv opt is like "mxqnh"; for later version of gpdb, csv opt is like "mxqhn" */</comment>
			<comment type="block">/* we check the number of successful match here to make sure eol_type and header is right */</comment>
			<if_stmt><if>if <condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>csvopt</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>  <comment type="line">//writable external table doesn't have csvopt</comment>
				<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>csvopt</name></name></expr></argument>, <argument><expr><literal type="string">"m%dx%dq%dn%dh%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fstream_options</name><operator>.</operator><name>is_csv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>escape</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>quote</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fstream_options</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name>n</name><operator>!=</operator><literal type="number">5</literal></expr>)</condition><block>{<block_content>
					<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>csvopt</name></name></expr></argument>, <argument><expr><literal type="string">"m%dx%dq%dh%dn%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fstream_options</name><operator>.</operator><name>is_csv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>escape</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>quote</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fstream_options</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eol_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><block>{<block_content>
					<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>quote</name></name> <operator>=</operator> <name>quote</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>escape</name></name> <operator>=</operator> <name>escape</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>eol_type</name></name> <operator>=</operator> <name>eol_type</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block>{<block_content>
					<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"bad request, csvopt doesn't match the format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/* set fstream for read (GET) or write (PUT) */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>forwrite</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* GET request */</comment>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>forwrite</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* PUT request */</comment>
			<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>usesync</name></name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
		<comment type="block">/* set transformation options */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>command</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>transform</name></name> <operator>=</operator> <operator>(</operator>struct <name>gpfxdist_t</name><operator>*</operator><operator>)</operator> <call><name>pcalloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>gpfxdist_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
																		  <argument><expr><literal type="string">"out of memory in session_attach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>transform</name><operator>-&gt;</operator><name>cmd</name></name>        <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>command</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>transform</name><operator>-&gt;</operator><name>pass_paths</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>paths</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>transform</name><operator>-&gt;</operator><name>for_write</name></name>  <operator>=</operator> <name><name>fstream_options</name><operator>.</operator><name>forwrite</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>transform</name><operator>-&gt;</operator><name>mp</name></name>         <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fstream_options</name><operator>.</operator><name>transform</name><operator>-&gt;</operator><name>errfile</name></name>    <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"r-&gt;path %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* try opening the fstream */</comment>
		<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"new session trying to open the data stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fstream</name> <operator>=</operator> <call><name>fstream_open</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fstream_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>response_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>delay_watchdog_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fstream</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject request from %s, path %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>response_code</name></expr></argument>, <argument><expr><name>response_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"new session successfully opened the data stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>total_sessions</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>total_bytes</name></name> <operator>+=</operator> <call><name>fstream_get_compressed_size</name><argument_list>(<argument><expr><name>fstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* allocate session */</comment>
		<expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>pcalloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"out of memory in session_attach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* allocate active_segdb array (session member) */</comment>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>active_segids</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>pcalloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>totalsegs</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory when allocating active_segids array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* allocate seq_segs array (session member) */</comment>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name></name> <operator>=</operator> <operator>(</operator><name>apr_int64_t</name> <operator>*</operator><operator>)</operator> <call><name>pcalloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>r</name><operator>-&gt;</operator><name>totalsegs</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory when allocating seq_segs array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* initialize session values */</comment>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>++</operator><name>SESSION_SEQ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name> <operator>=</operator> <name>fstream</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>is_get</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>active_segids</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* mark this segid as active */</comment>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>maxsegs</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>totalsegs</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>requests</name></name> <operator>=</operator> <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>session</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>session</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>session</name><operator>-&gt;</operator><name>key</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"out of memory in session_attach"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* insert into hashtable */</comment>
		<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"new session (%ld): (%s, %s)"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* found a session in hashtable*/</comment>

	<comment type="block">/* if error, send an error and close */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>is_error</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"session error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* session already ended. send an empty response, and close. */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"session already ended. return empty response (OK)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>http_empty</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * disallow mixing GET and POST requests in one session.
	 * this will protect us from an infinitely running
	 * INSERT INTO ext_t SELECT FROM ext_t
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name> <operator>!=</operator> <name><name>session</name><operator>-&gt;</operator><name>is_get</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"can\'t write to and read from the same "</literal>
										 <literal type="string">"gpfdist server simultaneously"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"joined session (%s, %s)"</literal></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* one more request for session */</comment>
	<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>nrequest</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>active_segids</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>is_final</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>mtime</name></name> <operator>=</operator> <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>requests</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>session</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>sid</name></name>     <operator>=</operator> <name><name>session</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>session</name><operator>-&gt;</operator><name>is_get</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>session_active_segs_dump</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Dump all the segdb ids that currently participate
 * in this session.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>session_active_segs_dump</name><parameter_list>(<parameter><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name><name>opt</name><operator>.</operator><name>v</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"active segids in session: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>session</name><operator>-&gt;</operator><name>maxsegs</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>active_segids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Is there any segdb still sending us data? or are
 * all of them done already? if empty all are done.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>session_active_segs_isempty</name><parameter_list>(<parameter><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>session</name><operator>-&gt;</operator><name>maxsegs</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>active_segids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* not empty */</comment>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* empty */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * do_write
 *
 * Callback when the socket is ready to be written
 */</comment>
<function_decl><type><name>void</name></type> <name>gfile_printf_then_putc_newline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>1<operator>,</operator> 2</function_decl>)<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>request_t</name><modifier>*</modifier></type> 	<name>r</name> <init>= <expr><operator>(</operator><name>request_t</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 		<name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>block_t</name><modifier>*</modifier></type> 	<name>datablock</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"internal error - non matching fd (%d) "</literal>
					  <literal type="string">"and socket (%d)"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Loop at most 3 blocks or until we choke on the socket */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* get a block (or find a remaining block) */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>top</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>bot</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ferror</name> <init>= <expr><call><name>session_get_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>outblock</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_str</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>ferror</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ferror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gfile_printf_then_putc_newline</name><argument_list>(<argument><expr><literal type="string">"ERROR: %s"</literal></expr></argument>, <argument><expr><name>ferror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>top</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>datablock</name> <operator>=</operator> <operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>outblock</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * If PROTO-1: first write out the block header (metadata).
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>htop</name></name> <operator>-</operator> <name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hbot</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hbyte</name></name> <operator>+</operator> <name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hbot</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * TODO: It is not safe to check errno here, should check and
					 * return special value in local_send()
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPIPE</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ECONNRESET</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>bot</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gpfdist send block header failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"send header bytes %d .. %d (top %d)"</literal></expr></argument>,
					<argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hbot</name></name></expr></argument>, <argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hbot</name></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>htop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hbot</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>htop</name></name> <operator>-</operator> <name><name>datablock</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>hbot</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* network chocked */</comment>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * write out the block data
		 */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>datablock</name><operator>-&gt;</operator><name>top</name></name> <operator>-</operator> <name><name>datablock</name><operator>-&gt;</operator><name>bot</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>cdata</name></name> <operator>+</operator> <name><name>datablock</name><operator>-&gt;</operator><name>bot</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>local_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>datablock</name><operator>-&gt;</operator><name>bot</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * EPIPE (or ECONNRESET some computers) indicates remote socket
			 * intentionally shut down half of the pipe.  If this was because
			 * of something like "select ... limit 10;", then it is fine that
			 * we couldn't transmit all the data--the segment didn't want it
			 * anyway.  If it is because the segment crashed or something like
			 * that, hopefully we would find out about that in some other way
			 * anyway, so it is okay if we don't poison the session.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EPIPE</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ECONNRESET</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>bot</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"gpfdist send data failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"send data bytes off buf %d .. %d (top %d)"</literal></expr></argument>,
			   <argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>bot</name></name></expr></argument>, <argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>bot</name></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>datablock</name><operator>-&gt;</operator><name>top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>datablock</name><operator>-&gt;</operator><name>bot</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>datablock</name><operator>-&gt;</operator><name>top</name></name> <operator>!=</operator> <name><name>datablock</name><operator>-&gt;</operator><name>bot</name></name></expr>)</condition>
		<block>{<block_content> <comment type="block">/* network chocked */</comment>
			<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"network full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Set up for this routine to be called again */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>setup_write</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Log request header
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_request_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>s</name></name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Hurray, got a request !!! */</comment>
	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"%s requests %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="string">"(none)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* print the complete request to the log if in verbose mode */</comment>
	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got a request at port %d:"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"request headers:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"%s:%s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * do_read_request
 *
 * Callback when a socket is ready to be read. Read the
 * socket for a complete HTTP request.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_read_request</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>request_t</name><modifier>*</modifier></type> 	<name>r</name> <init>= <expr><operator>(</operator><name>request_t</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>pp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		<name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If we timeout, close the request. */</comment>
	<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_TIMEOUT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"do_read_request time out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_TIMEOUT</name></expr></argument>, <argument><expr><literal type="string">"time out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<comment type="block">/* Execute only once */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ssl</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>io</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>ssl_bio</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_f_buffer</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ssl_bio</name></name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_f_ssl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BIO_set_ssl</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ssl_bio</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>, <argument><expr><name>BIO_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BIO_push</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>ssl_bio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Set the renegotiate timeout in seconds. 	*/</comment>
		<comment type="block">/* When the renegotiate timeout elapses the */</comment>
		<comment type="block">/* session is automatically renegotiated	*/</comment>
		<expr_stmt><expr><call><name>BIO_set_ssl_renegotiate_timeout</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ssl_bio</name></name></expr></argument>, <argument><expr><name>SSL_RENEGOTIATE_TIMEOUT_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* how many bytes left in the header buf */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbufmax</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuftop</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"do_read_request internal error. max: %d, top: %d"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbufmax</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuftop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* read into header buf */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gpfdist_receive</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuf</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuftop</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>(</operator><name>e</name> <operator>==</operator> <name>WSAEINTR</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>(</operator><name>e</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"do_read_request receive failed. errno: %d, msg: %s"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* socket close by peer will return 0 */</comment>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"do_read_request receive failed. socket closed by peer. errno: %d, msg: %s"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* check if a complete HTTP request is available in header buf */</comment>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuftop</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuftop</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name></name> <operator>=</operator> <call><name>gnet_parse_request</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuftop</name></name> <operator>&gt;=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbufmax</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* not available, but headerbuf is full - send error and close */</comment>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"do_read_request bad request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"forbidden"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * if we don't yet have a complete request, set up this function to be
	 * called again for
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>setup_read</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"do_read_request, failed to read a complete request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* check that the request is validly formatted */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>request_validate</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>log_request_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* mark it as a GET or PUT request */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name> <operator>||</operator> <name><name>opt</name><operator>.</operator><name>V</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_request_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* make a copy of the path */</comment>
	<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* decode %xx to char */</comment>
	<expr_stmt><expr><call><name>percent_encoding_to_char</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* legit check for the path */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>request_path_validate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * This is a debug hook. We'll get here By creating an external table with
	 * name(a text) location('gpfdist://&lt;host&gt;:&lt;port&gt;/gpfdist/status').
	 * Show some state of gpfdist (num sessions, num bytes).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/gpfdist/status"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>send_gpfdist_status</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * set up the requested path
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>f</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we forced in a filename with the hidden -f option. use it */</comment>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>request_set_path</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* parse gp variables from the request */</comment>
	<if_stmt><if>if<condition>(<expr><call><name>request_parse_gp_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
	<comment type="block">/* setup transform */</comment>
	<if_stmt><if>if<condition>(<expr><call><name>request_set_transform</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Attach the request to a session */</comment>
	<if_stmt><if>if<condition>(<expr><call><name>session_attach</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* handle GET */</comment>
		<expr_stmt><expr><call><name>handle_get_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* handle PUT */</comment>
		<expr_stmt><expr><call><name>handle_post_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* Callback when the listen socket is ready to accept connections. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_accept</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>address_t</name></type>           <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> 			<name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SOCKET</name></type> 				<name>sock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>request_t</name><modifier>*</modifier></type> 			<name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>apr_pool_t</name><modifier>*</modifier></type> 		<name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 				<name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>linger</name></name></type>		<name>linger</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<decl_stmt><decl><type><name>BIO</name> 				<modifier>*</modifier></type><name>sbio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* only for SSL */</comment>
	<decl_stmt><decl><type><name>SSL</name> 				<modifier>*</modifier></type><name>ssl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* only for SSL */</comment>
	<decl_stmt><decl><type><name>int</name></type> 				<name>rd</name></decl>;</decl_stmt>				<comment type="block">/* only for SSL */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* do the accept */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sock</name> <operator>=</operator> <call><name>accept</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"accept failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>failure</name>;</goto>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>sbio</name> <operator>=</operator> <call><name>BIO_new_socket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ssl</name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>server_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>sbio</name></expr></argument>, <argument><expr><name>sbio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>( <expr><operator>(</operator><name>rd</name> <operator>=</operator> <call><name>SSL_accept</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>handle_ssl_error</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>sbio</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Close the socket that was allocated by accept 			*/</comment>
			<comment type="block">/* We also must perform this, in case that a user 			*/</comment>
			<comment type="block">/* accidentaly connected via gpfdist, instead of gpfdits	*/</comment>
			<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"[%d] Using SSL\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* set to non-blocking, and close-on-exec */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nonblocking</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nonblocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"fcntl(F_SETFL, O_NONBLOCK) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
		<if_stmt><if>if <condition>( <expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>handle_ssl_error</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>sbio</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>failure</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"fcntl(F_SETFD) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
		<if_stmt><if>if <condition>( <expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>handle_ssl_error</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>sbio</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>failure</name>;</goto>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* set keepalive, reuseaddr, and linger */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Setting SO_KEEPALIVE failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>failure</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Setting SO_REUSEADDR on socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>failure</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>linger</name><operator>.</operator><name>l_onoff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>linger</name><operator>.</operator><name>l_linger</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_LINGER</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>linger</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>linger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Setting SO_LINGER on socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>failure</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* create a pool container for this socket */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pool</name></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"out of memory in do_accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* create the request in pool */</comment>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>pcalloc_safe</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"failed to allocated request_t: %d bytes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><call><name>get_client_port</name><argument_list>(<argument><expr><operator>(</operator><name>address_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>++</operator><name>REQUEST_SEQ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <name>sock</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* use the block size specified by -m option */</comment>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>palloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory when allocating buffer: %d bytes"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_str</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbufmax</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* 4K for reading the headers */</comment>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuf</name></name> <operator>=</operator> <call><name>palloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbufmax</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory when allocating r-&gt;in.hbuf: %d"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbufmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is_final</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* initialize */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>ssl</name></name> <operator>=</operator> <name>ssl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>sbio</name></name> <operator>=</operator> <name>sbio</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>getnameinfo</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NI_NUMERICHOST</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NI_NUMERICSERV</name></cpp:ifdef>
				<operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>


	<comment type="block">/* set up for callback when socket ready for reading the http request */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>setup_read</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>

<label><name>failure</name>:</label>
	<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"accept failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * setup_write
 *
 * setup the write event to write data to the socket. It uses
 * the callback function 'do_write'.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setup_write</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"internal error in setup_write - no socket to use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>do_write</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * setup_read
 *
 * setup the read event to read data from a socket.
 *
 * we expect to be reading either:
 * 1) a GET or PUT request. or,
 * 2) the body of a PUT request (the raw data from client).
 *
 * this is controller by 'is_request' as follows:
 * -- if set to true, use the callback function 'do_read_request'.
 * -- if set to false, use the callback function 'do_read_body'.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setup_read</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"internal error in setup_read - no socket to use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><name>do_read_request</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name><name>opt</name><operator>.</operator><name>t</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>(</operator><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> <comment type="block">/* no timeout */</comment>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>t</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tm</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_listening_address</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>rp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>full_address</name><index>[<expr><literal type="number">220</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>ain</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name><operator>*</operator><operator>)</operator><name><name>rp</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>stradd</name><index>[<expr><literal type="number">200</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ain</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name>stradd</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>full_address</name></expr></argument>, <argument><expr><literal type="string">"IPV4 socket: %s:%d"</literal></expr></argument>, <argument><expr><name>stradd</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<comment type="block">/*
		 * there is no alternative for inet_ntop in windows that works for all Win platforms
		 * and for IPV6. inet_ntop transform the integer representation of the IP addr. into a string
	     */</comment>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>full_address</name></expr></argument>, <argument><expr><literal type="string">"IPV4 socket: IPv4:%d"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>ain</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name><operator>*</operator><operator>)</operator><name><name>rp</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>stradd</name><index>[<expr><literal type="number">200</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ain</name><operator>-&gt;</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>stradd</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>full_address</name></expr></argument>, <argument><expr><literal type="string">"IPV6 socket: [%s]:%d"</literal></expr></argument>, <argument><expr><name>stradd</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>full_address</name></expr></argument>, <argument><expr><literal type="string">"IPV6 socket: [IPV6]:%d"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>full_address</name></expr></argument>, <argument><expr><literal type="string">"unknown protocol - %d"</literal></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>full_address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Search linked list (head) for first element with family (first_family).
 * Moves first matching element to head of the list.
 */</comment>
<function><type><specifier>static</specifier> <name><name>struct</name>
<name>addrinfo</name></name><modifier>*</modifier></type> <name>rearrange_addrs</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first_family</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name><modifier>*</modifier></type> <name>new_head</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name><modifier>*</modifier></type> <name>holder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>head</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>first_family</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>head</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <name>head</name></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name><name>iter</name><operator>-&gt;</operator><name>ai_next</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>first_family</name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>holder</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ai_next</name><operator>-&gt;</operator><name>ai_next</name></name></expr>;</expr_stmt>
			<comment type="block">/*
			 * we don't break here since if there are more addrinfo structure that belong to first_family
			 * in the list, we want to remove them all and keep only one in the holder.
			 * and then we will put the holder in the front
			 */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>( <expr><name>holder</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>holder</name><operator>-&gt;</operator><name>ai_next</name></name> <operator>=</operator> <name>new_head</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>new_head</name> <operator>=</operator> <name>holder</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>new_head</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_addrinfo_list</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <name>head</name></expr>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>print_listening_address</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>signal_register</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <comment type="block">/* when SIGTERM raised invoke process_term_signal */</comment>
    <expr_stmt><expr><call><name>signal_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gcb</name><operator>.</operator><name>signal_event</name></name></expr></argument>,<argument><expr><name>SIGTERM</name></expr></argument>,<argument><expr><name>process_term_signal</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* high priority so we accept as fast as possible */</comment>
    <if_stmt><if>if<condition>(<expr><call><name>event_priority_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gcb</name><operator>.</operator><name>signal_event</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"signal event priority set failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* start watching this event */</comment>
	<if_stmt><if>if<condition>(<expr><call><name>signal_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gcb</name><operator>.</operator><name>signal_event</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"cannot set up event on signal register"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_listen_sock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>sock</name> <operator>=</operator> <name><name>gcb</name><operator>.</operator><name>listen_socks</name><index>[<expr><name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>listen_socks</name><index>[<expr><name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
<comment type="block">/* Create HTTP port and start to receive request */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>http_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SOCKET</name></type> <name>f</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>on</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>linger</name></name></type> <name>linger</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>rp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>i</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>service</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostaddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ipv6only_val</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>create_failed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Build our SSL context*/</comment>
		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>server_ctx</name></name> 	<operator>=</operator> <call><name>initialize_ctx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>gpfdist_send</name> 	<operator>=</operator> <name>gpfdist_SSL_send</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gpfdist_receive</name> <operator>=</operator> <name>gpfdist_SSL_receive</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>server_ctx</name></name> 	<operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gpfdist_send</name> 	<operator>=</operator> <name>gpfdist_socket_send</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gpfdist_receive</name> <operator>=</operator> <name>gpfdist_socket_receive</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>gpfdist_send</name> 	<operator>=</operator> <name>gpfdist_socket_send</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>gpfdist_receive</name> <operator>=</operator> <name>gpfdist_socket_receive</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>hostaddr</name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* setup event priority */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>event_priority_init</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"event_priority_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<comment type="block">/* Try each possible port from opt.p to opt.last_port */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>service</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>	<comment type="block">/* Allow IPv4 or IPv6 */</comment>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt> <comment type="block">/* tcp socket */</comment>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <name>AI_PASSIVE</name></expr>;</expr_stmt>	<comment type="block">/* For wildcard IP address */</comment>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* Any protocol */</comment>

		<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>hostaddr</name></expr></argument>, <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>gai_strerror</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"getaddrinfo says %s"</literal></expr></argument>,<argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<comment type="block">/* Broken mingw header file from old version of mingw doesn't have gai_strerror */</comment>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"getaddrinfo says %d"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>addrs</name> <operator>=</operator> <call><name>rearrange_addrs</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>, <argument><expr><name>AF_INET6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Before opening listening sockets - following listening sockets are available:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_addrinfo_list</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * getaddrinfo() returns a list of address structures,
		 * one for each valid address and family we can use.
		 *
		 * Try each address until we successfully bind.
		 * If socket (or bind) fails, we (close the socket
		 * and) try the next address.  This can happen if
		 * the system supports IPv6, but IPv6 is disabled from
		 * working, or if it supports IPv6 and IPv4 is disabled.
		 */</comment>
		<for>for <control>(<init><expr><name>rp</name> <operator>=</operator> <name>addrs</name></expr>;</init> <condition><expr><name>rp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>rp</name> <operator>=</operator> <name><name>rp</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Trying to open listening socket:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>print_listening_address</name><argument_list>(<argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * getaddrinfo gives us all the parameters for the socket() call
			 * as well as the parameters for the bind() call.
			 */</comment>
			<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Creating the socket failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
			<if_stmt><if>if <condition>(<expr><call><name>fcntl</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cannot create socket - fcntl(F_SETFD) failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* For the Windows case, we could use SetHandleInformation to remove
			 the HANDLE_INHERIT property from fd.
			 But for our purposes this does not matter,
			 as by default handles are *not* inherited. */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Setting SO_KEEPALIVE on socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * We cannot use SO_REUSEADDR on win32 because it results in different
			 * behaviour -- it allows multiple servers to bind to the same port,
			 * resulting in totally unpredictable behaviour. What a silly operating
			 * system.
			 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
			<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>on</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Setting SO_REUSEADDR on socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>linger</name><operator>.</operator><name>l_onoff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>linger</name><operator>.</operator><name>l_linger</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_LINGER</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>linger</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>linger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Setting SO_LINGER on socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>rp</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_V6ONLY</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ipv6only_val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ipv6only_val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Setting IPV6_V6ONLY on socket failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>rp</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * EADDRINUSE warning appears only if the -v or -V option is on,
				 * All the other warnings will appear anyway
				 * EADDRINUSE is not defined in win32, so all the warnings will always appear.
				 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
				<if_stmt><if>if <condition>( <expr><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<if_stmt><if>if <condition>( <expr><name>errno</name> <operator>==</operator> <name>EADDRINUSE</name></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<block>{<block_content>
					<if_stmt><if>if <condition>( <expr><name><name>opt</name><operator>.</operator><name>v</name></name></expr> )</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s (errno = %d), port: %d"</literal></expr></argument>,
					               		<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>create_failed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s (errno=%d), port: %d"</literal></expr></argument>,<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

				<comment type="block">/* failed on bind, maybe this address family isn't supported */</comment>
				<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* listen with a big queue */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>saved_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"listen with queue size %d on socket (%d) using port %d failed with error code (%d): %s"</literal></expr></argument>,
							  <argument><expr><name><name>opt</name><operator>.</operator><name>z</name></name></expr></argument>,
							  <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>f</name></expr></argument>,
							  <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>,
							  <argument><expr><name>saved_errno</name></expr></argument>,
							  <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>saved_errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>listen_socks</name><index>[<expr><name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Opening listening socket succeeded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* When we get here, we have either succeeded, or tried all address families for this port */</comment>

		<if_stmt><if>if <condition>(<expr><name>addrs</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* don't need this any more */</comment>
			<expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if<condition>(<expr><name>create_failed</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>clear_listen_sock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>create_failed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>p</name></name> <operator>&gt;=</operator> <name><name>opt</name><operator>.</operator><name>last_port</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cannot create socket on port %d "</literal>
						  <literal type="string">"(last port is %d)"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>last_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>opt</name><operator>.</operator><name>p</name></name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>v</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* this is just to beautify the print outs */</comment>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* when this socket is ready, do accept */</comment>
		<expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gcb</name><operator>.</operator><name>listen_events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>listen_socks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>EV_READ</name> <operator>|</operator> <name>EV_PERSIST</name></expr></argument>,
				  <argument><expr><name>do_accept</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* only signal process function priority higher than socket handler */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>event_priority_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gcb</name><operator>.</operator><name>listen_events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"event_priority_set failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* start watching this event */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gcb</name><operator>.</operator><name>listen_events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cannot set up event on listen socket: %s"</literal></expr></argument>,
						   <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>process_term_signal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>,<parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"signal %d received. gpfdist exits"</literal></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_gpfdist_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gcb</name><operator>.</operator><name>listen_sock_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>gcb</name><operator>.</operator><name>listen_socks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>listen_socks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>gnet_request_t</name><modifier>*</modifier></type>
<name>gnet_parse_request</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>apr_pool_t</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>*</operator><name>len</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>empty</name></decl>, <decl><type ref="prev"/><name>completed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>colon</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gnet_request_t</name><modifier>*</modifier></type> <name>req</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* find an empty line */</comment>
	<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>empty</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>completed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ch</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
		<comment type="block">/* skip spaces */</comment>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>empty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>completed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>empty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>completed</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* we have a complete HTTP-style request (terminated by empty line) */</comment>
	<expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>buf</name></expr>;</expr_stmt> <comment type="block">/* consume it */</comment>
	<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* dup it */</comment>
	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>pcalloc_safe</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gnet_request_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"out of memory in gnet_parse_request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* for first line */</comment>
	<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>apr_strtok</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>line</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>gstring_trim</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_tokenize_to_argv</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>req</name><operator>-&gt;</operator><name>argv</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>req</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>argc</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>argc</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"last is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>req</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* for each subsequent lines */</comment>
	<while>while <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>line</name> <operator>=</operator> <call><name>apr_strtok</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>line</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* continuation */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>hc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* illegal - missing first header */</comment>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>gstring_trim</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* empty line */</comment>
				<break>break;</break></block_content></block></if></if_stmt>

			<comment type="block">/* add to previous hvalue */</comment>
			<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>hc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>gstring_trim</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
					<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>hc</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* find a colon, and break the line in two */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>colon</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>colon</name> <operator>=</operator> <name>line</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>colon</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>gstring_trim</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>line</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* empty line */</comment>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* save name, value pair */</comment>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>hc</name></name></expr>]</index></name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name><name>req</name><operator>-&gt;</operator><name>hc</name></name></expr>]</index></name> <operator>=</operator> <call><name>gstring_trim</name><argument_list>(<argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>hc</name></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>hc</name></name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hname</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>last</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>req</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>gstring_trim</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>p</name> <operator>&gt;</operator> <name>s</name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>datetime</name><parameter_list>(<parameter><decl><type><name>apr_time_t</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> 	<name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>apr_time_exp_t</name></type> 	<name>texp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>texp</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%04d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>, <argument><expr><literal type="number">1900</literal> <operator>+</operator> <name><name>texp</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><literal type="number">1</literal>
			<operator>+</operator> <name><name>texp</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>texp</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>texp</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>texp</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>texp</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>datetime_now</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>datetime</name><argument_list>(<argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *  get process id
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ggetpid</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>_gprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
pg_attribute_printf<parameter_list>(</parameter_list>3<operator>,</operator> 0</function_decl>)<empty_stmt>;</empty_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>_gprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %d %s "</literal></expr></argument>, <argument><expr><call><name>datetime_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>ggetpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%ld:%ld:%d:%d] "</literal></expr></argument>, <argument><expr><call><name>GET_SID</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>vprintf</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"INFO"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gprintln</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>s</name></name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"INFO"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Print for GET, or POST if Verbose.
 */</comment>
<function><type><name>void</name></type> <name>gprintlnif</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>r</name><operator>-&gt;</operator><name>is_get</name></name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>opt</name><operator>.</operator><name>V</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>s</name></name></expr>)</condition> <block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"INFO"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gfatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"FATAL"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n          ... exiting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gwarning</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"WARN"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gdebug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>opt</name><operator>.</operator><name>V</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>_gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"DEBUG"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>gfile_printf_then_putc_newline</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type> <name>va</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>va</name></expr></argument>,<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vprintf</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>gfile_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gfile_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * percent_encoding_to_char
 *
 * decode any percent encoded characters that may be included in the http
 * request into normal characters ascii characters.
 */</comment>
<function><type><name>void</name></type> <name>percent_encoding_to_char</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*   - decode %xx to char */</comment>
	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>pp</name> <operator>=</operator> <name>path</name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>pp</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><literal type="char">'%'</literal> <operator>==</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>x</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><literal type="char">'a'</literal> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><literal type="char">'A'</literal> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>y</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>x</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pp</name><operator>++</operator></expr><operator>,</operator> <expr><name>pp</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_get_request</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* setup to receive EV_WRITE events to write to socket */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>setup_write</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"handle_get_request failed to setup write handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>http_ok</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"handle_get_request failed to send HTTP OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_post_request</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>header_end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>h_count</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hc</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>h_names</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>h_values</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>b_continue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>data_bytes_in_req</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>wrote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>session_t</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>session</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If this request is a "done" request (has GP-DONE header set)
	 * it has already marked this segment as inactive in this session.
	 * This is all that a "done" request should do. no data to process.
	 * we send our success response and end the request.
	 */</comment>
	<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_final</name></name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>done_processing_request</name>;</goto></block_content></block></if></if_stmt>

	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h_count</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* the request include a "Expect: 100-continue" header? */</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"Expect"</literal></expr></argument>, <argument><expr><name><name>h_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"100-continue"</literal></expr></argument>, <argument><expr><name><name>h_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* find out how long is our data by looking at "Content-Length" header*/</comment>
		<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"Content-Length"</literal></expr></argument>, <argument><expr><name><name>h_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>h_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* if client asked for 100-Continue, send it. otherwise, move on. */</comment>
	<if_stmt><if>if<condition>(<expr><name>b_continue</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>http_continue</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"available data to consume %d, starting at offset %d"</literal></expr></argument>,
		   <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuftop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr> )</condition> <block>{<block_content>
		<case>case <expr><name>OPEN_SEQ</name></expr>:</case>
			<comment type="block">/* sequence number is 1, it's the first OPEN request */</comment>
			<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>
			<goto>goto <name>done_processing_request</name>;</goto>

		<case>case <expr><name>NO_SEQ</name></expr>:</case>
			<comment type="block">/* don't have sequence number */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* missing sequence number */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
				<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got an request missing sequence number, expected sequence number is %ld."</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got an request missing sequence number, expected sequence number is %"</literal><name>APR_INT64_T_FMT</name></expr></argument>,
					<argument><expr><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request due to missing sequence number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got an request missing sequence number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<comment type="block">/* old version GPDB, don't have sequence number */</comment>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>

		<default>default:</default>
			<comment type="block">/* sequence number &gt; 1, it's the subsequent DATA request */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* duplicate DATA request, ignore it*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
				<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got a duplicate request, sequence number is %ld."</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got a duplicate request, sequence number is %"</literal><name>APR_INT64_T_FMT</name><literal type="string">"."</literal></expr></argument>,
					<argument><expr><name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<goto>goto <name>done_processing_request</name>;</goto>
			</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>seq</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<comment type="block">/* out of order DATA request, ignore it*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
				<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got an out of order request, sequence number is %ld, expected sequence number is %ld."</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got an out of order request, sequence number is %"</literal><name>APR_INT64_T_FMT</name><literal type="string">", expected sequence number is %"</literal><name>APR_INT64_T_FMT</name></expr></argument>,
					<argument><expr><name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr></argument>, <argument><expr><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request due to wrong sequence number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"got an out of order request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* create a buffer to hold the incoming raw data */</comment>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbufmax</name></name> <operator>=</operator> <name><name>opt</name><operator>.</operator><name>m</name></name></expr>;</expr_stmt> <comment type="block">/* size of max line size */</comment>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuf</name></name> <operator>=</operator> <call><name>palloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbufmax</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory when allocating r-&gt;in.dbuf: %d bytes"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbufmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if some data come along with the request, copy it first */</comment>
	<expr_stmt><expr><name>data_start</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuf</name></name></expr></argument>, <argument><expr><literal type="string">"\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>data_start</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>data_start</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>data_bytes_in_req</name> <operator>=</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuf</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>hbuftop</name></name><operator>)</operator> <operator>-</operator> <name>data_start</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>data_bytes_in_req</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we have data after the request headers. consume it */</comment>
		<comment type="block">/* should make sure r-&gt;in.dbuftop + data_bytes_in_req &lt;  r-&gt;in.dbufmax */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>data_start</name></expr></argument>, <argument><expr><name>data_bytes_in_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name> <operator>+=</operator> <name>data_bytes_in_req</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name> <operator>-=</operator> <name>data_bytes_in_req</name></expr>;</expr_stmt>

		<comment type="block">/* only write it out if no more data is expected */</comment>
		<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>fstream_write</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name>data_bytes_in_req</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_str</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>delay_watchdog_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>wrote</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* write error */</comment>
				<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><call><name>fstream_get_error</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * we've consumed all data that came in the first buffer (with the request)
	 * if we're still expecting more data, get it from socket now and process it.
	 */</comment>
	<while>while<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type> <name>want</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>buf_space_left</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbufmax</name></name> <operator>-</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name> <operator>&gt;</operator> <name>buf_space_left</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>want</name> <operator>=</operator> <name>buf_space_left</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>want</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* read from socket into data buf */</comment>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>gpfdist_receive</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuf</name></name> <operator>+</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name></expr></argument>, <argument><expr><name>want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
			<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>(</operator><name>e</name> <operator>==</operator> <name>WSAEINTR</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><operator>(</operator><name>e</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"handle_post_request receive errno: %d, msg: %s"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* socket close by peer will return 0 */</comment>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"handle_post_request socket closed by peer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*gprint("received %d bytes from client\n", n);*/</comment>

			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>bytes</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

			<comment type="block">/* if filled our buffer or no more data expected, write it */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbufmax</name></name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name> <operator>||</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>davailable</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* only write up to end of last row */</comment>
				<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>fstream_write</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_str</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"wrote %d bytes to file"</literal></expr></argument>, <argument><expr><name>wrote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>delay_watchdog_timer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>wrote</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* write error */</comment>
					<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"handle_post_request, write error: %s"</literal></expr></argument>, <argument><expr><call><name>fstream_get_error</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><call><name>fstream_get_error</name><argument_list>(<argument><expr><name><name>session</name><operator>-&gt;</operator><name>fstream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return;</return>
				</block_content>}</block></if>
				<if type="elseif">else if<condition>(<expr><name>wrote</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* wrote the whole buffer. clean it for next round */</comment>
					<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* wrote up to last line, some data left over in buffer. move to front */</comment>
					<decl_stmt><decl><type><name>int</name></type> <name>bytes_left_over</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name> <operator>-</operator> <name>wrote</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuf</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuf</name></name> <operator>+</operator> <name>wrote</name></expr></argument>, <argument><expr><name>bytes_left_over</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>dbuftop</name></name> <operator>=</operator> <name>bytes_left_over</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

	</block_content>}</block></while>

	<expr_stmt><expr><name><name>session</name><operator>-&gt;</operator><name>seq_segs</name><index>[<expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name></expr>]</index></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>seq</name></name></expr>;</expr_stmt>

<label><name>done_processing_request</name>:</label>

	<comment type="block">/* send our success response and end the request */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>http_ok</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* we're done! */</comment>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_set_path</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pp</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * make the new path relative to the user's specified dir (opt.d)
	 */</comment>
	<do>do
	<block>{<block_content>
		<while>while <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<while>while <condition>(<expr><operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>path</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>path</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="string">"%s %s/%s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>,
									   <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>path</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

	</block_content>}</block> while <condition>(<expr><name>path</name></expr>)</condition>;</do>


	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request (unable to set path)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_path_validate</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>warn_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>http_err_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * '\' is the path separator under windows.
		 * For *nix, escape char may cause some unexpected result with
		 * the file API. e.g.: 'ls \.\.' equals to 'ls ..'.
		 */</comment>
		<expr_stmt><expr><name>warn_msg</name> <operator>=</operator> <literal type="string">"contains escape character backslash '\\'"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>http_err_msg</name> <operator>=</operator> <literal type="string">"invalid request, "</literal>
			<literal type="string">"escape character backslash '\\' is not allowed."</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<comment type="block">/*
		 * disallow using a relative path in the request. CWE23
		 */</comment>
		<expr_stmt><expr><name>warn_msg</name> <operator>=</operator> <literal type="string">"is using a relative path"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>http_err_msg</name> <operator>=</operator> <literal type="string">"invalid request due to relative path"</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>warn_msg</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s [%s %s] - request %s"</literal></expr></argument>,
						<argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>,
						<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
						<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
						<argument><expr><name>warn_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><name>http_err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>request_validate</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* parse the HTTP request. Expect "GET /path HTTP/1.X" or "PUT /path HTTP/1.X" */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argc</name></name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"HTTP/1."</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid protocol from %s [%s]"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<literal type="number">0</literal> <operator>!=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"POST"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s [%s %s]"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>,
				<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>base16_decode</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>encoded_bytes</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>encoded_bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>encoded_bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>encoded_bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>encoded_bytes</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * request_parse_gp_headers
 *
 * Extract all X-GP-* variables from the HTTP headers.
 * Create a unique X-GP-TID value from it.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>request_parse_gp_headers</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_g</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>xid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>cid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>gp_proto</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* default to invalid, so that report error if not specified*/</comment>
	<decl_stmt><decl><type><name>int</name></type> 		<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>csvopt</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is_final</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-XID"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>xid</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-CID"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>cid</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-SN"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sn</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-CSVOPT"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>csvopt</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-PROTO"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>gp_proto</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-DONE"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>is_final</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-SEGMENT-COUNT"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>totalsegs</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-SEGMENT-ID"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>segid</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-ZSTD"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name> <operator>=</operator> <ternary><condition><expr><name><name>opt</name><operator>.</operator><name>compress</name></name></expr> ?</condition><then> <expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-LINE-DELIM-STR"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>  <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>base16_decode</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s, invalid EOL encoding: %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid EOL encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_str</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-LINE-DELIM-LENGTH"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_length</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-TRANSFORM"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><literal type="string">"X-GP-SEQ"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>seq</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* sequence number starting from 1 */</comment>
			<if_stmt><if>if<condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>seq</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s, invalid sequence number: %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>hvalue</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid sequence number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>OUT_BUFFER_SIZE</name> <operator>=</operator> <call><name>ZSTD_CStreamOutSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_err_len</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>cdata</name></name> <operator>=</operator> <call><name>palloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>m</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory when allocating buffer for compressed data: %d bytes"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name> <operator>=</operator> <call><name>palloc_safe</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_err_len</name></name></expr></argument>, <argument><expr><literal type="string">"out of memory when allocating error buffer for compressed data: %d bytes"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_err_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_cctx</name></name> <operator>=</operator> <call><name>ZSTD_createCStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>r</name><operator>-&gt;</operator><name>line_delim_str</name></name> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_str</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name><name>r</name><operator>-&gt;</operator><name>line_delim_length</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s, invalid EOL length: %d, EOL: %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_length</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>line_delim_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid EOL length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>gp_proto</name><operator>!=</operator><name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>gp_proto</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>gp_proto</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gp_proto</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s [%s %s] - no X-GP-PROTO"</literal></expr></argument>,
				<argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request (no gp-proto)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s [%s %s] - X-GP-PROTO invalid '%s'"</literal></expr></argument>,
				<argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>gp_proto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request (invalid gp-proto)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>opt_g</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* override?  */</comment>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name> <operator>=</operator> <name>opt_g</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>xid</name> <operator>&amp;&amp;</operator> <name>cid</name> <operator>&amp;&amp;</operator> <name>sn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="string">"%s.%s.%s.%d"</literal></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>, <argument><expr><name>sn</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>gp_proto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>xid</name> <operator>||</operator> <name>cid</name> <operator>||</operator> <name>sn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s [%s %s] - missing X-GP-* header"</literal></expr></argument>,
				 <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request (missing X-GP-* header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="string">"auto-tid.%d"</literal></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>gen</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GPFXDIST</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>request_set_transform</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name><name>struct</name> <name>transform</name></name><modifier>*</modifier></type> <name>transform_lookup</name><argument_list>(<argument><expr>struct <name>transform</name><operator>*</operator> <name>trlist</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>name</name></expr></argument>, <argument><expr><name>int</name> <name>for_write</name></expr></argument>, <argument><expr><name>int</name> <name>verbose</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier></type> <name>transform_command</name><argument_list>(<argument><expr>struct <name>transform</name><operator>*</operator> <name>tr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>transform_stderr_server</name><argument_list>(<argument><expr>struct <name>transform</name><operator>*</operator> <name>tr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>transform_content_paths</name><argument_list>(<argument><expr>struct <name>transform</name><operator>*</operator> <name>tr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>extern</specifier> <name>char</name><modifier>*</modifier></type> <name>transform_safe</name><argument_list>(<argument><expr>struct <name>transform</name><operator>*</operator> <name>tr</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>extern</specifier> <name>regex_t</name><modifier>*</modifier></type> <name>transform_saferegex</name><argument_list>(<argument><expr>struct <name>transform</name><operator>*</operator> <name>tr</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>transform</name></name><modifier>*</modifier></type> <name>tr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>safe</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Requests involving transformations should have a #transform=name in the external
	 * table URL.  In Rio, GPDB moves the name into an X-GP-TRANSFORM header.  However
	 * #transform= may still appear in the url in post requests.
	 *
	 * Note that ordinary HTTP clients and browsers do not typically transmit the portion
	 * of the URL after a #.  RFC 2396 calls this part the fragment identifier.
	 */</comment>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>param</name> <init>= <expr><literal type="string">"#transform="</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>start</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * we have a transformation request encoded in the url
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>start</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator> <name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * at this point r-&gt;trans.name is the name of the transformation requested
     * in the url and r-&gt;is_get tells us what kind (input or output) to look for.
     * attempt to look it up.
     */</comment>
	<expr_stmt><expr><name>tr</name> <operator>=</operator> <call><name>transform_lookup</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>trlist</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>tr</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s [%s %s] - unsppported input #transform"</literal></expr></argument>,
                     <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request (unsupported input #transform)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s [%s %s] - unsppported output #transform"</literal></expr></argument>,
                     <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request (unsupported output #transform)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"transform: %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * propagate details for this transformation
	 */</comment>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>command</name></name> <operator>=</operator> <call><name>transform_command</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>paths</name></name>   <operator>=</operator> <call><name>transform_content_paths</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * if safe regex is specified, check that the path matches it
	 */</comment>
	<expr_stmt><expr><name>safe</name> <operator>=</operator> <call><name>transform_safe</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>safe</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>regex_t</name><modifier>*</modifier></type> <name>saferegex</name> <init>= <expr><call><name>transform_saferegex</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>regexec</name><argument_list>(<argument><expr><name>saferegex</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>regerror</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>saferegex</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"reject invalid request from %s [%s %s] - path does not match safe regex %s: %s"</literal></expr></argument>,
					 <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>safe</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_BAD_REQUEST</name></expr></argument>, <argument><expr><literal type="string">"invalid request (path does not match safe regex)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"[%d] safe regex %s matches %s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>safe</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * if we've been requested to send stderr output to the server,
	 * we prepare a temporary file to hold it.	when the request is
	 * done we'll forward the output as error messages.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>transform_stderr_server</name><argument_list>(<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>apr_pool_t</name><modifier>*</modifier></type>	 <name>mp</name> <init>= <expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>apr_file_t</name><modifier>*</modifier></type>	 <name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>	 <name>tempdir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>		 <name>tempfilename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>apr_temp_dir_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tempdir</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>APR_SUCCESS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"request failed from %s [%s %s] - failed to get temporary directory for stderr"</literal></expr></argument>,
					 <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>tempfilename</name> <operator>=</operator> <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>mp</name></expr></argument>, <argument><expr><name>tempdir</name></expr></argument>, <argument><expr><literal type="string">"/stderrXXXXXX"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rv</name> <operator>=</operator> <call><name>apr_file_mktemp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>tempfilename</name></expr></argument>, <argument><expr><name>APR_CREATE</name><operator>|</operator><name>APR_WRITE</name><operator>|</operator><name>APR_EXCL</name></expr></argument>, <argument><expr><name>mp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>APR_SUCCESS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"request failed from %s [%s %s] - failed to create temporary file for stderr"</literal></expr></argument>,
					 <argument><expr><name><name>r</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>req</name><operator>-&gt;</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>http_error</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>FDIST_INTERNAL_ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>request_end</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>gdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"[%d] request opened stderr file %s\n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>tempfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfilename</name></name> <operator>=</operator> <name>tempfilename</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>trans</name><operator>.</operator><name>errfile</name></name>	 <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * gpfdist main
 *
 * 1) get command line options from user
 * 2) setup internal memory pool, and signal handlers
 * 3) init event handler (libevent)
 * 4) create the requested HTTP port and start listening for requests.
 * 5) create the gpfdist log file and handle stderr/out redirection.
 * 6) sit and wait for an event.
 */</comment>
<function><type><name>int</name></type> <name>gpfdist_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Comment
	 */</comment>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_app_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"apr_app_initialize failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>apr_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>apr_pool_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"apr_app_initialize failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">//apr_signal_init(gcb.pool);</comment>

	<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>session</name><operator>.</operator><name>tab</name></name> <operator>=</operator> <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>parse_command_line</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGPIPE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/*
	 * apr_signal(SIGINT, process_signal);
     * apr_signal(SIGTERM, process_signal);
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>V</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><literal type="string">"EVENT_SHOW_METHOD=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><literal type="string">"EVENT_NOKQUEUE=1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>event_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>signal_register</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>http_setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Serving HTTPS on port %d, directory %s\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Serving HTTP on port %d, directory %s\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Serving HTTP on port %d, directory %s\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* redirect stderr and stdout to log */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>l</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f_stderr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f_stdout</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>f_stderr</name> <operator>=</operator> <call><name>freopen</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>f_stderr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to redirect stderr to log: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><call><name>setlinebuf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>f_stdout</name> <operator>=</operator> <call><name>freopen</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>f_stdout</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to redirect stdout to log: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><call><name>setlinebuf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * must identify errors in calls above and return non-zero for them
	 * behaviour required for the Windows service case
	 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>wd</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"GPFDIST_WATCHDOG_TIMER"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>val</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>wd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>wd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <name>endptr</name> <operator>==</operator> <name>wd</name> <operator>||</operator> <name>val</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"incorrect watchdog timer: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>wdtimer</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>val</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>gcb</name><operator>.</operator><name>wdtimer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Watchdog enabled, abort in %d seconds if no activity"</literal></expr></argument>, <argument><expr><name><name>gcb</name><operator>.</operator><name>wdtimer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>shutdown_time</name> <operator>=</operator> <call><name>apr_time_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>gcb</name><operator>.</operator><name>wdtimer</name></name> <operator>*</operator> <name>APR_USEC_PER_SEC</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_t</name></type> <name>watchdog</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>watchdog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>watchdog_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>gpfdist_run</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>event_dispatch</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>gpfdist_init</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>gpfdist_run</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>   <comment type="block">/* in Windows gpfdist may run as a Windows service or a console application  */</comment>


<decl_stmt><decl><type><name>SERVICE_STATUS</name></type>          <name>ServiceStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_STATUS_HANDLE</name></type>   <name>hStatus</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_LINE_ARG_MAX_SIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_LINE_ARG_SIZE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_LINE_ARG_NUM</name></cpp:macro> <cpp:value>40</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>cmd_line_buffer</name><index>[<expr><name>CMD_LINE_ARG_NUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cmd_line_args</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type>  <name>ServiceMain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>  <name>ControlHandler</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>request</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* gpfdist service registration on the WINDOWS command line
 * sc create gpfdist binpath= "c:\temp\gpfdist.exe param1 param2 param3"
 * sc delete gpfdist
 */</comment>

<comment type="block">/* HELPERS - START */</comment>
<function><type><name>void</name></type> <name>report_event</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type> <name>_error_msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type> <name>hEventSource</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LPCTSTR</name></type> <name><name>lpszStrings</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>Buffer</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>hEventSource</name> <operator>=</operator> <call><name>RegisterEventSource</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"gpfdist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>( <expr><name>NULL</name> <operator>!=</operator> <name>hEventSource</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>Buffer</name></expr></argument>, <argument><expr><name>_error_msg</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>lpszStrings</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"gpfdist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lpszStrings</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Buffer</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ReportEvent</name><argument_list>(<argument><expr><name>hEventSource</name></expr></argument>,        <comment type="block">/* event log handle */</comment>
					<argument><expr><name>EVENTLOG_ERROR_TYPE</name></expr></argument>, <comment type="block">/* event type */</comment>
					<argument><expr><literal type="number">0</literal></expr></argument>,                   <comment type="block">/* event category */</comment>
					<argument><expr><operator>(</operator><operator>(</operator><name>DWORD</name><operator>)</operator><literal type="number">0xC0020100L</literal><operator>)</operator></expr></argument>,           <comment type="block">/* event identifier */</comment>
					<argument><expr><name>NULL</name></expr></argument>,                <comment type="block">/* no security identifier */</comment>
					<argument><expr><literal type="number">2</literal></expr></argument>,                   <comment type="block">/* size of lpszStrings array */</comment>
					<argument><expr><literal type="number">0</literal></expr></argument>,                   <comment type="block">/* no binary data */</comment>
					<argument><expr><name>lpszStrings</name></expr></argument>,         <comment type="block">/* array of strings */</comment>
					<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block">/* no binary data */</comment>

		<expr_stmt><expr><call><name>DeregisterEventSource</name><argument_list>(<argument><expr><name>hEventSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>verify_buf_size</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>_in_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>val_len</name></decl>, <decl><type ref="prev"/><name>new_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>val_len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>_in_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>val_len</name> <operator>&gt;=</operator> <name>CMD_LINE_ARG_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>new_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>val_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;=</operator> <name>CMD_LINE_ARG_MAX_SIZE</name><operator>)</operator></expr> ?</condition><then> <expr><name>CMD_LINE_ARG_MAX_SIZE</name></expr> </then><else>: <expr><operator>(</operator><name>val_len</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>pBuf</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>pBuf</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>*</operator><name>pBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>new_len</name> <operator>=</operator> <name>val_len</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>new_len</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_cmd_buffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="block">/* 1. initialize command line params buffer*/</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CMD_LINE_ARG_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>cmd_line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>CMD_LINE_ARG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>cmd_line_buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cmd_line_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CMD_LINE_ARG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* 2. the number of variables cannot be higher than a
	 *    a predifined const, that is because - down the line
	 *    this values get to a const buffer whose size is
	 *    defined at compile time
	 */</comment>
	<expr_stmt><expr><name>cmd_line_args</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>argc</name> <operator>&lt;=</operator> <name>CMD_LINE_ARG_NUM</name><operator>)</operator></expr> ?</condition><then> <expr><name>argc</name></expr> </then><else>: <expr><name>CMD_LINE_ARG_NUM</name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <name>CMD_LINE_ARG_NUM</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>msg</name><index>[<expr><literal type="number">200</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"too many parameters - maximum allowed: %d."</literal></expr></argument>, <argument><expr><name>CMD_LINE_ARG_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>report_event</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"msg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cmd_line_args</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>verify_buf_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd_line_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cmd_line_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clean_cmd_buffer</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CMD_LINE_ARG_NUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cmd_line_buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_service_status</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwServiceType</name></name> <operator>=</operator> <name>SERVICE_WIN32</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>SERVICE_START_PENDING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwControlsAccepted</name></name>   <operator>=</operator>  <name>SERVICE_ACCEPT_STOP</name> <operator>|</operator> <name>SERVICE_ACCEPT_SHUTDOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwWin32ExitCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwServiceSpecificExitCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwCheckPoint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwWaitHint</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_set_srv_status</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>_currentState</name></decl></parameter>, <parameter><decl><type><name>DWORD</name></type> <name>_exitCode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwCurrentState</name></name> <operator>=</operator> <name>_currentState</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceStatus</name><operator>.</operator><name>dwWin32ExitCode</name></name> <operator>=</operator> <name>_exitCode</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetServiceStatus</name><argument_list>(<argument><expr><name>hStatus</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ServiceStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_services_table</name><parameter_list>(<parameter><decl><type><name>SERVICE_TABLE_ENTRY</name><modifier>*</modifier></type> <name>ServiceTable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ServiceTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lpServiceName</name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><literal type="string">"gpfdist"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lpServiceProc</name> <operator>=</operator> <operator>(</operator><name>LPSERVICE_MAIN_FUNCTIONA</name><operator>)</operator><name>ServiceMain</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceTable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lpServiceName</name> <operator>=</operator> <operator>(</operator><name>LPSTR</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ServiceTable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lpServiceProc</name> <operator>=</operator> <operator>(</operator><name>LPSERVICE_MAIN_FUNCTIONA</name><operator>)</operator><name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>
<comment type="block">/* HELPERS - STOP */</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>main_ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>srv_ret</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * 1. command line parameters transfer to a global buffer - for ServiceMain
	 */</comment>
	<expr_stmt><expr><call><name>init_cmd_buffer</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * 2. services table init
	 */</comment>
	<decl_stmt><decl><type><name>SERVICE_TABLE_ENTRY</name></type> <name><name>ServiceTable</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_services_table</name><argument_list>(<argument><expr><name>ServiceTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * 3. Start the control dispatcher thread for our service
	 */</comment>
	<expr_stmt><expr><name>srv_ret</name> <operator>=</operator> <call><name>StartServiceCtrlDispatcher</name><argument_list>(<argument><expr><name>ServiceTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>srv_ret</name></expr>)</condition> <comment type="block">/* program is being run as a Windows console application */</comment>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>gpfdist_init</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Initialization failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>main_ret</name> <operator>=</operator> <call><name>gpfdist_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<return>return <expr><name>main_ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ServiceMain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_service_status</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>hStatus</name> <operator>=</operator> <call><name>RegisterServiceCtrlHandler</name><argument_list>(<argument><expr><operator>(</operator><name>LPCSTR</name><operator>)</operator><literal type="string">"gpfdist"</literal></expr></argument>, <argument><expr><operator>(</operator><name>LPHANDLER_FUNCTION</name><operator>)</operator><name>ControlHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>hStatus</name> <operator>==</operator> <operator>(</operator><name>SERVICE_STATUS_HANDLE</name><operator>)</operator><literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Registering Control Handler failed
		 */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/*
	 * Initialize Service
	 * If we don't pass a const char* const [], to gpfdist_init
	 * we will get a warning that will fail the build
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name><name>buf</name><index>[<expr><name>CMD_LINE_ARG_NUM</name></expr>]</index></name> <init>= <expr><block>{
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">37</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">38</literal></expr>]</index></name></expr>,
		<expr><name><name>cmd_line_buffer</name><index>[<expr><literal type="number">39</literal></expr>]</index></name></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>gpfdist_init</name><argument_list>(<argument><expr><name>cmd_line_args</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Initialization failed
		 */</comment>
		<expr_stmt><expr><call><name>do_set_srv_status</name><argument_list>(<argument><expr><name>SERVICE_STOPPED</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>do_set_srv_status</name><argument_list>(<argument><expr><name>SERVICE_RUNNING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * free the command line arguments buffer - it's not used anymore
	 */</comment>
	<expr_stmt><expr><call><name>clean_cmd_buffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * actual service work
	 */</comment>
	<expr_stmt><expr><call><name>gpfdist_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ControlHandler</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>request</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch<condition>(<expr><name>request</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SERVICE_CONTROL_STOP</name></expr>:</case>
		<case>case <expr><name>SERVICE_CONTROL_SHUTDOWN</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>do_set_srv_status</name><argument_list>(<argument><expr><name>SERVICE_STOPPED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block>

		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Report current status
	 */</comment>
	<expr_stmt><expr><call><name>do_set_srv_status</name><argument_list>(<argument><expr><name>SERVICE_RUNNING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>find_max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt;= (b) ? (a) : (b))</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>SSL_CTX</name> <modifier>*</modifier></type><name>initialize_ctx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>stringSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> 		<modifier>*</modifier></type><name>fileName</name></decl>, <decl><type ref="prev"/><name>slash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SSL_CTX</name> 	<modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gcb</name><operator>.</operator><name>bio_err</name></name></expr>)</condition><block>{<block_content>
		<comment type="block">/* Global system initialization*/</comment>
		<expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* An error write context */</comment>
		<expr_stmt><expr><name><name>gcb</name><operator>.</operator><name>bio_err</name></name><operator>=</operator><call><name>BIO_new_fp</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>BIO_NOCLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Create our context*/</comment>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><call><name>SSLv23_server_method</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Disable old protocol versions */</comment>
	<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_SSLv2</name> <operator>|</operator> <name>SSL_OP_NO_SSLv3</name> <operator>|</operator> <name>SSL_OP_NO_TLSv1</name> <operator>|</operator> <name>SSL_OP_NO_TLSv1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Generate random seed */</comment>
	<if_stmt><if>if <condition>( <expr><call><name>RAND_poll</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"Can't generate random seed for SSL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The size of the string will consist of the path and the filename (the
	 * longest one)
	 * +1 for the '/' character (/filename)
	 * +1 for the \0
	 */</comment>
	<expr_stmt><expr><name>stringSize</name> <operator>=</operator> <call><name>find_max</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>CertificateFilename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>find_max</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>PrivateKeyFilename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TrustedCaFilename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<comment type="block">/* Allocate the memory for the file name */</comment>
	<expr_stmt><expr><name>fileName</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><operator>(</operator><name>stringSize</name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fileName</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>gfatal</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"Unable to allocate memory for SSL initialization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<expr_stmt><expr><name>slash</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>slash</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Copy the path + the filename */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>,<argument><expr><name>stringSize</name></expr></argument>,<argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>,<argument><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr></argument>,<argument><expr><name>slash</name></expr></argument>,<argument><expr><name>CertificateFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Load our keys and certificates*/</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"Unable to load the certificate from file: \"%s\""</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name><name>opt</name><operator>.</operator><name>v</name></name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"The certificate was successfully loaded from \"%s\"\n"</literal></expr></argument>,<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Copy the path + the filename */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>,<argument><expr><name>stringSize</name></expr></argument>,<argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>,<argument><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr></argument>,<argument><expr><name>slash</name></expr></argument>,<argument><expr><name>PrivateKeyFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,<argument><expr><name>fileName</name></expr></argument>,<argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gfatal</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"Unable to load the private key from file: \"%s\""</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name><name>opt</name><operator>.</operator><name>v</name></name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"The private key was successfully loaded from \"%s\"\n"</literal></expr></argument>,<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Copy the path + the filename */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>,<argument><expr><name>stringSize</name></expr></argument>,<argument><expr><literal type="string">"%s%c%s"</literal></expr></argument>,<argument><expr><name><name>opt</name><operator>.</operator><name>ssl</name></name></expr></argument>,<argument><expr><name>slash</name></expr></argument>,<argument><expr><name>TrustedCaFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Load the CAs we trust*/</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gfatal</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="string">"Unable to to load CA from file: \"%s\""</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>( <expr><name><name>opt</name><operator>.</operator><name>v</name></name></expr> )</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>gprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"The CA file successfully loaded from \"%s\"\n"</literal></expr></argument>,<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Set the verification flags for ctx 	*/</comment>
	<comment type="block">/* We always require client certificate	*/</comment>
	<expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name> <operator>|</operator> <name>SSL_VERIFY_FAIL_IF_NO_PEER_CERT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Consider using these - experinments on Mac showed no improvement,
	 * but perhaps it will on other platforms, or when opt.m is very big
	 */</comment>
	<comment type="line">//SSL_CTX_set_mode(ctx, SSL_MODE_AUTO_RETRY | SSL_MODE_ENABLE_PARTIAL_WRITE);</comment>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * gpfdist_socket_send
 *
 * Sends the requested buf, of size buflen to the network
 * via appropriate socket
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gpfdist_socket_send</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>send</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
<comment type="block">/*
 * gpfdist_SSL_send
 *
 * Sends the requested buf, of size len to the network via SSL
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gpfdist_SSL_send</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<comment type="block">/* Write the data to socket */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>BIO_write</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Try to flush */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>BIO_flush</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we could not write to BIO */</comment>
	<if_stmt><if>if <condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If BIO indicates retry =&gt; we should retry later, this is not an error */</comment>
		<if_stmt><if>if <condition>( <expr><call><name>BIO_should_retry</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
		<block>{<block_content>
			<comment type="block">/* Do not indicate error */</comment>
			<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* If errno == 0 =&gt; this is not a real error */</comment>
			<if_stmt><if>if <condition>( <expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>
			<block>{<block_content>
				<comment type="block">/* Do not indicate error */</comment>
				<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* If errno == EPIPE, it means that the client has closed the connection   	*/</comment>
				<comment type="block">/* This error will be handled in the calling function, do not print it here	*/</comment>
				<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EPIPE</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"Error during SSL gpfdist_send (Error = %d. errno = %d)"</literal></expr></argument>, <argument><expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ERR_print_errors</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>bio_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * gpfdist_socket_receive
 *
 * read from a socket
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gpfdist_socket_receive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator> <call><name>recv</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * request_shutdown_sock
 *
 * Shutdown request socket transmission.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>request_shutdown_sock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>shutdown</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>SHUT_WR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"successfully shutdown socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"failed to shutdown socket, errno: %d, msg: %s"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
<comment type="block">/*
 * gpfdist_SSL_receive
 *
 * read from an SSL socket
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>gpfdist_SSL_receive</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator> <call><name>BIO_read</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</return>
	<comment type="block">/* todo: add error checks here */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * free_SSL_resources
 *
 * Frees all SSL resources that were allocated per request r
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>free_SSL_resources</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">//send close_notify to client</comment>
	<expr_stmt><expr><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//or BIO_ssl_shutdown(r-&gt;ssl_bio);</comment>

	<expr_stmt><expr><call><name>request_shutdown_sock</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BIO_vfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//ssl_bio is pushed to r-&gt;io list, so ssl_bio is freed too.</comment>
	<expr_stmt><expr><call><name>BIO_vfree</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>sbio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//BIO_vfree(r-&gt;ssl_bio);</comment>
	<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * handle_ssl_error
 *
 * Frees SSL resources that were allocated during do_accept
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_ssl_error</name><parameter_list>(<parameter><decl><type><name>SOCKET</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><name>BIO</name> <modifier>*</modifier></type><name>sbio</name></decl></parameter>, <parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>ssl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"SSL accept failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>.</operator><name>v</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ERR_print_errors</name><argument_list>(<argument><expr><name><name>gcb</name><operator>.</operator><name>bio_err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * flush_ssl_buffer
 *
 * Flush all the data that is still pending in the current buffer
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_ssl_buffer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name> <init>= <expr><operator>(</operator><name>request_t</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>BIO_flush</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>( <expr><name>event</name> <operator>&amp;</operator> <name>EV_TIMEOUT</name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"Buffer flush timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>( <expr><call><name>BIO_wpending</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>io</name></name></expr></argument>)</argument_list></call></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>setup_flush_ssl_buffer</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// Do ssl cleanup immediately.</comment>
		<expr_stmt><expr><call><name>request_cleanup_and_free_SSL_resources</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * setup_flush_ssl_buffer
 *
 * Create event that will call to 'flush_ssl_buffer', with 5 seconds timeout
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_flush_ssl_buffer</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>EV_WRITE</name></expr></argument>, <argument><expr><name>flush_ssl_buffer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>tv_sec</name></name>  <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * log unsent/unacked bytes in socket buffer.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_unsent_bytes</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>unsent_bytes</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>TIOCOUTQ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>unsent_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"failed to use ioctl to get unsent bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>unsent_bytes</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_unsent_bytes</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"unsent bytes: %d (-1 means not supported)"</literal></expr></argument>, <argument><expr><call><name>get_unsent_bytes</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * call close after timeout or EV_READ ready.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_close</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name>		<init>= <expr><operator>(</operator><name>request_t</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name>	<init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&amp;</operator> <name>EV_TIMEOUT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"gpfdist shutdown the connection, while have not received response from segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>recv</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"gpfdist read error after shutdown. errno: %d, msg: %s"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_retry</name> <init>= <expr><operator>(</operator><name>e</name> <operator>==</operator> <name>WSAEINTR</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>WSAEWOULDBLOCK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>should_retry</name> <init>= <expr><operator>(</operator><name>e</name> <operator>==</operator> <name>EINTR</name> <operator>||</operator> <name>e</name> <operator>==</operator> <name>EAGAIN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>should_retry</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>setup_do_close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"peer closed after gpfdist shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"gpfdist read unexpected data after shutdown %s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>log_unsent_bytes</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>closesocket</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gprintlnif</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"successfully closed socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>gwarning</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"failed to close socket. errno: %d, msg: %s"</literal></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * request_cleanup
 *
 * Cleanup request related resources
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>request_cleanup</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>request_shutdown_sock</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setup_do_close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<if_stmt><if>if <condition>( <expr><name><name>r</name><operator>-&gt;</operator><name>zstd</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>-&gt;</operator><name>is_get</name></name></expr> )</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ZSTD_freeCCtx</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_cctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_do_close</name><parameter_list>(<parameter><decl><type><name>request_t</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>event_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>event_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>sock</name></name></expr></argument>, <argument><expr><name>EV_READ</name></expr></argument>, <argument><expr><name>do_close</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>-&gt;</operator><name>tm</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>event_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>ev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>tm</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>gfatal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"failed to event_add!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
<comment type="block">/*
 * request_cleanup_and_free_SSL_resources
 *
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>request_cleanup_and_free_SSL_resources</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"SSL cleanup and free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Clean up request resources */</comment>
	<expr_stmt><expr><call><name>setup_do_close</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Shutdown SSL gracefully and Release SSL related memory */</comment>
	<expr_stmt><expr><call><name>free_SSL_resources</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * free_session_cb
 * The callback function of session timer
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>free_session_cb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>session_t</name><modifier>*</modifier></type> <name>session</name> <init>= <expr><operator>(</operator><name>session_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * free the session if there's no POST request from other
	 * segments since the timer get started.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>session</name><operator>-&gt;</operator><name>is_get</name></name> <operator>&amp;&amp;</operator>
		<name><name>session</name><operator>-&gt;</operator><name>nrequest</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>session_active_segs_isempty</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>session_free</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>palloc_safe</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>apr_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>apr_size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"FATAL"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>pcalloc_safe</name><parameter_list>(<parameter><decl><type><name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>apr_pool_t</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>, <parameter><decl><type><name>apr_size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_gprint</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="string">"FATAL"</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>watchdog_thread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>apr_time_t</name></type>		<name>duration</name></decl>;</decl_stmt>

	<do>do
	<block>{<block_content>
		<comment type="block">/* apr_time_now is defined in microseconds since epoch */</comment>
		<expr_stmt><expr><name>duration</name> <operator>=</operator> <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>shutdown_time</name> <operator>-</operator> <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sleep</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block> while<condition>(<expr><call><name>apr_time_now</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>shutdown_time</name></expr>)</condition>;</do>
	<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"Watchdog timer expired, abort gpfdist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>delay_watchdog_timer</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>gcb</name><operator>.</operator><name>wdtimer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>shutdown_time</name> <operator>=</operator> <call><name>apr_time_now</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>gcb</name><operator>.</operator><name>wdtimer</name></name> <operator>*</operator> <name>APR_USEC_PER_SEC</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name></type> <name>delay_watchdog_timer</name><parameter_list>()</parameter_list>
<block>{<block_content>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<comment type="block">/*
 * compress_zstd
 * It is for compress data in buffer. Return is the length of data after compression.
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compress_zstd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>blk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>blk</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cursor</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>r</name><operator>-&gt;</operator><name>zstd_cctx</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_err_len</name></name></expr></argument>, <argument><expr><literal type="string">"Creating compression context failed, out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>init_result</name> <init>= <expr><call><name>ZSTD_initCStream</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_cctx</name></name></expr></argument>, <argument><expr><name>DEFAULT_COMPRESS_LEVEL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>init_result</name></expr></argument>)</argument_list></call></expr>)</condition> 
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_err_len</name></name></expr></argument>, <argument><expr><literal type="string">"Creating compression context initialization failed, error is %s."</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>init_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while<condition>(<expr><name>cursor</name> <operator>&lt;</operator> <name>buflen</name></expr>)</condition><block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>in_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>buflen</name> <operator>-</operator> <name>cursor</name><operator>)</operator> <operator>&gt;</operator> <name>MAX_FRAME_SIZE</name></expr> ?</condition><then> <expr><name>MAX_FRAME_SIZE</name></expr> </then><else>: <expr><operator>(</operator><name>buflen</name> <operator>-</operator> <name>cursor</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ZSTD_inBuffer</name></type> <name>bin</name> <init>= <expr><block>{<expr><name>buf</name> <operator>+</operator> <name>cursor</name></expr>, <expr><name>in_size</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>outpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name><name>bin</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>bin</name><operator>.</operator><name>size</name></name></expr>)</condition><block>{<block_content>
			<decl_stmt><decl><type><name>ZSTD_outBuffer</name></type> <name>bout</name> <init>= <expr><block>{<expr><name><name>blk</name><operator>-&gt;</operator><name>cdata</name></name> <operator>+</operator> <name>offset</name></expr>, <expr><name>OUT_BUFFER_SIZE</name> <operator>-</operator> <name>outpos</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>size_t</name></type> <name>res</name> <init>= <expr><call><name>ZSTD_compressStream</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_cctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bout</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_err_len</name></name></expr></argument>, <argument><expr><literal type="string">"Compression failed, error is %s."</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>bout</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>outpos</name> <operator>=</operator> <name><name>bout</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt> 
		</block_content>}</block></while>
		<expr_stmt><expr><name>cursor</name> <operator>+=</operator> <name>in_size</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<decl_stmt><decl><type><name>ZSTD_outBuffer</name></type> <name>output</name> <init>= <expr><block>{ <expr><name><name>r</name><operator>-&gt;</operator><name>outblock</name><operator>.</operator><name>cdata</name></name> <operator>+</operator> <name>offset</name></expr>, <expr><name>OUT_BUFFER_SIZE</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>remainingToFlush</name> <init>= <expr><call><name>ZSTD_endStream</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_cctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="block">/* close frame */</comment>
	<if_stmt><if>if <condition>(<expr><name>remainingToFlush</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_err_len</name></name></expr></argument>, <argument><expr><literal type="string">"Compression failed, error is not fully flushed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>gprintln</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>zstd_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>output</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>

	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
