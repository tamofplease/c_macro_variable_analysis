<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/bin/pg_upgrade/option.c"><comment type="block">/*
 *	opt.c
 *
 *	options functions
 *
 *	Copyright (c) 2010-2019, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/option.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt_long.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pidfile.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"greenplum/pg_upgrade_greenplum.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_required_directory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dirpath</name></decl></parameter>,
									 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envVarName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>useCwd</name></decl></parameter>,
									 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdLineOption</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_DEFAULT_READ_ONLY</name></cpp:macro> <cpp:value>"-c default_transaction_read_only=false"</cpp:value></cpp:define>


<decl_stmt><decl><type><name>UserOpts</name></type>	<name>user_opts</name></decl>;</decl_stmt>


<comment type="block">/*
 * parseCommandLine()
 *
 *	Parses the command line (argc, argv[]) and loads structures
 */</comment>
<function><type><name>void</name></type>
<name>parseCommandLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"old-datadir"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"new-datadir"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"old-bindir"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'b'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"new-bindir"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'B'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"old-options"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'o'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"new-options"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'O'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"old-port"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"new-port"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,

		<expr><block>{<expr><literal type="string">"username"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'U'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"check"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'c'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"link"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'k'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"retain"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'r'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"jobs"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'j'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"socketdir"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'s'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"clone"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

		<comment type="block">/* Greenplum specific parameters */</comment>
		<expr><name>GREENPLUM_OPTIONS</name>

		<block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>option</name></decl>;</decl_stmt>			<comment type="block">/* Command line option */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>optindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* used by getopt_long */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>os_user_effective_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>filename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>run_time</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>user_opts</name><operator>.</operator><name>transfer_mode</name></name> <operator>=</operator> <name>TRANSFER_MODE_COPY</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>progname</name></name> <operator>=</operator> <call><name>get_progname</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Process libpq env. variables; load values here for usage() output */</comment>
	<expr_stmt><expr><name><name>old_cluster</name><operator>.</operator><name>port</name></name> <operator>=</operator> <ternary><condition><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGPORTOLD"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGPORTOLD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>DEF_PGUPORT</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_cluster</name><operator>.</operator><name>port</name></name> <operator>=</operator> <ternary><condition><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGPORTNEW"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGPORTNEW"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>DEF_PGUPORT</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name>os_user_effective_id</name> <operator>=</operator> <call><name>get_user_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initialize_greenplum_user_options</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we override just the database user name;  we got the OS id above */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGUSER"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* must save value, getenv()'s pointer is not stable */</comment>
		<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGUSER"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"pg_upgrade (PostgreSQL) "</literal> <name>PG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allow help and version to be run as root, so do the test here. */</comment>
	<if_stmt><if>if <condition>(<expr><name>os_user_effective_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"%s: cannot be run as root\n"</literal></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>progname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"d:D:b:B:cj:ko:O:p:P:rs:U:v"</literal></expr></argument>,
								 <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optindex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>option</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'b'</literal></expr>:</case>
				<expr_stmt><expr><name><name>old_cluster</name><operator>.</operator><name>bindir</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'B'</literal></expr>:</case>
				<expr_stmt><expr><name><name>new_cluster</name><operator>.</operator><name>bindir</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'c'</literal></expr>:</case>
				<expr_stmt><expr><name><name>user_opts</name><operator>.</operator><name>check</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'d'</literal></expr>:</case>
				<expr_stmt><expr><name><name>old_cluster</name><operator>.</operator><name>pgdata</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'D'</literal></expr>:</case>
				<expr_stmt><expr><name><name>new_cluster</name><operator>.</operator><name>pgdata</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'j'</literal></expr>:</case>
				<expr_stmt><expr><name><name>user_opts</name><operator>.</operator><name>jobs</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'k'</literal></expr>:</case>
				<expr_stmt><expr><name><name>user_opts</name><operator>.</operator><name>transfer_mode</name></name> <operator>=</operator> <name>TRANSFER_MODE_LINK</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'o'</literal></expr>:</case>
				<comment type="block">/* append option? */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>old_cluster</name><operator>.</operator><name>pgopts</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>old_cluster</name><operator>.</operator><name>pgopts</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>old_pgopts</name> <init>= <expr><name><name>old_cluster</name><operator>.</operator><name>pgopts</name></name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>old_cluster</name><operator>.</operator><name>pgopts</name></name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>old_pgopts</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>old_pgopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'O'</literal></expr>:</case>
				<comment type="block">/* append option? */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>new_cluster</name><operator>.</operator><name>pgopts</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>new_cluster</name><operator>.</operator><name>pgopts</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new_pgopts</name> <init>= <expr><name><name>new_cluster</name><operator>.</operator><name>pgopts</name></name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>new_cluster</name><operator>.</operator><name>pgopts</name></name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>new_pgopts</name></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_pgopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>

				<comment type="block">/*
				 * Someday, the port number option could be removed and passed
				 * using -o/-O, but that requires postmaster -C to be
				 * supported on all old/new versions (added in PG 9.2).
				 */</comment>
			<case>case <expr><literal type="char">'p'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>old_cluster</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"invalid old port number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'P'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>new_cluster</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"invalid new port number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'r'</literal></expr>:</case>
				<expr_stmt><expr><name><name>log_opts</name><operator>.</operator><name>retain</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name><name>user_opts</name><operator>.</operator><name>socketdir</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'U'</literal></expr>:</case>
				<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>user_specified</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

				<comment type="block">/*
				 * Push the user name into the environment so pre-9.1
				 * pg_ctl/libpq uses it.
				 */</comment>
				<expr_stmt><expr><call><name>pg_putenv</name><argument_list>(<argument><expr><literal type="string">"PGUSER"</literal></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'v'</literal></expr>:</case>
				<expr_stmt><expr><name><name>log_opts</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<expr_stmt><expr><name><name>user_opts</name><operator>.</operator><name>transfer_mode</name></name> <operator>=</operator> <name>TRANSFER_MODE_CLONE</name></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>process_greenplum_option</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>os_info</name><operator>.</operator><name>progname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>log_opts</name><operator>.</operator><name>internal</name></name> <operator>=</operator> <call><name>fopen_priv</name><argument_list>(<argument><expr><name>INTERNAL_LOG_FILE</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open log file \"%s\": %m\n"</literal></expr></argument>, <argument><expr><name>INTERNAL_LOG_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>log_opts</name><operator>.</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"Running in verbose mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* label start of upgrade in logfiles */</comment>
	<for>for <control>(<init><expr><name>filename</name> <operator>=</operator> <name>output_files</name></expr>;</init> <condition><expr><operator>*</operator><name>filename</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>filename</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen_priv</name><argument_list>(<argument><expr><operator>*</operator><name>filename</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not write to log file \"%s\": %m\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Start with newline because we might be appending to a file. */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal>
				<literal type="string">"-----------------------------------------------------------------\n"</literal>
				<literal type="string">"  pg_upgrade run on %s"</literal>
				<literal type="string">"-----------------------------------------------------------------\n\n"</literal></expr></argument>,
				<argument><expr><call><name>ctime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>run_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Turn off read-only mode;  add prefix to PGOPTIONS? */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGOPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pgoptions</name> <init>= <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>FIX_DEFAULT_READ_ONLY</name></expr></argument>,
										 <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGOPTIONS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pg_putenv</name><argument_list>(<argument><expr><literal type="string">"PGOPTIONS"</literal></expr></argument>, <argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pgoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_putenv</name><argument_list>(<argument><expr><literal type="string">"PGOPTIONS"</literal></expr></argument>, <argument><expr><name>FIX_DEFAULT_READ_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Get values from env if not already set */</comment>
	<expr_stmt><expr><call><name>check_required_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_cluster</name><operator>.</operator><name>bindir</name></name></expr></argument>, <argument><expr><literal type="string">"PGBINOLD"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><literal type="string">"-b"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"old cluster binaries reside"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_skip_target_check</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_required_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_cluster</name><operator>.</operator><name>bindir</name></name></expr></argument>, <argument><expr><literal type="string">"PGBINNEW"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>,
					 <argument><expr><literal type="string">"-B"</literal></expr></argument>, <argument><expr><literal type="string">"new cluster binaries reside"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>check_required_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>, <argument><expr><literal type="string">"PGDATAOLD"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><literal type="string">"-d"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"old cluster data resides"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>is_skip_target_check</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_required_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>new_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>, <argument><expr><literal type="string">"PGDATANEW"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>,
					 <argument><expr><literal type="string">"-D"</literal></expr></argument>, <argument><expr><literal type="string">"new cluster data resides"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>check_required_directory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>user_opts</name><operator>.</operator><name>socketdir</name></name></expr></argument>, <argument><expr><literal type="string">"PGSOCKETDIR"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
							 <argument><expr><literal type="string">"-s"</literal></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"sockets will be created"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<comment type="block">/*
	 * On Windows, initdb --sync-only will fail with a "Permission denied"
	 * error on file pg_upgrade_utility.log if pg_upgrade is run inside the
	 * new cluster directory, so we do a check here.
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>cwd</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>,
					<decl><type ref="prev"/><name><name>new_cluster_pgdata</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>new_cluster_pgdata</name></expr></argument>, <argument><expr><name><name>new_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>new_cluster_pgdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not determine current directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>path_is_prefix_of_path</name><argument_list>(<argument><expr><name>new_cluster_pgdata</name></expr></argument>, <argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"cannot run pg_upgrade from inside the new cluster data directory on Windows\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"pg_upgrade upgrades a Greenplum cluster to a different major version.\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Usage:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  pg_upgrade [OPTION]...\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Options:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -b, --old-bindir=BINDIR       old cluster executable directory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -B, --new-bindir=BINDIR       new cluster executable directory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -c, --check                   check clusters only, don't change any data\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -d, --old-datadir=DATADIR     old cluster data directory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -D, --new-datadir=DATADIR     new cluster data directory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -j, --jobs                    number of simultaneous processes or threads to use\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -k, --link                    link instead of copying files to new cluster\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -o, --old-options=OPTIONS     old cluster options to pass to the server\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -O, --new-options=OPTIONS     new cluster options to pass to the server\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -p, --old-port=PORT           old cluster port number (default %d)\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>old_cluster</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -P, --new-port=PORT           new cluster port number (default %d)\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>new_cluster</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -r, --retain                  retain SQL and log files after success\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -s, --socketdir=DIR           socket directory to use (default CWD)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -U, --username=NAME           cluster superuser (default \"%s\")\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -v, --verbose                 enable verbose internal logging\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -V, --version                 display version information, then exit\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  --clone                       clone instead of copying files to new cluster\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  --continue-check-on-fatal     goes through all pg_upgrade checks; should be used with -c\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  --skip-target-check           skip all checks and comparisons of new cluster; should be used with -c\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -?, --help                    show this help, then exit\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>
			 <literal type="string">"Before running pg_upgrade you must:\n"</literal>
			 <literal type="string">"  create a new database cluster (using the new version of initdb)\n"</literal>
			 <literal type="string">"  shutdown the postmaster servicing the old cluster\n"</literal>
			 <literal type="string">"  shutdown the postmaster servicing the new cluster\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>
			 <literal type="string">"When you run pg_upgrade, you must provide the following information:\n"</literal>
			 <literal type="string">"  the data directory for the old cluster  (-d DATADIR)\n"</literal>
			 <literal type="string">"  the data directory for the new cluster  (-D DATADIR)\n"</literal>
			 <literal type="string">"  the \"bin\" directory for the old version (-b BINDIR)\n"</literal>
			 <literal type="string">"  the \"bin\" directory for the new version (-B BINDIR)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>
			 <literal type="string">"For example:\n"</literal>
			 <literal type="string">"  pg_upgrade -d oldCluster/data -D newCluster/data -b oldCluster/bin -B newCluster/bin\n"</literal>
			 <literal type="string">"or\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  $ export PGDATAOLD=oldCluster/data\n"</literal>
			 <literal type="string">"  $ export PGDATANEW=newCluster/data\n"</literal>
			 <literal type="string">"  $ export PGBINOLD=oldCluster/bin\n"</literal>
			 <literal type="string">"  $ export PGBINNEW=newCluster/bin\n"</literal>
			 <literal type="string">"  $ pg_upgrade\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  C:\\&gt; set PGDATAOLD=oldCluster/data\n"</literal>
			 <literal type="string">"  C:\\&gt; set PGDATANEW=newCluster/data\n"</literal>
			 <literal type="string">"  C:\\&gt; set PGBINOLD=oldCluster/bin\n"</literal>
			 <literal type="string">"  C:\\&gt; set PGBINNEW=newCluster/bin\n"</literal>
			 <literal type="string">"  C:\\&gt; pg_upgrade\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nReport bugs to &lt;bugs@greenplum.org&gt;.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * check_required_directory()
 *
 * Checks a directory option.
 *	dirpath		  - the directory name supplied on the command line, or NULL
 *	envVarName	  - the name of an environment variable to get if dirpath is NULL
 *	useCwd		  - true if OK to default to CWD
 *	cmdLineOption - the command line option for this directory
 *	description   - a description of this directory option
 *
 * We use the last two arguments to construct a meaningful error message if the
 * user hasn't provided the required directory name.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_required_directory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dirpath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envVarName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>useCwd</name></decl></parameter>,
						 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmdLineOption</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>dirpath</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>dirpath</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>envVar</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>envVar</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><name>envVarName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>envVar</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>dirpath</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>envVar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>useCwd</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>cwd</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getcwd</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not determine current directory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>dirpath</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"You must identify the directory where the %s.\n"</literal>
					 <literal type="string">"Please use the %s command-line option or the %s environment variable.\n"</literal></expr></argument>,
					 <argument><expr><name>description</name></expr></argument>, <argument><expr><name>cmdLineOption</name></expr></argument>, <argument><expr><name>envVarName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Clean up the path, in particular trimming any trailing path separators,
	 * because we construct paths by appending to this path.
	 */</comment>
	<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><operator>*</operator><name>dirpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * adjust_data_dir
 *
 * If a configuration-only directory was specified, find the real data dir
 * by querying the running server.  This has limited checking because we
 * can't check for a running server because we can't find postmaster.pid.
 *
 * On entry, cluster-&gt;pgdata has been set from command line or env variable,
 * but cluster-&gt;pgconfig isn't set.  We fill both variables with corrected
 * values.
 */</comment>
<function><type><name>void</name></type>
<name>adjust_data_dir</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>filename</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>cmd</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>,
				<decl><type ref="prev"/><name><name>cmd_output</name><index>[<expr><name>MAX_STRING</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fp</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

	<comment type="block">/* Initially assume config dir and data dir are the same */</comment>
	<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgconfig</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If there is no postgresql.conf, it can't be a config-only dir */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/postgresql.conf"</literal></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgconfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If PG_VERSION exists, it can't be a config-only dir */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/PG_VERSION"</literal></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgconfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Must be a configuration directory, so find the real data directory. */</comment>

	<if_stmt><if>if <condition>(<expr><name>cluster</name> <operator>==</operator> <operator>&amp;</operator><name>old_cluster</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Finding the real data directory for the source cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Finding the real data directory for the target cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * We don't have a data directory yet, so we can't check the PG version,
	 * so this might fail --- only works for PG 9.2+.   If this fails,
	 * pg_upgrade will fail anyway because the data files will not be found.
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"\"%s/postgres\" -D \"%s\" -C data_directory"</literal></expr></argument>,
			 <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>bindir</name></name></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgconfig</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>output</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<call><name>fgets</name><argument_list>(<argument><expr><name>cmd_output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_output</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not get data directory using %s: %s\n"</literal></expr></argument>,
				 <argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Remove trailing newline */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>cmd_output</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><call><name>strchr</name><argument_list>(<argument><expr><name>cmd_output</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgdata</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>cmd_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * get_sock_dir
 *
 * Identify the socket directory to use for this cluster.  If we're doing
 * a live check (old cluster only), we need to find out where the postmaster
 * is listening.  Otherwise, we're going to put the socket into the current
 * directory.
 */</comment>
<function><type><name>void</name></type>
<name>get_sock_dir</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>live_check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SOCKETS</name></cpp:ifdef>

	<comment type="block">/*
	 * sockdir and port were added to postmaster.pid in PG 9.1. Pre-9.1 cannot
	 * process pg_ctl -w for sockets in non-default locations.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">901</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>live_check</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name> <operator>=</operator> <name><name>user_opts</name><operator>.</operator><name>socketdir</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * If we are doing a live check, we will use the old cluster's
			 * Unix domain socket directory so we can connect to the live
			 * server.
			 */</comment>
			<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>orig_port</name> <init>= <expr><name><name>cluster</name><operator>-&gt;</operator><name>port</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>filename</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>,
						<decl><type ref="prev"/><name><name>line</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>lineno</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/postmaster.pid"</literal></expr></argument>,
					 <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>pgdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>,
						 <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<for>for <control>(<init><expr><name>lineno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init>
				 <condition><expr><name>lineno</name> <operator>&lt;=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>LOCK_FILE_LINE_PORT</name></expr></argument>, <argument><expr><name>LOCK_FILE_LINE_SOCKET_DIR</name></expr></argument>)</argument_list></call></expr>;</condition>
				 <incr><expr><name>lineno</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not read line %d from file \"%s\": %s\n"</literal></expr></argument>,
							 <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="block">/* potentially overwrite user-supplied value */</comment>
				<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>==</operator> <name>LOCK_FILE_LINE_PORT</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"%hu"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>old_cluster</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>==</operator> <name>LOCK_FILE_LINE_SOCKET_DIR</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* strip off newline */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><call><name>strchr</name><argument_list>(<argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* warn of port number correction */</comment>
			<if_stmt><if>if <condition>(<expr><name>orig_port</name> <operator>!=</operator> <name>DEF_PGUPORT</name> <operator>&amp;&amp;</operator> <name><name>old_cluster</name><operator>.</operator><name>port</name></name> <operator>!=</operator> <name>orig_port</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"user-supplied old port number %hu corrected to %hu\n"</literal></expr></argument>,
					   <argument><expr><name>orig_port</name></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>

		<comment type="block">/*
		 * Can't get sockdir and pg_ctl -w can't use a non-default, use
		 * default
		 */</comment>
		<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !HAVE_UNIX_SOCKETS */</comment>
	<expr_stmt><expr><name><name>cluster</name><operator>-&gt;</operator><name>sockdir</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
