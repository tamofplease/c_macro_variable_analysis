<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/bin/pg_upgrade/greenplum/option_gp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade_greenplum.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum
<block>{
	<decl><name>DISPATCHER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>SEGMENT</name></decl>
}</block></enum></type> <name>segmentMode</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>progress</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>segmentMode</name></type> <name>segment_mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>continue_check_on_fatal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>skip_target_check</name></decl>;</decl_stmt>
}</block></struct></type> <name>GreenplumUserOpts</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>GreenplumUserOpts</name></type> <name>greenplum_user_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_fatal_occurred</name></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>initialize_greenplum_user_options</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>greenplum_user_opts</name><operator>.</operator><name>segment_mode</name></name> <operator>=</operator> <name>SEGMENT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>greenplum_user_opts</name><operator>.</operator><name>continue_check_on_fatal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>greenplum_user_opts</name><operator>.</operator><name>skip_target_check</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>process_greenplum_option</name><parameter_list>(<parameter><decl><type><name>greenplumOption</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>option</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>GREENPLUM_MODE_OPTION</name></expr>:</case>        <comment type="block">/* --mode={dispatcher|segment} */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"dispatcher"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>greenplum_user_opts</name><operator>.</operator><name>segment_mode</name></name> <operator>=</operator> <name>DISPATCHER</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><literal type="string">"segment"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>greenplum_user_opts</name><operator>.</operator><name>segment_mode</name></name> <operator>=</operator> <name>SEGMENT</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"invalid segment configuration\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>GREENPLUM_PROGRESS_OPTION</name></expr>:</case>        <comment type="block">/* --progress */</comment>
			<expr_stmt><expr><name><name>greenplum_user_opts</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>GREENPLUM_CONTINUE_CHECK_ON_FATAL</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>check</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>greenplum_user_opts</name><operator>.</operator><name>continue_check_on_fatal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>check_fatal_occurred</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>,
					<argument><expr><literal type="string">"--continue-check-on-fatal: should be used with check mode (-c)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>GREENPLUM_SKIP_TARGET_CHECK</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>check</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>greenplum_user_opts</name><operator>.</operator><name>skip_target_check</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
					<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>,
						<argument><expr><literal type="string">"--skip-target-check: should be used with check mode (-c)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<default>default:</default>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>is_greenplum_dispatcher_mode</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>greenplum_user_opts</name><operator>.</operator><name>segment_mode</name></name> <operator>==</operator> <name>DISPATCHER</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>is_show_progress_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>greenplum_user_opts</name><operator>.</operator><name>progress</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>is_continue_check_on_fatal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>greenplum_user_opts</name><operator>.</operator><name>continue_check_on_fatal</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_check_fatal_occured</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>check_fatal_occurred</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>get_check_fatal_occurred</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>check_fatal_occurred</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>is_skip_target_check</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>greenplum_user_opts</name><operator>.</operator><name>skip_target_check</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
