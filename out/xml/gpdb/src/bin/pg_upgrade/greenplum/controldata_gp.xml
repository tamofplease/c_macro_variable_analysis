<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/bin/pg_upgrade/greenplum/controldata_gp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade_greenplum.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Called for GPDB segments only -- since we have copied the master's
 * pg_control file, we need to assign a new system identifier to each segment.
 */</comment>
<function><type><name>void</name></type>
<name>reset_system_identifier</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>	<name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>			<name>sysidentifier</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Setting database system identifier for new cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Use the same initialization process as BootStrapXLOG():
	 *
	 * - 32 bits of [current timestamp] seconds
	 * - 20 bits of [current timestamp] microseconds
	 * - 12 bits of PID
	 *
	 * This doesn't guarantee uniqueness, but if it's good enough for
	 * gpinitsystem it should be good enough for us.
	 */</comment>
	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sysidentifier</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>sysidentifier</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>sysidentifier</name> <operator>|=</operator> <call><name>getpid</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFF</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>exec_prog</name><argument_list>(<argument><expr><name>UTILITY_LOG_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
	          <argument><expr><literal type="string">"\"%s/pg_resetwal\" --binary-upgrade --system-identifier "</literal> <name>UINT64_FORMAT</name> <literal type="string">" \"%s\""</literal></expr></argument>,
		<argument><expr><name><name>new_cluster</name><operator>.</operator><name>bindir</name></name></expr></argument>, <argument><expr><name>sysidentifier</name></expr></argument>, <argument><expr><name><name>new_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Greenplum upgrade involves copying the MASTER_DATA_DIRECTORY to
 * each primary segment. We need to freeze the master data *after* the master
 * schema has been restored to allow the data to be visible on the segments.
 * All databases need to be frozen including those where datallowconn is false.
 *
 * Note: No further updates should occur after freezing the master data
 * directory.
 */</comment>
<function><type><name>void</name></type>
<name>freeze_master_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name> 			<modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name>			<modifier>*</modifier></type><name>conn_template1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>		<modifier>*</modifier></type><name>dbres</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>		<modifier>*</modifier></type><name>txid_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>		<modifier>*</modifier></type><name>dbage_res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>dbnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>ntups</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>i_datallowconn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>i_datname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type>	<name>txid_before</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TransactionId</name></type>	<name>txid_after</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> 			<name>txns_from_freeze</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Freezing all rows in new master after pg_restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Temporarily allow connections to all databases for vacuum freeze */</comment>
	<expr_stmt><expr><name>conn_template1</name> <operator>=</operator> <call><name>connectToServer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>, <argument><expr><literal type="string">"set allow_system_table_mods=true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dbres</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>,
	                          <argument><expr><literal type="string">"SELECT datname, datallowconn "</literal>
	                          <literal type="string">"FROM	pg_catalog.pg_database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i_datname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>, <argument><expr><literal type="string">"datname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i_datallowconn</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>, <argument><expr><literal type="string">"datallowconn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ntups</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name>ntups</name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datallowconn</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>, <argument><expr><name>dbnum</name></expr></argument>, <argument><expr><name>i_datallowconn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>datname</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>, <argument><expr><name>dbnum</name></expr></argument>, <argument><expr><name>i_datname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escaped_datname</name> <init>= <expr><call><name>pg_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>datname</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PQescapeStringConn</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>, <argument><expr><name>escaped_datname</name></expr></argument>, <argument><expr><name>datname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>datname</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* For vacuum freeze, temporarily set datallowconn to true. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>datallowconn</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>,
			                          <argument><expr><literal type="string">"UPDATE pg_catalog.pg_database "</literal>
			                          <literal type="string">"SET datallowconn = true "</literal>
			                          <literal type="string">"WHERE datname = '%s'"</literal></expr></argument>, <argument><expr><name>escaped_datname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>connectToServer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><name>datname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Obtain txid_current before vacuum freeze. */</comment>
		<expr_stmt><expr><name>txid_res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SELECT txid_current()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>txid_before</name> <operator>=</operator> <call><name>str2uint</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>txid_res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PQfnumber</name><argument_list>(<argument><expr><name>txid_res</name></expr></argument>, <argument><expr><literal type="string">"txid_current"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>txid_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"VACUUM FREEZE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Obtain txid_current and age after vacuum freeze.
		 *
		 * Note: It is important that this occurs before any other transactions
		 * are executed so verification succeeds.
		 */</comment>
		<expr_stmt><expr><name>dbage_res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
		                              <argument><expr><literal type="string">"SELECT txid_current(), age(datfrozenxid) "</literal>
		                              <literal type="string">"FROM pg_catalog.pg_database "</literal>
		                              <literal type="string">"WHERE datname = '%s'"</literal></expr></argument>, <argument><expr><name>escaped_datname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>txid_after</name> <operator>=</operator> <call><name>str2uint</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>dbage_res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PQfnumber</name><argument_list>(<argument><expr><name>dbage_res</name></expr></argument>, <argument><expr><literal type="string">"txid_current"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>datfrozenxid_age</name> <init>= <expr><call><name>str2uint</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>dbage_res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PQfnumber</name><argument_list>(<argument><expr><name>dbage_res</name></expr></argument>, <argument><expr><literal type="string">"age"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>dbage_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Verify that the database was frozen by checking that the database age
		 * is less than the number of transactions taken by "VACUUM FREEZE".
		 * This implies that all transaction ids that are older than the
		 * "VACUUM FREEZE" transaction are frozen, and that the oldest
		 * transaction in the database is newer than the "VACUUM FREEZE"
		 * transaction.
		 */</comment>
		<expr_stmt><expr><name>txns_from_freeze</name> <operator>=</operator> <name>txid_after</name> <operator>-</operator> <name>txid_before</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>txns_from_freeze</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Needed if a wrap around occurs between txid after and before. */</comment>
			<expr_stmt><expr><name>txns_from_freeze</name> <operator>=</operator> <name>INT32_MAX</name> <operator>-</operator> <call><name>Abs</name><argument_list>(<argument><expr><name>txns_from_freeze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Reset datallowconn flag before possibly raising an error. */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>datallowconn</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>,
			                          <argument><expr><literal type="string">"UPDATE pg_catalog.pg_database "</literal>
			                          <literal type="string">"SET datallowconn = false "</literal>
			                          <literal type="string">"WHERE datname = '%s'"</literal></expr></argument>, <argument><expr><name>escaped_datname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>escaped_datname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>datfrozenxid_age</name> <operator>&gt;</operator> <name>txns_from_freeze</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Error database '%s' was not properly frozen. Database age of %d is older than %d.\n"</literal></expr></argument>,
			         <argument><expr><name>datname</name></expr></argument>, <argument><expr><name>datfrozenxid_age</name></expr></argument>, <argument><expr><name>txns_from_freeze</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Freeze the tuples updated from resetting datallowconn flag */</comment>
	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>, <argument><expr><literal type="string">"VACUUM FREEZE pg_catalog.pg_database"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
