<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/bin/pg_upgrade/greenplum/reporting.c"><comment type="block">/*
 *	reporting.c
 *
 *	runtime reporting functions
 *
 *	Copyright (c) 2017-Present, VMware, Inc. or its affiliates.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade_greenplum.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name>			   <modifier>*</modifier></type><name>progress_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>				<name>progress_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>				<name>progress_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>	<name>progress_prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Number of operations per progress report file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_PER_PROGRESS</name></cpp:macro>	<cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_PER_PROGRESS</name></cpp:macro> <cpp:value>(5 * 1000000)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>opname</name><parameter_list>(<parameter><decl><type><name>progress_type</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>

	<switch>switch<condition>(<expr><name>op</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CHECK</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"check"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SCHEMA_DUMP</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"dump"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SCHEMA_RESTORE</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"restore"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FILE_MAP</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"map"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FILE_COPY</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"copy"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FIXUP</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"fixup"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ABORT</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"error"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DONE</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"done"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type>
<name>epoch_us</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>	<name>tv</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal> <operator>+</operator> <name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>report_progress</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>, <parameter><decl><type><name>progress_type</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>			<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>message</name><index>[<expr><name>MAX_STRING</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>filename</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type>	<name>ts</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_show_progress_mode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>epoch_us</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>progress_file</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.inprogress"</literal></expr></argument>, <argument><expr><operator>++</operator><name>progress_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>progress_file</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not create progress file:  %s\n"</literal></expr></argument>,
				   <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * In the case where cluster is NULL, omit the cluster version in
	 * the progress file.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>cluster</name> <operator>&amp;&amp;</operator> <operator>*</operator><name><name>cluster</name><operator>-&gt;</operator><name>major_version_str</name></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>progress_file</name></expr></argument>, <argument><expr><literal type="string">"%lu;%s;%s;%s;\n"</literal></expr></argument>,
				<argument><expr><call><name>epoch_us</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cluster</name><operator>-&gt;</operator><name>major_version_str</name></name></expr></argument>, <argument><expr><call><name>opname</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>progress_file</name></expr></argument>, <argument><expr><literal type="string">"%lu;%s;%s;\n"</literal></expr></argument>, <argument><expr><call><name>epoch_us</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>opname</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>progress_counter</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Swap the progress report to a new file if we have exceeded the max
	 * number of operations per file as well as the minumum time per report. We
	 * want to avoid too frequent reports while still providing timely feedback
	 * to the user.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>progress_counter</name> <operator>&gt;</operator> <name>OP_PER_PROGRESS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ts</name> <operator>&gt;</operator> <name>progress_prev</name> <operator>+</operator> <name>TS_PER_PROGRESS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>close_progress</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>close_progress</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>old</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>new</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_show_progress_mode</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>progress_file</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>old</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.inprogress"</literal></expr></argument>, <argument><expr><name>progress_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.done"</literal></expr></argument>, <argument><expr><name>progress_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>progress_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>progress_file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>rename</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>progress_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>progress_prev</name> <operator>=</operator> <call><name>epoch_us</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
