<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/bin/pg_upgrade/greenplum/aotable.c"><comment type="block">/*
 *	aotable.c
 *
 *	functions for restoring Append-Only auxiliary tables
 *
 *	Copyright (c) 2016-Present, VMware, Inc. or its affiliates
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade_greenplum.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pqexpbuffer.h"</cpp:file></cpp:include>

<comment type="block">/* needs to be kept in sync with pg_class.h */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELSTORAGE_AOROWS</name></cpp:macro>	<cpp:value>'a'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELSTORAGE_AOCOLS</name></cpp:macro>	<cpp:value>'c'</cpp:value></cpp:define>

<comment type="block">/*
 * We cannot use executeQueryOrDie for the INSERTs below, because it has a size
 * limit on the query.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>executeLargeCommandOrDie</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecStatusType</name></type> <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"executing: %s\n"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>status</name> <operator>!=</operator> <name>PGRES_TUPLES_OK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>status</name> <operator>!=</operator> <name>PGRES_COMMAND_OK</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Put these on separate lines, because the command can be so large that
		 * pg_log truncates it. We don't want the error message to be truncated
		 * even if that happens.
		 */</comment>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"DB command failed\n%s\n"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"libpq error was: %s\n"</literal></expr></argument>,
			   <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Failure, exiting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Populate contents of the AO segment, block directory, and visibility
 * map tables (pg_ao{cs}seg_&lt;oid&gt;), for one AO relation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>restore_aosegment_table</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>RelInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>segrelname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>vmaprelname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>blkdirrelname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The visibility maps and such can be quite large, so we need a large
	 * buffer.
	 */</comment>
	<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
					  <argument><expr><literal type="string">"SELECT s.relname AS segrelname, "</literal>
					  <literal type="string">"       v.relname AS vmaprelname, "</literal>
					  <literal type="string">"       b.relname AS blkdirrelname "</literal>
					  <literal type="string">"FROM   pg_catalog.pg_appendonly "</literal>
					  <literal type="string">"       JOIN pg_class s ON (segrelid = s.oid) "</literal>
					  <literal type="string">"       JOIN pg_class v ON (visimaprelid = v.oid) "</literal>
					  <literal type="string">"       LEFT OUTER JOIN pg_class b ON (blkdirrelid = b.oid) "</literal>
					  <literal type="string">"WHERE relid = %u::pg_catalog.oid"</literal></expr></argument>,
					  <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>reloid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* XXX We should really find an aosegments table here */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>segrelname</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"segrelname"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>vmaprelname</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"vmaprelname"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"blkdirrelname"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>blkdirrelname</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"blkdirrelname"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>blkdirrelname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Restore the entry in the AO segment table.
	 *
	 * There may already be junk data in the table, since we copy the master
	 * data directory over to the segment before upgrade. Get rid of it first.
	 */</comment>
	<expr_stmt><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"TRUNCATE pg_aoseg.%s"</literal></expr></argument>, <argument><expr><name>segrelname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rel</name><operator>-&gt;</operator><name>naosegments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Row oriented AO table */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>relstorage</name></name> <operator>==</operator> <name>RELSTORAGE_AOROWS</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>AOSegInfo</name>  <modifier>*</modifier></type><name>seg</name> <init>= <expr><operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>aosegments</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
							  <argument><expr><literal type="string">"INSERT INTO pg_aoseg.%s "</literal>
							  <literal type="string">"( "</literal>
							  <literal type="string">"     segno, eof, tupcount, varblockcount, "</literal>
							  <literal type="string">"     eofuncompressed, modcount, formatversion, "</literal>
							  <literal type="string">"     state "</literal>
							  <literal type="string">") "</literal>
							  <literal type="string">"VALUES (%d, "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal>
							                 <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal>
											 <name>INT64_FORMAT</name> <literal type="string">", %d, %d)"</literal></expr></argument>,
							  <argument><expr><name>segrelname</name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>tupcount</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>varblockcount</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>eofuncompressed</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>modcount</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>segno</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>segno</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<comment type="block">/* Column oriented AO table */</comment>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>AOCSSegInfo</name> <modifier>*</modifier></type><name>seg</name> <init>= <expr><operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>aocssegments</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	    <modifier>*</modifier></type><name>vpinfo_escaped</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>vpinfo_escaped</name> <operator>=</operator> <call><name>PQescapeLiteral</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>vpinfo</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>vpinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>vpinfo_escaped</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s: out of memory\n"</literal></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>progname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
							  <argument><expr><literal type="string">"INSERT INTO pg_aoseg.%s "</literal>
							  <literal type="string">"( "</literal>
							  <literal type="string">"		segno, tupcount, varblockcount, vpinfo, "</literal>
							  <literal type="string">"		modcount, formatversion, state"</literal>
							  <literal type="string">") "</literal>
							  <literal type="string">" VALUES (%d, "</literal> <name>INT64_FORMAT</name> <literal type="string">", "</literal> <name>INT64_FORMAT</name> <literal type="string">", %s, "</literal> <name>INT64_FORMAT</name> <literal type="string">", %d, %d)"</literal></expr></argument>,
							  <argument><expr><name>segrelname</name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>tupcount</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>varblockcount</name></name></expr></argument>,
							  <argument><expr><name>vpinfo_escaped</name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>modcount</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>version</name></name></expr></argument>,
							  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>vpinfo_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>segno</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>segno</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>executeLargeCommandOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Restore the entries in the AO visimap table. */</comment>
	<expr_stmt><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"TRUNCATE pg_aoseg.%s"</literal></expr></argument>, <argument><expr><name>vmaprelname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rel</name><operator>-&gt;</operator><name>naovisimaps</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AOVisiMapInfo</name>  <modifier>*</modifier></type><name>seg</name> <init>= <expr><operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>aovisimaps</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>visimap_escaped</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>visimap_escaped</name> <operator>=</operator> <call><name>PQescapeLiteral</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>visimap</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>visimap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>visimap_escaped</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s: out of memory\n"</literal></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>progname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
						  <argument><expr><literal type="string">"INSERT INTO pg_aoseg.%s "</literal>
						  <literal type="string">"( "</literal>
						  <literal type="string">"		segno, first_row_no, visimap "</literal>
						  <literal type="string">") "</literal>
						  <literal type="string">"VALUES (%d, "</literal> <name>INT64_FORMAT</name> <literal type="string">", %s)"</literal></expr></argument>,
						  <argument><expr><name>vmaprelname</name></expr></argument>,
						  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>,
						  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>first_row_no</name></name></expr></argument>,
						  <argument><expr><name>visimap_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>visimap_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>executeLargeCommandOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Restore the entries in the AO blkdir table. */</comment>
	<if_stmt><if>if <condition>(<expr><name>blkdirrelname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"TRUNCATE pg_aoseg.%s"</literal></expr></argument>, <argument><expr><name>blkdirrelname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rel</name><operator>-&gt;</operator><name>naoblkdirs</name></name> <operator>&amp;&amp;</operator> <name>blkdirrelname</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>AOBlkDir</name>   <modifier>*</modifier></type><name>seg</name> <init>= <expr><operator>&amp;</operator><name><name>rel</name><operator>-&gt;</operator><name>aoblkdirs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>minipage_escaped</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>minipage_escaped</name> <operator>=</operator> <call><name>PQescapeLiteral</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>minipage</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>seg</name><operator>-&gt;</operator><name>minipage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>minipage_escaped</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s: out of memory\n"</literal></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>progname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
						  <argument><expr><literal type="string">"INSERT INTO pg_aoseg.%s "</literal>
						  <literal type="string">"( "</literal>
						  <literal type="string">"		segno, columngroup_no, first_row_no, minipage "</literal>
						  <literal type="string">") "</literal>
						  <literal type="string">"VALUES (%d, %d, "</literal> <name>INT64_FORMAT</name> <literal type="string">", %s)"</literal></expr></argument>,
						  <argument><expr><name>blkdirrelname</name></expr></argument>,
						  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>,
						  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>columngroup_no</name></name></expr></argument>,
						  <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>first_row_no</name></name></expr></argument>,
						  <argument><expr><name>minipage_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>minipage_escaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>executeLargeCommandOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>segrelname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>vmaprelname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>blkdirrelname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>blkdirrelname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>restore_aosegment_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Restoring append-only auxiliary tables in new cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Rebuilding AO auxiliary tables can potentially take some time in a large
	 * cluster so swap out the current progress file before starting so that
	 * the user can see what's going on.
	 */</comment>
	<expr_stmt><expr><call><name>report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><name>FIXUP</name></expr></argument>, <argument><expr><literal type="string">"Rebuilding AO auxiliary tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close_progress</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>olddb</name> <init>= <expr><operator>&amp;</operator><name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>relnum</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * GPDB doesn't allow hacking the catalogs without setting
		 * allow_system_table_mods first.
		 */</comment>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"set allow_system_table_mods=true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>relnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>relnum</name> <operator>&lt;</operator> <name><name>olddb</name><operator>-&gt;</operator><name>rel_arr</name><operator>.</operator><name>nrels</name></name></expr>;</condition> <incr><expr><name>relnum</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RelInfo</name>		<modifier>*</modifier></type><name>rel</name> <init>= <expr><operator>&amp;</operator><name><name>olddb</name><operator>-&gt;</operator><name>rel_arr</name><operator>.</operator><name>rels</name><index>[<expr><name>relnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>is_appendonly</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>relstorage</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>restore_aosegment_table</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>is_appendonly</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>relstorage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>relstorage</name> <operator>==</operator> <name>RELSTORAGE_AOROWS</name> <operator>||</operator> <name>relstorage</name> <operator>==</operator> <name>RELSTORAGE_AOCOLS</name></expr>;</return>
</block_content>}</block></function>
</unit>
