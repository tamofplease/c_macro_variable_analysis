<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/bin/pg_rewind/pg_rewind.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pg_rewind.c
 *	  Synchronizes a PostgreSQL data directory to a new timeline
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_rewind.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fetch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"file_ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filemap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/timeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catversion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/controldata_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/restricted_token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/recovery_gen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt_long.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/restricted_token.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/palloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufpage.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>createBackupLabel</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>startpoint</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>starttli</name></decl></parameter>,
							  <parameter><decl><type><name>XLogRecPtr</name></type> <name>checkpointloc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>digestControlFile</name><parameter_list>(<parameter><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>ControlFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>,
							  <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>syncTargetDirectory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sanityChecks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>findCommonAncestorTimeline</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>recptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tliIndex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ensureCleanShutdown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>get_target_dbid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>disconnect_atexit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>ControlFileData</name></type> <name>ControlFile_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ControlFileData</name></type> <name>ControlFile_source</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32</name></type> <name>dbid_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>WalSegSz</name></decl>;</decl_stmt>

<comment type="block">/* Configuration options */</comment>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>datadir_target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>datadir_source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>connstr_source</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>debug</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>showprogress</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>dry_run</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>do_sync</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Target history */</comment>
<decl_stmt><decl><type><name>TimeLineHistoryEntry</name> <modifier>*</modifier></type><name>targetHistory</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>targetNentries</name></decl>;</decl_stmt>

<comment type="block">/* Progress counters */</comment>
<decl_stmt><decl><type><name>uint64</name></type>		<name>fetch_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint64</name></type>		<name>fetch_done</name></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s resynchronizes a PostgreSQL cluster with another copy of the cluster.\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Usage:\n  %s [OPTION]...\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Options:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -D, --target-pgdata=DIRECTORY  existing data directory to modify\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"      --source-pgdata=DIRECTORY  source data directory to synchronize with\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"      --source-server=CONNSTR    source server to synchronize with\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -S, --slot=SLOTNAME            replication slot to use\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -R, --write-recovery-conf      write configuration for replication\n"</literal>
			 <literal type="string">"                                 (requires --source-server)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -n, --dry-run                  stop before modifying anything\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -N, --no-sync                  do not wait for changes to be written\n"</literal>
			 <literal type="string">"                                 safely to disk\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -P, --progress                 write progress messages\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"      --debug                    write a lot of debug messages\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -V, --version                  output version information, then exit\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -?, --help                     show this help, then exit\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nReport bugs to &lt;pgsql-bugs@lists.postgresql.org&gt;.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'?'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"target-pgdata"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"write-recovery-conf"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'R'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"slot"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'S'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"source-pgdata"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"source-server"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"version"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'V'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"dry-run"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'n'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"no-sync"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'N'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"progress"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>option_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>divergerec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastcommontliIndex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>chkptrec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type>	<name>chkpttli</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>chkptredo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>rewind_needed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>endrec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type>	<name>endtli</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ControlFileData</name></type> <name>ControlFile_new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>writerecoveryconf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>replication_slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_logging_init</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_pglocale_pgservice</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>PG_TEXTDOMAIN</name><argument_list>(<argument><expr><literal type="string">"pg_rewind"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>progname</name> <operator>=</operator> <call><name>get_progname</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Process command-line arguments */</comment>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"pg_rewind (Greenplum Database) "</literal> <name>PG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"D:nNPRS:"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option_index</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'?'</literal></expr>:</case>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<case>case <expr><literal type="char">'P'</literal></expr>:</case>
				<expr_stmt><expr><name>showprogress</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'n'</literal></expr>:</case>
				<expr_stmt><expr><name>dry_run</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'S'</literal></expr>:</case>
				<expr_stmt><expr><name>replication_slot</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'N'</literal></expr>:</case>
				<expr_stmt><expr><name>do_sync</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'R'</literal></expr>:</case>
				<expr_stmt><expr><name>writerecoveryconf</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<expr_stmt><expr><name>debug</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pg_logging_set_level</name><argument_list>(<argument><expr><name>PG_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'D'</literal></expr>:</case>			<comment type="block">/* -D or --target-pgdata */</comment>
				<expr_stmt><expr><name>datadir_target</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="number">1</literal></expr>:</case>				<comment type="block">/* --source-pgdata */</comment>
				<expr_stmt><expr><name>datadir_source</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case>				<comment type="block">/* --source-server */</comment>
				<expr_stmt><expr><name>connstr_source</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>datadir_source</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>connstr_source</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"no source specified (--source-pgdata or --source-server)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>datadir_source</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>connstr_source</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"only one of --source-pgdata or --source-server can be specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>datadir_source</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>connstr_source</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: only one of --source-pgdata or --source-server can be specified\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>datadir_target</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"no target data directory specified (--target-pgdata)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>writerecoveryconf</name> <operator>&amp;&amp;</operator> <name>connstr_source</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"no source server information (--source--server) specified for --write-recovery-conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"too many command-line arguments (first is \"%s\")"</literal></expr></argument>,
					 <argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>writerecoveryconf</name> <operator>&amp;&amp;</operator> <name>replication_slot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: --slot can be specified only if --write-recovery-conf is specified\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Don't allow pg_rewind to be run as root, to avoid overwriting the
	 * ownership of files in the data directory. We need only check for root
	 * -- any other user won't have sufficient permissions to modify files in
	 * the data directory.
	 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><call><name>geteuid</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"cannot be executed by \"root\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You must run %s as the PostgreSQL superuser.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>get_restricted_token</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set mask based on PGDATA permissions */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetDataDirectoryCreatePerm</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"could not read permissions of directory \"%s\": %m"</literal></expr></argument>,
					 <argument><expr><name>datadir_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name>pg_mode_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>disconnect_atexit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Connect to remote server */</comment>
	<if_stmt><if>if <condition>(<expr><name>connstr_source</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>libpqConnect</name><argument_list>(<argument><expr><name>connstr_source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Ok, we have all the options and we're ready to start. Read in all the
	 * information we need from both clusters.
	 */</comment>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>slurpFile</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>, <argument><expr><literal type="string">"global/pg_control"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>digestControlFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ControlFile_target</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the target instance was not cleanly shut down, run a single-user
	 * postgres session really quickly and reload the control file to get the
	 * new state.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ControlFile_target</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>DB_SHUTDOWNED</name> <operator>&amp;&amp;</operator>
		<name><name>ControlFile_target</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>DB_SHUTDOWNED_IN_RECOVERY</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ensureCleanShutdown</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>slurpFile</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>, <argument><expr><literal type="string">"global/pg_control"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>digestControlFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ControlFile_target</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>fetchFile</name><argument_list>(<argument><expr><literal type="string">"global/pg_control"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>digestControlFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ControlFile_source</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dbid_target</name> <operator>=</operator> <call><name>get_target_dbid</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sanityChecks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If both clusters are already on the same timeline, there's nothing to
	 * do.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ControlFile_target</name><operator>.</operator><name>checkPointCopy</name><operator>.</operator><name>ThisTimeLineID</name></name> <operator>==</operator> <name><name>ControlFile_source</name><operator>.</operator><name>checkPointCopy</name><operator>.</operator><name>ThisTimeLineID</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"source and target cluster are on the same timeline: %u"</literal></expr></argument>,
			   <argument><expr><name><name>ControlFile_source</name><operator>.</operator><name>checkPointCopy</name><operator>.</operator><name>ThisTimeLineID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rewind_needed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>findCommonAncestorTimeline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>divergerec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastcommontliIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"servers diverged at WAL location %X/%X on timeline %u"</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>divergerec</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>divergerec</name></expr></argument>,
					<argument><expr><name><name>targetHistory</name><index>[<expr><name>lastcommontliIndex</name></expr>]</index></name><operator>.</operator><name>tli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Check for the possibility that the target is in fact a direct
		 * ancestor of the source. In that case, there is no divergent history
		 * in the target that needs rewinding.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ControlFile_target</name><operator>.</operator><name>checkPoint</name></name> <operator>&gt;=</operator> <name>divergerec</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>rewind_needed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>chkptendrec</name></decl>;</decl_stmt>

			<comment type="block">/* Read the checkpoint record on the target to see where it ends. */</comment>
			<expr_stmt><expr><name>chkptendrec</name> <operator>=</operator> <call><name>readOneRecord</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>,
										<argument><expr><name><name>ControlFile_target</name><operator>.</operator><name>checkPoint</name></name></expr></argument>,
										<argument><expr><name>targetNentries</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * If the histories diverged exactly at the end of the shutdown
			 * checkpoint record on the target, there are no WAL records in
			 * the target that don't belong in the source's history, and no
			 * rewind is needed.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>chkptendrec</name> <operator>==</operator> <name>divergerec</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>rewind_needed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>rewind_needed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rewind_needed</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"no rewind required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>writerecoveryconf</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>WriteRecoveryConfig</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>datadir_target</name></expr></argument>,
								<argument><expr><call><name>GenerateRecoveryConfig</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>replication_slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>findLastCheckpoint</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>, <argument><expr><name>divergerec</name></expr></argument>,
					   <argument><expr><name>lastcommontliIndex</name></expr></argument>,
					   <argument><expr><operator>&amp;</operator><name>chkptrec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chkpttli</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chkptredo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"rewinding from last common checkpoint at %X/%X on timeline %u"</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>chkptrec</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>chkptrec</name></expr></argument>,
				<argument><expr><name>chkpttli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Collect information about all files in the target and source systems.
	 */</comment>
	<expr_stmt><expr><call><name>filemap_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>showprogress</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"reading source file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>fetchSourceFileList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>showprogress</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"reading target file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>traverse_datadir</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>process_target_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Read the target WAL from last checkpoint before the point of fork, to
	 * extract all the pages that were modified on the target cluster after
	 * the fork. We can stop reading after reaching the final shutdown record.
	 * XXX: If we supported rewinding a server that was not shut down cleanly,
	 * we would need to replay until the end of WAL here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>showprogress</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"reading WAL in target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>extractPageMap</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>, <argument><expr><name>chkptrec</name></expr></argument>, <argument><expr><name>lastcommontliIndex</name></expr></argument>,
				   <argument><expr><name><name>ControlFile_target</name><operator>.</operator><name>checkPoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We have collected all information we need from both systems. Decide
	 * what to do with each file.
	 */</comment>
	<expr_stmt><expr><call><name>decide_file_actions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>showprogress</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>calculate_totals</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* this is too verbose even for verbose mode */</comment>
	<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>print_filemap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Ok, we're ready to start copying things over.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>showprogress</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"need to copy %lu MB (total source directory size is %lu MB)"</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name><name>filemap</name><operator>-&gt;</operator><name>fetch_size</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr></argument>,
					<argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name><name>filemap</name><operator>-&gt;</operator><name>total_size</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>fetch_size</name> <operator>=</operator> <name><name>filemap</name><operator>-&gt;</operator><name>fetch_size</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fetch_done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * This is the point of no return. Once we start copying things, we have
	 * modified the target directory and there is no turning back!
	 */</comment>

	<expr_stmt><expr><call><name>executeFileMap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>progress_report</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>showprogress</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"creating backup label and updating control file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>createBackupLabel</name><argument_list>(<argument><expr><name>chkptredo</name></expr></argument>, <argument><expr><name>chkpttli</name></expr></argument>, <argument><expr><name>chkptrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Update control file of target. Make it ready to perform archive
	 * recovery when restarting.
	 *
	 * minRecoveryPoint is set to the current WAL insert location in the
	 * source server. Like in an online backup, it's important that we recover
	 * all the WAL that was generated while we copied the files over.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ControlFile_new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ControlFile_source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ControlFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>connstr_source</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>endrec</name> <operator>=</operator> <call><name>libpqGetCurrentXlogInsertLocation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>endtli</name> <operator>=</operator> <name><name>ControlFile_source</name><operator>.</operator><name>checkPointCopy</name><operator>.</operator><name>ThisTimeLineID</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>endrec</name> <operator>=</operator> <name><name>ControlFile_source</name><operator>.</operator><name>checkPoint</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>endtli</name> <operator>=</operator> <name><name>ControlFile_source</name><operator>.</operator><name>checkPointCopy</name><operator>.</operator><name>ThisTimeLineID</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>ControlFile_new</name><operator>.</operator><name>minRecoveryPoint</name></name> <operator>=</operator> <name>endrec</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ControlFile_new</name><operator>.</operator><name>minRecoveryPointTLI</name></name> <operator>=</operator> <name>endtli</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ControlFile_new</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>DB_IN_ARCHIVE_RECOVERY</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update_controlfile</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ControlFile_new</name></expr></argument>, <argument><expr><name>do_sync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>writerecoveryconf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>WriteRecoveryConfig</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>datadir_target</name></expr></argument>,
							<argument><expr><call><name>GenerateRecoveryConfig</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>replication_slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>showprogress</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"syncing target data directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>syncTargetDirectory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_log_info</name><argument_list>(<argument><expr><literal type="string">"Done!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sanityChecks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* TODO Check that there's no backup_label in either cluster */</comment>

	<comment type="block">/* Check system_id match */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ControlFile_target</name><operator>.</operator><name>system_identifier</name></name> <operator>!=</operator> <name><name>ControlFile_source</name><operator>.</operator><name>system_identifier</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"source and target clusters are from different systems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* check version */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ControlFile_target</name><operator>.</operator><name>pg_control_version</name></name> <operator>!=</operator> <name>PG_CONTROL_VERSION</name> <operator>||</operator>
		<name><name>ControlFile_source</name><operator>.</operator><name>pg_control_version</name></name> <operator>!=</operator> <name>PG_CONTROL_VERSION</name> <operator>||</operator>
		<name><name>ControlFile_target</name><operator>.</operator><name>catalog_version_no</name></name> <operator>!=</operator> <name>CATALOG_VERSION_NO</name> <operator>||</operator>
		<name><name>ControlFile_source</name><operator>.</operator><name>catalog_version_no</name></name> <operator>!=</operator> <name>CATALOG_VERSION_NO</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"clusters are not compatible with this version of pg_rewind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Target cluster need to use checksums or hint bit wal-logging, this to
	 * prevent from data corruption that could occur because of hint bits.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ControlFile_target</name><operator>.</operator><name>data_checksum_version</name></name> <operator>!=</operator> <name>PG_DATA_CHECKSUM_VERSION</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><name><name>ControlFile_target</name><operator>.</operator><name>wal_log_hints</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"target server needs to use either data checksums or \"wal_log_hints = on\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Target cluster better not be running. This doesn't guard against
	 * someone starting the cluster concurrently. Also, this is probably more
	 * strict than necessary; it's OK if the target node was not shut down
	 * cleanly, as long as it isn't running at the moment.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ControlFile_target</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>DB_SHUTDOWNED</name> <operator>&amp;&amp;</operator>
		<name><name>ControlFile_target</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>DB_SHUTDOWNED_IN_RECOVERY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"target server must be shut down cleanly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * When the source is a data directory, also require that the source
	 * server is shut down. There isn't any very strong reason for this
	 * limitation, but better safe than sorry.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>datadir_source</name> <operator>&amp;&amp;</operator>
		<name><name>ControlFile_source</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>DB_SHUTDOWNED</name> <operator>&amp;&amp;</operator>
		<name><name>ControlFile_source</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>DB_SHUTDOWNED_IN_RECOVERY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"source data directory must be shut down cleanly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Print a progress report based on the fetch_size and fetch_done variables.
 *
 * Progress report is written at maximum once per second, unless the
 * force parameter is set to true.
 */</comment>
<function><type><name>void</name></type>
<name>progress_report</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>pg_time_t</name></type> <name>last_progress_report</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>percent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fetch_done_str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fetch_size_str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type>	<name>now</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>showprogress</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>now</name> <operator>==</operator> <name>last_progress_report</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* Max once per second */</comment>

	<expr_stmt><expr><name>last_progress_report</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>percent</name> <operator>=</operator> <ternary><condition><expr><name>fetch_size</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>fetch_done</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>/</operator> <name>fetch_size</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<comment type="block">/*
	 * Avoid overflowing past 100% or the full size. This may make the total
	 * size number change as we approach the end of the backup (the estimate
	 * will always be wrong if WAL is included), but that's better than having
	 * the done column be bigger than the total.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>percent</name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>percent</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fetch_done</name> <operator>&gt;</operator> <name>fetch_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fetch_size</name> <operator>=</operator> <name>fetch_done</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Separate step to keep platform-dependent format code out of
	 * translatable strings.  And we only test for INT64_FORMAT availability
	 * in snprintf, not fprintf.
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fetch_done_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fetch_done_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>,
			 <argument><expr><name>fetch_done</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fetch_size_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fetch_size_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>INT64_FORMAT</name></expr></argument>,
			 <argument><expr><name>fetch_size</name> <operator>/</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%*s/%s kB (%d%%) copied"</literal></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fetch_size_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fetch_done_str</name></expr></argument>, <argument><expr><name>fetch_size_str</name></expr></argument>,
			<argument><expr><name>percent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Find minimum from two WAL locations assuming InvalidXLogRecPtr means
 * infinity as src/include/access/timeline.h states. This routine should
 * be used only when comparing WAL locations related to history files.
 */</comment>
<function><type><specifier>static</specifier> <name>XLogRecPtr</name></type>
<name>MinXLogRecPtr</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>b</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>a</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>Min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Retrieve timeline history for given control file which should behold
 * either source or target.
 */</comment>
<function><type><specifier>static</specifier> <name>TimeLineHistoryEntry</name> <modifier>*</modifier></type>
<name>getTimelineHistory</name><parameter_list>(<parameter><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>controlFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nentries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimeLineHistoryEntry</name> <modifier>*</modifier></type><name>history</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type>	<name>tli</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tli</name> <operator>=</operator> <name><name>controlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>ThisTimeLineID</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Timeline 1 does not have a history file, so there is no need to check
	 * and fake an entry with infinite start and end positions.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>tli</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>history</name> <operator>=</operator> <operator>(</operator><name>TimeLineHistoryEntry</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimeLineHistoryEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>history</name><operator>-&gt;</operator><name>tli</name></name> <operator>=</operator> <name>tli</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>history</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name><name>history</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>histfile</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>TLHistoryFilePath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Get history file from appropriate source */</comment>
		<if_stmt><if>if <condition>(<expr><name>controlFile</name> <operator>==</operator> <operator>&amp;</operator><name>ControlFile_source</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>histfile</name> <operator>=</operator> <call><name>fetchFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>controlFile</name> <operator>==</operator> <operator>&amp;</operator><name>ControlFile_target</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>histfile</name> <operator>=</operator> <call><name>slurpFile</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"invalid control file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>history</name> <operator>=</operator> <call><name>rewind_parseTimeLineHistory</name><argument_list>(<argument><expr><name>histfile</name></expr></argument>, <argument><expr><name>tli</name></expr></argument>, <argument><expr><name>nentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>histfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>debug</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>controlFile</name> <operator>==</operator> <operator>&amp;</operator><name>ControlFile_source</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_log_debug</name><argument_list>(<argument><expr><literal type="string">"Source timeline history:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>controlFile</name> <operator>==</operator> <operator>&amp;</operator><name>ControlFile_target</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_log_debug</name><argument_list>(<argument><expr><literal type="string">"Target timeline history:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/*
		 * Print the target timeline history.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>targetNentries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TimeLineHistoryEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_log_debug</name><argument_list>(<argument><expr><literal type="string">"%d: %X/%X - %X/%X"</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tli</name></name></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>begin</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>begin</name></name><operator>)</operator></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>end</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>end</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>history</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Determine the TLI of the last common timeline in the timeline history of the
 * two clusters. targetHistory is filled with target timeline history and
 * targetNentries is number of items in targetHistory. *tliIndex is set to the
 * index of last common timeline in targetHistory array, and *recptr is set to
 * the position where the timeline history diverged (ie. the first WAL record
 * that's not the same in both clusters).
 *
 * Control files of both clusters must be read into ControlFile_target/source
 * before calling this routine.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>findCommonAncestorTimeline</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>recptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tliIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimeLineHistoryEntry</name> <modifier>*</modifier></type><name>sourceHistory</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sourceNentries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

	<comment type="block">/* Retrieve timelines for both source and target */</comment>
	<expr_stmt><expr><name>sourceHistory</name> <operator>=</operator> <call><name>getTimelineHistory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ControlFile_source</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sourceNentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>targetHistory</name> <operator>=</operator> <call><name>getTimelineHistory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ControlFile_target</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>targetNentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Trace the history forward, until we hit the timeline diverge. It may
	 * still be possible that the source and target nodes used the same
	 * timeline number in their history but with different start position
	 * depending on the history files that each node has fetched in previous
	 * recovery processes. Hence check the start position of the new timeline
	 * as well and move down by one extra timeline entry if they do not match.
	 */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>sourceNentries</name></expr></argument>, <argument><expr><name>targetNentries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>sourceHistory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tli</name> <operator>!=</operator> <name><name>targetHistory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tli</name> <operator>||</operator>
			<name><name>sourceHistory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin</name> <operator>!=</operator> <name><name>targetHistory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>begin</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>recptr</name> <operator>=</operator> <call><name>MinXLogRecPtr</name><argument_list>(<argument><expr><name><name>sourceHistory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>, <argument><expr><name><name>targetHistory</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>tliIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>sourceHistory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not find common ancestor of the source and target cluster's timelines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Create a backup_label file that forces recovery to begin at the last common
 * checkpoint.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>createBackupLabel</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>startpoint</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>starttli</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>checkpointloc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogSegNo</name></type>	<name>startsegno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>stamp_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>strfbuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>xlogfilename</name><index>[<expr><name>MAXFNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>XLByteToSeg</name><argument_list>(<argument><expr><name>startpoint</name></expr></argument>, <argument><expr><name>startsegno</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XLogFileName</name><argument_list>(<argument><expr><name>xlogfilename</name></expr></argument>, <argument><expr><name>starttli</name></expr></argument>, <argument><expr><name>startsegno</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Construct backup label file
	 */</comment>
	<expr_stmt><expr><name>stamp_time</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>stamp_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>strfbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strfbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S %Z"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				   <argument><expr><literal type="string">"START WAL LOCATION: %X/%X (file %s)\n"</literal>
				   <literal type="string">"CHECKPOINT LOCATION: %X/%X\n"</literal>
				   <literal type="string">"BACKUP METHOD: pg_rewind\n"</literal>
				   <literal type="string">"BACKUP FROM: standby\n"</literal>
				   <literal type="string">"START TIME: %s\n"</literal></expr></argument>,
	<comment type="block">/* omit LABEL: line */</comment>
				   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>startpoint</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>startpoint</name></expr></argument>, <argument><expr><name>xlogfilename</name></expr></argument>,
				   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>checkpointloc</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>checkpointloc</name></expr></argument>,
				   <argument><expr><name>strfbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"backup label buffer too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>	<comment type="block">/* shouldn't happen */</comment>

	<comment type="block">/* TODO: move old file out of the way, if any. */</comment>
	<expr_stmt><expr><call><name>open_target_file</name><argument_list>(<argument><expr><literal type="string">"backup_label"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* BACKUP_LABEL_FILE */</comment>
	<expr_stmt><expr><call><name>write_target_range</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close_target_file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check CRC of control file
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkControlFile</name><parameter_list>(<parameter><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>ControlFile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_crc32c</name></type>	<name>crc</name></decl>;</decl_stmt>

	<comment type="block">/* Calculate CRC */</comment>
	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ControlFile</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ControlFileData</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* And simply compare it */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQ_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"unexpected control file CRC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Verify control file contents in the buffer src, and copy it to *ControlFile.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>digestControlFile</name><parameter_list>(<parameter><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>ControlFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name>PG_CONTROL_FILE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"unexpected control file size %d, expected %d"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>size</name></expr></argument>, <argument><expr><name>PG_CONTROL_FILE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ControlFile</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ControlFileData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set and validate WalSegSz */</comment>
	<expr_stmt><expr><name>WalSegSz</name> <operator>=</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>xlog_seg_size</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidWalSegSize</name><argument_list>(<argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><call><name>ngettext</name><argument_list>(<argument><expr><literal type="string">"WAL segment size must be a power of two between 1 MB and 1 GB, but the control file specifies %d byte"</literal></expr></argument>,
						  <argument><expr><literal type="string">"WAL segment size must be a power of two between 1 MB and 1 GB, but the control file specifies %d bytes"</literal></expr></argument>,
						  <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Additional checks on control file */</comment>
	<expr_stmt><expr><call><name>checkControlFile</name><argument_list>(<argument><expr><name>ControlFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sync target data directory to ensure that modifications are safely on disk.
 *
 * We do this once, for the whole data directory, for performance reasons.  At
 * the end of pg_rewind's run, the kernel is likely to already have flushed
 * most dirty buffers to disk.  Additionally fsync_pgdata uses a two-pass
 * approach (only initiating writeback in the first pass), which often reduces
 * the overall amount of IO noticeably.
 *
 * gpdb: We assume that all files are synchronized before rewinding and thus we
 * just need to synchronize those affected files. This is a resonable
 * assumption for gpdb since we've ensured that the db state is clean shutdown
 * in pg_rewind by running single mode postgres if needed and also we do not
 * copy an unsynchronized dababase without sync as the target base.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>syncTargetDirectory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>do_sync</name> <operator>||</operator> <name>dry_run</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>file_entry_t</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			  <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name>datadir_target</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"could not change directory to \"%s\": %m"</literal></expr></argument>, <argument><expr><name>datadir_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>filemap</name><operator>-&gt;</operator><name>narray</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <name><name>filemap</name><operator>-&gt;</operator><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>target_pages_to_overwrite</name><operator>.</operator><name>bitmapsize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fsync_fname</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>FILE_ACTION_COPY</name></expr>:</case>
				<case>case <expr><name>FILE_ACTION_TRUNCATE</name></expr>:</case>
				<case>case <expr><name>FILE_ACTION_COPY_TAIL</name></expr>:</case>
					<expr_stmt><expr><call><name>fsync_fname</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><name>FILE_ACTION_CREATE</name></expr>:</case>
					<expr_stmt><expr><call><name>fsync_fname</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
								<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>source_type</name></name> <operator>==</operator> <name>FILE_TYPE_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* FALLTHROUGH */</comment>
				<case>case <expr><name>FILE_ACTION_REMOVE</name></expr>:</case>
					<comment type="block">/*
					 * Fsync the parent directory if we either create or delete
					 * files/directories in the parent directory. The parent
					 * directory might be missing as expected, so fsync it could
					 * fail but we ignore that error.
					 */</comment>
					<expr_stmt><expr><call><name>fsync_parent_path</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>

				<case>case <expr><name>FILE_ACTION_NONE</name></expr>:</case>
					<break>break;</break>

				<default>default:</default>
					<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"no action decided for \"%s\""</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* fsync some files that are (possibly) written by pg_rewind. */</comment>
	<expr_stmt><expr><call><name>fsync_fname</name><argument_list>(<argument><expr><literal type="string">"global/pg_control"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fsync_fname</name><argument_list>(<argument><expr><literal type="string">"backup_label"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fsync_fname</name><argument_list>(<argument><expr><literal type="string">"postgresql.auto.conf"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fsync_fname</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* due to new file backup_label. */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Ensure clean shutdown of target instance by launching single-user mode
 * postgres to do crash recovery.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ensureCleanShutdown</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>ret</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXCMDLEN</name></cpp:macro> <cpp:value>(2 * MAXPGPATH)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>exec_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>cmd</name><index>[<expr><name>MAXCMDLEN</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* locate postgres binary */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>find_other_exec</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>,
							   <argument><expr><literal type="string">"postgres (Greenplum Database) "</literal> <name>PG_VERSION</name> <literal type="string">"\n"</literal></expr></argument>,
							   <argument><expr><name>exec_path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>        <name><name>full_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>find_my_exec</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>full_path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"The program \"postgres\" is needed by %s but was \n"</literal>
					 <literal type="string">"not found in the same directory as \"%s\".\n"</literal>
					 <literal type="string">"Check your installation.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"The program \"postgres\" was found by \"%s\"\n"</literal>
					 <literal type="string">"but was not the same version as %s.\n"</literal>
					 <literal type="string">"Check your installation.\n"</literal></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* only skip processing after ensuring presence of postgres */</comment>
	<if_stmt><if>if <condition>(<expr><name>dry_run</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* finally run postgres single-user mode */</comment>
	<comment type="block">/*
	 * gpdb: use postgres instead of template1, else the below postgres
	 * instance might hang in the below scenario:
	 *
	 * 1. There was a prepared but not finished "create database " dtx
	 *    transaction which was recovered during crash recovery in the startup
	 *    process and thus it holds the lock of database template1 since
	 *    by default template1 is the template for database creation.
	 *
	 * 2. Single mode postgres process will execute the below code in
	 * InitPostgres() after finishing crash recovery (i.e. calling
	 * startupXLOG()) and then hang due to lock conflict.
	 *
	 *    LockSharedObject(DatabaseRelationId, ...);
	 *
	 * DB_FOR_COMMON_ACCESS is used in fts probe, dtx recovery, gdd so it's
	 * hard to have the above kind of dtx transaction on DB_FOR_COMMON_ACCESS
	 * since the commands (e.g. create database with template
	 * DB_FOR_COMMON_ACCESS) would fail.
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>MAXCMDLEN</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" --single -D \"%s\" %s &lt; %s"</literal></expr></argument>,
			 <argument><expr><name>exec_path</name></expr></argument>, <argument><expr><name>datadir_target</name></expr></argument>, <argument><expr><name>DB_FOR_COMMON_ACCESS</name></expr></argument>, <argument><expr><name>DEVNULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"postgres single-user mode of target instance failed for command: %s"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>get_target_dbid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>cmd_output</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> 		<name>dbid</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>		<name>ret</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXCMDLEN</name></cpp:macro> <cpp:value>(2 * MAXPGPATH)</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>exec_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>cmd</name><index>[<expr><name>MAXCMDLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>	<name>parsed_dbid</name></decl>;</decl_stmt>

	<comment type="block">/* locate postgres binary */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>find_other_exec</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>,
							   <argument><expr><literal type="string">"postgres (Greenplum Database) "</literal> <name>PG_VERSION</name> <literal type="string">"\n"</literal></expr></argument>,
							   <argument><expr><name>exec_path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>        <name><name>full_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>find_my_exec</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>full_path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"The program \"postgres\" is needed by %s but was \n"</literal>
					 <literal type="string">"not found in the same directory as \"%s\".\n"</literal>
					 <literal type="string">"Check your installation.\n"</literal></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"The program \"postgres\" was found by \"%s\"\n"</literal>
					 <literal type="string">"but was not the same version as %s.\n"</literal>
					 <literal type="string">"Check your installation.\n"</literal></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>MAXCMDLEN</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" -D \"%s\" -C gp_dbid"</literal></expr></argument>,
			 <argument><expr><name>exec_path</name></expr></argument>, <argument><expr><name>datadir_target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>output</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<call><name>fgets</name><argument_list>(<argument><expr><name>cmd_output</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_output</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Could not get dbid using %s: %m\n"</literal></expr></argument>,
				 <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pclose</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Remove trailing newline */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>cmd_output</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><call><name>strchr</name><argument_list>(<argument><expr><name>cmd_output</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>parsed_dbid</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>cmd_output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not parse valid dbid from %s\n with cmd_output %s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cmd_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>parsed_dbid</name> <operator>&gt;</operator> <name>INT16_MAX</name> <operator>||</operator> <name>parsed_dbid</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"parsed dbid (%ld) is out of valid range: [1, INT16_MAX]"</literal></expr></argument>, <argument><expr><name>parsed_dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>dbid</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <name>parsed_dbid</name></expr>;</expr_stmt>

	<return>return <expr><name>dbid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>disconnect_atexit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>conn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
