<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/bin/pg_test_fsync/pg_test_fsync.c"><comment type="block">/*
 *	pg_test_fsync.c
 *		tests all supported fsync() methods
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt_long.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/logging.h"</cpp:file></cpp:include>


<comment type="block">/*
 * put the temp files in the local directory
 * unless the user specifies otherwise
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSYNC_FILENAME</name></cpp:macro>	<cpp:value>"./pg_test_fsync.out"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XLOG_BLCKSZ_K</name></cpp:macro>	<cpp:value>(XLOG_BLCKSZ / 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_FORMAT</name></cpp:macro>		<cpp:value>"        %-30s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NA_FORMAT</name></cpp:macro>			<cpp:value>"%21s\n"</cpp:value></cpp:define>
<comment type="block">/* translator: maintain alignment with NA_FORMAT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPS_FORMAT</name></cpp:macro>			<cpp:value>gettext_noop("%13.3f ops/sec  %6.0f usecs/op\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USECS_SEC</name></cpp:macro>			<cpp:value>1000000</cpp:value></cpp:define>

<comment type="block">/* These are macros to avoid timing the function call overhead. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_TIMER</name></cpp:macro> \
<cpp:value>do { \
	alarm_triggered = false; \
	alarm(secs_per_test); \
	gettimeofday(&amp;start_t, NULL); \
} while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* WIN32 doesn't support alarm, so we create a thread and sleep there */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_TIMER</name></cpp:macro> \
<cpp:value>do { \
	alarm_triggered = false; \
	if (CreateThread(NULL, 0, process_alarm, NULL, 0, NULL) == \
		INVALID_HANDLE_VALUE) \
	{ \
		pg_log_error("could not create thread for alarm"); \
		exit(1); \
	} \
	gettimeofday(&amp;start_t, NULL); \
} while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STOP_TIMER</name></cpp:macro>	\
<cpp:value>do { \
	gettimeofday(&amp;stop_t, NULL); \
	print_elapse(start_t, stop_t, ops); \
} while (0)</cpp:value></cpp:define>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>secs_per_test</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>needs_unlink</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>full_buf</name><index>[<expr><name>DEFAULT_XLOG_SEG_SIZE</name></expr>]</index></name></decl>,
		   <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>,
		   <decl><type ref="prev"><modifier>*</modifier></type><name>filename</name> <init>= <expr><name>FSYNC_FILENAME</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl>,
			<decl><type ref="prev"/><name>stop_t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>alarm_triggered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_args</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>prepare_buf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_non_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_sync</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>writes_per_op</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_open_syncs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_open_sync</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>writes_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>test_file_descriptor_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_alarm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type> <name>process_alarm</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>signal_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FSYNC_WRITETHROUGH</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>pg_fsync_writethrough</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_elapse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>stop_t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ops</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>die</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { pg_log_error("%s: %m", _(msg)); exit(1); } while(0)</cpp:value></cpp:define>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_logging_init</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_pglocale_pgservice</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>PG_TEXTDOMAIN</name><argument_list>(<argument><expr><literal type="string">"pg_test_fsync"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>progname</name> <operator>=</operator> <call><name>get_progname</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>handle_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Prevent leaving behind the test file */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>signal_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>signal_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>, <argument><expr><name>process_alarm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGHUP</name></cpp:ifdef>
	<comment type="block">/* Not defined on win32 */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>signal_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>prepare_buf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_open</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test using 1 XLOG_BLCKSZ write */</comment>
	<expr_stmt><expr><call><name>test_sync</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test using 2 XLOG_BLCKSZ writes */</comment>
	<expr_stmt><expr><call><name>test_sync</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_open_syncs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_file_descriptor_sync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_non_sync</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_args</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"filename"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'f'</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"secs-per-test"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'s'</literal></expr>}</block></expr>,
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>option</name></decl>;</decl_stmt>			<comment type="block">/* Command line option */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>optindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* used by getopt_long */</comment>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Usage: %s [-f FILENAME] [-s SECS-PER-TEST]\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"pg_test_fsync (PostgreSQL) "</literal> <name>PG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>option</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"f:s:"</literal></expr></argument>,
								 <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>optindex</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>option</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>
				<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
				<expr_stmt><expr><name>secs_per_test</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <name>optind</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log_error</name><argument_list>(<argument><expr><literal type="string">"too many command-line arguments (first is \"%s\")"</literal></expr></argument>,
					 <argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>ngettext</name><argument_list>(<argument><expr><literal type="string">"%d second per test\n"</literal></expr></argument>,
					<argument><expr><literal type="string">"%d seconds per test\n"</literal></expr></argument>,
					<argument><expr><name>secs_per_test</name></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name>secs_per_test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_O_DIRECT</name> <operator>!=</operator> <literal type="number">0</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"O_DIRECT supported on this platform for open_datasync and open_sync.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Direct I/O is not supported on this platform.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>prepare_buf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ops</name></decl>;</decl_stmt>

	<comment type="block">/* write random data into buffer */</comment>
	<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ops</name> <operator>&lt;</operator> <name>DEFAULT_XLOG_SEG_SIZE</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>full_buf</name><index>[<expr><name>ops</name></expr>]</index></name> <operator>=</operator> <call><name>random</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>TYPEALIGN</name><argument_list>(<argument><expr><name>XLOG_BLCKSZ</name></expr></argument>, <argument><expr><name>full_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_open</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tmpfile</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * test if we can open the target file
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>needs_unlink</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>full_buf</name></expr></argument>, <argument><expr><name>DEFAULT_XLOG_SEG_SIZE</name></expr></argument>)</argument_list></call> <operator>!=</operator>
		<name>DEFAULT_XLOG_SEG_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* fsync now so that dirty buffers don't skew later tests */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"fsync failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_sync</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>writes_per_op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tmpfile</name></decl>,
				<decl><type ref="prev"/><name>ops</name></decl>,
				<decl><type ref="prev"/><name>writes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>fs_warning</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>writes_per_op</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nCompare file sync methods using one %dkB write:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XLOG_BLCKSZ_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nCompare file sync methods using two %dkB writes:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XLOG_BLCKSZ_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(in wal_sync_method preference order, except fdatasync is Linux's default)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Test open_datasync if available
	 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"open_datasync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OPEN_DATASYNC_FLAG</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_DSYNC</name> <operator>|</operator> <name>PG_O_DIRECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>NA_FORMAT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"n/a*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fs_warning</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>writes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>writes</name> <operator>&lt;</operator> <name>writes_per_op</name></expr>;</condition> <incr><expr><name>writes</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>NA_FORMAT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Test fdatasync if available
 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"fdatasync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FDATASYNC</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>writes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>writes</name> <operator>&lt;</operator> <name>writes_per_op</name></expr>;</condition> <incr><expr><name>writes</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>fdatasync</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>NA_FORMAT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Test fsync
 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"fsync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>writes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>writes</name> <operator>&lt;</operator> <name>writes_per_op</name></expr>;</condition> <incr><expr><name>writes</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
		<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"fsync failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * If fsync_writethrough is available, test as well
 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"fsync_writethrough"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FSYNC_WRITETHROUGH</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>writes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>writes</name> <operator>&lt;</operator> <name>writes_per_op</name></expr>;</condition> <incr><expr><name>writes</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
		<if_stmt><if>if <condition>(<expr><call><name>pg_fsync_writethrough</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"fsync failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>NA_FORMAT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Test open_sync if available
 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"open_sync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OPEN_SYNC_FLAG</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>OPEN_SYNC_FLAG</name> <operator>|</operator> <name>PG_O_DIRECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>NA_FORMAT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"n/a*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fs_warning</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>writes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>writes</name> <operator>&lt;</operator> <name>writes_per_op</name></expr>;</condition> <incr><expr><name>writes</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>

					<comment type="block">/*
					 * This can generate write failures if the filesystem has
					 * a large block size, e.g. 4k, and there is no support
					 * for O_DIRECT writes smaller than the file system block
					 * size, e.g. XFS.
					 */</comment>
					<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>NA_FORMAT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><name>fs_warning</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"* This file system and its mount options do not support direct\n"</literal>
				 <literal type="string">"  I/O, e.g. ext4 in journaled mode.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_open_syncs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nCompare open_sync with different write sizes:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(This is designed to compare the cost of writing 16kB in different write\n"</literal>
			 <literal type="string">"open_sync sizes.)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>test_open_sync</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" 1 * 16kB open_sync write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_open_sync</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" 2 *  8kB open_sync writes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_open_sync</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" 4 *  4kB open_sync writes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_open_sync</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" 8 *  2kB open_sync writes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>test_open_sync</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"16 *  1kB open_sync writes"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test open_sync with different size files
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_open_sync</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>writes_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OPEN_SYNC_FLAG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>			<name>tmpfile</name></decl>,
				<decl><type ref="prev"/><name>ops</name></decl>,
				<decl><type ref="prev"/><name>writes</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OPEN_SYNC_FLAG</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>OPEN_SYNC_FLAG</name> <operator>|</operator> <name>PG_O_DIRECT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>NA_FORMAT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"n/a*"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>writes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>writes</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>/</operator> <name>writes_size</name></expr>;</condition> <incr><expr><name>writes</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>writes_size</name> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call> <operator>!=</operator>
					<name>writes_size</name> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"seek failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>NA_FORMAT</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_file_descriptor_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tmpfile</name></decl>,
				<decl><type ref="prev"/><name>ops</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Test whether fsync can sync data written on a different descriptor for
	 * the same file.  This checks the efficiency of multi-process fsyncs
	 * against the same file. Possibly this should be done with writethrough
	 * on platforms which support it.
	 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nTest if fsync on non-write file descriptor is honored:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"(If the times are similar, fsync() can sync data written on a different\n"</literal>
			 <literal type="string">"descriptor.)\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * first write, fsync and close, which is the normal behavior without
	 * multiple descriptors
	 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"write, fsync, close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"fsync failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * open and close the file again to be consistent with the following
		 * test
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now open, write, close, open again and fsync This simulates processes
	 * fsyncing each other's writes.
	 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"write, close, fsync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* reopen file */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"fsync failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_non_sync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tmpfile</name></decl>,
				<decl><type ref="prev"/><name>ops</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Test a simple write without fsync
	 */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nNon-sync'ed %dkB writes:\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>XLOG_BLCKSZ_K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>LABEL_FORMAT</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>alarm_triggered</name> <operator>==</operator> <name>false</name></expr>;</condition> <incr><expr><name>ops</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpfile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"could not open output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>XLOG_BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>XLOG_BLCKSZ</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><literal type="string">"write failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>STOP_TIMER</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>signal_cleanup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Delete the file if it exists. Ignore errors */</comment>
	<if_stmt><if>if <condition>(<expr><name>needs_unlink</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* Finish incomplete line on stdout */</comment>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FSYNC_WRITETHROUGH</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pg_fsync_writethrough</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
	<return>return <expr><call><name>_commit</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_FULLFSYNC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_FULLFSYNC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSYS</name></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * print out the writes per second for tests
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_elapse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>start_t</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>stop_t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ops</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>total_time</name> <init>= <expr><operator>(</operator><name><name>stop_t</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>start_t</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>+</operator>
	<operator>(</operator><name><name>stop_t</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <name><name>start_t</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">0.000001</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>per_second</name> <init>= <expr><name>ops</name> <operator>/</operator> <name>total_time</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>avg_op_time_us</name> <init>= <expr><operator>(</operator><name>total_time</name> <operator>/</operator> <name>ops</name><operator>)</operator> <operator>*</operator> <name>USECS_SEC</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>OPS_FORMAT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>per_second</name></expr></argument>, <argument><expr><name>avg_op_time_us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>process_alarm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>alarm_triggered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type>
<name>process_alarm</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* WIN32 doesn't support alarm, so we create a thread and sleep here */</comment>
	<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><name>secs_per_test</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>alarm_triggered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExitThread</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
