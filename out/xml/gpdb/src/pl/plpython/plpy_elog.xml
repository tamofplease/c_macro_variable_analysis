<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/pl/plpython/plpy_elog.c"><comment type="block">/*
 * reporting Python exceptions as PostgreSQL errors
 *
 * src/pl/plpython/plpy_elog.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_procedure.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>PLy_exc_error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>PLy_exc_fatal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>PLy_exc_spi_error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_traceback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tb</name></decl></parameter>,
						  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xmsg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tbmsg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tb_depth</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_get_spi_error_data</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sqlerrcode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>detail</name></decl></parameter>,
								   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hint</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>position</name></decl></parameter>,
								   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>column_name</name></decl></parameter>,
								   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>datatype_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>constraint_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_get_error_data</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sqlerrcode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>detail</name></decl></parameter>,
							   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hint</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>column_name</name></decl></parameter>,
							   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>datatype_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>constraint_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_source_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_string_attr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>attrname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>set_string_attr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>attrname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Emit a PG error or notice, together with any available info about
 * the current Python error, previously set by PLy_exception_set().
 * This should be used to propagate Python errors into PG.  If fmt is
 * NULL, the Python error becomes the primary error message, otherwise
 * it becomes the detail.  If there is a Python traceback, it is put
 * in the context.
 */</comment>
<function><type><name>void</name></type>
<name>PLy_elog_impl</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>xmsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tbmsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tb_depth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>emsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>exc</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>primary</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sqlerrcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>detail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>hint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>table_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>column_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>datatype_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>constraint_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 *  If the error was a KeyboardException that we raised because
	 *  of query cancellation, then CHECK_FOR_INTERRUPTS() will throw
	 *  a better error message than we do here, with
	 *  "canceling statement due to user request" or similar message.
	 *  Give it a chance.
	 */</comment>
	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PyErr_Fetch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>exc</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PyErr_NormalizeException</name><argument_list>(<argument><expr><operator>&amp;</operator><name>exc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PyErr_GivenExceptionMatches</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>PLy_exc_spi_error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_get_spi_error_data</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqlerrcode</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>detail</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>schema_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column_name</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>datatype_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>constraint_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>PyErr_GivenExceptionMatches</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>PLy_exc_error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_get_error_data</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqlerrcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>detail</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name>schema_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>column_name</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name>datatype_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>constraint_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>PyErr_GivenExceptionMatches</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>PLy_exc_fatal</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>FATAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* this releases our refcount on tb! */</comment>
	<expr_stmt><expr><call><name>PLy_traceback</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>,
				  <argument><expr><operator>&amp;</operator><name>xmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tb_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>emsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>va_list</name></type>		<name>ap</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>needed</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>needed</name> <operator>=</operator> <call><name>appendStringInfoVA</name><argument_list>(<argument><expr><operator>&amp;</operator><name>emsg</name></expr></argument>, <argument><expr><call><name>dgettext</name><argument_list>(<argument><expr><name>TEXTDOMAIN</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>emsg</name></expr></argument>, <argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>primary</name> <operator>=</operator> <name><name>emsg</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

		<comment type="block">/* Since we have a format string, we cannot have a SPI detail. */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>detail</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* If there's an exception message, it goes in the detail. */</comment>
		<if_stmt><if>if <condition>(<expr><name>xmsg</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>detail</name> <operator>=</operator> <name>xmsg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>xmsg</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>primary</name> <operator>=</operator> <name>xmsg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><ternary><condition><expr><name>sqlerrcode</name></expr> ?</condition><then> <expr><name>sqlerrcode</name></expr> </then><else>: <expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></else></ternary></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>primary</name></expr> ?</condition><then> <expr><name>primary</name></expr> </then><else>: <expr><literal type="string">"no exception data"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>detail</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>errdetail_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>tb_depth</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tbmsg</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>tbmsg</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>hint</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>query</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>internalerrquery</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>position</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>internalerrposition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>schema_name</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>err_generic_string</name><argument_list>(<argument><expr><name>PG_DIAG_SCHEMA_NAME</name></expr></argument>,
													<argument><expr><name>schema_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>table_name</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>err_generic_string</name><argument_list>(<argument><expr><name>PG_DIAG_TABLE_NAME</name></expr></argument>,
												   <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>column_name</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>err_generic_string</name><argument_list>(<argument><expr><name>PG_DIAG_COLUMN_NAME</name></expr></argument>,
													<argument><expr><name>column_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>datatype_name</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>err_generic_string</name><argument_list>(<argument><expr><name>PG_DIAG_DATATYPE_NAME</name></expr></argument>,
													  <argument><expr><name>datatype_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>,</operator>
				 <ternary><condition><expr><operator>(</operator><name>constraint_name</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>err_generic_string</name><argument_list>(<argument><expr><name>PG_DIAG_CONSTRAINT_NAME</name></expr></argument>,
														<argument><expr><name>constraint_name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>emsg</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>xmsg</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>tbmsg</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tbmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>emsg</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>xmsg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>tbmsg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tbmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>exc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Extract a Python traceback from the given exception data.
 *
 * The exception error message is returned in xmsg, the traceback in
 * tbmsg (both as palloc'd strings) and the traceback depth in
 * tb_depth.
 *
 * We release refcounts on all the Python objects in the traceback stack,
 * but not on e or v.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_traceback</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>tb</name></decl></parameter>,
			  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>xmsg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tbmsg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tb_depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>e_type_o</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>e_module_o</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>e_type_s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>e_module_s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>vob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>vstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>xstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>tbstr</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * if no exception, return nulls
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>xmsg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>tbmsg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>tb_depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Format the exception and its value and put it in xmsg.
	 */</comment>

	<expr_stmt><expr><name>e_type_o</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"__name__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>e_module_o</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"__module__"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>e_type_o</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>e_type_s</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>e_type_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>e_type_s</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>e_module_s</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>e_module_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>vob</name> <operator>=</operator> <call><name>PyObject_Str</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>vstr</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>vob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>vstr</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e_type_s</name> <operator>||</operator> <operator>!</operator><name>e_module_s</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* deprecated string exceptions */</comment>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xstr</name></expr></argument>, <argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="block">/* shouldn't happen */</comment>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"unrecognized exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<comment type="block">/* mimics behavior of traceback.format_exception_only */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>e_module_s</name></expr></argument>, <argument><expr><literal type="string">"builtins"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
			 <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>e_module_s</name></expr></argument>, <argument><expr><literal type="string">"__main__"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
			 <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>e_module_s</name></expr></argument>, <argument><expr><literal type="string">"exceptions"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>e_type_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xstr</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>e_module_s</name></expr></argument>, <argument><expr><name>e_type_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xstr</name></expr></argument>, <argument><expr><literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>vstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>xmsg</name> <operator>=</operator> <name><name>xstr</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now format the traceback and put it in tbmsg.
	 */</comment>

	<expr_stmt><expr><operator>*</operator><name>tb_depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Mimic Python traceback reporting as close as possible. */</comment>
	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbstr</name></expr></argument>, <argument><expr><literal type="string">"Traceback (most recent call last):"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>tb</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tb</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>tb_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>frame</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>code</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>lineno</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>filename</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<comment type="block">/*
			 * Ancient versions of Python (circa 2.3) contain a bug whereby
			 * the fetches below can fail if the error indicator is set.
			 */</comment>
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><literal type="string">"tb_lineno"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get line number from Python traceback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><literal type="string">"tb_frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>frame</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get frame from Python traceback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="string">"f_code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get code object from Python frame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"co_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get function name from Python code object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>filename</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"co_filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>filename</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not get file name from Python code object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* The first frame always points at &lt;module&gt;, skip it. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tb_depth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>proname</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>plain_filename</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name></type>		<name>plain_lineno</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * The second frame points at the internal function, but to mimic
			 * Python error reporting we want to say &lt;module&gt;.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tb_depth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>fname</name> <operator>=</operator> <literal type="string">"&lt;module&gt;"</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>proname</name> <operator>=</operator> <call><name>PLy_procedure_name</name><argument_list>(<argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>plain_filename</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>plain_lineno</name> <operator>=</operator> <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>proname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(
								 <argument><expr><operator>&amp;</operator><name>tbstr</name></expr></argument>, <argument><expr><literal type="string">"\n  PL/Python anonymous code block, line %ld, in %s"</literal></expr></argument>,
								 <argument><expr><name>plain_lineno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(
								 <argument><expr><operator>&amp;</operator><name>tbstr</name></expr></argument>, <argument><expr><literal type="string">"\n  PL/Python function \"%s\", line %ld, in %s"</literal></expr></argument>,
								 <argument><expr><name>proname</name></expr></argument>, <argument><expr><name>plain_lineno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/*
			 * function code object was compiled with "&lt;string&gt;" as the
			 * filename
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name> <operator>&amp;&amp;</operator> <name>plain_filename</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
				<call><name>strcmp</name><argument_list>(<argument><expr><name>plain_filename</name></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * If we know the current procedure, append the exact line
				 * from the source, again mimicking Python's traceback.py
				 * module behavior.  We could store the already line-split
				 * source to avoid splitting it every time, but producing a
				 * traceback is not the most important scenario to optimize
				 * for.  But we do not go as far as traceback.py in reading
				 * the source of imported modules.
				 */</comment>
				<expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>get_source_line</name><argument_list>(<argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name><operator>-&gt;</operator><name>src</name></name></expr></argument>, <argument><expr><name>plain_lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>line</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tbstr</name></expr></argument>, <argument><expr><literal type="string">"\n    %s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Release the current frame and go to the next one. */</comment>
		<expr_stmt><expr><name>tb_prev</name> <operator>=</operator> <name>tb</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tb</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>tb</name></expr></argument>, <argument><expr><literal type="string">"tb_next"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tb_prev</name> <operator>!=</operator> <name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>tb_prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not traverse Python traceback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name>tb_depth</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Return the traceback. */</comment>
	<expr_stmt><expr><operator>*</operator><name>tbmsg</name> <operator>=</operator> <name><name>tbstr</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>e_type_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>e_module_o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>vob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Extract error code from SPIError's sqlstate attribute.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_get_sqlerrcode</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sqlerrcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>sqlstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sqlstate</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"sqlstate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>sqlstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>
		<call><name>strspn</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>sqlerrcode</name> <operator>=</operator> <call><name>MAKE_SQLSTATE</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
									<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Extract the error data from a SPIError
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_get_spi_error_data</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sqlerrcode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>detail</name></decl></parameter>,
					   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hint</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>position</name></decl></parameter>,
					   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_name</name></decl></parameter>,
					   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>column_name</name></decl></parameter>,
					   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>datatype_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>constraint_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>spidata</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>spidata</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"spidata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>spidata</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>spidata</name></expr></argument>, <argument><expr><literal type="string">"izzzizzzzz"</literal></expr></argument>,
						 <argument><expr><name>sqlerrcode</name></expr></argument>, <argument><expr><name>detail</name></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>position</name></expr></argument>,
						 <argument><expr><name>schema_name</name></expr></argument>, <argument><expr><name>table_name</name></expr></argument>, <argument><expr><name>column_name</name></expr></argument>,
						 <argument><expr><name>datatype_name</name></expr></argument>, <argument><expr><name>constraint_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * If there's no spidata, at least set the sqlerrcode. This can happen
		 * if someone explicitly raises a SPI exception from Python code.
		 */</comment>
		<expr_stmt><expr><call><name>PLy_get_sqlerrcode</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>sqlerrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>spidata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Extract the error data from an Error.
 *
 * Note: position and query attributes are never set for Error so, unlike
 * PLy_get_spi_error_data, this function doesn't return them.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_get_error_data</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sqlerrcode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>detail</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>hint</name></decl></parameter>,
				   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>schema_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>table_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>column_name</name></decl></parameter>,
				   <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>datatype_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>constraint_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PLy_get_sqlerrcode</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>sqlerrcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_string_attr</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"detail"</literal></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_string_attr</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"hint"</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_string_attr</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"schema_name"</literal></expr></argument>, <argument><expr><name>schema_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_string_attr</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"table_name"</literal></expr></argument>, <argument><expr><name>table_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_string_attr</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"column_name"</literal></expr></argument>, <argument><expr><name>column_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_string_attr</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"datatype_name"</literal></expr></argument>, <argument><expr><name>datatype_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_string_attr</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><literal type="string">"constraint_name"</literal></expr></argument>, <argument><expr><name>constraint_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the given source line as a palloc'd string
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_source_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>current</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>current</name> <operator>&lt;</operator> <name>lineno</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>current</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>current</name> <operator>!=</operator> <name>lineno</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

	<if_stmt><if>if <condition>(<expr><name>next</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Sanity check, next &lt; s if the line was all-whitespace, which should
	 * never happen if Python reported a frame created on that line, but check
	 * anyway.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <name>s</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>pnstrdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>next</name> <operator>-</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* call PyErr_SetString with a vprint interface and translation support */</comment>
<function><type><name>void</name></type>
<name>PLy_exception_set</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>dgettext</name><argument_list>(<argument><expr><name>TEXTDOMAIN</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* same, with pluralized message */</comment>
<function><type><name>void</name></type>
<name>PLy_exception_set_plural</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>exc</name></decl></parameter>,
						 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt_singular</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt_plural</name></decl></parameter>,
						 <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			  <argument><expr><call><name>dngettext</name><argument_list>(<argument><expr><name>TEXTDOMAIN</name></expr></argument>, <argument><expr><name>fmt_singular</name></expr></argument>, <argument><expr><name>fmt_plural</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>,
			  <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* set attributes of the given exception to details from ErrorData */</comment>
<function><type><name>void</name></type>
<name>PLy_exception_set_with_details</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>excclass</name></decl></parameter>, <parameter><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(s)"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* create a new exception with the error message as the parameter */</comment>
	<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>excclass</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"sqlstate"</literal></expr></argument>,
						 <argument><expr><call><name>unpack_sql_state</name><argument_list>(<argument><expr><name><name>edata</name><operator>-&gt;</operator><name>sqlerrcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"detail"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>detail</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"hint"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"query"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>internalquery</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"schema_name"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>schema_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"table_name"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"column_name"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>column_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"datatype_name"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>datatype_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>set_string_attr</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"constraint_name"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>constraint_name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>excclass</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>

<label><name>failure</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not convert error to Python exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* get string value of an object attribute */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_string_attr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>attrname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>attrname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>!=</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>PyString_AsString</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* set an object attribute to a string value, returns true when the set was
 * successful
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>set_string_attr</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>attrname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PyString_FromString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <name>Py_None</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>attrname</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
