<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/pl/plpython/plpy_spi.c"><comment type="block">/*
 * interface to SPI functions
 *
 * src/pl/plpython/plpy_spi.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_spi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_planobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_plpymodule.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_procedure.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_resultobject.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_spi_execute_query</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_spi_execute_fetch_result</name><parameter_list>(<parameter><decl><type><name>SPITupleTable</name> <modifier>*</modifier></type><name>tuptable</name></decl></parameter>,
											  <parameter><decl><type><name>uint64</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_spi_exception_set</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>excclass</name></decl></parameter>, <parameter><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* prepare(query="select * from foo")
 * prepare(query="select * from foo where bar = $1", params=["text"])
 * prepare(query="select * from foo where bar = $1", params=["text"], limit=5)
 */</comment>
<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_spi_prepare</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLyPlanObject</name> <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>optr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>ResourceOwner</name></type> <name>oldowner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>nargs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>PLy_enter_python_intepreter</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s|O:prepare"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>list</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
						  <argument><expr><literal type="string">"second argument of plpy.prepare must be a sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>PLy_enter_python_intepreter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>plan</name> <operator>=</operator> <operator>(</operator><name>PLyPlanObject</name> <operator>*</operator><operator>)</operator> <call><name>PLy_plan_new</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>PLy_enter_python_intepreter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
									   <argument><expr><literal type="string">"PL/Python plan context"</literal></expr></argument>,
									   <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nargs</name> <operator>=</operator> <ternary><condition><expr><name>list</name></expr> ?</condition><then> <expr><call><name>PySequence_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>nargs</name></name> <operator>=</operator> <name>nargs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>types</name></name> <operator>=</operator> <ternary><condition><expr><name>nargs</name></expr> ?</condition><then> <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nargs</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <ternary><condition><expr><name>nargs</name></expr> ?</condition><then> <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nargs</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <ternary><condition><expr><name>nargs</name></expr> ?</condition><then> <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyObToDatum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nargs</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldowner</name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PLy_spi_subtransaction_begin</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sptr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>typeId</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32</name></type>		<name>typmod</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>optr</name> <operator>=</operator> <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>sptr</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>sptr</name> <operator>=</operator> <call><name>PLyUnicode_AsString</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"plpy.prepare: type name at ordinal position %d is not a string"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* keep compiler quiet */</comment>
			</block_content>}</block></else></if_stmt>

			<comment type="block" format="doxygen">/********************************************************
			 * Resolve argument type names and then look them up by
			 * oid in the system cache, and remember the required
			 *information for input conversion.
			 ********************************************************/</comment>

			<expr_stmt><expr><call><name>parseTypeString</name><argument_list>(<argument><expr><name>sptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typmod</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * set optr to NULL, so we won't try to unref it again in case of
			 * an error
			 */</comment>
			<expr_stmt><expr><name>optr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>typeId</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PLy_output_setup_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>plan</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>,
								  <argument><expr><name>typeId</name></expr></argument>, <argument><expr><name>typmod</name></expr></argument>,
								  <argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>pg_verifymbstr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <call><name>SPI_prepare</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>nargs</name></name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>plan</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_prepare failed: %s"</literal></expr></argument>,
				 <argument><expr><call><name>SPI_result_code_string</name><argument_list>(<argument><expr><name>SPI_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* transfer plan from procCxt to topCxt */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>SPI_keepplan</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_keepplan failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PLy_spi_subtransaction_commit</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>optr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PLy_spi_subtransaction_abort</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>plan</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLy_enter_python_intepreter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>plan</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* execute(query="select * from foo", limit=5)
 * execute(plan=plan, values=(foo, bar), limit=5)
 */</comment>
<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_spi_execute</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>PLy_enter_python_intepreter</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"s|l"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PLy_spi_execute_query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>PLy_enter_python_intepreter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"O|Ol"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>plan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>is_PLyPlanObject</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PLy_spi_execute_plan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>PLy_enter_python_intepreter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>ret</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PLy_exc_error</name></expr></argument>, <argument><expr><literal type="string">"plpy.execute expected a query or a plan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLy_enter_python_intepreter</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_spi_execute_plan</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>nargs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyPlanObject</name> <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>ResourceOwner</name></type> <name>oldowner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyString_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><literal type="string">"plpy.execute takes a sequence as its second argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>nargs</name> <operator>=</operator> <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>nargs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>plan</name> <operator>=</operator> <operator>(</operator><name>PLyPlanObject</name> <operator>*</operator><operator>)</operator> <name>ob</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>!=</operator> <name><name>plan</name><operator>-&gt;</operator><name>nargs</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>so</name> <init>= <expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>so</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not execute plan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>sv</name> <operator>=</operator> <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PLy_exception_set_plural</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
								 <argument><expr><literal type="string">"Expected sequence of %d argument, got %d: %s"</literal></expr></argument>,
								 <argument><expr><literal type="string">"Expected sequence of %d arguments, got %d: %s"</literal></expr></argument>,
								 <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>nargs</name></name></expr></argument>,
								 <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>nargs</name></name></expr></argument>, <argument><expr><name>nargs</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldowner</name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PLy_spi_subtransaction_begin</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier><specifier>volatile</specifier></type> <name>nulls</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>j</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>nargs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>nulls</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>&amp;</operator><name><name>plan</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>elem</name> <operator>=</operator> <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>PLy_output_convert</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><literal type="char">'n'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>SPI_execute_plan</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>, <argument><expr><name><name>plan</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>,
							  <argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name><operator>-&gt;</operator><name>fn_readonly</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PLy_spi_execute_fetch_result</name><argument_list>(<argument><expr><name>SPI_tuptable</name></expr></argument>, <argument><expr><name>SPI_processed</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>PLy_spi_subtransaction_commit</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * cleanup plan-&gt;values array
		 */</comment>
		<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>plan</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>typbyval</name> <operator>&amp;&amp;</operator>
				<operator>(</operator><name><name>plan</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>PLy_spi_subtransaction_abort</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>plan</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>typbyval</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><name><name>plan</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>plan</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PLy_exc_spi_error</name></expr></argument>,
						  <argument><expr><literal type="string">"SPI_execute_plan failed: %s"</literal></expr></argument>,
						  <argument><expr><call><name>SPI_result_code_string</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_spi_execute_query</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>ResourceOwner</name></type> <name>oldowner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldowner</name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PLy_spi_subtransaction_begin</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pg_verifymbstr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>SPI_execute</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name><operator>-&gt;</operator><name>fn_readonly</name></name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PLy_spi_execute_fetch_result</name><argument_list>(<argument><expr><name>SPI_tuptable</name></expr></argument>, <argument><expr><name>SPI_processed</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PLy_spi_subtransaction_commit</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PLy_spi_subtransaction_abort</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>, <argument><expr><name>oldowner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PLy_exception_set</name><argument_list>(<argument><expr><name>PLy_exc_spi_error</name></expr></argument>,
						  <argument><expr><literal type="string">"SPI_execute failed: %s"</literal></expr></argument>,
						  <argument><expr><call><name>SPI_result_code_string</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_spi_execute_fetch_result</name><parameter_list>(<parameter><decl><type><name>SPITupleTable</name> <modifier>*</modifier></type><name>tuptable</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLyResultObject</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;=</operator> <literal type="number">10000</literal> <operator>&amp;&amp;</operator> <name>rows</name> <operator>&lt;=</operator> <literal type="number">1000000</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>FaultInjector_InjectFaultIfSet</name><argument_list>(<argument><expr><literal type="string">"executor_run_high_processed"</literal></expr></argument>,
											<argument><expr><name>DDLNotSpecified</name></expr></argument>,
											<argument><expr><literal type="string">""</literal></expr></argument> <comment type="block">/* databaseName */</comment>,
											<argument><expr><literal type="string">""</literal></expr></argument> <comment type="block">/* tableName */</comment>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeSkip</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * For testing purposes, pretend that we have already processed
			 * almost 2^32 rows.
			 */</comment>
			<expr_stmt><expr><name>rows</name> <operator>=</operator> <name>UINT_MAX</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* FAULT_INJECTOR */</comment>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>PLyResultObject</name> <operator>*</operator><operator>)</operator> <call><name>PLy_result_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SPI_freetuptable</name><argument_list>(<argument><expr><name>tuptable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tuptable</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <call><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>status</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tuptable</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLyDatumToOb</name></type> <name>ininfo</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>cxt</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>nrows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>nrows</name></name> <operator>=</operator> <call><name>PyLong_FromUnsignedLongLong</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>cxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
									<argument><expr><literal type="string">"PL/Python temp context"</literal></expr></argument>,
									<argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Initialize for converting result tuples to Python */</comment>
		<expr_stmt><expr><call><name>PLy_input_setup_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ininfo</name></expr></argument>, <argument><expr><name>cxt</name></expr></argument>, <argument><expr><name>RECORDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							 <argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext2</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>rows</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>uint64</name></type>		<name>i</name></decl>;</decl_stmt>

				<comment type="block">/*
				 * PyList_New() and PyList_SetItem() use Py_ssize_t for list
				 * size and list indices; so we cannot support a result larger
				 * than PY_SSIZE_T_MAX.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>rows</name> <operator>&gt;</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <name>PY_SSIZE_T_MAX</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"query result has too many rows to fit in a Python list"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>PLy_input_setup_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ininfo</name></expr></argument>, <argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>,
										  <argument><expr><name><name>exec_ctx</name><operator>-&gt;</operator><name>curr_proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>row</name> <init>= <expr><call><name>PLy_input_from_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ininfo</name></expr></argument>,
															   <argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
															   <argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>,
															   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Save tuple descriptor for later use by result set metadata
			 * functions.  Save it in TopMemoryContext so that it survives
			 * outside of an SPI context.  We trust that PLy_result_dealloc()
			 * will clean it up when the time is right.  (Do this as late as
			 * possible, to minimize the number of ways the tupdesc could get
			 * leaked due to errors.)
			 */</comment>
			<expr_stmt><expr><name>oldcontext2</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tupdesc</name></name> <operator>=</operator> <call><name>CreateTupleDescCopy</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SPI_freetuptable</name><argument_list>(<argument><expr><name>tuptable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* in case PyList_New() failed above */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>result</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Utilities for running SPI functions in subtransactions.
 *
 * Usage:
 *
 *	MemoryContext oldcontext = CurrentMemoryContext;
 *	ResourceOwner oldowner = CurrentResourceOwner;
 *
 *	PLy_spi_subtransaction_begin(oldcontext, oldowner);
 *	PG_TRY();
 *	{
 *		&lt;call SPI functions&gt;
 *		PLy_spi_subtransaction_commit(oldcontext, oldowner);
 *	}
 *	PG_CATCH();
 *	{
 *		&lt;do cleanup&gt;
 *		PLy_spi_subtransaction_abort(oldcontext, oldowner);
 *		return NULL;
 *	}
 *	PG_END_TRY();
 *
 * These utilities take care of restoring connection to the SPI manager and
 * setting a Python exception in case of an abort.
 */</comment>
<function><type><name>void</name></type>
<name>PLy_spi_subtransaction_begin</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl></parameter>, <parameter><decl><type><name>ResourceOwner</name></type> <name>oldowner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>BeginInternalSubTransaction</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Want to run inside function's memory context */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PLy_spi_subtransaction_commit</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl></parameter>, <parameter><decl><type><name>ResourceOwner</name></type> <name>oldowner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Commit the inner transaction, return to outer xact context */</comment>
	<expr_stmt><expr><call><name>ReleaseCurrentSubTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name>oldowner</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PLy_spi_subtransaction_abort</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl></parameter>, <parameter><decl><type><name>ResourceOwner</name></type> <name>oldowner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ErrorData</name>  <modifier>*</modifier></type><name>edata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyExceptionEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>exc</name></decl>;</decl_stmt>

	<comment type="block">/* Save error info */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Abort the inner transaction */</comment>
	<expr_stmt><expr><call><name>RollbackAndReleaseCurrentSubTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name>oldowner</name></expr>;</expr_stmt>

	<comment type="block">/* Look up the correct exception */</comment>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>PLy_spi_exceptions</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>edata</name><operator>-&gt;</operator><name>sqlerrcode</name></name><operator>)</operator></expr></argument>,
						<argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This could be a custom error code, if that's the case fallback to
	 * SPIError
	 */</comment>
	<expr_stmt><expr><name>exc</name> <operator>=</operator> <ternary><condition><expr><name>entry</name></expr> ?</condition><then> <expr><name><name>entry</name><operator>-&gt;</operator><name>exc</name></name></expr> </then><else>: <expr><name>PLy_exc_spi_error</name></expr></else></ternary></expr>;</expr_stmt>
	<comment type="block">/* Make Python raise the exception */</comment>
	<expr_stmt><expr><call><name>PLy_spi_exception_set</name><argument_list>(<argument><expr><name>exc</name></expr></argument>, <argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FreeErrorData</name><argument_list>(<argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Raise a SPIError, passing in it more error details, like the
 * internal query and error position.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_spi_exception_set</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>excclass</name></decl></parameter>, <parameter><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>spierror</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>spidata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(s)"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>args</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* create a new SPI exception with the error message as the parameter */</comment>
	<expr_stmt><expr><name>spierror</name> <operator>=</operator> <call><name>PyObject_CallObject</name><argument_list>(<argument><expr><name>excclass</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spierror</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>spidata</name> <operator>=</operator> <call><name>Py_BuildValue</name><argument_list>(<argument><expr><literal type="string">"(izzzizzzzz)"</literal></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>sqlerrcode</name></name></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>detail</name></name></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>,
							<argument><expr><name><name>edata</name><operator>-&gt;</operator><name>internalquery</name></name></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>internalpos</name></name></expr></argument>,
							<argument><expr><name><name>edata</name><operator>-&gt;</operator><name>schema_name</name></name></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>table_name</name></name></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>column_name</name></name></expr></argument>,
							<argument><expr><name><name>edata</name><operator>-&gt;</operator><name>datatype_name</name></name></expr></argument>, <argument><expr><name><name>edata</name><operator>-&gt;</operator><name>constraint_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>spidata</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PyObject_SetAttrString</name><argument_list>(<argument><expr><name>spierror</name></expr></argument>, <argument><expr><literal type="string">"spidata"</literal></expr></argument>, <argument><expr><name>spidata</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>failure</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>excclass</name></expr></argument>, <argument><expr><name>spierror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>spierror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>spidata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>

<label><name>failure</name>:</label>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>spierror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>spidata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not convert SPI error to Python exception"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
