<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/pl/plpython/plpy_procedure.c"><comment type="block">/*
 * Python procedure manipulation for plpython
 *
 * src/pl/plpython/plpy_procedure.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_procedure.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_main.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>PLy_procedure_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>PLyProcedure</name> <modifier>*</modifier></type><name>PLy_procedure_create</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>procTup</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>fn_oid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_trigger</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>PLy_procedure_valid</name><parameter_list>(<parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>procTup</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>PLy_procedure_munge_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type>
<name>init_procedure_caches</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>hash_ctl</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PLyProcedureKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PLyProcedureEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLy_procedure_cache</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"PL/Python procedures"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>,
									  <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * PLy_procedure_name: get the name of the specified procedure.
 *
 * NB: this returns the SQL name, not the internal Python procedure name
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>PLy_procedure_name</name><parameter_list>(<parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>proc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="string">"&lt;unknown procedure&gt;"</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>proc</name><operator>-&gt;</operator><name>proname</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PLy_procedure_get: returns a cached PLyProcedure, or creates, stores and
 * returns a new PLyProcedure.
 *
 * fn_oid is the OID of the function requested
 * fn_rel is InvalidOid or the relation this function triggers on
 * is_trigger denotes whether the function is a trigger function
 *
 * The reason that both fn_rel and is_trigger need to be passed is that when
 * trigger functions get validated we don't know which relation(s) they'll
 * be used with, so no sensible fn_rel can be passed.
 */</comment>
<function><type><name>PLyProcedure</name> <modifier>*</modifier></type>
<name>PLy_procedure_get</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>fn_oid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>fn_rel</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_trigger</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>use_cache</name> <init>= <expr><operator>!</operator><operator>(</operator><name>is_trigger</name> <operator>&amp;&amp;</operator> <name>fn_rel</name> <operator>==</operator> <name>InvalidOid</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>procTup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyProcedureKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyProcedureEntry</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyProcedure</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>proc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>procTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>fn_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for function %u"</literal></expr></argument>, <argument><expr><name>fn_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Look for the function in the cache, unless we don't have the necessary
	 * information (e.g. during validation). In that case we just don't cache
	 * anything.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>fn_oid</name></name> <operator>=</operator> <name>fn_oid</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>key</name><operator>.</operator><name>fn_rel</name></name> <operator>=</operator> <name>fn_rel</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>PLy_procedure_cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>proc</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>proc</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Haven't found it, create a new procedure */</comment>
			<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>PLy_procedure_create</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>, <argument><expr><name>fn_oid</name></expr></argument>, <argument><expr><name>is_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>PLy_procedure_valid</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>procTup</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Found it, but it's invalid, free and reuse the cache entry */</comment>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>proc</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PLy_procedure_delete</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>proc</name> <operator>=</operator> <call><name>PLy_procedure_create</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>, <argument><expr><name>fn_oid</name></expr></argument>, <argument><expr><name>is_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Found it and it's valid, it's fine to use it */</comment>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* Do not leave an uninitialized entry in the cache */</comment>
		<if_stmt><if>if <condition>(<expr><name>use_cache</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>PLy_procedure_cache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>proc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a new PLyProcedure structure
 */</comment>
<function><type><specifier>static</specifier> <name>PLyProcedure</name> <modifier>*</modifier></type>
<name>PLy_procedure_create</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>procTup</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>fn_oid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_trigger</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>procName</name><index>[<expr><name>NAMEDATALEN</name> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_proc</name></type> <name>procStruct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyProcedure</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>proc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>cxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>procStruct</name> <operator>=</operator> <operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>procName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>procName</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				  <argument><expr><literal type="string">"__plpython_procedure_%s_%u"</literal></expr></argument>,
				  <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>procStruct</name><operator>-&gt;</operator><name>proname</name></name></expr></argument>)</argument_list></call></expr></argument>,
				  <argument><expr><name>fn_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>procName</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>rv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"procedure name would overrun buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Replace any not-legal-in-Python-names characters with '_' */</comment>
	<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>procName</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator>
			  <operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator>
			  <operator>(</operator><operator>*</operator><name>ptr</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ptr</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Create long-lived context that all procedure info will live in */</comment>
	<expr_stmt><expr><name>cxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
								<argument><expr><literal type="string">"PL/Python function"</literal></expr></argument>,
								<argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>proc</name> <operator>=</operator> <operator>(</operator><name>PLyProcedure</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyProcedure</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>cxt</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>protrftypes_datum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>prosrcdatum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>procSource</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>proname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>procStruct</name><operator>-&gt;</operator><name>proname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSetIdentifier</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>proname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>pyname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>procName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>fn_xmin</name></name> <operator>=</operator> <call><name>HeapTupleHeaderGetRawXmin</name><argument_list>(<argument><expr><name><name>procTup</name><operator>-&gt;</operator><name>t_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>fn_tid</name></name> <operator>=</operator> <name><name>procTup</name><operator>-&gt;</operator><name>t_self</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>fn_readonly</name></name> <operator>=</operator> <operator>(</operator><name><name>procStruct</name><operator>-&gt;</operator><name>provolatile</name></name> <operator>!=</operator> <name>PROVOLATILE_VOLATILE</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>is_setof</name></name> <operator>=</operator> <name><name>procStruct</name><operator>-&gt;</operator><name>proretset</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>is_procedure</name></name> <operator>=</operator> <operator>(</operator><name><name>procStruct</name><operator>-&gt;</operator><name>prokind</name></name> <operator>==</operator> <name>PROKIND_PROCEDURE</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>argnames</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>nargs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>langid</name></name> <operator>=</operator> <name><name>procStruct</name><operator>-&gt;</operator><name>prolang</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>protrftypes_datum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><name>procTup</name></expr></argument>,
											<argument><expr><name>Anum_pg_proc_protrftypes</name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>trftypes</name></name> <operator>=</operator> <ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><name>NIL</name></expr> </then><else>: <expr><call><name>oid_array_to_list</name><argument_list>(<argument><expr><name>protrftypes_datum</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>statics</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>globals</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>calldepth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>argstack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * get information required for output conversion of the return value,
		 * but only if this isn't a trigger.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_trigger</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>rettype</name> <init>= <expr><name><name>procStruct</name><operator>-&gt;</operator><name>prorettype</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>rvTypeTup</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>rvTypeStruct</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>rvTypeTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>rettype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>rvTypeTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>rettype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>rvTypeStruct</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>rvTypeTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Disallow pseudotype result, except for void or record */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>rvTypeStruct</name><operator>-&gt;</operator><name>typtype</name></name> <operator>==</operator> <name>TYPTYPE_PSEUDO</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>rettype</name> <operator>==</operator> <name>VOIDOID</name> <operator>||</operator>
					<name>rettype</name> <operator>==</operator> <name>RECORDOID</name></expr>)</condition><block type="pseudo"><block_content>
					 <comment type="block">/* okay */</comment> <empty_stmt>;</empty_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>rettype</name> <operator>==</operator> <name>TRIGGEROID</name> <operator>||</operator> <name>rettype</name> <operator>==</operator> <name>EVTTRIGGEROID</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"trigger functions can only be called as triggers"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"PL/Python functions cannot return type %s"</literal></expr></argument>,
									<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>rettype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* set up output function for procedure result */</comment>
			<expr_stmt><expr><call><name>PLy_output_setup_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>,
								  <argument><expr><name>rettype</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>rvTypeTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * In a trigger function, we use proc-&gt;result and proc-&gt;result_in
			 * for converting tuples, but we don't yet have enough info to set
			 * them up.  PLy_exec_trigger will deal with it.
			 */</comment>
			<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>result</name><operator>.</operator><name>typoid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>result_in</name><operator>.</operator><name>typoid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * Now get information required for input conversion of the
		 * procedure's arguments.  Note that we ignore output arguments here.
		 * If the function returns record, those I/O functions will be set up
		 * when the function is first called.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>procStruct</name><operator>-&gt;</operator><name>pronargs</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>,
					   <decl><type ref="prev"><modifier>*</modifier></type><name>modes</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>pos</name></decl>,
						<decl><type ref="prev"/><name>total</name></decl>;</decl_stmt>

			<comment type="block">/* extract argument type info from the pg_proc tuple */</comment>
			<expr_stmt><expr><name>total</name> <operator>=</operator> <call><name>get_func_arg_info</name><argument_list>(<argument><expr><name>procTup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>types</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* count number of in+inout args into proc-&gt;nargs */</comment>
			<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>nargs</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* proc-&gt;nargs was initialized to 0 above */</comment>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>PROARGMODE_OUT</name> <operator>&amp;&amp;</operator>
						<name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>PROARGMODE_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>nargs</name></name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/* Allocate arrays for per-input-argument data */</comment>
			<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>argnames</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>proc</name><operator>-&gt;</operator><name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <operator>(</operator><name>PLyDatumToOb</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyDatumToOb</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>proc</name><operator>-&gt;</operator><name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>argTypeTup</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>argTypeStruct</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>modes</name> <operator>&amp;&amp;</operator>
					<operator>(</operator><name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>PROARGMODE_OUT</name> <operator>||</operator>
					 <name><name>modes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>PROARGMODE_TABLE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>	<comment type="block">/* skip OUT arguments */</comment>

				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>procStruct</name><operator>-&gt;</operator><name>proargtypes</name><operator>.</operator><name>values</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>argTypeTup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>,
											 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>argTypeTup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>argTypeStruct</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>argTypeTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* disallow pseudotype arguments */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>argTypeStruct</name><operator>-&gt;</operator><name>typtype</name></name> <operator>==</operator> <name>TYPTYPE_PSEUDO</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"PL/Python functions cannot accept type %s"</literal></expr></argument>,
									<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="block">/* set up I/O function info */</comment>
				<expr_stmt><expr><call><name>PLy_input_setup_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>args</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>,
									 <argument><expr><name><name>types</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,	<comment type="block">/* typmod not known */</comment>
									 <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* get argument name */</comment>
				<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>argnames</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>names</name></expr> ?</condition><then> <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>argTypeTup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * get the text of the function.
		 */</comment>
		<expr_stmt><expr><name>prosrcdatum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><name>procTup</name></expr></argument>,
									  <argument><expr><name>Anum_pg_proc_prosrc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"null prosrc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>procSource</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>prosrcdatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PLy_procedure_compile</name><argument_list>(<argument><expr><name>proc</name></expr></argument>, <argument><expr><name>procSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>procSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PLy_procedure_delete</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>proc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Insert the procedure into the Python interpreter
 */</comment>
<function><type><name>void</name></type>
<name>PLy_procedure_compile</name><parameter_list>(<parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>crv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>msrc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>globals</name></name> <operator>=</operator> <call><name>PyDict_Copy</name><argument_list>(<argument><expr><name>PLy_interp_globals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * SD is private preserved data between calls. GD is global data shared by
	 * all functions
	 */</comment>
	<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>statics</name></name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>proc</name><operator>-&gt;</operator><name>statics</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>globals</name></name></expr></argument>, <argument><expr><literal type="string">"SD"</literal></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>statics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * insert the function code into the interpreter
	 */</comment>
	<expr_stmt><expr><name>msrc</name> <operator>=</operator> <call><name>PLy_procedure_munge_source</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pyname</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Save the mangled source for later inclusion in tracebacks */</comment>
	<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <call><name>MemoryContextStrdup</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>, <argument><expr><name>msrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>crv</name> <operator>=</operator> <call><name>PyRun_String</name><argument_list>(<argument><expr><name>msrc</name></expr></argument>, <argument><expr><name>Py_file_input</name></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>globals</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>msrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>crv</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>clen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>call</name><index>[<expr><name>NAMEDATALEN</name> <operator>+</operator> <literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>crv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * compile a call to the function
		 */</comment>
		<expr_stmt><expr><name>clen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s()"</literal></expr></argument>, <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>pyname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>clen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>clen</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"string would overflow buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <call><name>Py_CompileString</name><argument_list>(<argument><expr><name>call</name></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>, <argument><expr><name>Py_eval_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>code</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>proc</name><operator>-&gt;</operator><name>proname</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not compile PL/Python function \"%s\""</literal></expr></argument>,
				 <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>proname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not compile anonymous PL/Python code block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PLy_procedure_delete</name><parameter_list>(<parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>statics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>globals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Decide whether a cached PLyProcedure struct is still valid
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>PLy_procedure_valid</name><parameter_list>(<parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>procTup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>proc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* If the pg_proc tuple has changed, it's not valid */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>proc</name><operator>-&gt;</operator><name>fn_xmin</name></name> <operator>==</operator> <call><name>HeapTupleHeaderGetRawXmin</name><argument_list>(<argument><expr><name><name>procTup</name><operator>-&gt;</operator><name>t_data</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		  <call><name>ItemPointerEquals</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proc</name><operator>-&gt;</operator><name>fn_tid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>procTup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>PLy_procedure_munge_source</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>mrc</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>mp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>mlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>plen</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * room for function source and the def statement
	 */</comment>
	<expr_stmt><expr><name>mlen</name> <operator>=</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>mrc</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>mrc</name></expr></argument>, <argument><expr><name>mlen</name></expr></argument>, <argument><expr><literal type="string">"def %s():\n\t"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>plen</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>plen</name> <operator>&lt;</operator> <name>mlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sp</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mp</name> <operator>=</operator> <name>mrc</name> <operator>+</operator> <name>plen</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>sp</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>sp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>sp</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>mp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>mp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>sp</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>mp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>mp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>mp</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>mp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>mp</name> <operator>&gt;</operator> <operator>(</operator><name>mrc</name> <operator>+</operator> <name>mlen</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"buffer overrun in PLy_munge_source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>mrc</name></expr>;</return>
</block_content>}</block></function>
</unit>
