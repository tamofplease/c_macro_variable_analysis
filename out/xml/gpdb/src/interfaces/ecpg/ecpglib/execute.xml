<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/ecpg/ecpglib/execute.c"><comment type="block">/* src/interfaces/ecpg/ecpglib/execute.c */</comment>

<comment type="block">/*
 * The aim is to get a simpler interface to the database routines.
 * All the tedious messing around with tuples is supposed to be hidden
 * by this function.
 */</comment>
<comment type="block">/* Author: Linus Tolke
   (actually most if the code is "borrowed" from the distribution and just
   slightly modified)
 */</comment>

<comment type="block">/* Taken over as part of PostgreSQL by Michael Meskes &lt;meskes@postgresql.org&gt;
   on Feb. 5th, 1998 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgerrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib_extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlca.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlda-native.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlda-compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sql3types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_interval.h"</cpp:file></cpp:include>

<comment type="block">/*
 *	This function returns a newly malloced string that has ' and \
 *	escaped.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>quote_postgres</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quote</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>escaped_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>buffer_len</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * if quote is false we just need to store things in a descriptor they
	 * will be quoted once they are inserted in a statement
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>arg</name></expr>;</return></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buffer_len</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>buffer_len</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>escaped_len</name> <operator>=</operator> <call><name>PQescapeString</name><argument_list>(<argument><expr><name>res</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <name>escaped_len</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>res</name><index>[<expr><name>escaped_len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><index>[<expr><name>escaped_len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * We don't know if the target database is using
			 * standard_conforming_strings, so we always use E'' strings.
			 */</comment>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>res</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>escaped_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ESCAPE_STRING_SYNTAX</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>res</name><index>[<expr><name>escaped_len</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><index>[<expr><name>escaped_len</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>res</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_variable</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var_next</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>var</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>var_next</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>var</name> <operator>=</operator> <name>var_next</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_statement</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>free_variable</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>inlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_variable</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>outlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_USELOCALE</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>clocale</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>freelocale</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>clocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>next_insert</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>questionmarks</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>std_strings</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>string</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>p</name> <init>= <expr><name>pos</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>text</name><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>string</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>std_strings</name> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* escape character */</comment>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>text</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>string</name> <operator>=</operator> <ternary><condition><expr><name>string</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>string</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>text</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* this can be either a dollar quote or a variable */</comment>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					 <comment type="block">/* empty loop body */</comment> <empty_stmt>;</empty_stmt></block_content></block></for>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator><name><name>text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>
					<comment type="block">/* not dollar delimited quote */</comment>
					<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>questionmarks</name> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* also allow old style placeholders */</comment>
				<return>return <expr><name>p</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ecpg_type_infocache_push</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ECPGtype_information_cache</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oid</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ARRAY_TYPE</name></name></type> <name>isarray</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ECPGtype_information_cache</name></name> <modifier>*</modifier></type><name>new_entry</name>
	<init>= <expr><operator>(</operator>struct <name>ECPGtype_information_cache</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ECPGtype_information_cache</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>new_entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>isarray</name></name> <operator>=</operator> <name>isarray</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_entry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>cache</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>cache</name> <operator>=</operator> <name>new_entry</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>ARRAY_TYPE</name></name></type>
<name>ecpg_is_type_an_array</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>array_query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>enum</name> <name>ARRAY_TYPE</name></name></type> <name>isarray</name> <init>= <expr><name>ECPG_ARRAY_NOT_SET</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ECPGtype_information_cache</name></name> <modifier>*</modifier></type><name>cache_entry</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Text like types are not an array for ecpg, but postgres counts them
		 * as an array. This define reminds you to not 'correct' these values.
		 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>not_an_array_in_ecpg</name></cpp:macro> <cpp:value>ECPG_ARRAY_NONE</cpp:value></cpp:define>

		<comment type="block">/* populate cache with well known types to speed things up */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>BYTEAOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>CHAROID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NAMEOID</name></expr></argument>, <argument><expr><name>not_an_array_in_ecpg</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>INT2OID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>INT2VECTOROID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_VECTOR</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>REGPROCOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>OIDOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>TIDOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>XIDOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>CIDOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>OIDVECTOROID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_VECTOR</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POINTOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_VECTOR</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>LSEGOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_VECTOR</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>PATHOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>BOXOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_VECTOR</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>POLYGONOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>LINEOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_VECTOR</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>FLOAT4OID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>FLOAT8OID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>UNKNOWNOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>CIRCLEOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>CASHOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>INETOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>CIDROID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>BPCHAROID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>VARCHAROID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>DATEOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>TIMEOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>TIMESTAMPOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>TIMESTAMPTZOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>INTERVALOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>TIMETZOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>BITOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>VARBITOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>NUMERICOID</name></expr></argument>, <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>cache_entry</name> <operator>=</operator> <operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr>;</init> <condition><expr><name>cache_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cache_entry</name> <operator>=</operator> <name><name>cache_entry</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>cache_entry</name><operator>-&gt;</operator><name>oid</name></name> <operator>==</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>cache_entry</name><operator>-&gt;</operator><name>isarray</name></name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>array_query</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"select typlen from pg_type where oid= and typelem&lt;&gt;0"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">11</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>array_query</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>array_query</name></expr></argument>, <argument><expr><literal type="string">"select typlen from pg_type where oid=%d and typelem&lt;&gt;0"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>array_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>array_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>isarray</name> <operator>=</operator> <name>ECPG_ARRAY_NONE</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>isarray</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>atol</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ECPG_ARRAY_ARRAY</name></expr> </then><else>: <expr><name>ECPG_ARRAY_VECTOR</name></expr></else></ternary></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ecpg_dynamic_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQL3_CHARACTER</name> <operator>||</operator>
				<call><name>ecpg_dynamic_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQL3_CHARACTER_VARYING</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * arrays of character strings are not yet implemented
				 */</comment>
				<expr_stmt><expr><name>isarray</name> <operator>=</operator> <name>ECPG_ARRAY_NONE</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>ECPG_ARRAY_ERROR</name></expr>;</return></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ecpg_type_infocache_push</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>cache_head</name></name><operator>)</operator></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>isarray</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_is_type_an_array on line %d: type (%d); C (%d); array (%s)\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>ECPG_IS_ARRAY</name><argument_list>(<argument><expr><name>isarray</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>isarray</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type>
<name>ecpg_store_result</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>results</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>act_field</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>enum</name> <name>ARRAY_TYPE</name></name></type> <name>isarray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>act_tuple</name></decl>,
				<decl><type ref="prev"/><name>ntuples</name> <init>= <expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>status</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>isarray</name> <operator>=</operator> <call><name>ecpg_is_type_an_array</name><argument_list>(<argument><expr><call><name>PQftype</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>ECPG_ARRAY_ERROR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>isarray</name> <operator>==</operator> <name>ECPG_ARRAY_NONE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * if we don't have enough space, we cannot read all tuples
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ntuples</name> <operator>&gt;</operator> <name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>ind_arrsize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ntuples</name> <operator>&gt;</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_arrsize</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_store_result on line %d: incorrect number of matches; %d don't fit into array of %ld\n"</literal></expr></argument>,
					 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ECPG_INFORMIX_SUBSELECT_NOT_ONE</name></expr> </then><else>: <expr><name>ECPG_TOO_MANY_MATCHES</name></expr></else></ternary></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_CARDINALITY_VIOLATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * since we read an array, the variable has to be an array too
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_NO_ARRAY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * allocate memory for NULL pointers
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PQfformat</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>ECPGt_char</name></expr>:</case>
				<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
				<case>case <expr><name>ECPGt_string</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* special mode for handling char**foo=0 */</comment>
						<for>for <control>(<init><expr><name>act_tuple</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>act_tuple</name> <operator>&lt;</operator> <name>ntuples</name></expr>;</condition> <incr><expr><name>act_tuple</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
							<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
						<expr_stmt><expr><name>len</name> <operator>*=</operator> <name><name>var</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt> <comment type="block">/* should be 1, but YMNK */</comment>
						<expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>ntuples</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<comment type="block">/* check strlen for each tuple */</comment>
						<for>for <control>(<init><expr><name>act_tuple</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>act_tuple</name> <operator>&lt;</operator> <name>ntuples</name></expr>;</condition> <incr><expr><name>act_tuple</name><operator>++</operator></expr></incr>)</control>
						<block>{<block_content>
							<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

							<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></for>
						<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>offset</name></name> <operator>*=</operator> <name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>offset</name></name> <operator>*</operator> <name>ntuples</name></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<break>break;</break>
				<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
					<expr_stmt><expr><name>len</name> <operator>=</operator> <name>ntuples</name> <operator>*</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>offset</name></name> <operator>*</operator> <name>ntuples</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<for>for <control>(<init><expr><name>act_tuple</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>act_tuple</name> <operator>&lt;</operator> <name>ntuples</name></expr>;</condition> <incr><expr><name>act_tuple</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>PQgetlength</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_store_result on line %d: allocating memory for %d tuples\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_auto_alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>pointer</name></name><operator>)</operator> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* allocate indicator variable if needed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>ind_arrsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_varcharsize</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_pointer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><name><name>var</name><operator>-&gt;</operator><name>ind_offset</name></name> <operator>*</operator> <name>ntuples</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_auto_alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_pointer</name></name><operator>)</operator> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* fill the variable with the tuple(s) */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_char</name> <operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_unsigned_char</name> <operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_string</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* special mode for handling char**foo=0 */</comment>

		<comment type="block">/* filling the array of (char*)s */</comment>
		<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>current_string</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* storing the data (after the last array element) */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>current_data_location</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>current_string</name><index>[<expr><name>ntuples</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>act_tuple</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>act_tuple</name> <operator>&lt;</operator> <name>ntuples</name> <operator>&amp;&amp;</operator> <name>status</name></expr>;</condition> <incr><expr><name>act_tuple</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_get_data</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>,
							   <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>ind_type</name></name></expr></argument>, <argument><expr><name>current_data_location</name></expr></argument>,
							   <argument><expr><name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>ind_offset</name></name></expr></argument>, <argument><expr><name>isarray</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>force_indicator</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>current_string</name> <operator>=</operator> <name>current_data_location</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>current_data_location</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>current_string</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* terminate the list */</comment>
		<expr_stmt><expr><operator>*</operator><name>current_string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><expr><name>act_tuple</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>act_tuple</name> <operator>&lt;</operator> <name>ntuples</name> <operator>&amp;&amp;</operator> <name>status</name></expr>;</condition> <incr><expr><name>act_tuple</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_get_data</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>act_tuple</name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>,
							   <argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>ind_type</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>,
							   <argument><expr><name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>ind_offset</name></name></expr></argument>, <argument><expr><name>isarray</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>force_indicator</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sprintf_double_value</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"-Infinity"</literal></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%.15g%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sprintf_float_value</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>isinf</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"-Infinity"</literal></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><literal type="string">"Infinity"</literal></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="string">"%.15g%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>convert_bytea_to_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>from_data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>to_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>to_len</name> <init>= <expr><call><name>ecpg_hex_enc_len</name><argument_list>(<argument><expr><name>from_len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* backslash + 'x' +
																 * quote + quote */</comment>

	<expr_stmt><expr><name>to_data</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>to_len</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>to_data</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>to_data</name></expr></argument>, <argument><expr><literal type="string">"'\\x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_hex_encode</name><argument_list>(<argument><expr><name>from_data</name></expr></argument>, <argument><expr><name>from_len</name></expr></argument>, <argument><expr><name>to_data</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>to_data</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>ecpg_hex_enc_len</name><argument_list>(<argument><expr><name>from_len</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>to_data</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ecpg_store_input</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>force_indicator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl></parameter>,
				 <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tobeinserted_p</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>mallocedval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>newcopy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * arrays are not possible unless the column is an array, too FIXME: we do
	 * not know if the column is an array here array input to singleton column
	 * will result in a runtime error
	 */</comment>

	<comment type="block">/*
	 * Some special treatment is needed for records since we want their
	 * contents to arrive in a comma-separated list on insert (I think).
	 */</comment>

	<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

	<comment type="block">/* check for null value and set input buffer accordingly */</comment>
	<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>ind_type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name> <operator>&lt;</operator> <literal type="number">0L</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name> <operator>&lt;</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
		<case>case <expr><name>ECPGt_NO_INDICATOR</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>force_indicator</name> <operator>==</operator> <name>false</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>ECPGis_noind_null</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tobeinserted_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>asize</name> <init>= <expr><ternary><condition><expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name></expr> ?</condition><then> <expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
		<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>element</name></decl>;</decl_stmt>

			<case>case <expr><name>ECPGt_short</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%hd,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%hd"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_int</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%d,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%hu,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%hu"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%u,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_long</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%ld,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%lu,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LONG_LONG_INT</name></cpp:ifdef>
			<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%lld,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">30</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%llu,"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%llu"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LONG_LONG_INT */</comment>
			<case>case <expr><name>ECPGt_float</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">25</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf_float_value</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf_float_value</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_double</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>asize</name> <operator>*</operator> <literal type="number">25</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>asize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf_double_value</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf_double_value</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_bool</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%c,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><index>[<expr><name>element</name></expr>]</index><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr> </then><else>: <expr><literal type="char">'f'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr> </then><else>: <expr><literal type="char">'f'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>offset</name></name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'t'</literal></expr> </then><else>: <expr><literal type="char">'f'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_CONVERT_BOOL</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_DATATYPE_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>ECPGt_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_string</name></expr>:</case>
				<block>{<block_content>
					<comment type="block">/* set slen to string length if type is char * */</comment>
					<decl_stmt><decl><type><name>int</name></type>			<name>slen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newcopy</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>newcopy</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

					<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>quote_postgres</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mallocedval</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><name>ECPGt_const</name></expr>:</case>
			<case>case <expr><name>ECPGt_char_variable</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>mallocedval</name><index>[<expr><name>slen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>ECPGt_bytea</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name><name>struct</name> <name>ECPGgeneric_varchar</name></name> <modifier>*</modifier></type><name>variable</name> <init>=
					<expr><operator>(</operator>struct <name>ECPGgeneric_varchar</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mallocedval</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><name><name>variable</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name><name>struct</name> <name>ECPGgeneric_varchar</name></name> <modifier>*</modifier></type><name>variable</name> <init>=
					<expr><operator>(</operator>struct <name>ECPGgeneric_varchar</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newcopy</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>, <argument><expr><name><name>variable</name><operator>-&gt;</operator><name>arr</name></name></expr></argument>, <argument><expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>newcopy</name><index>[<expr><name><name>variable</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

					<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>quote_postgres</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mallocedval</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
			<case>case <expr><name>ECPGt_numeric</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>slen</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>nval</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mallocedval</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>nval</name> <operator>=</operator> <call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nval</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>

						<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_numeric</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PGTYPESnumeric_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>element</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_decimal</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>decimal</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>element</name></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

						<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><name>nval</name></expr></argument>, <argument><expr><name><name>nval</name><operator>-&gt;</operator><name>dscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newcopy</name> <operator>=</operator> <call><name>ecpg_realloc</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <name>newcopy</name></expr>;</expr_stmt>

						<comment type="block">/* also copy trailing '\0' */</comment>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>ECPGt_interval</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>slen</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mallocedval</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>quote_postgres</name><argument_list>(<argument><expr><call><name>PGTYPESinterval_to_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>interval</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>element</name></expr>]</index><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newcopy</name> <operator>=</operator> <call><name>ecpg_realloc</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <name>newcopy</name></expr>;</expr_stmt>

						<comment type="block">/* also copy trailing '\0' */</comment>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>ECPGt_date</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>slen</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mallocedval</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>quote_postgres</name><argument_list>(<argument><expr><call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>date</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newcopy</name> <operator>=</operator> <call><name>ecpg_realloc</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <name>newcopy</name></expr>;</expr_stmt>

						<comment type="block">/* also copy trailing '\0' */</comment>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>slen</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mallocedval</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

					<for>for <control>(<init><expr><name>element</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>element</name> <operator>&lt;</operator> <name>asize</name></expr>;</condition> <incr><expr><name>element</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>quote_postgres</name><argument_list>(<argument><expr><call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>timestamp</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>element</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newcopy</name> <operator>=</operator> <call><name>ecpg_realloc</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name>mallocedval</name> <operator>=</operator> <name>newcopy</name></expr>;</expr_stmt>

						<comment type="block">/* also copy trailing '\0' */</comment>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>slen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>mallocedval</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>mallocedval</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><operator>*</operator><name>tobeinserted_p</name> <operator>=</operator> <name>mallocedval</name></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>

			<case>case <expr><name>ECPGt_descriptor</name></expr>:</case>
			<case>case <expr><name>ECPGt_sqlda</name></expr>:</case>
				<break>break;</break>

			<default>default:</default>
				<comment type="block">/* Not implemented yet */</comment>
				<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_UNSUPPORTED</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><call><name>ecpg_type_name</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_param_value</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_binary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>value_s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>malloced</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>value_s</name> <operator>=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><name>is_binary</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>value_s</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>value_s</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><call><name>ecpg_hex_enc_len</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>value_s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_hex_encode</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>value_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>value_s</name><index>[<expr><call><name>ecpg_hex_enc_len</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>malloced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>value_s</name> <operator>=</operator> <literal type="string">"no memory for logging of parameter"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_free_params on line %d: parameter %d = %s\n"</literal></expr></argument>,
			 <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>value_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>malloced</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>value_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ecpg_free_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>print</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>print</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>print_param_value</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramlengths</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,
							  <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramformats</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramlengths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramformats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramlengths</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramformats</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>insert_tobeinserted</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ph_len</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tobeinserted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>newcopy</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>newcopy</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call>
										<operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call>
										<operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>newcopy</name> <operator>+</operator> <name>position</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The strange thing in the second argument is the rest of the string from
	 * the old string
	 */</comment>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>newcopy</name></expr></argument>,
		   <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name>
		   <operator>+</operator> <name>position</name>
		   <operator>+</operator> <name>ph_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name>newcopy</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>store_input_from_desc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>descriptor_item</name></name> <modifier>*</modifier></type><name>desc_item</name></decl></parameter>,
					  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tobeinserted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name></type> <name>var</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * In case of binary data, only allocate memory and memcpy because binary
	 * data have been already stored into desc_item-&gt;data with
	 * ecpg_store_input() at ECPGset_desc().
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>desc_item</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>tobeinserted</name> <operator>=</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name><name>desc_item</name><operator>-&gt;</operator><name>data_len</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>tobeinserted</name></expr></argument>, <argument><expr><name><name>desc_item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>desc_item</name><operator>-&gt;</operator><name>data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>var</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>ECPGt_char</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>.</operator><name>varcharsize</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>desc_item</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>desc_item</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>desc_item</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>.</operator><name>arrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>var</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>desc_item</name><operator>-&gt;</operator><name>indicator</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>var</name><operator>.</operator><name>ind_type</name></name> <operator>=</operator> <name>ECPGt_NO_INDICATOR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <name><name>var</name><operator>.</operator><name>ind_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>.</operator><name>ind_varcharsize</name></name> <operator>=</operator> <name><name>var</name><operator>.</operator><name>ind_arrsize</name></name> <operator>=</operator> <name><name>var</name><operator>.</operator><name>ind_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>var</name><operator>.</operator><name>ind_type</name></name> <operator>=</operator> <name>ECPGt_int</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>desc_item</name><operator>-&gt;</operator><name>indicator</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>.</operator><name>ind_pointer</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>var</name><operator>.</operator><name>ind_value</name></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>.</operator><name>ind_varcharsize</name></name> <operator>=</operator> <name><name>var</name><operator>.</operator><name>ind_arrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>var</name><operator>.</operator><name>ind_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_store_input</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>force_indicator</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><name>tobeinserted</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ecpg_build_params
 *		Build statement parameters
 *
 * The input values are taken from user variables, and the results are stored
 * in arrays which can be used by PQexecParams().
 */</comment>
<function><type><name>bool</name></type>
<name>ecpg_build_params</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>desc_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>std_strings</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Get standard_conforming_strings setting. */</comment>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PQparameterStatus</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><literal type="string">"standard_conforming_strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>std_strings</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If the type is one of the fill in types then we take the argument and
	 * enter it to our parameter array at the first position. Then if there
	 * are any more fill in types we add more parameters.
	 */</comment>
	<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>inlist</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>var</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tobeinserted</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>counter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>binary_format</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>binary_length</name></decl>;</decl_stmt>


		<expr_stmt><expr><name>tobeinserted</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>binary_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>binary_format</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * A descriptor is a special case since it contains many variables but
		 * is listed only once.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_descriptor</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We create an additional variable list here, so the same logic
			 * applies.
			 */</comment>
			<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>struct</name> <name>descriptor_item</name></name> <modifier>*</modifier></type><name>desc_item</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>ecpg_find_desc</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>desc_counter</name><operator>++</operator></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>desc_item</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>items</name></name></expr>;</init> <condition><expr><name>desc_item</name></expr>;</condition> <incr><expr><name>desc_item</name> <operator>=</operator> <name><name>desc_item</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>desc_item</name><operator>-&gt;</operator><name>num</name></name> <operator>!=</operator> <name>desc_counter</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>store_input_from_desc</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>desc_item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>desc_item</name><operator>-&gt;</operator><name>is_binary</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>binary_length</name> <operator>=</operator> <name><name>desc_item</name><operator>-&gt;</operator><name>data_len</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>binary_format</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></for>
			<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <name>desc_counter</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>desc_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_sqlda</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type><name>sqlda</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>sqlda_compat</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name></type> <name>desc_inlist</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>sqlda</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>desc_counter</name><operator>++</operator></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>desc_counter</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name><operator>)</operator></expr>;</expr_stmt>
						<switch>switch <condition>(<expr><name><name>desc_inlist</name><operator>.</operator><name>type</name></name></expr>)</condition>
						<block>{<block_content>
							<case>case <expr><name>ECPGt_char</name></expr>:</case>
							<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
								<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>varcharsize</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<break>break;</break>
							<default>default:</default>
								<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>varcharsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<break>break;</break>
						</block_content>}</block></switch>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>arrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_type</name></name> <operator>=</operator> <name>ECPGt_short</name></expr>;</expr_stmt>
							<comment type="block">/* ECPG expects indicator value &lt; 0 */</comment>
							<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_pointer</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name><operator>)</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_varcharsize</name></name> <operator>=</operator> <name><name>desc_inlist</name><operator>.</operator><name>ind_arrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_type</name></name> <operator>=</operator> <name>ECPGt_NO_INDICATOR</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <name><name>desc_inlist</name><operator>.</operator><name>ind_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_varcharsize</name></name> <operator>=</operator> <name><name>desc_inlist</name><operator>.</operator><name>ind_arrsize</name></name> <operator>=</operator> <name><name>desc_inlist</name><operator>.</operator><name>ind_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_store_input</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>force_indicator</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc_inlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tobeinserted</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				<if_stmt><if>if <condition>(<expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name> <operator>==</operator> <name>desc_counter</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>desc_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type><name>sqlda</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>sqlda_struct</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name></type> <name>desc_inlist</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>sqlda</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>desc_counter</name><operator>++</operator></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqln</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>desc_counter</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>pointer</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name><operator>)</operator></expr>;</expr_stmt>
						<switch>switch <condition>(<expr><name><name>desc_inlist</name><operator>.</operator><name>type</name></name></expr>)</condition>
						<block>{<block_content>
							<case>case <expr><name>ECPGt_char</name></expr>:</case>
							<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
								<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>varcharsize</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<break>break;</break>
							<default>default:</default>
								<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>varcharsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
								<break>break;</break>
						</block_content>}</block></switch>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>arrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_type</name></name> <operator>=</operator> <name>ECPGt_short</name></expr>;</expr_stmt>
							<comment type="block">/* ECPG expects indicator value &lt; 0 */</comment>
							<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_pointer</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name><operator>)</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_varcharsize</name></name> <operator>=</operator> <name><name>desc_inlist</name><operator>.</operator><name>ind_arrsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_type</name></name> <operator>=</operator> <name>ECPGt_NO_INDICATOR</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_value</name></name> <operator>=</operator> <name><name>desc_inlist</name><operator>.</operator><name>ind_pointer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>desc_inlist</name><operator>.</operator><name>ind_varcharsize</name></name> <operator>=</operator> <name><name>desc_inlist</name><operator>.</operator><name>ind_arrsize</name></name> <operator>=</operator> <name><name>desc_inlist</name><operator>.</operator><name>ind_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_store_input</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>force_indicator</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc_inlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tobeinserted</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				<if_stmt><if>if <condition>(<expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqln</name></name> <operator>==</operator> <name>desc_counter</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>desc_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>

		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_store_input</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>force_indicator</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tobeinserted</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_bytea</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>binary_length</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>ECPGgeneric_varchar</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>len</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>binary_format</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * now tobeinserted points to an area that contains the next
		 * parameter; now find the position in the string where it belongs
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>position</name> <operator>=</operator> <call><name>next_insert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>questionmarks</name></name></expr></argument>, <argument><expr><name>std_strings</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We have an argument but we don't have the matched up
			 * placeholder in the string
			 */</comment>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_TOO_MANY_ARGUMENTS</name></expr></argument>,
					   <argument><expr><name>ECPG_SQLSTATE_USING_CLAUSE_DOES_NOT_MATCH_PARAMETERS</name></expr></argument>,
					   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * if var-&gt;type=ECPGt_char_variable we have a dynamic cursor we have
		 * to simulate a dynamic cursor because there is no backend
		 * functionality for it
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_char_variable</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>ph_len</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>command</name><index>[<expr><name>position</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"$1"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>insert_tobeinserted</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>ph_len</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>tobeinserted</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if>

		<comment type="block">/*
		 * if the placeholder is '$0' we have to replace it on the client side
		 * this is for places we want to support variables at that are not
		 * supported in the backend
		 */</comment>
		<if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name><index>[<expr><name>position</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>==</operator> <name>ECPGst_prepare</name> <operator>||</operator>
				<name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>==</operator> <name>ECPGst_exec_with_exprlist</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Need to double-quote the inserted statement name. */</comment>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>ecpg_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
											 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>tobeinserted</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>insert_tobeinserted</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>tobeinserted</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>==</operator> <name>ECPGst_exec_with_exprlist</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>binary_format</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>convert_bytea_to_string</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>,
														<argument><expr><name>binary_length</name></expr></argument>,
														<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>tobeinserted</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>insert_tobeinserted</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>tobeinserted</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>ecpg_realloc</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name><index>[<expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name></expr>]</index></name> <operator>=</operator> <name>tobeinserted</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>paramlengths</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_realloc</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramlengths</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramlengths</name><index>[<expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name></expr>]</index></name> <operator>=</operator> <name>binary_length</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>paramformats</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_realloc</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramformats</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>paramformats</name><index>[<expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>binary_format</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/* let's see if this was an old style placeholder */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name><index>[<expr><name>position</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* yes, replace with new style */</comment>
				<decl_stmt><decl><type><name>int</name></type>			<name>buffersize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>*</operator> <literal type="number">10</literal> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* a rough guess of the
																			 * size we need */</comment>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tobeinserted</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>buffersize</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tobeinserted</name></expr></argument>, <argument><expr><name>buffersize</name></expr></argument>, <argument><expr><literal type="string">"$%d"</literal></expr></argument>, <argument><expr><name>counter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>insert_tobeinserted</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tobeinserted</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>tobeinserted</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>desc_counter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Check if there are unmatched things left. PREPARE AS has no parameter.
	 * Check other statement.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>!=</operator> <name>ECPGst_prepare</name> <operator>&amp;&amp;</operator>
		<call><name>next_insert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>questionmarks</name></name></expr></argument>, <argument><expr><name>std_strings</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_TOO_FEW_ARGUMENTS</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_USING_CLAUSE_DOES_NOT_MATCH_PARAMETERS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ecpg_autostart_transaction
 *		If we are in non-autocommit mode, automatically start a transaction.
 */</comment>
<function><type><name>bool</name></type>
<name>ecpg_autostart_transaction</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PQTRANS_IDLE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>autocommit</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><literal type="string">"begin transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ecpg_execute
 *		Execute the SQL statement.
 */</comment>
<function><type><name>bool</name></type>
<name>ecpg_execute</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_execute on line %d: query: %s; with %d parameter(s) on connection %s\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>==</operator> <name>ECPGst_execute</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <call><name>PQexecPrepared</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>,
									   <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
									   <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name></expr></argument>,
									   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name></name></expr></argument>,
									   <argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>paramlengths</name></name></expr></argument>,
									   <argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>paramformats</name></name></expr></argument>,
									   <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_execute on line %d: using PQexecPrepared for \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_execute on line %d: using PQexec\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <call><name>PQexecParams</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>,
										 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>nparams</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
										 <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>paramvalues</name></name></expr></argument>,
										 <argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>paramlengths</name></name></expr></argument>,
										 <argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name> <operator>*</operator><operator>)</operator> <name><name>stmt</name><operator>-&gt;</operator><name>paramformats</name></name></expr></argument>,
										 <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_execute on line %d: using PQexecParams\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>==</operator> <name>ECPGst_prepare</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_register_prepared_stmt</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>ecpg_free_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*-------
 * ecpg_process_output
 *
 *	Process the statement result and store it into application variables.  This
 *	function can be called repeatedly during the same statement in case cursor
 *	readahead is used and the application does FETCH N which overflows the
 *	readahead window.
 *
 * Parameters
 *	stmt	statement structure holding the PGresult and
 *			the list of output variables
 *	clear_result
 *			PQclear() the result upon returning from this function
 *
 * Returns success as boolean. Also an SQL error is raised in case of failure.
 *-------
 */</comment>
<function><type><name>bool</name></type>
<name>ecpg_process_output</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>clear_result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>status</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cmdstat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGnotify</name>   <modifier>*</modifier></type><name>notify</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nfields</name></decl>,
				<decl><type ref="prev"/><name>ntuples</name></decl>,
				<decl><type ref="prev"/><name>act_field</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>outlist</name></name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGRES_TUPLES_OK</name></expr>:</case>
			<expr_stmt><expr><name>nfields</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>ntuples</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: correctly got %d tuples with %d fields\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>nfields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>ntuples</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>ntuples</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: incorrect number of matches (%d)\n"</literal></expr></argument>,
							 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_NOT_FOUND</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_NO_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_descriptor</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>descriptor</name></name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>ecpg_find_desc</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>status</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>result</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>clear_result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: putting result (%d tuples) into descriptor %s\n"</literal></expr></argument>,
							 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><call><name>PQntuples</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_sqlda</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>_sqlda</name> <init>= <expr><operator>(</operator>struct <name>sqlda_compat</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type><name>sqlda</name> <init>= <expr><operator>*</operator><name>_sqlda</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type><name>sqlda_new</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * If we are passed in a previously existing sqlda (chain)
					 * then free it.
					 */</comment>
					<while>while <condition>(<expr><name>sqlda</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>sqlda_new</name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>desc_next</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <name>sqlda_new</name></expr>;</expr_stmt>
					</block_content>}</block></while>
					<expr_stmt><expr><operator>*</operator><name>_sqlda</name> <operator>=</operator> <name>sqlda</name> <operator>=</operator> <name>sqlda_new</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ntuples</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
					<block>{<block_content>
						<comment type="block">/*
						 * Build a new sqlda structure. Note that only
						 * fetching 1 record is supported
						 */</comment>
						<expr_stmt><expr><name>sqlda_new</name> <operator>=</operator> <call><name>ecpg_build_compat_sqlda</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sqlda_new</name></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/* cleanup all SQLDAs we created up */</comment>
							<while>while <condition>(<expr><name>sqlda</name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>sqlda_new</name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>desc_next</name></name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <name>sqlda_new</name></expr>;</expr_stmt>
							</block_content>}</block></while>
							<expr_stmt><expr><operator>*</operator><name>_sqlda</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

							<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: out of memory allocating a new sqlda\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>status</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: new sqlda was built\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><operator>*</operator><name>_sqlda</name> <operator>=</operator> <name>sqlda_new</name></expr>;</expr_stmt>

							<expr_stmt><expr><call><name>ecpg_set_compat_sqlda</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>_sqlda</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: putting result (1 tuple %d fields) into sqlda descriptor\n"</literal></expr></argument>,
									 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><call><name>PQnfields</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><name><name>sqlda_new</name><operator>-&gt;</operator><name>desc_next</name></name> <operator>=</operator> <name>sqlda</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <name>sqlda_new</name></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></for>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>_sqlda</name> <init>= <expr><operator>(</operator>struct <name>sqlda_struct</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type><name>sqlda</name> <init>= <expr><operator>*</operator><name>_sqlda</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type><name>sqlda_new</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * If we are passed in a previously existing sqlda (chain)
					 * then free it.
					 */</comment>
					<while>while <condition>(<expr><name>sqlda</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>sqlda_new</name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>desc_next</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <name>sqlda_new</name></expr>;</expr_stmt>
					</block_content>}</block></while>
					<expr_stmt><expr><operator>*</operator><name>_sqlda</name> <operator>=</operator> <name>sqlda</name> <operator>=</operator> <name>sqlda_new</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ntuples</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
					<block>{<block_content>
						<comment type="block">/*
						 * Build a new sqlda structure. Note that only
						 * fetching 1 record is supported
						 */</comment>
						<expr_stmt><expr><name>sqlda_new</name> <operator>=</operator> <call><name>ecpg_build_native_sqlda</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sqlda_new</name></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/* cleanup all SQLDAs we created up */</comment>
							<while>while <condition>(<expr><name>sqlda</name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>sqlda_new</name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>desc_next</name></name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sqlda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <name>sqlda_new</name></expr>;</expr_stmt>
							</block_content>}</block></while>
							<expr_stmt><expr><operator>*</operator><name>_sqlda</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

							<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: out of memory allocating a new sqlda\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>status</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: new sqlda was built\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><operator>*</operator><name>_sqlda</name> <operator>=</operator> <name>sqlda_new</name></expr>;</expr_stmt>

							<expr_stmt><expr><call><name>ecpg_set_native_sqlda</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>_sqlda</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: putting result (1 tuple %d fields) into sqlda descriptor\n"</literal></expr></argument>,
									 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><call><name>PQnfields</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><name><name>sqlda_new</name><operator>-&gt;</operator><name>desc_next</name></name> <operator>=</operator> <name>sqlda</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <name>sqlda_new</name></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></for>
				</block_content>}</block></else></if_stmt>

				<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<for>for <control>(<init><expr><name>act_field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>act_field</name> <operator>&lt;</operator> <name>nfields</name> <operator>&amp;&amp;</operator> <name>status</name></expr>;</condition> <incr><expr><name>act_field</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ecpg_store_result</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name>act_field</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>var</name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_TOO_FEW_ARGUMENTS</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_USING_CLAUSE_DOES_NOT_MATCH_TARGETS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&amp;&amp;</operator> <name>var</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_TOO_MANY_ARGUMENTS</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_USING_CLAUSE_DOES_NOT_MATCH_TARGETS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<break>break;</break>
		<case>case <expr><name>PGRES_COMMAND_OK</name></expr>:</case>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cmdstat</name> <operator>=</operator> <call><name>PQcmdStatus</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PQoidValue</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><call><name>PQcmdTuples</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: OK: %s\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>cmdstat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name> <operator>!=</operator> <name>ECPG_COMPAT_INFORMIX_SE</name> <operator>&amp;&amp;</operator>
				<operator>!</operator><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
				<operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>cmdstat</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
				 <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>cmdstat</name></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
				 <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>cmdstat</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name>ECPG_NOT_FOUND</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_NO_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PGRES_COPY_OUT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: COPY OUT data transfer in progress\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>PQgetCopyData</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></while>
				<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* COPY done */</comment>
					<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <call><name>PQgetResult</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: got PGRES_COMMAND_OK after PGRES_COPY_OUT\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: got error after PGRES_COPY_OUT: %s"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>
		<default>default:</default>

			<comment type="block">/*
			 * execution should never reach this code because it is already
			 * handled in ECPGcheck_PQresult()
			 */</comment>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: unknown execution status type\n"</literal></expr></argument>,
					 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_raise_backend</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>clear_result</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>results</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* check for asynchronous returns */</comment>
	<expr_stmt><expr><call><name>PQconsumeInput</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>notify</name> <operator>=</operator> <call><name>PQnotifies</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_process_output on line %d: asynchronous notification of \"%s\" from backend PID %d received\n"</literal></expr></argument>,
				 <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>relname</name></name></expr></argument>, <argument><expr><name><name>notify</name><operator>-&gt;</operator><name>be_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQconsumeInput</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ecpg_do_prologue
 *
 * Initialize various infrastructure elements for executing the statement:
 *
 *	- create the statement structure
 *	- set the C numeric locale for communicating with the backend
 *	- preprocess the variable list of input/output parameters into
 *	  linked lists
 */</comment>
<function><type><name>bool</name></type>
<name>ecpg_do_prologue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>force_indicator</name></decl></parameter>,
				 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>questionmarks</name></decl></parameter>,
				 <parameter><decl><type><name><name>enum</name> <name>ECPG_statement_type</name></name></type> <name>statement_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
				 <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>stmt_out</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>prepname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_prepared_name_set</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>stmt_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_EMPTY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>stmt</name> <operator>=</operator> <operator>(</operator>struct <name>statement</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>statement</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Make sure we do NOT honor the locale for numeric input/output since the
	 * database wants the standard decimal point.  If available, use
	 * uselocale() for this because it's thread-safe.  Windows doesn't have
	 * that, but it usually does have _configthreadlocale().  In some versions
	 * of MinGW, _configthreadlocale() exists but always returns -1 --- so
	 * treat that situation as if the function doesn't exist.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_USELOCALE</name></cpp:ifdef>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>clocale</name></name> <operator>=</operator> <call><name>newlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC_MASK</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><operator>(</operator><name>locale_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>clocale</name></name> <operator>==</operator> <operator>(</operator><name>locale_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name> <operator>=</operator> <call><name>uselocale</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>clocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name> <operator>==</operator> <operator>(</operator><name>locale_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE__CONFIGTHREADLOCALE</name></cpp:ifdef>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>oldthreadlocale</name></name> <operator>=</operator> <call><name>_configthreadlocale</name><argument_list>(<argument><expr><name>_ENABLE_PER_THREAD_LOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>ecpg_pthreads_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If statement type is ECPGst_prepnormal we are supposed to prepare the
	 * statement before executing them
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>statement_type</name> <operator>==</operator> <name>ECPGst_prepnormal</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_auto_prepare</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prepname</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * statement is now prepared, so instead of the query we have to
		 * execute the name
		 */</comment>
		<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name>prepname</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>statement_type</name> <operator>=</operator> <name>ECPGst_execute</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>statement_type</name> <operator>==</operator> <name>ECPGst_execute</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* if we have an EXECUTE command, only the name is send */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>command</name> <init>= <expr><call><name>ecpg_prepared</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>command</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INVALID_STMT</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_INVALID_SQL_STATEMENT_NAME</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* name of PREPARE AS will be set in loop of inlist */</comment>

	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <name>lineno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>compat</name></name> <operator>=</operator> <name>compat</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>force_indicator</name></name> <operator>=</operator> <name>force_indicator</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>questionmarks</name></name> <operator>=</operator> <name>questionmarks</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>=</operator> <name>statement_type</name></expr>;</expr_stmt>

	<comment type="block">/*------
	 * create a list of variables
	 *
	 * The variables are listed with input variables preceding outputvariables
	 * The end of each group is marked by an end marker. per variable we list:
	 *
	 * type - as defined in ecpgtype.h
	 * value - where to store the data
	 * varcharsize - length of string in case we have a stringvariable, else 0
	 * arraysize - 0 for pointer (we don't know the size of the array), 1 for
	 * simple variable, size for arrays
	 * offset - offset between ith and (i+1)th entry in an array, normally
	 * that means sizeof(type)
	 * ind_type - type of indicator variable
	 * ind_value - pointer to indicator variable
	 * ind_varcharsize - empty
	 * ind_arraysize - arraysize of indicator array
	 * ind_offset - indicator offset
	 *------
	 */</comment>

	<expr_stmt><expr><name>is_prepared_name_set</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>inlist</name></name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>type</name> <operator>!=</operator> <name>ECPGt_EORT</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ECPGt_EOIT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>list</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>outlist</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl>,
					   <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>var</name> <operator>=</operator> <operator>(</operator>struct <name>variable</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>variable</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Unknown array size means pointer to an array. Unknown
			 * varcharsize usually also means pointer. But if the type is
			 * character and the array size is known, it is an array of
			 * pointers to char, so use var-&gt;pointer as it is.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
				<operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_char</name> <operator>&amp;&amp;</operator> <name><name>var</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_unsigned_char</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>pointer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/*
			 * negative values are used to indicate an array without given
			 * bounds
			 */</comment>
			<comment type="block">/* reset to zero for us */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>arrsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varcharsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_type</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_pointer</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_varcharsize</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_arrsize</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_offset</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>ind_type</name></name> <operator>!=</operator> <name>ECPGt_NO_INDICATOR</name>
				<operator>&amp;&amp;</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>ind_arrsize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_varcharsize</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>ind_pointer</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_value</name></name> <operator>=</operator> <name><name>var</name><operator>-&gt;</operator><name>ind_pointer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/*
			 * negative values are used to indicate an array without given
			 * bounds
			 */</comment>
			<comment type="block">/* reset to zero for us */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>ind_arrsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_arrsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>ind_varcharsize</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>ind_varcharsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* if variable is NULL, the statement hasn't been prepared */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>pointer</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INVALID_STMT</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_INVALID_SQL_STATEMENT_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <operator>*</operator><name>list</name></expr>;</init> <condition><expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
				<empty_stmt>;</empty_stmt></block_content></block></for>

			<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>list</name> <operator>=</operator> <name>var</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>var</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_prepared_name_set</name> <operator>&amp;&amp;</operator> <name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>==</operator> <name>ECPGst_prepare</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_prepared_name_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>enum <name>ECPGttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* are we connected? */</comment>
	<if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>con</name><operator>-&gt;</operator><name>connection</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_NOT_CONN</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>con</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>con</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"&lt;empty&gt;"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_prepared_name_set</name> <operator>&amp;&amp;</operator> <name><name>stmt</name><operator>-&gt;</operator><name>statement_type</name></name> <operator>==</operator> <name>ECPGst_prepare</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_TOO_FEW_ARGUMENTS</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>con</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>con</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"&lt;empty&gt;"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* initialize auto_mem struct */</comment>
	<expr_stmt><expr><call><name>ecpg_clear_auto_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>stmt_out</name> <operator>=</operator> <name>stmt</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ecpg_do_epilogue
 *	  Restore the application locale and free the statement structure.
 */</comment>
<function><type><name>void</name></type>
<name>ecpg_do_epilogue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_USELOCALE</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name> <operator>!=</operator> <operator>(</operator><name>locale_t</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>uselocale</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>oldlocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE__CONFIGTHREADLOCALE</name></cpp:ifdef>

	<comment type="block">/*
	 * This is a bit trickier than it looks: if we failed partway through
	 * statement initialization, oldthreadlocale could still be 0.  But that's
	 * okay because a call with 0 is defined to be a no-op.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>oldthreadlocale</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>_configthreadlocale</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>oldthreadlocale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>free_statement</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Execute SQL statements in the backend.
 * The input/output parameters (variable argument list) are passed
 * in a va_list, so other functions can use this interface.
 */</comment>
<function><type><name>bool</name></type>
<name>ecpg_do</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>force_indicator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>questionmarks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>statement</name></name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_do_prologue</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>force_indicator</name></expr></argument>, <argument><expr><name>connection_name</name></expr></argument>,
						  <argument><expr><name>questionmarks</name></expr></argument>, <argument><expr><operator>(</operator>enum <name>ECPG_statement_type</name><operator>)</operator> <name>st</name></expr></argument>,
						  <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_build_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_autostart_transaction</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_process_output</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>

<label><name>fail</name>:</label>
	<expr_stmt><expr><call><name>ecpg_do_epilogue</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Execute SQL statements in the backend.
 * The input/output parameters are passed as variable-length argument list.
 */</comment>
<function><type><name>bool</name></type>
<name>ECPGdo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>force_indicator</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>questionmarks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_connection_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <name>connection_name</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_EMPTY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Handle the EXEC SQL EXECUTE... statement */</comment>
	<if_stmt><if>if <condition>(<expr><name>ECPGst_execute</name> <operator>==</operator> <name>st</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <call><name>ecpg_get_con_name_by_declared_name</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>real_connection_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If can't get the connection name by declared name then using
			 * connection name coming from the parameter connection_name
			 */</comment>
			<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <name>connection_name</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ecpg_do</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>force_indicator</name></expr></argument>, <argument><expr><name>real_connection_name</name></expr></argument>,
				  <argument><expr><name>questionmarks</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* old descriptor interface */</comment>
<function><type><name>bool</name></type>
<name>ECPGdo_descriptor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>descriptor</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>ECPG_COMPAT_PGSQL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>,
				  <argument><expr><name>ECPGt_descriptor</name></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>,
				  <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
