<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/ecpg/ecpglib/error.c"><comment type="block">/* src/interfaces/ecpg/ecpglib/error.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgerrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib_extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlca.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>ecpg_raise</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ECPGfree_auto_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlcode</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>code</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPG_NOT_FOUND</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"no data found on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_OUT_OF_MEMORY</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"out of memory on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_UNSUPPORTED</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"unsupported type \"%s\" on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_TOO_MANY_ARGUMENTS</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"too many arguments on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_TOO_FEW_ARGUMENTS</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"too few arguments on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_INT_FORMAT</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type int: \"%s\", on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_UINT_FORMAT</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type unsigned int: \"%s\", on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_FLOAT_FORMAT</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for floating-point type: \"%s\", on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_CONVERT_BOOL</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<comment type="block">/*------
				   translator: this string will be truncated at 149 characters expanded.  */</comment>
						 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"invalid syntax for type boolean: \"%s\", on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<comment type="block">/*------
				   translator: this string will be truncated at 149 characters expanded.  */</comment>
						 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"could not convert boolean value: size mismatch, on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_EMPTY</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"empty query on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_MISSING_INDICATOR</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"null value without indicator on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_NO_ARRAY</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"variable does not have an array type on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_DATA_NOT_ARRAY</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"data read from server is not an array on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_ARRAY_INSERT</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"inserting an array of variables is not supported on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_NO_CONN</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"connection \"%s\" does not exist on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_NOT_CONN</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"not connected to connection \"%s\" on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_INVALID_STMT</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"invalid statement name \"%s\" on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_UNKNOWN_DESCRIPTOR</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"descriptor \"%s\" not found on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_INVALID_DESCRIPTOR_INDEX</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"descriptor index out of range on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_UNKNOWN_DESCRIPTOR_ITEM</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"unrecognized descriptor item \"%s\" on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_VAR_NOT_NUMERIC</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"variable does not have a numeric type on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_VAR_NOT_CHAR</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"variable does not have a character type on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_TRANS</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"error in transaction processing on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_CONNECT</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"could not connect to database \"%s\" on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ECPG_INVALID_CURSOR</name></expr>:</case>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
				translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"The cursor is invalid on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
			<comment type="block">/*------
			   translator: this string will be truncated at 149 characters expanded.  */</comment>
					 <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"SQL error %d on line %d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrml</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"raising sqlcode %d on line %d: %s\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* free all memory we have allocated for the user */</comment>
	<expr_stmt><expr><call><name>ECPGfree_auto_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ecpg_raise_backend</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sqlstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ECPGfree_auto_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>sqlstate</name> <operator>=</operator> <call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>PG_DIAG_SQLSTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sqlstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sqlstate</name> <operator>=</operator> <name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>PG_DIAG_MESSAGE_PRIMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>sqlstate</name> <operator>=</operator> <name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * we might get here if the connection breaks down, so let's check for
		 * this instead of giving just the generic internal error
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sqlstate</name> <operator>=</operator> <literal type="string">"57P02"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"the connection to the server was lost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* copy error message */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s on line %d"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrml</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* copy SQLSTATE */</comment>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* assign SQLCODE for backward compatibility */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><literal type="string">"23505"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlcode</name></name> <operator>=</operator> <ternary><condition><expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ECPG_INFORMIX_DUPLICATE_KEY</name></expr> </then><else>: <expr><name>ECPG_DUPLICATE_KEY</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><literal type="string">"21000"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlcode</name></name> <operator>=</operator> <ternary><condition><expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ECPG_INFORMIX_SUBSELECT_NOT_ONE</name></expr> </then><else>: <expr><name>ECPG_SUBSELECT_NOT_ONE</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlcode</name></name> <operator>=</operator> <name>ECPG_PGSQL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* %.*s is safe here as long as sqlstate is all-ASCII */</comment>
	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"raising sqlstate %.*s (sqlcode %ld): %s\n"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlcode</name></name></expr></argument>, <argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* free all memory we have allocated for the user */</comment>
	<expr_stmt><expr><call><name>ECPGfree_auto_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* filter out all error codes */</comment>
<function><type><name>bool</name></type>
<name>ecpg_check_PQresult</name><parameter_list>(<parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>results</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>results</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_check_PQresult on line %d: no result - %s"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_raise_backend</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>

		<case>case <expr><name>PGRES_TUPLES_OK</name></expr>:</case>
			<return>return <expr><name>true</name></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PGRES_EMPTY_QUERY</name></expr>:</case>
			<comment type="block">/* do nothing */</comment>
			<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_EMPTY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PGRES_COMMAND_OK</name></expr>:</case>
			<return>return <expr><name>true</name></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PGRES_NONFATAL_ERROR</name></expr>:</case>
		<case>case <expr><name>PGRES_FATAL_ERROR</name></expr>:</case>
		<case>case <expr><name>PGRES_BAD_RESPONSE</name></expr>:</case>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_check_PQresult on line %d: bad response - %s"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_raise_backend</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PGRES_COPY_OUT</name></expr>:</case>
			<return>return <expr><name>true</name></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PGRES_COPY_IN</name></expr>:</case>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_check_PQresult on line %d: COPY IN data transfer in progress\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQendcopy</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_check_PQresult on line %d: unknown execution status type\n"</literal></expr></argument>,
					 <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_raise_backend</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>results</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/* print out an error message */</comment>
<function><type><name>void</name></type>
<name>sqlprint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name><index>[<expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrml</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"SQL error: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
