<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/ecpg/ecpglib/cursor.c"><comment type="block">/* src/interfaces/ecpg/ecpglib/cursor.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgerrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib_extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlca.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_cursor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>remove_cursor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>find_cursor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 *	Function: Handle the EXEC SQL OPEN cursor statement:
 *	Input:
 *		cursor_name --- cursor name
 *		prepared_name --- prepared name
 *		others --- keep same as the parameters in ECPGdo() function
 */</comment>
<function><type><name>bool</name></type>
<name>ECPGopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cursor_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prepared_name</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>force_indicator</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>questionmarks</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_connection_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_EMPTY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If the declared name is referred by the PREPARE statement then the
	 * prepared_name is same as declared name
	 */</comment>
	<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <call><name>ecpg_get_con_name_by_declared_name</name><argument_list>(<argument><expr><name>prepared_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>real_connection_name</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Add the cursor name into the declared node */</comment>
		<expr_stmt><expr><call><name>ecpg_update_declare_statement</name><argument_list>(<argument><expr><name>prepared_name</name></expr></argument>, <argument><expr><name>cursor_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * If can't get the connection name by declared name then using
		 * connection name coming from the parameter connection_name
		 */</comment>
		<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <name>connection_name</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>


	<comment type="block">/* Add the cursor into the connection */</comment>
	<expr_stmt><expr><call><name>add_cursor</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>cursor_name</name></expr></argument>, <argument><expr><name>real_connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ecpg_do</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>force_indicator</name></expr></argument>, <argument><expr><name>real_connection_name</name></expr></argument>, <argument><expr><name>questionmarks</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *	Function: Handle the EXEC SQL FETCH/MOVE CURSOR statements:
 *	Input:
 *		cursor_name --- cursor name
 *		others --- keep same as the parameters in ECPGdo() function
 */</comment>
<function><type><name>bool</name></type>
<name>ECPGfetch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cursor_name</name></decl></parameter>,
		  <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>force_indicator</name></decl></parameter>,
		  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>questionmarks</name></decl></parameter>,
		  <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_connection_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_EMPTY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <call><name>ecpg_get_con_name_by_cursor_name</name><argument_list>(<argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>real_connection_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If can't get the connection name by cursor name then using
		 * connection name coming from the parameter connection_name
		 */</comment>
		<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <name>connection_name</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ecpg_do</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>force_indicator</name></expr></argument>, <argument><expr><name>real_connection_name</name></expr></argument>, <argument><expr><name>questionmarks</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *	Function: Handle the EXEC SQL CLOSE CURSOR statements:
 *	Input:
 *		cursor_name --- cursor name
 *		others --- keep same as the parameters in ECPGdo() function
 */</comment>
<function><type><name>bool</name></type>
<name>ECPGclose</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cursor_name</name></decl></parameter>,
		  <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>force_indicator</name></decl></parameter>,
		  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>questionmarks</name></decl></parameter>,
		  <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>real_connection_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_EMPTY</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <call><name>ecpg_get_con_name_by_cursor_name</name><argument_list>(<argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>real_connection_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If can't get the connection name by cursor name then using
		 * connection name coming from the parameter connection_name
		 */</comment>
		<expr_stmt><expr><name>real_connection_name</name> <operator>=</operator> <name>connection_name</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>real_connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send the query to backend */</comment>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>ecpg_do</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>force_indicator</name></expr></argument>, <argument><expr><name>real_connection_name</name></expr></argument>, <argument><expr><name>questionmarks</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if it fails, raise an error */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>status</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INVALID_CURSOR</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* check the existence of the cursor in the connection */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>find_cursor</name><argument_list>(<argument><expr><name>cursor_name</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>true</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>remove_cursor</name><argument_list>(<argument><expr><name>cursor_name</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Function: Add a cursor into the connection
 * The duplication of cursor_name is checked at ecpg.trailer,
 * so we don't check here.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_cursor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cursor_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor_statement</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor_name</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_INVALID_CURSOR</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>con</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_NO_CONN</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_CONNECTION_DOES_NOT_EXIST</name></expr></argument>,
				   <argument><expr><ternary><condition><expr><name>connection_name</name></expr> ?</condition><then> <expr><name>connection_name</name></expr> </then><else>: <expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* allocate a node to store the new cursor */</comment>
	<expr_stmt><expr><name>new</name> <operator>=</operator> <operator>(</operator>struct <name>cursor_statement</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>cursor_statement</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>new</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>cursor_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>cursor_stmts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>cursor_stmts</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Function: Remove the cursor from the connection
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_cursor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cursor_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor_statement</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor_statement</name></name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>connection</name> <operator>||</operator> <operator>!</operator><name>cursor_name</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>connection</name><operator>-&gt;</operator><name>cursor_stmts</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>cur</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>connection</name><operator>-&gt;</operator><name>cursor_stmts</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Function: check the existence of the cursor in the connection
 * Return: true ---Found
 *		   false --- Not found
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>find_cursor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cursor_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>cursor_statement</name></name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>connection</name> <operator>||</operator> <operator>!</operator><name>cursor_name</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>cur</name> <operator>=</operator> <name><name>connection</name><operator>-&gt;</operator><name>cursor_stmts</name></name></expr>;</init> <condition><expr><name>cur</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>cur</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>cursor_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
