<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/ecpg/ecpglib/sqlda.c"><comment type="block">/*
 * SQLDA support routines
 *
 * The allocated memory area pointed by an sqlda pointer
 * contains both the metadata and the data, so freeing up
 * is a simple free(sqlda) as expected by the ESQL/C examples.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpg-pthread-win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decimal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgerrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib_extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlca.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlda-native.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlda-compat.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Compute the next variable's offset with
 * the current variable's size and alignment.
 *
 *
 * Returns:
 * - the current variable's offset in *current
 * - the next variable's offset in *next
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ecpg_sqlda_align_add_size</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alignment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>%</operator> <name>alignment</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>alignment</name> <operator>-</operator> <operator>(</operator><name>offset</name> <operator>%</operator> <name>alignment</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>current</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>next</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>sqlda_compat_empty_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sqld</name> <init>= <expr><call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Initial size to store main structure and field structures */</comment>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlda_compat</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>sqld</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlvar_compat</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/* Add space for field names */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sqld</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* Add padding to the first field value */</comment>
	<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>sqlda_common_total_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>sqld</name> <init>= <expr><call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>next_offset</name></decl>;</decl_stmt>

	<comment type="block">/* Add space for the field values */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sqld</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name> <init>= <expr><call><name>sqlda_dynamic_type</name><argument_list>(<argument><expr><call><name>PQftype</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGt_short</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_int</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_long</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_bool</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_float</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_double</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_numeric</name></expr>:</case>

				<comment type="block">/*
				 * We align the numeric struct to allow it to store a pointer,
				 * while the digits array is aligned to int (which seems like
				 * overkill, but let's keep compatibility here).
				 *
				 * Unfortunately we need to deconstruct the value twice to
				 * find out the digits array's size and then later fill it.
				 */</comment>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NumericDigit</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_asc</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>num</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>next_offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>digits</name></name> <operator>-</operator> <name><name>num</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>num</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_date</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_interval</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<default>default:</default>
				<block>{<block_content>
					<decl_stmt><decl><type><name>long</name></type>		<name>datalen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
		</block_content>}</block></switch>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>next_offset</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>long</name></type>
<name>sqlda_compat_total_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>sqlda_compat_empty_size</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>offset</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>sqlda_common_total_size</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>sqlda_native_empty_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sqld</name> <init>= <expr><call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Initial size to store main structure and field structures */</comment>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlda_struct</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>sqld</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlvar_struct</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/* Add padding to the first field value */</comment>
	<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name></type>
<name>sqlda_native_total_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>sqlda_native_empty_size</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>offset</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>sqlda_common_total_size</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Build "struct sqlda_compat" (metadata only) from PGresult
 * leaving enough space for the field values in
 * the given row number
 */</comment>
<function><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type>
<name>ecpg_build_compat_sqlda</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type><name>sqlda</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlvar_compat</name></name> <modifier>*</modifier></type><name>sqlvar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sqld</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>sqlda_compat_total_size</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <operator>(</operator>struct <name>sqlda_compat</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sqlda</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sqlda</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sqlvar</name> <operator>=</operator> <operator>(</operator>struct <name>sqlvar_compat</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>sqlda</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>sqld</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fname</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>sqlvar</name> <operator>+</operator> <name>sqld</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name> <operator>=</operator> <name>sqld</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_build_compat_sqlda on line %d sqld = %d\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>sqld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>desc_occ</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>		<comment type="block">/* cheat here, keep the full allocated size */</comment>
	<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name></name> <operator>=</operator> <name>sqlvar</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name> <operator>=</operator> <call><name>sqlda_dynamic_type</name><argument_list>(<argument><expr><call><name>PQftype</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlname</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fname</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * this is reserved for future use, so we leave it empty for the time
		 * being
		 */</comment>
		<comment type="block">/* sqlda-&gt;sqlvar[i].sqlformat = (char *) (long) PQfformat(res, i); */</comment>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlxid</name> <operator>=</operator> <call><name>PQftype</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltypelen</name> <operator>=</operator> <call><name>PQfsize</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>sqlda</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Sets values from PGresult.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int16</name></type> <name>value_is_null</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int16</name></type> <name>value_is_not_null</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>ecpg_set_compat_sqlda</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>_sqlda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_compat</name></name> <modifier>*</modifier></type><name>sqlda</name> <init>= <expr><operator>(</operator><operator>*</operator><name>_sqlda</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>offset</name></decl>,
				<decl><type ref="prev"/><name>next_offset</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Offset for the first field value */</comment>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>sqlda_compat_empty_size</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set sqlvar[i]-&gt;sqldata pointers and convert values to correct format
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>datalen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>set_data</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGt_short</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_int</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_long</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_bool</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_float</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_double</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_numeric</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>set_data</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NumericDigit</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>ECPGt_numeric</name></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_asc</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>ECPGt_numeric</name></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>num</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>next_offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>digits</name></name> <operator>-</operator> <name><name>num</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>num</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>digits</name></name> <operator>-</operator> <name><name>num</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>num</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><operator>(</operator><operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name><operator>)</operator><operator>-&gt;</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>NumericDigit</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
						<expr_stmt><expr><operator>(</operator><operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name><operator>)</operator><operator>-&gt;</operator><name>digits</name> <operator>=</operator> <operator>(</operator><name>NumericDigit</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <operator>(</operator><name><name>num</name><operator>-&gt;</operator><name>digits</name></name> <operator>-</operator> <name><name>num</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<break>break;</break>
				</block_content>}</block>
			<case>case <expr><name>ECPGt_date</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_interval</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<default>default:</default>
				<expr_stmt><expr><name>datalen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&gt;</operator> <literal type="number">32768</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlilongdata</name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>isnull</name> <operator>=</operator> <call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_set_compat_sqlda on line %d row %d col %d %s\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><literal type="string">"IS NULL"</literal></expr> </then><else>: <expr><literal type="string">"IS NOT NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name> <operator>=</operator> <ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>value_is_null</name></expr> </then><else>: <expr><operator>&amp;</operator><name>value_is_not_null</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlitype</name> <operator>=</operator> <name>ECPGt_short</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlilen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>set_data</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ecpg_get_data</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>,
							  <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name></expr></argument>, <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>,
							  <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							  <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>next_offset</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type>
<name>ecpg_build_native_sqlda</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type><name>sqlda</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>sqlda_native_total_size</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sqlda</name> <operator>=</operator> <operator>(</operator>struct <name>sqlda_struct</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sqlda</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sqlda</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqldaid</name></name></expr></argument>, <argument><expr><literal type="string">"SQLDA  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name> <operator>=</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqln</name></name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_build_native_sqlda on line %d sqld = %d\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqldabc</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlda_struct</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sqlvar_struct</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name> <operator>=</operator> <call><name>sqlda_dynamic_type</name><argument_list>(<argument><expr><call><name>PQftype</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>PQfname</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sqlname</name><operator>.</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sqlname</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>sqlda</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ecpg_set_native_sqlda</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>_sqlda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlda_struct</name></name> <modifier>*</modifier></type><name>sqlda</name> <init>= <expr><operator>(</operator><operator>*</operator><name>_sqlda</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>offset</name></decl>,
				<decl><type ref="prev"/><name>next_offset</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Offset for the first field value */</comment>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>sqlda_native_empty_size</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set sqlvar[i]-&gt;sqldata pointers and convert values to correct format
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqld</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>datalen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>set_data</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGt_short</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_int</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_long</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_bool</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_float</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_double</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>decimal</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_numeric</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>numeric</name>    <modifier>*</modifier></type><name>num</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>set_data</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NumericDigit</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>ECPGt_numeric</name></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>PGTYPESnumeric_from_asc</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ECPGset_noind_null</name><argument_list>(<argument><expr><name>ECPGt_numeric</name></expr></argument>, <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>num</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>next_offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>digits</name></name> <operator>-</operator> <name><name>num</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>num</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>num</name><operator>-&gt;</operator><name>digits</name></name> <operator>-</operator> <name><name>num</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>num</name><operator>-&gt;</operator><name>ndigits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><operator>(</operator><operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name><operator>)</operator><operator>-&gt;</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>NumericDigit</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
						<expr_stmt><expr><operator>(</operator><operator>(</operator><name>numeric</name> <operator>*</operator><operator>)</operator> <name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name><operator>)</operator><operator>-&gt;</operator><name>digits</name> <operator>=</operator> <operator>(</operator><name>NumericDigit</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name> <operator>+</operator> <operator>(</operator><name><name>num</name><operator>-&gt;</operator><name>digits</name></name> <operator>-</operator> <name><name>num</name><operator>-&gt;</operator><name>buf</name></name><operator>)</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>PGTYPESnumeric_free</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<break>break;</break>
				</block_content>}</block>
			<case>case <expr><name>ECPGt_date</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_interval</name></expr>:</case>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<default>default:</default>
				<expr_stmt><expr><name>datalen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ecpg_sqlda_align_add_size</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>datalen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>next_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>sqlda</name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqllen</name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><name>isnull</name> <operator>=</operator> <call><name>PQgetisnull</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_set_native_sqlda on line %d row %d col %d %s\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><literal type="string">"IS NULL"</literal></expr> </then><else>: <expr><literal type="string">"IS NOT NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqlind</name> <operator>=</operator> <ternary><condition><expr><name>isnull</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>value_is_null</name></expr> </then><else>: <expr><operator>&amp;</operator><name>value_is_not_null</name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>set_data</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ecpg_get_data</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>,
							  <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqltype</name></expr></argument>, <argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>,
							  <argument><expr><name><name>sqlda</name><operator>-&gt;</operator><name>sqlvar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sqldata</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							  <argument><expr><name>ECPG_ARRAY_NONE</name></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>next_offset</name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
