<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/ecpg/preproc/parser.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * parser.c
 *		Main entry point/driver for PostgreSQL grammar
 *
 * This should match src/backend/parser/parser.c, except that we do not
 * need to bother with re-entrant interfaces.
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/interfaces/ecpg/preproc/parser.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc_extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>have_lookahead</name></decl>;</decl_stmt>		<comment type="block">/* is lookahead info valid? */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>lookahead_token</name></decl>;</decl_stmt>	<comment type="block">/* one-token lookahead */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>YYSTYPE</name></type> <name>lookahead_yylval</name></decl>;</decl_stmt>	<comment type="block">/* yylval for lookahead token */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name></type> <name>lookahead_yylloc</name></decl>;</decl_stmt>	<comment type="block">/* yylloc for lookahead token */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lookahead_yytext</name></decl>;</decl_stmt>	<comment type="block">/* start current token */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>lookahead_end</name></decl>;</decl_stmt>		<comment type="block">/* end of current token */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>lookahead_hold_char</name></decl>;</decl_stmt>	<comment type="block">/* to be put back at *lookahead_end */</comment>


<comment type="block">/*
 * Intermediate filter between parser and base lexer (base_yylex in scan.l).
 *
 * This filter is needed because in some cases the standard SQL grammar
 * requires more than one token lookahead.  We reduce these cases to one-token
 * lookahead by replacing tokens here, in order to keep the grammar LALR(1).
 *
 * Using a filter is simpler than trying to recognize multiword tokens
 * directly in scan.l, because we'd have to allow for comments between the
 * words.  Furthermore it's not clear how to do that without re-introducing
 * scanner backtrack, which would cost more performance than this filter
 * layer does.
 */</comment>
<function><type><name>int</name></type>
<name>filtered_base_yylex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>next_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_token_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YYSTYPE</name></type>		<name>cur_yylval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YYLTYPE</name></type>		<name>cur_yylloc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cur_yytext</name></decl>;</decl_stmt>

	<comment type="block">/* Get next token --- we might already have it */</comment>
	<if_stmt><if>if <condition>(<expr><name>have_lookahead</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>lookahead_token</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>base_yylval</name> <operator>=</operator> <name>lookahead_yylval</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>base_yylloc</name> <operator>=</operator> <name>lookahead_yylloc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>base_yytext</name> <operator>=</operator> <name>lookahead_yytext</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>lookahead_end</name> <operator>=</operator> <name>lookahead_hold_char</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>have_lookahead</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <call><name>base_yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * If this token isn't one that requires lookahead, just return it.  If it
	 * does, determine the token length.  (We could get that via strlen(), but
	 * since we have such a small set of possibilities, hardwiring seems
	 * feasible and more efficient.)
	 */</comment>
	<switch>switch <condition>(<expr><name>cur_token</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NOT</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NULLS_P</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>WITH</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<return>return <expr><name>cur_token</name></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Identify end+1 of current token.  base_yylex() has temporarily stored a
	 * '\0' here, and will undo that when we call it again.  We need to redo
	 * it to fully revert the lookahead call for error reporting purposes.
	 */</comment>
	<expr_stmt><expr><name>lookahead_end</name> <operator>=</operator> <name>base_yytext</name> <operator>+</operator> <name>cur_token_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><name>lookahead_end</name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Save and restore lexer output variables around the call */</comment>
	<expr_stmt><expr><name>cur_yylval</name> <operator>=</operator> <name>base_yylval</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur_yylloc</name> <operator>=</operator> <name>base_yylloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur_yytext</name> <operator>=</operator> <name>base_yytext</name></expr>;</expr_stmt>

	<comment type="block">/* Get next token, saving outputs into lookahead variables */</comment>
	<expr_stmt><expr><name>next_token</name> <operator>=</operator> <call><name>base_yylex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lookahead_token</name> <operator>=</operator> <name>next_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lookahead_yylval</name> <operator>=</operator> <name>base_yylval</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lookahead_yylloc</name> <operator>=</operator> <name>base_yylloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lookahead_yytext</name> <operator>=</operator> <name>base_yytext</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>base_yylval</name> <operator>=</operator> <name>cur_yylval</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>base_yylloc</name> <operator>=</operator> <name>cur_yylloc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>base_yytext</name> <operator>=</operator> <name>cur_yytext</name></expr>;</expr_stmt>

	<comment type="block">/* Now revert the un-truncation of the current token */</comment>
	<expr_stmt><expr><name>lookahead_hold_char</name> <operator>=</operator> <operator>*</operator><name>lookahead_end</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>lookahead_end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>have_lookahead</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Replace cur_token if needed, based on lookahead */</comment>
	<switch>switch <condition>(<expr><name>cur_token</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NOT</name></expr>:</case>
			<comment type="block">/* Replace NOT by NOT_LA if it's followed by BETWEEN, IN, etc */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>BETWEEN</name></expr>:</case>
				<case>case <expr><name>IN_P</name></expr>:</case>
				<case>case <expr><name>LIKE</name></expr>:</case>
				<case>case <expr><name>ILIKE</name></expr>:</case>
				<case>case <expr><name>SIMILAR</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>NOT_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>NULLS_P</name></expr>:</case>
			<comment type="block">/* Replace NULLS_P by NULLS_LA if it's followed by FIRST or LAST */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>FIRST_P</name></expr>:</case>
				<case>case <expr><name>LAST_P</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>NULLS_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>WITH</name></expr>:</case>
			<comment type="block">/* Replace WITH by WITH_LA if it's followed by TIME or ORDINALITY */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TIME</name></expr>:</case>
				<case>case <expr><name>ORDINALITY</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>WITH_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>cur_token</name></expr>;</return>
</block_content>}</block></function>
</unit>
