<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/ecpg/test/expected/sql-bytea.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>6</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<comment type="block">/* exec sql whenever sqlerror  sqlprint ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>7</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_binary</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"len=%d, ind=%d, data=0x"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal> <operator>&amp;</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_SIZE</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LACK_SIZE</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:empty>#</cpp:empty>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* exec sql begin declare section */</comment>
	 
	 
	 
	   
	 

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>27</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>
  <struct>struct <name>bytea_1</name>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[ <expr><name>DATA_SIZE</name></expr> ]</index></name></decl>;</decl_stmt> }</block>  <decl><name><name>send_buf</name> <index>[ <expr><literal type="number">2</literal></expr> ]</index></name></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>28</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>
  <struct>struct <name>bytea_2</name>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[ <expr><name>DATA_SIZE</name></expr> ]</index></name></decl>;</decl_stmt> }</block>  <decl><name><name>recv_buf</name> <index>[ <expr><literal type="number">2</literal></expr> ]</index></name></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>29</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>
  <struct>struct <name>bytea_3</name>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[ <expr><name>DATA_SIZE</name></expr> ]</index></name></decl>;</decl_stmt> }</block> <decl><modifier>*</modifier> <name>recv_vlen_buf</name></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>30</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>
  <struct>struct <name>bytea_4</name>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[ <expr><name>DATA_SIZE</name> <operator>-</operator> <name>LACK_SIZE</name></expr> ]</index></name></decl>;</decl_stmt> }</block>  <decl><name>recv_short_buf</name></decl> ;</struct>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>31</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name><name>ind</name> <index>[ <expr><literal type="number">2</literal></expr> ]</index></name></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>32</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>{ \
	for (i = 0; i &lt; 2; ++i) \
	{ \
		memset(recv_buf[i].arr, 0x0, sizeof(recv_buf[i].arr)); \
		recv_buf[i].len = 0; \
		ind[i] = 0; \
	} \
	recv_vlen_buf = NULL, \
	memset(recv_short_buf.arr, 0x0, sizeof(recv_short_buf.arr)); \
} \
while (0)</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</init> <condition><expr><operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>c</name> <operator>=</operator> <literal type="number">0xff</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr><operator>,</operator> <expr><name>j</name> <operator>&lt;</operator> <name>DATA_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr><operator>,</operator> <expr><operator>--</operator><name>c</name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>send_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><name><name>send_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>DATA_SIZE</name></expr>;</expr_stmt>
	</block_content>}</block></for>

    <block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists test ( data1 bytea , data2 bytea )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>59</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>59</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGprepare</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ins_stmt"</literal></expr></argument>, <argument><expr><literal type="string">"insert into test values(?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>61</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>61</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGprepare</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"sel_stmt"</literal></expr></argument>, <argument><expr><literal type="string">"select data1,data2 from test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>62</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>62</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<expr_stmt><expr><call><name>ECPGallocate_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"idesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>63</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>63</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<expr_stmt><expr><call><name>ECPGallocate_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"odesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>64</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>64</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>


	<comment type="block">/* Test for static sql statement with normal host variable, indicator */</comment>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"truncate test"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>68</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into test values ( $1  , $2  )"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>69</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>69</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select data1 , data2 from test"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_2</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>recv_short_buf</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name> <operator>-</operator> <name>LACK_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_4</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ind</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>70</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>70</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<expr_stmt><expr><call><name>dump_binary</name><argument_list>(<argument><expr><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>arr</name></expr></argument>, <argument><expr><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name><name>ind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_binary</name><argument_list>(<argument><expr><name><name>recv_short_buf</name><operator>.</operator><name>arr</name></name></expr></argument>, <argument><expr><name><name>recv_short_buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>ind</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test for variable length array */</comment>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"truncate test"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>76</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>76</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into test values ( $1  , $2  )"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>77</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>77</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into test values ( $1  , $2  )"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>78</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>78</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select data1 from test"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>recv_vlen_buf</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_3</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>79</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>79</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<expr_stmt><expr><call><name>dump_binary</name><argument_list>(<argument><expr><name><name>recv_vlen_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>arr</name></expr></argument>, <argument><expr><name><name>recv_vlen_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_binary</name><argument_list>(<argument><expr><name><name>recv_vlen_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>arr</name></expr></argument>, <argument><expr><name><name>recv_vlen_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>recv_vlen_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test for dynamic sql statement with normal host variable, indicator */</comment>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"truncate test"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>86</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>86</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_execute</name></expr></argument>, <argument><expr><literal type="string">"ins_stmt"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>87</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>87</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_execute</name></expr></argument>, <argument><expr><literal type="string">"sel_stmt"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_2</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>recv_short_buf</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name> <operator>-</operator> <name>LACK_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_4</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ind</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>88</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>88</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<expr_stmt><expr><call><name>dump_binary</name><argument_list>(<argument><expr><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>arr</name></expr></argument>, <argument><expr><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name><name>ind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_binary</name><argument_list>(<argument><expr><name><name>recv_short_buf</name><operator>.</operator><name>arr</name></name></expr></argument>, <argument><expr><name><name>recv_short_buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>ind</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Test for dynamic sql statement with sql descriptor */</comment>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"truncate test"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>94</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>94</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGset_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"idesc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>95</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>95</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGset_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"idesc"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>send_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>96</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>96</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_execute</name></expr></argument>, <argument><expr><literal type="string">"ins_stmt"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_descriptor</name></expr></argument>, <argument><expr><literal type="string">"idesc"</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>97</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>97</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_execute</name></expr></argument>, <argument><expr><literal type="string">"sel_stmt"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_descriptor</name></expr></argument>, <argument><expr><literal type="string">"odesc"</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"odesc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>ECPGd_indicator</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>99</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>99</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGget_desc</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"odesc"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>ECPGd_indicator</name></expr></argument>,
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ind</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_data</name></expr></argument>,
	<argument><expr><name>ECPGt_bytea</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>recv_short_buf</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><name>DATA_SIZE</name> <operator>-</operator> <name>LACK_SIZE</name></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>bytea_4</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ECPGd_EODT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>100</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>100</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<expr_stmt><expr><call><name>dump_binary</name><argument_list>(<argument><expr><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>arr</name></expr></argument>, <argument><expr><name><name>recv_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>, <argument><expr><name><name>ind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_binary</name><argument_list>(<argument><expr><name><name>recv_short_buf</name><operator>.</operator><name>arr</name></name></expr></argument>, <argument><expr><name><name>recv_short_buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>ind</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"drop table test"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>104</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>104</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>105</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>105</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdisconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>106</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>106</cpp:number> <cpp:file>"bytea.pgc"</cpp:file></cpp:line>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
