<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/ecpg/test/expected/sql-array.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_date.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_interval.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_numeric.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_timestamp.h&gt;</cpp:file></cpp:include>

<comment type="block">/* exec sql whenever sqlerror  sqlprint ; */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>10</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>



<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"sqlca.h"</cpp:file></cpp:line>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>POSTGRES_SQLCA_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_SQLCA_H</name></cpp:macro></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PGDLLIMPORT</name></cpp:ifndef>
<cpp:if>#<cpp:directive>if</cpp:directive>  <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGDLLIMPORT</name></cpp:macro> <cpp:value>__declspec (dllimport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGDLLIMPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* __CYGWIN__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* PGDLLIMPORT */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLERRMC_LEN</name></cpp:macro>	<cpp:value>150</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal>
<block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>sqlca_t</name>
<block>{
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlcaid</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>sqlabc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>sqlcode</name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>int</name></type>			<name>sqlerrml</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlerrmc</name><index>[<expr><name>SQLERRMC_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	}</block>			<decl><name>sqlerrm</name></decl>;</struct>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlerrp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name><name>sqlerrd</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="block">/* Element 0: empty						*/</comment>
	<comment type="block">/* 1: OID of processed tuple if applicable			*/</comment>
	<comment type="block">/* 2: number of rows processed				*/</comment>
	<comment type="block">/* after an INSERT, UPDATE or				*/</comment>
	<comment type="block">/* DELETE statement					*/</comment>
	<comment type="block">/* 3: empty						*/</comment>
	<comment type="block">/* 4: empty						*/</comment>
	<comment type="block">/* 5: empty						*/</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlwarn</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="block">/* Element 0: set to 'W' if at least one other is 'W'	*/</comment>
	<comment type="block">/* 1: if 'W' at least one character string		*/</comment>
	<comment type="block">/* value was truncated when it was			*/</comment>
	<comment type="block">/* stored into a host variable.             */</comment>

	<comment type="block">/*
	 * 2: if 'W' a (hopefully) non-fatal notice occurred
	 */</comment>	<comment type="block">/* 3: empty */</comment>
	<comment type="block">/* 4: empty						*/</comment>
	<comment type="block">/* 5: empty						*/</comment>
	<comment type="block">/* 6: empty						*/</comment>
	<comment type="block">/* 7: empty						*/</comment>

	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlstate</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>ECPGget_sqlca</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>POSTGRES_ECPG_INTERNAL</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlca</name></cpp:macro> <cpp:value>(*ECPGget_sqlca())</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>12</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"regression.h"</cpp:file></cpp:line>






<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>13</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* exec sql begin declare section */</comment>
	    
	   
	   
	 
	 
	 
	 
	   
	    
	 

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>19</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>j</name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>20</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type> <name>did</name> <init>= <expr><operator>&amp;</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>21</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>short</name></type> <name><name>a</name> <index>[ <expr><literal type="number">10</literal></expr> ]</index></name> <init>= <expr><block>{ <expr><literal type="number">9</literal></expr> , <expr><literal type="number">8</literal></expr> , <expr><literal type="number">7</literal></expr> , <expr><literal type="number">6</literal></expr> , <expr><literal type="number">5</literal></expr> , <expr><literal type="number">4</literal></expr> , <expr><literal type="number">3</literal></expr> , <expr><literal type="number">2</literal></expr> , <expr><literal type="number">1</literal></expr> , <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>22</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>timestamp</name></type> <name><name>ts</name> <index>[ <expr><literal type="number">10</literal></expr> ]</index></name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>23</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>date</name></type> <name><name>d</name> <index>[ <expr><literal type="number">10</literal></expr> ]</index></name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>24</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>interval</name></type> <name><name>in</name> <index>[ <expr><literal type="number">10</literal></expr> ]</index></name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>25</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>numeric</name></type> <name><name>n</name> <index>[ <expr><literal type="number">10</literal></expr> ]</index></name></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>26</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name></type> <name><name>text</name> <index>[ <expr><literal type="number">25</literal></expr> ]</index></name> <init>= <expr><literal type="string">"klmnopqrst"</literal></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>27</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>t</name> <init>= <expr><operator>(</operator> <name>char</name> <operator>*</operator> <operator>)</operator> <call><name>malloc</name> <argument_list>( <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>28</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>
 <decl_stmt><decl><type><name>double</name></type> <name>f</name></decl> ;</decl_stmt>
<comment type="block">/* exec sql end declare section */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>29</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"0123456789"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>setlocale</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>numeric</name> <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>interval</name> <modifier>*</modifier></type><name>inter</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"2000-1-1 0%d:00:00"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"2000-1-1%d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>PGTYPESdate_from_asc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d hours"</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inter</name> <operator>=</operator> <call><name>PGTYPESinterval_from_asc</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>inter</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PGTYPESnumeric_from_int</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>value</name></expr>;</expr_stmt>
	</block_content>}</block></for>

        <block>{<block_content> <expr_stmt><expr><call><name>ECPGconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ecpg1_regression"</literal></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>53</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>53</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGsetcommit</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>55</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>55</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"begin work"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>57</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"create table test ( f float , i int , a int [ 10 ] , text char ( 10 ) , ts timestamp [ 10 ] , n numeric [ 10 ] , d date [ 10 ] , inter interval [ 10 ] )"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>59</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>59</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into test ( f , i , a , text , ts , n , d , inter ) values ( 404.90 , 3 , '{0,1,2,3,4,5,6,7,8,9}' , 'abcdefghij' , $1  , $2  , $3  , $4  )"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_timestamp</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>ts</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_numeric</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>n</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_date</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>d</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_interval</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>in</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>61</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>61</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into test ( f , i , a , text , ts , n , d , inter ) values ( 140787.0 , 2 , $1  , $2  , $3  , $4  , $5  , $6  )"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>(</operator><name>a</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name>text</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">25</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">25</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_timestamp</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>ts</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_numeric</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>n</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_date</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>d</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_interval</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>in</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>63</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>63</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"insert into test ( f , i , a , text , ts , n , d , inter ) values ( 14.07 , $1  , $2  , $3  , $4  , $5  , $6  , $7  )"</literal></expr></argument>, 
	<argument><expr><name>ECPGt_int</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>did</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>(</operator><name>a</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>t</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_timestamp</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>ts</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_numeric</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>n</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_date</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>d</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_interval</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>in</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>65</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>65</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>67</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>67</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>ts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>PGTYPEStimestamp_from_asc</name><argument_list>(<argument><expr><literal type="string">"1900-01-01 00:00:00"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>PGTYPESdate_from_asc</name><argument_list>(<argument><expr><literal type="string">"1900-01-01"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><call><name>PGTYPESinterval_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>n</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><call><name>PGTYPESnumeric_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"begin work"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>75</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>75</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select f , text from test where i = 1"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_double</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>f</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name>text</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">25</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">25</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>80</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>80</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Found f=%f text=%10.10s\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">140787</literal></expr>;</expr_stmt>
	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select a , text , ts , n , d , inter from test where f = $1 "</literal></expr></argument>, 
	<argument><expr><name>ECPGt_double</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>f</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_short</name></expr></argument>,<argument><expr><operator>(</operator><name>a</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>t</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_timestamp</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>ts</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_numeric</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>n</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_date</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>d</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, 
	<argument><expr><name>ECPGt_interval</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>in</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">10</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>88</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>88</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Found a[%d] = %d ts[%d] = %s n[%d] = %s d[%d] = %s in[%d] = %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PGTYPEStimestamp_to_asc</name><argument_list>(<argument><expr><name><name>ts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PGTYPESnumeric_to_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>n</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PGTYPESdate_to_asc</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PGTYPESinterval_to_asc</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Found text=%10.10s\n"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"select a from test where f = $1 "</literal></expr></argument>, 
	<argument><expr><name>ECPGt_double</name></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name>f</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, 
	<argument><expr><name>ECPGt_char</name></expr></argument>,<argument><expr><operator>(</operator><name>text</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">25</literal></expr></argument>,<argument><expr><operator>(</operator><name>long</name><operator>)</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">25</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
	<argument><expr><name>ECPGt_NO_INDICATOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> , <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>98</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Found text=%s\n"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdo</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPGst_normal</name></expr></argument>, <argument><expr><literal type="string">"drop table test"</literal></expr></argument>, <argument><expr><name>ECPGt_EOIT</name></expr></argument>, <argument><expr><name>ECPGt_EORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>102</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>102</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGtrans</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>104</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>104</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<block>{<block_content> <expr_stmt><expr><call><name>ECPGdisconnect</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>106</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>

<if_stmt><if>if <condition>(<expr><name><name>sqlca</name><operator>.</operator><name>sqlcode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>106</cpp:number> <cpp:file>"array.pgc"</cpp:file></cpp:line>


	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
