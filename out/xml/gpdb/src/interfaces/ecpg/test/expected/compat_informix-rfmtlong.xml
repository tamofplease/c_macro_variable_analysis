<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/ecpg/test/expected/compat_informix-rfmtlong.c"><comment type="block">/* Processed by ecpg (regression mode) */</comment>
<comment type="block">/* These include files are added by the preprocessor */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpglib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpgerrno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlca.h&gt;</cpp:file></cpp:include>
<comment type="block">/* Needed for informix compatibility */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ecpg_informix.h&gt;</cpp:file></cpp:include>
<comment type="block">/* End of automatic include section */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECPGdebug</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ECPGdebug((X)+100,(Y))</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"rfmtlong.pgc"</cpp:file></cpp:line>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pgtypes_error.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqltypes.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * This file tests various forms of long-input/output by means of
 * rfmtlong
 */</comment>


<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>check_return</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>fmtlong</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>lng</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>rfmtlong</name><argument_list>(<argument><expr><name>lng</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"r: %d "</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d: %s (fmt was: %s)\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_return</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ECPGdebug</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"-&lt;&lt;&lt;&lt;,&lt;&lt;&lt;,&lt;&lt;&lt;,&lt;&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"################"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"+++$$$$$$$$$$$$$.##"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"(&amp;,&amp;&amp;&amp;,&amp;&amp;&amp;,&amp;&amp;&amp;.)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"&lt;&lt;&lt;&lt;,&lt;&lt;&lt;,&lt;&lt;&lt;,&lt;&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"$************.**"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"---$************.**"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"+-+################"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"abc: ################+-+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmtlong</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">8494493</literal></expr></argument>, <argument><expr><literal type="string">"+&lt;&lt;&lt;&lt;,&lt;&lt;&lt;,&lt;&lt;&lt;,&lt;&lt;&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_return</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ret</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch<condition>(<expr><name>ret</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPG_INFORMIX_ENOTDMY</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(ECPG_INFORMIX_ENOTDMY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPG_INFORMIX_ENOSHORTDATE</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(ECPG_INFORMIX_ENOSHORTDATE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPG_INFORMIX_BAD_DAY</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(ECPG_INFORMIX_BAD_DAY)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPG_INFORMIX_BAD_MONTH</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(ECPG_INFORMIX_BAD_MONTH)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(unknown ret: %d)"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
