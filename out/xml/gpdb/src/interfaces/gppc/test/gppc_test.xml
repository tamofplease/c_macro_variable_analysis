<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/gppc/test/gppc_test.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gppc_test.c
 *	  libgppc test program
 *
 * Portions Copyright (c) 2012, Greenplum Inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/interfaces/gppc/test/gppc_test/gppc_test.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gppc.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>allocate_a_lot</name><parameter_list>(<parameter><decl><type><name>GppcMemoryContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcMemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>GppcMemoryContextSwitchTo</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * 900M bytes, completely depending on the default setting,
		 * but it's fairly reasonable, I believe...
		 */</comment>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>GppcAlloc</name><argument_list>(<argument><expr><literal type="number">900</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>GppcMemoryContextReset</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>GppcMemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>test_reset_current_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>test_reset_current_memory</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>test_reset_current_memory</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>allocate_a_lot</name><argument_list>(<argument><expr><call><name>GppcGetCurrentMemoryContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>test_reset_child_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>test_reset_child_memory</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>test_reset_child_memory</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcMemoryContext</name></type> <name>current</name></decl>, <decl><type ref="prev"/><name>child</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>	   <modifier>*</modifier></type><name>my_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>current</name> <operator>=</operator> <call><name>GppcGetCurrentMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>child</name> <operator>=</operator> <call><name>GppcMemoryContextCreate</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>my_ptr</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>GppcAlloc</name><argument_list>(<argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">42</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>allocate_a_lot</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Should still be valid. */</comment>
	<expr_stmt><expr><call><name>GPPC_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>my_ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>test_interrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>test_interrupt</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>test_interrupt</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>GppcCheckForInterrupts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"GppcCheckForInterrupts did not catch error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
