<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/gppc/test/gppc_demo.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gppc_test.c
 *	  libgppc client program
 *
 * Portions Copyright (c) 2012, Greenplum Inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/interfaces/gppc/test/gppc_demo/gppc_demo.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gppc.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>oidcheckfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>oidcheckfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>oidcheckfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We use INT4 as the result type, because  RETURN_OID macros are not prepared.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"bool"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidBool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"char"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"int2"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidInt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"int4"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidInt4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"int8"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidInt8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"float4"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidFloat4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"float8"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidFloat8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"varchar"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidVarChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"bpchar"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidBpChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"bytea"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidBytea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"numeric"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidNumeric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"date"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"timetz"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidTimeTz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"timestamptz"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>GppcOidTimestampTz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>boolfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>boolfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>boolfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcBool</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_BOOL</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>charfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>charfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>charfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcChar</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_CHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_CHAR</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>int2mulfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>int2mulfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>int2mulfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcInt2</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_INT2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcInt2</name></type>	<name>arg2</name> <init>= <expr><call><name>GPPC_GETARG_INT2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_INT2</name><argument_list>(<argument><expr><name>arg1</name> <operator>*</operator> <name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>int4func1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>int4func1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>int4func1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>nargs</name> <init>= <expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcInt4</name></type>	<name>arg1</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>arg1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>arg1</name> <operator>=</operator> <call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>int8plusfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>int8plusfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>int8plusfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcInt8</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_INT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcInt8</name></type>	<name>arg2</name> <init>= <expr><call><name>GPPC_GETARG_INT8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_INT8</name><argument_list>(<argument><expr><name>arg1</name> <operator>+</operator> <name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>float4func1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>float4func1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>float4func1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcFloat4</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>arg1</name> <operator>+</operator> <literal type="number">1.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>float8func1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>float8func1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>float8func1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcFloat8</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_FLOAT8</name><argument_list>(<argument><expr><name>arg1</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>textdoublefunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>textdoublefunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>textdoublefunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcText</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>clen</name> <init>= <expr><call><name>GppcGetTextLength</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcText</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcAllocText</name><argument_list>(<argument><expr><name>clen</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>clen</name></expr></argument>, <argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>textgenfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>textgenfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>textgenfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcText</name></type>	<name>result</name> <init>= <expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><literal type="string">"cstring result"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>textcopyfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>textcopyfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>textcopyfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcText</name></type>	<name>copy</name> <init>= <expr><call><name>GPPC_GETARG_TEXT_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcText</name></type>	<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcBool</name></type>	<name>needcopy</name> <init>= <expr><call><name>GPPC_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><ternary><condition><expr><name>needcopy</name></expr> ?</condition><then> <expr><name>copy</name></expr> </then><else>: <expr><name>arg</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>varchardoublefunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>varchardoublefunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>varchardoublefunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcVarChar</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_VARCHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>clen</name> <init>= <expr><call><name>GppcGetVarCharLength</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcVarChar</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcAllocVarChar</name><argument_list>(<argument><expr><name>clen</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetVarCharPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GppcGetVarCharPointer</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetVarCharPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>clen</name></expr></argument>, <argument><expr><call><name>GppcGetVarCharPointer</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_VARCHAR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>varchargenfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>varchargenfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>varchargenfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcVarChar</name></type>	<name>result</name> <init>= <expr><call><name>GppcCStringGetVarChar</name><argument_list>(<argument><expr><literal type="string">"cstring result"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_VARCHAR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>varcharcopyfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>varcharcopyfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>varcharcopyfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcVarChar</name></type>	<name>copy</name> <init>= <expr><call><name>GPPC_GETARG_VARCHAR_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcVarChar</name></type>	<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_VARCHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcBool</name></type>	<name>needcopy</name> <init>= <expr><call><name>GPPC_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>GppcGetVarCharPointer</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_VARCHAR</name><argument_list>(<argument><expr><ternary><condition><expr><name>needcopy</name></expr> ?</condition><then> <expr><name>copy</name></expr> </then><else>: <expr><name>arg</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>bpchardoublefunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>bpchardoublefunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>bpchardoublefunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcBpChar</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_BPCHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>clen</name> <init>= <expr><call><name>GppcGetBpCharLength</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcBpChar</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcAllocBpChar</name><argument_list>(<argument><expr><name>clen</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetBpCharPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GppcGetBpCharPointer</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetBpCharPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>clen</name></expr></argument>, <argument><expr><call><name>GppcGetBpCharPointer</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_BPCHAR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>bpchargenfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>bpchargenfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>bpchargenfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcBpChar</name></type>	<name>result</name> <init>= <expr><call><name>GppcCStringGetBpChar</name><argument_list>(<argument><expr><literal type="string">"cstring result"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_BPCHAR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>bpcharcopyfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>bpcharcopyfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>bpcharcopyfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcBpChar</name></type>	<name>copy</name> <init>= <expr><call><name>GPPC_GETARG_BPCHAR_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcBpChar</name></type>	<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_BPCHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcBool</name></type>	<name>needcopy</name> <init>= <expr><call><name>GPPC_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>GppcGetBpCharPointer</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_BPCHAR</name><argument_list>(<argument><expr><ternary><condition><expr><name>needcopy</name></expr> ?</condition><then> <expr><name>copy</name></expr> </then><else>: <expr><name>arg</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>errfunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>errfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>errfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcText</name></type>	<name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>GppcTextGetCString</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>errfunc_varchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>errfunc_varchar</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>errfunc_varchar</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcVarChar</name></type> <name>tempBuf</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GppcVarChar</name></type>    <name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_VARCHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type>          <name>len</name> <init>= <expr><call><name>GppcGetVarCharLength</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tempBuf</name> <operator>=</operator> <call><name>GppcAllocVarChar</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>GppcVarCharGetCString</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Test GppcFree() */</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetVarCharPointer</name><argument_list>(<argument><expr><name>tempBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GppcGetVarCharPointer</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcFree</name><argument_list>(<argument><expr><name>tempBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>errfunc_bpchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>errfunc_bpchar</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>errfunc_bpchar</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcBpChar</name></type>    <name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_BPCHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>       <modifier>*</modifier></type><name>cstr</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>cstr</name> <operator>=</operator> <call><name>GppcBpCharGetCString</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>argisnullfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>argisnullfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>argisnullfunc</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>gppc_func_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>gppc_func_text</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>gppc_func_text</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>GppcGetDatabaseEncoding</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>GPPC_UTF8</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Database encoding must be UTF8."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Using GppcDatabaseEncodingMaxLength() */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GppcDatabaseEncodingMaxLength</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>GppcText</name></type>        <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
        <comment type="block">/* Using GppcAlloc0(size_t); */</comment>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GppcAlloc0</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>tempChar</name><index>[]</index></name> <init>= <expr><literal type="string">"This gppc_func_text call has no arguments."</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tempChar</name></expr>;</expr_stmt>
        <comment type="block">/* build GppcText from C string and reset the length of 
           variable length data */</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>GppcText</name></type>        <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcText</name></type>        <name>arg1</name> <init>= <expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcBool</name></type>        <name>arg2</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type>          <name>clen</name> <init>= <expr><call><name>GppcGetTextLength</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* has 2nd argument */</comment>
            <expr_stmt><expr><name>arg2</name> <operator>=</operator> <call><name>GPPC_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* assuming 2nd arg is a boolean */</comment>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>tempChar</name><index>[]</index></name> <init>= <expr><literal type="string">"This gppc_func_text call has one or more arguments. "</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cstrlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tempChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Initialize using GppcAllocText */</comment>
        <if_stmt><if>if <condition>(<expr><name>arg2</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GppcAllocText</name><argument_list>(<argument><expr><name>cstrlen</name> <operator>+</operator> <name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Note GppcAllocText only initializes and allocates GppcText
               without filling its content.
               Need to use memcpy to fill the content. 
               Using GppcGetTextPointer() and GppcCStringGetText() */</comment>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>tempChar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cstrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>cstrlen</name></expr></argument>, <argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GppcAllocText</name><argument_list>(<argument><expr><name>cstrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>tempChar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cstrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>gppc_func_varchar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>gppc_func_varchar</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>gppc_func_varchar</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>   
    <decl_stmt><decl><type><name>GppcVarChar</name></type>        <name>res</name></decl>;</decl_stmt>
    <comment type="block">/* Using GppcDatabaseEncodingMaxLength()   */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GppcDatabaseEncodingMaxLength</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
        <comment type="block">/* Using GppcAlloc0(size_t) */</comment>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GppcAlloc0</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>tempChar</name><index>[]</index></name> <init>= <expr><literal type="string">"This gppc_func_varchar call has no arguments."</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tempChar</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GppcCStringGetVarChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GPPC_RETURN_VARCHAR</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content> 
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
        <comment type="block">/* Using GppcAlloc(size_t) */</comment>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GppcAlloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Using GppcRealloc(char *, size_t) */</comment>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>GppcRealloc</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>tempChar</name><index>[]</index></name> <init>= <expr><literal type="string">"This gppc_func_varchar call has one or more arguments."</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>tempChar</name></expr>;</expr_stmt>
        <comment type="block">/* build GppcText from C string and reset the length of 
           variable length data */</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GppcCStringGetVarChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GPPC_RETURN_VARCHAR</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>byteafunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>byteafunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>byteafunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcBytea</name></type>	    <name>bytea</name> <init>= <expr><call><name>GPPC_GETARG_BYTEA_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>mem</name> <init>= <expr><call><name>GppcGetByteaPointer</name><argument_list>(<argument><expr><name>bytea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <comment type="block">/* bytea2 should not be changed */</comment>
	<decl_stmt><decl><type><name>GppcBytea</name></type>	    <name>bytea2</name> <init>= <expr><call><name>GPPC_GETARG_BYTEA</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_BYTEA</name><argument_list>(<argument><expr><name>bytea2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>byteafunc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>byteafunc2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>byteafunc2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcBytea</name></type>	<name>bytea</name> <init>= <expr><call><name>GPPC_GETARG_BYTEA_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>mem</name> <init>= <expr><call><name>GppcGetByteaPointer</name><argument_list>(<argument><expr><name>bytea</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>mem</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_BYTEA</name><argument_list>(<argument><expr><name>bytea</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>numericfunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>numericfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>numericfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcNumeric</name></type>		<name>numeric</name> <init>= <expr><call><name>GPPC_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>GppcNumericGetCString</name><argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="char">'0'</literal> <operator>&lt;=</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'8'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>GPPC_RETURN_NUMERIC</name><argument_list>(<argument><expr><call><name>GppcCStringGetNumeric</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>numericfunc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>numericfunc2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>numericfunc2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcNumeric</name></type>		<name>numeric</name> <init>= <expr><call><name>GPPC_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_FLOAT8</name><argument_list>(<argument><expr><call><name>GppcNumericGetFloat8</name><argument_list>(<argument><expr><name>numeric</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>numericfunc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>numericfunc3</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>numericfunc3</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcFloat8</name></type>		<name>flt</name> <init>= <expr><call><name>GPPC_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_NUMERIC</name><argument_list>(<argument><expr><call><name>GppcFloat8GetNumeric</name><argument_list>(<argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>numericdef1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>numericdef1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>numericdef1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcInt4</name></type>		<name>typmod</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16_t</name></type>			<name>precision</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>			<name><name>buf</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GppcGetNumericDef</name><argument_list>(<argument><expr><name>typmod</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>precision</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scale</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"NUMERIC(%d, %d)"</literal></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"NUMERIC()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>datefunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>datefunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>datefunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcDate</name></type>		<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_DATE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTm</name></type>			<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GppcDateGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_DATE</name><argument_list>(<argument><expr><call><name>GppcTmGetDate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>datefunc1_nochange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>datefunc1_nochange</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>datefunc1_nochange</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcDate</name></type>                <name>arg</name> <init>= <expr><call><name>GPPC_GETARG_DATE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTm</name></type>                  <name>tm</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>GppcDateGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_DATE</name><argument_list>(<argument><expr><call><name>GppcTmGetDate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>datefunc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>datefunc2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>datefunc2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcDate</name></type>                <name>arg</name> <init>= <expr><call><name>GPPC_GETARG_DATE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTm</name></type>                  <name>tm</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>GppcDateGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_DATE</name><argument_list>(<argument><expr><call><name>GppcTmGetDate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>datefunc3_year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>datefunc3_year</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>datefunc3_year</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcDate</name></type>                <name>arg</name> <init>= <expr><call><name>GPPC_GETARG_DATE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTm</name></type>                  <name>tm</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>GppcDateGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_DATE</name><argument_list>(<argument><expr><call><name>GppcTmGetDate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>datefunc3_mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>datefunc3_mon</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>datefunc3_mon</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcDate</name></type>                <name>arg</name> <init>= <expr><call><name>GPPC_GETARG_DATE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTm</name></type>                  <name>tm</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>GppcDateGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_DATE</name><argument_list>(<argument><expr><call><name>GppcTmGetDate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>datefunc3_mday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>datefunc3_mday</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>datefunc3_mday</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcDate</name></type>                <name>arg</name> <init>= <expr><call><name>GPPC_GETARG_DATE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTm</name></type>                  <name>tm</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>GppcDateGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_DATE</name><argument_list>(<argument><expr><call><name>GppcTmGetDate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>timefunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>timefunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>timefunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcTime</name></type>		<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_TIME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTm</name></type>			<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GppcTimeGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TIME</name><argument_list>(<argument><expr><call><name>GppcTmGetTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>timetzfunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>timetzfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>timetzfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcTimeTz</name></type>		<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_TIMETZ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTm</name></type>			<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GppcTimeTzGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TIMETZ</name><argument_list>(<argument><expr><call><name>GppcTmGetTimeTz</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>timestampfunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>timestampfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>timestampfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcTimestamp</name></type>	<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTm</name></type>			<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GppcTimestampGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TIMESTAMP</name><argument_list>(<argument><expr><call><name>GppcTmGetTimestamp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>timestamptzfunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>timestamptzfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>timestamptzfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcTimestampTz</name></type>	<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTm</name></type>			<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GppcTimestampTzGetTm</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TIMESTAMPTZ</name><argument_list>(<argument><expr><call><name>GppcTmGetTimestampTz</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SPI test 1: run query, get the attribute by number at the final row as string
 */</comment>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>spifunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>spifunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>spifunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcInt4</name></type>		<name>attno</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcSPIResult</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>processed</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>GppcSPIGetValue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SPI test 2: run query, get the attribute by name at the final row as string
 */</comment>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>spifunc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>spifunc2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>spifunc2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>attname</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcSPIResult</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>processed</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>GppcSPIGetValueByName</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>attname</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SPI test 3: run query, get the attribute by number at the final row as datum
 */</comment>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>spifunc3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>spifunc3</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>spifunc3</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcInt4</name></type>		<name>attno</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcSPIResult</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>		<name>datum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name>isnull</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>processed</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>GppcSPIGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><call><name>GppcDatumGetText</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SPI test 4: run query, get the attribute by name at the final row as datum
 */</comment>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>spifunc4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>spifunc4</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>spifunc4</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>attname</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcSPIResult</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>		<name>datum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name>isnull</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>processed</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>GppcSPIGetDatumByName</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>attname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><call><name>GppcDatumGetText</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SPI test 5: select query, using tcount
 */</comment>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>spifunc5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>spifunc5</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>spifunc5</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcInt4</name></type>                <name>attno</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcInt4</name></type>                <name>tcount</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcSPIResult</name></type>   <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>tcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>processed</name></name></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>GppcSPIGetValue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SPI test 5a: select query, using tcount, set makecopy = false
 */</comment>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>spifunc5a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>spifunc5a</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>spifunc5a</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcInt4</name></type>            <name>attno</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcInt4</name></type>            <name>tcount</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcSPIResult</name></type>       <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcInt4</name></type>            <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// count the total number of chars in the result set.</comment>

        <if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>tcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>processed</name></name></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>GppcSPIGetValue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//set makcopy = false</comment>
                <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_INT4</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * SPI test 6: run DML query, using tcount, return NULL
 */</comment>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>spifunc6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>spifunc6</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>spifunc6</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcInt4</name></type>            <name>tcount</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* connTestFlag for connection test
         * 1: connect again when already connected
         * 2: try to execute without connection
         * 3: close connection again when it has been closed already
         */</comment>
        <decl_stmt><decl><type><name>GppcInt4</name></type>            <name>connTestFlag</name> <init>= <expr><call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcSPIResult</name></type>   <name>result</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>connTestFlag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error: already connected and cannot connect again."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>connTestFlag</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
		<expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>tcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>rescode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"query execution error: Connection has been closed unexpectedly."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>connTestFlag</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
        <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"connect error: connection has been closed and cannot be closed again."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The error handler.  We can call GppcReport with INFO when ERROR, since it's not
 * infinite recursion.  For test purpose, set 'x' to message when WARNING.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>errorcallback</name><parameter_list>(<parameter><decl><type><name>GppcReportInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcText</name></type>	<name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcReportLevel</name></type> <name>elevel</name> <init>= <expr><call><name>GppcGetReportLevel</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rptMessage</name> <init>= <expr><call><name>GppcGetReportMessage</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>rptMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>GppcAllocText</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rptMessage</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
	<if_stmt><if>if <condition>(<expr><name>elevel</name> <operator>==</operator> <name>GPPC_WARNING</name> <operator>&amp;&amp;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><call><name>GppcGetTextLength</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>elevel</name> <operator>==</operator> <name>GPPC_ERROR</name> <operator>&amp;&amp;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_INFO</name></expr></argument>, <argument><expr><literal type="string">"inside callback: %s"</literal></expr></argument>, <argument><expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>elevel</name> <operator>==</operator> <name>GPPC_NOTICE</name> <operator>&amp;&amp;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_INFO</name></expr></argument>, <argument><expr><literal type="string">"inside callback message is: %s"</literal></expr></argument>, <argument><expr><name>rptMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>errorcallbackfunc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>errorcallbackfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>errorcallbackfunc1</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcText</name></type>		<name>arg</name> <init>= <expr><call><name>GPPC_GETARG_TEXT_COPY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>carg</name> <init>= <expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcReportCallbackState</name></type>	<name>cbinfo</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cbinfo</name> <operator>=</operator> <call><name>GppcInstallReportCallback</name><argument_list>(<argument><expr><name>errorcallback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>carg</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_INFO</name></expr></argument>, <argument><expr><literal type="string">"info emit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>carg</name></expr></argument>, <argument><expr><literal type="string">"warning"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_WARNING</name></expr></argument>, <argument><expr><literal type="string">"warning emit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>carg</name></expr></argument>, <argument><expr><literal type="string">"notice"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"notice emit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>carg</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error emit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>GppcUninstallReportCallback</name><argument_list>(<argument><expr><name>cbinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GP_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">40200</literal></expr></cpp:if>
<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>tablefunc_describe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>tablefunc_describe</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>tablefunc_describe</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcText</name></type> <name>arg</name> <init>= <expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><literal type="string">"Error callback in describe function"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTupleDesc</name></type>	<name>tdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcInt4</name></type>		<name>avalue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name>isnull</name></decl>, <decl><type ref="prev"/><name>iserror</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTupleDesc</name></type>	<name>odesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcReportCallbackState</name></type>	<name>cbstate</name></decl>;</decl_stmt>

	<comment type="block">/* For a test purpose to make sure it's working in the describe func */</comment>
	<expr_stmt><expr><name>cbstate</name> <operator>=</operator> <call><name>GppcInstallReportCallback</name><argument_list>(<argument><expr><name>errorcallback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fetch and validate input */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of describe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Now get the tuple descriptor for the ANYTABLE we received */</comment>
	<expr_stmt><expr><name>tdesc</name> <operator>=</operator> <call><name>GPPC_TF_INPUT_DESC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot build tuple descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>avalue</name> <operator>=</operator> <call><name>GPPC_TF_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"function is mal-declared"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"the second argument should not be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>avalue</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>avalue</name></expr></argument> &gt;</argument_list></name> <call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid column position %d"</literal></expr></argument>, <argument><expr><name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Print out the attlen -- just an excuse to use GppcTupleDescAttrLen() */</comment>
	<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"attlen is %d"</literal></expr></argument>, <argument><expr><call><name>GppcTupleDescAttrLen</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build an output tuple a single column based on the column number above */</comment>
	<expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GppcCreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
						   <argument><expr><call><name>GppcTupleDescAttrName</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><call><name>GppcTupleDescAttrTypmod</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GppcUninstallReportCallback</name><argument_list>(<argument><expr><name>cbstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Finally return that tupdesc */</comment>
	<expr_stmt><expr><call><name>GPPC_RETURN_TUPLEDESC</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>tablefunc_project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>tablefunc_project</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>tablefunc_project</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcFuncCallContext</name></type>	<name>fctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcAnyTable</name></type>	<name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTupleDesc</name></type>	<name>out_tupdesc</name></decl>, <decl><type ref="prev"/><name>in_tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcHeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>position</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>		<name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>		<name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sanity checking, shouldn't occur if our CREATE FUNCTION in SQL is done
	 * correctly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of project"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Basic set-returning function (SRF) protocol, setup the context */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get the next value from the input scan */</comment>
	<expr_stmt><expr><name>out_tupdesc</name> <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_tupdesc</name> <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Based on what the describe callback should have setup */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>position</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>position</name></expr></argument> &gt;</argument_list></name> <call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid column position(%d)"</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid column length in out_tupdesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator>
			<call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"type mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* check for end of scan */</comment>
	<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Construct the output tuple and convert to a datum */</comment>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Return the next result */</comment>
	<expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>describe_spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>describe_spi</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>describe_spi</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcTupleDesc</name></type>	<name>tdesc</name></decl>, <decl><type ref="prev"/><name>odesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcSPIResult</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name>isnull</name></decl>, <decl><type ref="prev"/><name>iserror</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>colname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>		<name>d_colname</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tdesc</name> <operator>=</operator> <call><name>GPPC_TF_INPUT_DESC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to SPI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Get query string */</comment>
	<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_TF_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name> <operator>||</operator> <name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of describe_spi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>processed</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>colname</name> <operator>=</operator> <call><name>GppcSPIGetValue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>colname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>colname</name> <operator>=</operator> <literal type="string">"?column?"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build tuple desc */</comment>
	<expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GppcCreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
						   <argument><expr><name>colname</name></expr></argument>, <argument><expr><name>GppcOidText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>d_colname</name> <operator>=</operator> <call><name>GppcTextGetDatum</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>colname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Pass the query to project */</comment>
	<expr_stmt><expr><call><name>GPPC_TF_SET_USERDATA</name><argument_list>(<argument><expr><call><name>GppcDatumGetByteaCopy</name><argument_list>(<argument><expr><name>d_colname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GPPC_RETURN_TUPLEDESC</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>project_spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>project_spi</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>project_spi</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcFuncCallContext</name></type>	<name>fctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcAnyTable</name></type>		<name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTupleDesc</name></type>		<name>odesc</name></decl>, <decl><type ref="prev"/><name>idesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcHeapTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>				<name><name>colname</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>			<name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>				<name><name>isnull</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>			<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Get the user context from the describe function */</comment>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>colname</name></expr></argument>,
		   <argument><expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GppcDatumGetText</name><argument_list>(<argument><expr><call><name>GppcByteaGetDatum</name><argument_list>(<argument><expr><call><name>GPPC_TF_GET_USERDATA</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get the next value from the input scan */</comment>
	<expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>idesc</name> <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcTextGetDatum</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(
				<argument><expr><call><name>strcat</name><argument_list>(<argument><expr><name>colname</name></expr></argument>, <argument><expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GppcDatumGetText</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>MySession</name>
<block>{
	<decl_stmt><decl><type><name>GppcReportCallbackState</name></type>	<name>cbstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>				   <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
}</block></struct></type> <name>MySession</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tfcallback</name><parameter_list>(<parameter><decl><type><name>GppcReportInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcReportLevel</name></type>		<name>elevel</name> <init>= <expr><call><name>GppcGetReportLevel</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>elevel</name> <operator>==</operator> <name>GPPC_ERROR</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MySession</name>			   <modifier>*</modifier></type><name>sess</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>sess</name> <operator>=</operator> <operator>(</operator><name>MySession</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_INFO</name></expr></argument>, <argument><expr><literal type="string">"message: %s"</literal></expr></argument>, <argument><expr><name><name>sess</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GppcFree</name><argument_list>(<argument><expr><name>sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>project_errorcallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>project_errorcallback</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>project_errorcallback</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcFuncCallContext</name></type>	<name>fctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcAnyTable</name></type>		<name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTupleDesc</name></type>		<name>odesc</name></decl>, <decl><type ref="prev"/><name>idesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcHeapTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name>		   <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>			   <modifier>*</modifier></type><name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>					<name>i</name></decl>, <decl><type ref="prev"/><name>attnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>			<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MySession</name>				   <modifier>*</modifier></type><name>sess</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sess</name> <operator>=</operator> <operator>(</operator><name>MySession</name> <operator>*</operator><operator>)</operator> <call><name>GppcSRFAlloc</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MySession</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sess</name><operator>-&gt;</operator><name>cbstate</name></name> <operator>=</operator> <call><name>GppcInstallReportCallback</name><argument_list>(<argument><expr><name>tfcallback</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sess</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>GppcSRFAlloc</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>sess</name><operator>-&gt;</operator><name>message</name></name></expr></argument>, <argument><expr><literal type="string">"Hello, world!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Save session in the SRF context */</comment>
		<expr_stmt><expr><call><name>GppcSRFSave</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Return the input tuple as is, but it seems
	 * TableFunction doesn't accept tuples with &lt;idesc&gt;, so copy
	 * everything to a new tuple.
	 */</comment>
	<expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>idesc</name> <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* End of the input scan */</comment>
		<decl_stmt><decl><type><name>MySession</name>				   <modifier>*</modifier></type><name>sess</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>sess</name> <operator>=</operator> <operator>(</operator><name>MySession</name> <operator>*</operator><operator>)</operator> <call><name>GppcSRFRestore</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GppcUninstallReportCallback</name><argument_list>(<argument><expr><name><name>sess</name><operator>-&gt;</operator><name>cbstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GppcFree</name><argument_list>(<argument><expr><name>sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>attnum</name> <operator>=</operator> <call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>idesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>GppcAlloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GppcDatum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>isnull</name> <operator>=</operator> <call><name>GppcAlloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>attnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>isnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"first attribute is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* GP_VERSION_NUM &gt;= 40200 */</comment>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>test_encoding_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>test_encoding_name</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>test_encoding_name</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcText</name></type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>GppcDatabaseEncodingName</name><argument_list>(<argument><expr><operator>(</operator><name>GppcEncoding</name><operator>)</operator> <call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>GppcAllocText</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_TEXT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
