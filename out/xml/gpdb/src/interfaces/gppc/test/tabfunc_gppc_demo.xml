<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/gppc/test/tabfunc_gppc_demo.c"><comment type="block">/*
 * Table Function demo using GPPC-1.1 API
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gppc.h"</cpp:file></cpp:include>

<comment type="block">/*
 * The error handler.  We can call GppcReport with INFO when ERROR, since it's not
 * infinite recursion.  For test purpose, set 'x' to message when WARNING.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>errorcallback</name><parameter_list>(<parameter><decl><type><name>GppcReportInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcText</name></type> <name>message</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcReportLevel</name></type>         <name>elevel</name> <init>= <expr><call><name>GppcGetReportLevel</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>                   <modifier>*</modifier></type><name>rptMessage</name> <init>= <expr><call><name>GppcGetReportMessage</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>rptMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>GppcAllocText</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rptMessage</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>elevel</name> <operator>==</operator> <name>GPPC_WARNING</name> <operator>&amp;&amp;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>GppcGetTextPointer</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><call><name>GppcGetTextLength</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>elevel</name> <operator>==</operator> <name>GPPC_ERROR</name> <operator>&amp;&amp;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_INFO</name></expr></argument>, <argument><expr><literal type="string">"inside callback: %s"</literal></expr></argument>, <argument><expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>elevel</name> <operator>==</operator> <name>GPPC_NOTICE</name> <operator>&amp;&amp;</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_INFO</name></expr></argument>, <argument><expr><literal type="string">"inside callback message is: %s"</literal></expr></argument>, <argument><expr><name>rptMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>tablefunc_describe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>tablefunc_describe</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>tablefunc_describe</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcText</name></type> <name>arg</name> <init>= <expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><literal type="string">"Error callback in describe function"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>   <name>tdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcInt4</name></type>                <name>avalue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                    <name>isnull</name></decl>, <decl><type ref="prev"/><name>iserror</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>   <name>odesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcReportCallbackState</name></type> <name>cbstate</name></decl>;</decl_stmt>

        <comment type="block">/* For a test purpose to make sure it's working in the describe func */</comment>
        <expr_stmt><expr><name>cbstate</name> <operator>=</operator> <call><name>GppcInstallReportCallback</name><argument_list>(<argument><expr><name>errorcallback</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Fetch and validate input */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of describe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Now get the tuple descriptor for the ANYTABLE we received */</comment>
        <expr_stmt><expr><name>tdesc</name> <operator>=</operator> <call><name>GPPC_TF_INPUT_DESC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot build tuple descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>avalue</name> <operator>=</operator> <call><name>GPPC_TF_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"function is mal-declared"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"the second argument should not be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>avalue</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>avalue</name></expr></argument> &gt;</argument_list></name> <call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid column position %d"</literal></expr></argument>, <argument><expr><name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Print out the attlen -- just an excuse to use GppcTupleDescAttrLen() */</comment>
        <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_NOTICE</name></expr></argument>, <argument><expr><literal type="string">"attlen is %d"</literal></expr></argument>, <argument><expr><call><name>GppcTupleDescAttrLen</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Build an output tuple a single column based on the column number above */</comment>
        <expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GppcCreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                                                   <argument><expr><call><name>GppcTupleDescAttrName</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                   <argument><expr><call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                   <argument><expr><call><name>GppcTupleDescAttrTypmod</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GppcUninstallReportCallback</name><argument_list>(<argument><expr><name>cbstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Finally return that tupdesc */</comment>
        <expr_stmt><expr><call><name>GPPC_RETURN_TUPLEDESC</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>tablefunc_project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>tablefunc_project</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>tablefunc_project</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcFuncCallContext</name></type>     <name>fctx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcAnyTable</name></type>    <name>scan</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>   <name>out_tupdesc</name></decl>, <decl><type ref="prev"/><name>in_tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcHeapTuple</name></type>   <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>                             <name>position</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>               <name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                    <name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>               <name>result</name></decl>;</decl_stmt>

        <comment type="block">/*
         * Sanity checking, shouldn't occur if our CREATE FUNCTION in SQL is done
         * correctly.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of project"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Basic set-returning function (SRF) protocol, setup the context */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get the next value from the input scan */</comment>
        <expr_stmt><expr><name>out_tupdesc</name> <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>in_tupdesc</name> <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Based on what the describe callback should have setup */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>position</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>position</name></expr></argument> &gt;</argument_list></name> <call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid column position(%d)"</literal></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid column length in out_tupdesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* if (GppcTupleDescAttrType(out_tupdesc, 0) !=
                        GppcTupleDescAttrType(in_tupdesc, 0))
                GppcReport(GPPC_ERROR, "type mismatch");
        */</comment>
        <comment type="block">/* check for end of scan */</comment>
        <if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Construct the output tuple and convert to a datum */</comment>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Return the next result */</comment>
        <expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>describe_spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>describe_spi</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>describe_spi</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>   <name>tdesc</name></decl>, <decl><type ref="prev"/><name>odesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcSPIResult</name></type>   <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                    <name>isnull</name></decl>, <decl><type ref="prev"/><name>iserror</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>colname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>               <name>d_colname</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>tdesc</name> <operator>=</operator> <call><name>GPPC_TF_INPUT_DESC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GppcSPIConnect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to SPI"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Get query string */</comment>
        <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GPPC_TF_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isnull</name> <operator>||</operator> <name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of describe_spi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcSPIExec</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>processed</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>colname</name> <operator>=</operator> <call><name>GppcSPIGetValue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>colname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>colname</name> <operator>=</operator> <literal type="string">"?column?"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>GppcSPIFinish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Build tuple desc */</comment>
        <expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GppcCreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                                                   <argument><expr><name>colname</name></expr></argument>, <argument><expr><name>GppcOidText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>d_colname</name> <operator>=</operator> <call><name>GppcTextGetDatum</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>colname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Pass the query to project */</comment>
        <expr_stmt><expr><call><name>GPPC_TF_SET_USERDATA</name><argument_list>(<argument><expr><call><name>GppcDatumGetByteaCopy</name><argument_list>(<argument><expr><name>d_colname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_TUPLEDESC</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>project_spi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>project_spi</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>project_spi</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcFuncCallContext</name></type>     <name>fctx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcAnyTable</name></type>            <name>scan</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>           <name>odesc</name></decl>, <decl><type ref="prev"/><name>idesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcHeapTuple</name></type>           <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type>                            <name><name>colname</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                       <name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                            <name><name>isnull</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                       <name>result</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Get the user context from the describe function */</comment>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>colname</name></expr></argument>,
                   <argument><expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GppcDatumGetText</name><argument_list>(<argument><expr><call><name>GppcByteaGetDatum</name><argument_list>(<argument><expr><call><name>GPPC_TF_GET_USERDATA</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get the next value from the input scan */</comment>
        <expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>idesc</name> <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>isnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcTextGetDatum</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(
                                <argument><expr><call><name>strcat</name><argument_list>(<argument><expr><name>colname</name></expr></argument>, <argument><expr><call><name>GppcTextGetCString</name><argument_list>(<argument><expr><call><name>GppcDatumGetText</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>MySession</name>
<block>{
        <decl_stmt><decl><type><name>GppcReportCallbackState</name></type> <name>cbstate</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>                               <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
}</block></struct></type> <name>MySession</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tfcallback</name><parameter_list>(<parameter><decl><type><name>GppcReportInfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcReportLevel</name></type>         <name>elevel</name> <init>= <expr><call><name>GppcGetReportLevel</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>elevel</name> <operator>==</operator> <name>GPPC_ERROR</name></expr>)</condition>
        <block>{<block_content>
                <decl_stmt><decl><type><name>MySession</name>                          <modifier>*</modifier></type><name>sess</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>sess</name> <operator>=</operator> <operator>(</operator><name>MySession</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_INFO</name></expr></argument>, <argument><expr><literal type="string">"message: %s"</literal></expr></argument>, <argument><expr><name><name>sess</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GppcFree</name><argument_list>(<argument><expr><name>sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>project_errorcallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>project_errorcallback</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type> <name>project_errorcallback</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcFuncCallContext</name></type>     <name>fctx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcAnyTable</name></type>            <name>scan</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>           <name>odesc</name></decl>, <decl><type ref="prev"/><name>idesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcHeapTuple</name></type>           <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name>                  <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name>                       <modifier>*</modifier></type><name>isnull</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>                                     <name>i</name></decl>, <decl><type ref="prev"/><name>attnum</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                       <name>result</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
                <decl_stmt><decl><type><name>MySession</name>                                  <modifier>*</modifier></type><name>sess</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sess</name> <operator>=</operator> <operator>(</operator><name>MySession</name> <operator>*</operator><operator>)</operator> <call><name>GppcSRFAlloc</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MySession</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sess</name><operator>-&gt;</operator><name>cbstate</name></name> <operator>=</operator> <call><name>GppcInstallReportCallback</name><argument_list>(<argument><expr><name>tfcallback</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sess</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>GppcSRFAlloc</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>sess</name><operator>-&gt;</operator><name>message</name></name></expr></argument>, <argument><expr><literal type="string">"Hello, world!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Save session in the SRF context */</comment>
                <expr_stmt><expr><call><name>GppcSRFSave</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Return the input tuple as is, but it seems
         * TableFunction doesn't accept tuples with &lt;idesc&gt;, so copy
         * everything to a new tuple.
         */</comment>
        <expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>idesc</name> <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
                <comment type="block">/* End of the input scan */</comment>
                <decl_stmt><decl><type><name>MySession</name>                                  <modifier>*</modifier></type><name>sess</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>sess</name> <operator>=</operator> <operator>(</operator><name>MySession</name> <operator>*</operator><operator>)</operator> <call><name>GppcSRFRestore</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GppcUninstallReportCallback</name><argument_list>(<argument><expr><name><name>sess</name><operator>-&gt;</operator><name>cbstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GppcFree</name><argument_list>(<argument><expr><name>sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>attnum</name> <operator>=</operator> <call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>idesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>GppcAlloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GppcDatum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>isnull</name> <operator>=</operator> <call><name>GppcAlloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>attnum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>isnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"first attribute is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>mytransform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>mytransform</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>mytransform</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcFuncCallContext</name></type>	<name>fctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcAnyTable</name></type>            <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcHeapTuple</name></type>           <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTupleDesc</name></type>           <name>in_tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcTupleDesc</name></type>           <name>out_tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>               <name>tup_datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcDatum</name></type>               <name><name>out_values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name><name>out_nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* 
	 * Sanity checking, shouldn't occur if our CREATE FUNCTION in SQL is done
	 * correctly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of mytransform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Should be the first parameter */</comment>

	<comment type="block">/* Basic set-returning function (SRF) protocol, setup the context */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get the next value from the input scan */</comment>
	<expr_stmt><expr><name>in_tupdesc</name>  <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name>       <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* check for end of scan */</comment>
	<if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We expect an input of two columns (int, text) for this stupid 
	 * table function, if that is not what we got then complain.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal>		<operator>||</operator>
	    <call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GppcOidInt4</name> <operator>||</operator>
	    <call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GppcOidText</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid input tuple for function mytransform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* -----
	 * Extract fields from input tuple, there are several possibilities
	 * depending on if we want to fetch the rows by name, by number, or extract
	 * the full tuple contents.
	 *
	 *    - values[0] = GetAttributeByName(tuple-&gt;t_data, "a", &amp;nulls[0]);
	 *    - values[0] = GetAttributeByNum(tuple-&gt;t_data, 0, &amp;nulls[0]);
	 *    - heap_deform_tuple(tuple, in_tupdesc, values, nulls);
	 *
	 * In this case we have chosen to do the whole tuple at once.
	 */</comment>
        
        <comment type="block">/* Build an output tuple with 2 columns */</comment>
        <expr_stmt><expr><name>out_tupdesc</name> <operator>=</operator> <call><name>GppcCreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Initialize the 1st column using the info of 2nd column of the input */</comment>
        <expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, 
                               <argument><expr><call><name>GppcTupleDescAttrName</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>GppcTupleDescAttrTypmod</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Initialize the 2nd column using the info of 1st column of the input */</comment>
        <expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, 
                               <argument><expr><call><name>GppcTupleDescAttrName</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>GppcTupleDescAttrTypmod</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* For output tuple we check two columns (text, int) */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> 		 <operator>||</operator>
            <call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GppcOidText</name> <operator>||</operator>
            <call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GppcOidInt4</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid output tuple for function mytransform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
        
        <comment type="block">/* 
	 * Since we have already validated types we can form this directly
	 * into our output tuple without additional conversion.
	 */</comment>
	<expr_stmt><expr><name><name>out_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out_nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out_nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* 
	 * Final output must always be a GppcDatum, so convert the tuple as required
	 * by the API.
	 */</comment>
        <comment type="block">/* GppcBuildHeapTupleDatum is the shortcut for heap_form_tuple + HeapTupleGetDatum */</comment>
	<expr_stmt><expr><name>tup_datum</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><name>out_values</name></expr></argument>, <argument><expr><name>out_nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Extract values from input tuple, build output tuple */</comment>
	<expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>tup_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>project_describe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>project_describe</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * A more dynamic describe function that produces different results depending
 * on what sort of input it receives.
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>project_describe</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>                    <name>tdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>                    <name>odesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcInt4</name></type>                         <name>avalue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                             <name>isnull</name></decl>, <decl><type ref="prev"/><name>iserror</name></decl>;</decl_stmt>

        <comment type="block">/* Fetch and validate input, the decribe function only take one internal argument */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of describe function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Now get the tuple descriptor for the ANYTABLE we received */</comment>
        <expr_stmt><expr><name>tdesc</name> <operator>=</operator> <call><name>GPPC_TF_INPUT_DESC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
        	<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot build tuple descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* 
         * The intent of this table function is that it returns the Nth column
         * from the input, which requires us to know what N is.  We get N from
         * the second parameter to the table function.
         *
         * Try to evaluate that argument to a constant value.
         */</comment>
        <expr_stmt><expr><name>avalue</name> <operator>=</operator> <call><name>GPPC_TF_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"the 2nd argument must be an integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"function is mal-declared"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>avalue</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>avalue</name></expr></argument> &gt;</argument_list></name> <call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid column position %d"</literal></expr></argument>, <argument><expr><name>avalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Build an output tuple a single column based on the column number above */</comment>
        <expr_stmt><expr><name>odesc</name> <operator>=</operator> <call><name>GppcCreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                               <argument><expr><call><name>GppcTupleDescAttrName</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>GppcTupleDescAttrTypmod</name><argument_list>(<argument><expr><name>tdesc</name></expr></argument>, <argument><expr><name>avalue</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Finally return that tupdesc */</comment>
        <expr_stmt><expr><call><name>GPPC_RETURN_TUPLEDESC</name><argument_list>(<argument><expr><name>odesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>project</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<function><type><name>GppcDatum</name></type>
<name>project</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcFuncCallContext</name></type>        	<name>fctx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcAnyTable</name></type>                	<name>scan</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcHeapTuple</name></type> 			<name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>                   <name>in_tupdesc</name></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>                   <name>out_tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                       <name>tup_datum</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                       <name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                            <name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>                             <name>position</name></decl>;</decl_stmt>

        <comment type="block">/*
         * Sanity checking, shouldn't occur if our CREATE FUNCTION in SQL is done
         * correctly.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of project"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Should be the first parameter */</comment>
        <expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>GPPC_GETARG_INT4</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Basic set-returning function (SRF) protocol, setup the context */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get the next value from the input scan */</comment>
        <expr_stmt><expr><name>out_tupdesc</name> <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>in_tupdesc</name>  <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple</name>       <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Based on what the describe callback should have setup */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid column length in out_tupdesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><name>position</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"output tuple type mis-match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescAttrTypmod</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GppcTupleDescAttrTypmod</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><name>position</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"output tuple typmod mis-match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>position</name> <operator>&gt;</operator> <call><name>GppcTupleDescNattrs</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        	<expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"column position is out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* check for end of scan */</comment>
        <if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* -----
         * Extract fields from input tuple, there are several possibilities
         * depending on if we want to fetch the rows by name, by number, or extract
         * the full tuple contents.
         *
         *    - values[0] = GetAttributeByName(tuple-&gt;t_data, "a", &amp;nulls[0]);
         *    - values[0] = GetAttributeByNum(tuple-&gt;t_data, 0, &amp;nulls[0]);
         *    - heap_deform_tuple(tuple, in_tupdesc, values, nulls);
         *
         * In this case we have chosen to do extract by position 
         */</comment>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Construct the output tuple and convert to a datum */</comment>
        <expr_stmt><expr><name>tup_datum</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Return the next result */</comment>
        <expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>tup_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>userdata_describe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>userdata_describe</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>userdata_describe</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>        <name>tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type> 	     <name>userdata</name></decl>;</decl_stmt>
        <comment type="line">//size_t           bytes;</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>      <modifier>*</modifier></type><name>message</name> <init>= <expr><literal type="string">"copied data from describe function."</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Fetch and validate input */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of userdata_describe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Build a result tuple descriptor */</comment>
        <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>GppcCreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>GppcOidText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Prepare user data */</comment>
        <expr_stmt><expr><name>userdata</name> <operator>=</operator> <call><name>GppcTextGetDatum</name><argument_list>(<argument><expr><call><name>GppcCStringGetText</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Set to send */</comment>
        <expr_stmt><expr><call><name>GPPC_TF_SET_USERDATA</name><argument_list>(<argument><expr><call><name>GppcDatumGetBytea</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_TUPLEDESC</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>userdata_project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>userdata_project</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>userdata_project</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcFuncCallContext</name></type>  	 <name>fctx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcAnyTable</name></type>             <name>scan</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcHeapTuple</name></type>            <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>            <name>out_tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                <name>tup_datum</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                <name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                     <name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>		 <name>userdata</name></decl>;</decl_stmt>
        
        <comment type="block">/* 
         * Sanity checking, shouldn't occur if our CREATE FUNCTION in SQL is done
         * correctly.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of userdata_project"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Should be the first parameter */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get the next value from the input scan */</comment>
        <expr_stmt><expr><name>out_tupdesc</name>     <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple</name>           <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Receive message from describe function */</comment>
        <expr_stmt><expr><name>userdata</name> <operator>=</operator> <call><name>GppcByteaGetDatum</name><argument_list>(<argument><expr><call><name>GPPC_TF_GET_USERDATA</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>userdata</name></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>userdata</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
                <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>GppcDatum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="block">/* Construct the output tuple and convert to a datum */</comment>
        <expr_stmt><expr><name>tup_datum</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Return the next result */</comment>
        <expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>tup_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>userdata_describe2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>userdata_describe2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>userdata_describe2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>   <name>tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcText</name></type>        <name>value</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>        <name>isnull</name></decl>, <decl><type ref="prev"/><name>iserror</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>   <name>userdata</name></decl>;</decl_stmt>
        <comment type="line">// const char      *message = "copied data from describe function.";</comment>

        <comment type="block">/* Fetch and validate input */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of userdata_describe2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Build a result tuple descriptor */</comment>
        <expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>GppcCreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"position"</literal></expr></argument>, <argument><expr><name>GppcOidInt4</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GppcTupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><name>GppcOidText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>GPPC_TF_GETARG_TEXT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iserror</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"the 2nd argument must not be null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"function is mal-declared"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>userdata</name> <operator>=</operator> <call><name>GppcTextGetDatum</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Set to send */</comment>
        <expr_stmt><expr><call><name>GPPC_TF_SET_USERDATA</name><argument_list>(<argument><expr><call><name>GppcDatumGetBytea</name><argument_list>(<argument><expr><name>userdata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>GPPC_RETURN_TUPLEDESC</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>GPPC_FUNCTION_INFO</name><argument_list>(<argument><expr><name>userdata_project2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>GppcDatum</name></type> <name>userdata_project2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>GppcDatum</name></type>
<name>userdata_project2</name><parameter_list>(<parameter><decl><type><name>GPPC_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
        <decl_stmt><decl><type><name>GppcFuncCallContext</name></type>      <name>fctx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcAnyTable</name></type>             <name>scan</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcHeapTuple</name></type>            <name>tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>            <name>in_tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcTupleDesc</name></type>            <name>out_tupdesc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                <name>tup_datum</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                <name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                     <name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>                <name>posvalue</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type>                     <name>posisnull</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>GppcDatum</name></type>		 <name>userdata</name></decl>;</decl_stmt>

        <comment type="block">/*
         * Sanity checking, shouldn't occur if our CREATE FUNCTION in SQL is done
         * correctly.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_NARGS</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GPPC_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid invocation of userdata_project2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>GPPC_GETARG_ANYTABLE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Should be the first parameter */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GPPC_SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>fctx</name> <operator>=</operator> <call><name>GPPC_SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Get the next value from the input scan */</comment>
        <expr_stmt><expr><name>out_tupdesc</name> <operator>=</operator> <call><name>GPPC_SRF_RESULT_DESC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>in_tupdesc</name>  <operator>=</operator> <call><name>GppcAnyTableGetTupleDesc</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple</name>       <operator>=</operator> <call><name>GppcAnyTableGetNextTuple</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GppcTupleDescAttrType</name><argument_list>(<argument><expr><name>in_tupdesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GppcOidInt4</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GppcReport</name><argument_list>(<argument><expr><name>GPPC_ERROR</name></expr></argument>, <argument><expr><literal type="string">"TABLE query must have int4 type in the first column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>tuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>GPPC_SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>posvalue</name> <operator>=</operator> <call><name>GppcGetAttributeByNum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>posisnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>posvalue</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>posisnull</name></expr>;</expr_stmt>
        <comment type="block">/* Receive file data from describe function */</comment>
        <expr_stmt><expr><name>userdata</name> <operator>=</operator> <call><name>GppcByteaGetDatum</name><argument_list>(<argument><expr><call><name>GPPC_TF_GET_USERDATA</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>userdata</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>posisnull</name></expr>)</condition>
        <block>{<block_content>
                <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>userdata</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
                <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>GppcDatum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="block">/* Construct the output tuple and convert to a datum */</comment>
        <expr_stmt><expr><name>tup_datum</name> <operator>=</operator> <call><name>GppcBuildHeapTupleDatum</name><argument_list>(<argument><expr><name>out_tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Return the next result */</comment>
        <expr_stmt><expr><call><name>GPPC_SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>, <argument><expr><name>tup_datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
