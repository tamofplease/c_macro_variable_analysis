<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/gppc/gppc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gppc.c
 *	  libgppc wrapper main
 *
 * Portions Copyright (c) 2012, Greenplum Inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/interfaces/gppc/gppc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tablefuncapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datetime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/*
 * GPPC_C_BUILD avoids definitions conflicting with actual backend definitions.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPPC_C_BUILD</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gppc/gppc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENSURE_NODE</name><parameter_list>(<parameter><type><name>val</name></type></parameter>, <parameter><type><name>nodetag</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{ \
	if (val != NULL &amp;&amp; !IsA(val, nodetag)) \
		elog(ERROR, "unexpected value %d", (val == NULL ? 0 : nodeTag(val))); \
} while(0)</cpp:value></cpp:define>

<comment type="block">/*
 * libgppc.so has PG_MODULE_MAGIC, user libraries don't. Linking
 * to libgppc, user libraries can be loaded by the backend.
 */</comment>
<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GPPC_MAP_FCINFO</name><parameter_list>(<parameter><type><name>info</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((FunctionCallInfo) info)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_TUPLEDESC_ATTNO</name><parameter_list>(<parameter><type><name>tupdesc</name></type></parameter>, <parameter><type><name>attno</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{ \
	if ((attno) &lt; 0) \
		elog(ERROR, "requested invalid attno(%d)", (attno)); \
	if ((tupdesc) == NULL) \
		elog(ERROR, "tuple desc is null"); \
	if (((TupleDesc) (tupdesc))-&gt;natts &lt;= (attno)) \
		elog(ERROR, "requested attno(%d) over tuple desc length(%d)", \
				(attno), ((TupleDesc) (tupdesc))-&gt;natts); \
}while(0)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>GppcReportCallbackStateData</name>
<block>{
	<decl_stmt><decl><type><name>ErrorContextCallback</name></type>		<name>errcontext_cb</name></decl>;</decl_stmt>
	<function_decl><type><name>void</name></type>	   (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>GppcReportInfo</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
}</block></struct></type> <name>GppcReportCallbackStateData</name>;</typedef>

<comment type="block">/*
 * Type oids.  Since we don't want to expose PG headers to the third-party and
 * hard-coding in the header is not a good way to maintain, we assign them here.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidInvalid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidBool</name> <init>= <expr><name>BOOLOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidChar</name> <init>= <expr><name>CHAROID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidInt2</name> <init>= <expr><name>INT2OID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidInt4</name> <init>= <expr><name>INT4OID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidInt8</name> <init>= <expr><name>INT8OID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidFloat4</name> <init>= <expr><name>FLOAT4OID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidFloat8</name> <init>= <expr><name>FLOAT8OID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidText</name> <init>= <expr><name>TEXTOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidVarChar</name> <init>= <expr><name>VARCHAROID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidBpChar</name> <init>= <expr><name>BPCHAROID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidBytea</name> <init>= <expr><name>BYTEAOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidNumeric</name> <init>= <expr><name>NUMERICOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidDate</name> <init>= <expr><name>DATEOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidTime</name> <init>= <expr><name>TIMEOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidTimeTz</name> <init>= <expr><name>TIMETZOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidTimestamp</name> <init>= <expr><name>TIMESTAMPOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidTimestampTz</name> <init>= <expr><name>TIMESTAMPTZOID</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>GppcOid</name></type> <name>GppcOidAnyTable</name> <init>= <expr><name>ANYTABLEOID</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * V1 call convention helper function.  This is just to avoid leaking
 * the Pg_finfo_record struct.
 */</comment>
<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type>
<name>GppcFinfoV1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Pg_finfo_record</name></type> <name>my_finfo</name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>&amp;</operator><name>my_finfo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PG_NARGS
 */</comment>
<function><type><name>int</name></type>
<name>GppcNargs</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>fcinfo</name><operator>-&gt;</operator><name>nargs</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PG_RETURN_NULL
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcReturnNull</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>GppcDatum</name> <operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PG_ARGISNULL
 */</comment>
<function><type><name>bool</name></type>
<name>GppcArgIsNull</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PG_GETARG_DATUM
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcGetArgDatum</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BoolGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcBoolGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcBool</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CharGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcCharGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcChar</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>CharGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Int16GetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcInt2GetDatum</name><parameter_list>(<parameter><decl><type><name>GppcInt2</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Int32GetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcInt4GetDatum</name><parameter_list>(<parameter><decl><type><name>GppcInt4</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Int64GetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcInt8GetDatum</name><parameter_list>(<parameter><decl><type><name>GppcInt8</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Float4GetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcFloat4GetDatum</name><parameter_list>(<parameter><decl><type><name>GppcFloat4</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>Float4GetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Float8GetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcFloat8GetDatum</name><parameter_list>(<parameter><decl><type><name>GppcFloat8</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TextGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcTextGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcText</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * VarCharGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcVarCharGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcVarChar</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BpCharGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcBpCharGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcBpChar</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ByteaGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcByteaGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcBytea</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * NumericGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcNumericGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcNumeric</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DateGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcDateGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcDate</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DateADTGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TimeGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcTimeGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcTime</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TimeADTGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TimeTzGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcTimeTzGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcTimeTz</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TimeTzADTPGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TimestampGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcTimestampGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcTimestamp</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TimestampTzGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcTimestampTzGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcTimestampTz</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * AnyTableGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcAnyTableGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcAnyTable</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TupleDescGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcTupleDescGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * HeapTupleGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcHeapTupleGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcHeapTuple</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetBool
 */</comment>
<function><type><name>GppcBool</name></type>
<name>GppcDatumGetBool</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetChar
 */</comment>
<function><type><name>GppcChar</name></type>
<name>GppcDatumGetChar</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetChar</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetInt16
 */</comment>
<function><type><name>GppcInt2</name></type>
<name>GppcDatumGetInt2</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetInt32
 */</comment>
<function><type><name>GppcInt4</name></type>
<name>GppcDatumGetInt4</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetInt64
 */</comment>
<function><type><name>GppcInt8</name></type>
<name>GppcDatumGetInt8</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetFloat4
 */</comment>
<function><type><name>GppcFloat4</name></type>
<name>GppcDatumGetFloat4</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetFloat8
 */</comment>
<function><type><name>GppcFloat8</name></type>
<name>GppcDatumGetFloat8</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetText
 */</comment>
<function><type><name>GppcText</name></type>
<name>GppcDatumGetText</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcText</name><operator>)</operator> <call><name>DatumGetTextP</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetTextCopy
 */</comment>
<function><type><name>GppcText</name></type>
<name>GppcDatumGetTextCopy</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcText</name><operator>)</operator> <call><name>DatumGetTextPCopy</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetVarChar
 */</comment>
<function><type><name>GppcVarChar</name></type>
<name>GppcDatumGetVarChar</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcVarChar</name><operator>)</operator> <call><name>DatumGetVarCharP</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetVarCharCopy
 */</comment>
<function><type><name>GppcVarChar</name></type>
<name>GppcDatumGetVarCharCopy</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcVarChar</name><operator>)</operator> <call><name>DatumGetVarCharPCopy</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetBpChar
 */</comment>
<function><type><name>GppcBpChar</name></type>
<name>GppcDatumGetBpChar</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcBpChar</name><operator>)</operator> <call><name>DatumGetBpCharP</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetBpCharCopy
 */</comment>
<function><type><name>GppcBpChar</name></type>
<name>GppcDatumGetBpCharCopy</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcBpChar</name><operator>)</operator> <call><name>DatumGetBpCharPCopy</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetBytea
 */</comment>
<function><type><name>GppcBytea</name></type>
<name>GppcDatumGetBytea</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcBytea</name><operator>)</operator> <call><name>DatumGetByteaP</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetByteaCopy
 */</comment>
<function><type><name>GppcBytea</name></type>
<name>GppcDatumGetByteaCopy</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcBytea</name><operator>)</operator> <call><name>DatumGetByteaPCopy</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetNumeric
 */</comment>
<function><type><name>GppcNumeric</name></type>
<name>GppcDatumGetNumeric</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcNumeric</name><operator>)</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetDate
 */</comment>
<function><type><name>GppcDate</name></type>
<name>GppcDatumGetDate</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcDate</name><operator>)</operator> <call><name>DatumGetDateADT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetTime
 */</comment>
<function><type><name>GppcTime</name></type>
<name>GppcDatumGetTime</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcTime</name><operator>)</operator> <call><name>DatumGetTimeADT</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetTimeTz
 */</comment>
<function><type><name>GppcTimeTz</name></type>
<name>GppcDatumGetTimeTz</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcTimeTz</name><operator>)</operator> <call><name>DatumGetTimeTzADTP</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetTimestamp
 */</comment>
<function><type><name>GppcTimestamp</name></type>
<name>GppcDatumGetTimestamp</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcTimestamp</name><operator>)</operator> <call><name>DatumGetTimestamp</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetTimestampTz
 */</comment>
<function><type><name>GppcTimestampTz</name></type>
<name>GppcDatumGetTimestampTz</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcTimestampTz</name><operator>)</operator> <call><name>DatumGetTimestampTz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetAnyTable
 */</comment>
<function><type><name>GppcAnyTable</name></type>
<name>GppcDatumGetAnyTable</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcAnyTable</name><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetTupleDesc
 */</comment>
<function><type><name>GppcTupleDesc</name></type>
<name>GppcDatumGetTupleDesc</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcTupleDesc</name><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DatumGetHeapTuple
 */</comment>
<function><type><name>GppcHeapTuple</name></type>
<name>GppcDatumGetHeapTuple</name><parameter_list>(<parameter><decl><type><name>GppcDatum</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcHeapTuple</name><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *
 */</comment>
<function><type><name>size_t</name></type>
<name>GppcGetTextLength</name><parameter_list>(<parameter><decl><type><name>GppcText</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * VARDATA(text)
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcGetTextPointer</name><parameter_list>(<parameter><decl><type><name>GppcText</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TextDatumGetCString
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcTextGetCString</name><parameter_list>(<parameter><decl><type><name>GppcText</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CStringGetTextDatum
 */</comment>
<function><type><name>GppcText</name></type>
<name>GppcCStringGetText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcText</name><operator>)</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *
 */</comment>
<function><type><name>size_t</name></type>
<name>GppcGetVarCharLength</name><parameter_list>(<parameter><decl><type><name>GppcVarChar</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * VARDATA(VarChar)
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcGetVarCharPointer</name><parameter_list>(<parameter><decl><type><name>GppcVarChar</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * VarCharDatumGetCString
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcVarCharGetCString</name><parameter_list>(<parameter><decl><type><name>GppcVarChar</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CStringGetVarCharDatum
 */</comment>
<function><type><name>GppcVarChar</name></type>
<name>GppcCStringGetVarChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcVarChar</name><operator>)</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *
 */</comment>
<function><type><name>size_t</name></type>
<name>GppcGetBpCharLength</name><parameter_list>(<parameter><decl><type><name>GppcBpChar</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * VARDATA(BpChar)
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcGetBpCharPointer</name><parameter_list>(<parameter><decl><type><name>GppcBpChar</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BpCharDatumGetCString
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcBpCharGetCString</name><parameter_list>(<parameter><decl><type><name>GppcBpChar</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CStringGetBpCharDatum
 */</comment>
<function><type><name>GppcBpChar</name></type>
<name>GppcCStringGetBpChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcBpChar</name><operator>)</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *
 */</comment>
<function><type><name>size_t</name></type>
<name>GppcGetByteaLength</name><parameter_list>(<parameter><decl><type><name>GppcBytea</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * VARDATA(x)
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcGetByteaPointer</name><parameter_list>(<parameter><decl><type><name>GppcBytea</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * numeric_out
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcNumericGetCString</name><parameter_list>(<parameter><decl><type><name>GppcNumeric</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>, <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>Numeric</name> <operator>*</operator><operator>)</operator> <name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * numeric_in
 */</comment>
<function><type><name>GppcNumeric</name></type>
<name>GppcCStringGetNumeric</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcNumeric</name><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(
		<argument><expr><call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>numeric_in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NUMERICOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>GppcGetNumericDef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>typmod</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>precision</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>precision</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>scale</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>typmod</name> <operator>&lt;</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><name>VARHDRSZ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>typmod</name> <operator>-=</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>precision</name> <operator>=</operator> <operator>(</operator><name>typmod</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>scale</name> <operator>=</operator> <name>typmod</name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GppcFloat8</name></type>
<name>GppcNumericGetFloat8</name><parameter_list>(<parameter><decl><type><name>GppcNumeric</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetFloat8</name><argument_list>(
			<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_float8</name></expr></argument>, <argument><expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>Numeric</name> <operator>*</operator><operator>)</operator> <name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GppcNumeric</name></type>
<name>GppcFloat8GetNumeric</name><parameter_list>(<parameter><decl><type><name>GppcFloat8</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcNumeric</name><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(
			<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8_numeric</name></expr></argument>, <argument><expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>timestamp2gppctm</name><parameter_list>(<parameter><decl><type><name>Timestamp</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name></type>	<name>pgtm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fsec_t</name></type>			<name>fsec</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><operator>(</operator><name>Timestamp</name><operator>)</operator> <name>ts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgtm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to convert timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgtm</name></expr></argument>, <argument><expr><call><name>Min</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GppcTm</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pg_tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_fsec</name></name> <operator>=</operator> <name>fsec</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Timestamp</name></type>
<name>gppctm2timestamp</name><parameter_list>(<parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name></type>	<name>pgtm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Timestamp</name></type>		<name>ts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fsec_t</name></type>			<name>fsec</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgtm</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><call><name>Min</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GppcTm</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pg_tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fsec</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_fsec</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgtm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to convert to timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ts</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>GppcDateGetTm</name><parameter_list>(<parameter><decl><type><name>GppcDate</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Timestamp</name></type>		<name>ts</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>DatumGetTimestamp</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>date_timestamp</name></expr></argument>, <argument><expr><call><name>DateADTGetDatum</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>timestamp2gppctm</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GppcDate</name></type>
<name>GppcTmGetDate</name><parameter_list>(<parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Timestamp</name></type>		<name>ts</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>gppctm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>DatumGetDateADT</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamp_date</name></expr></argument>, <argument><expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GppcTimeGetTm</name><parameter_list>(<parameter><decl><type><name>GppcTime</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Timestamp</name></type>		<name>ts</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>DatumGetTimestamp</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>datetime_timestamp</name></expr></argument>,
			<argument><expr><call><name>DateADTGetDatum</name><argument_list>(<argument><expr><name>POSTGRES_EPOCH_JDATE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TimeADTGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>TimeADT</name><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>timestamp2gppctm</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GppcTime</name></type>
<name>GppcTmGetTime</name><parameter_list>(<parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Timestamp</name></type>		<name>ts</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>gppctm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>DatumGetTimeADT</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamp_time</name></expr></argument>, <argument><expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GppcTimeTzGetTm</name><parameter_list>(<parameter><decl><type><name>GppcTimeTz</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimeADT</name></type>			<name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Timestamp</name></type>		<name>ts</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Drop time zone, as we adjust it below.  We do this because we don't have
	 * timestamptz2tm and always convert via timestamp.
	 */</comment>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>DatumGetTimeADT</name><argument_list>(
			<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timetz_time</name></expr></argument>, <argument><expr><call><name>TimeTzADTPGetDatum</name><argument_list>(<argument><expr><operator>(</operator><name>TimeTzADT</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>DatumGetTimestamp</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>datetime_timestamp</name></expr></argument>,
			<argument><expr><call><name>DateADTGetDatum</name><argument_list>(<argument><expr><name>POSTGRES_EPOCH_JDATE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TimeADTGetDatum</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>timestamp2gppctm</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* adjust time zone. gmtoff is in sec */</comment>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_gmtoff</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>TimeTzADT</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator><operator>-&gt;</operator><name>zone</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GppcTimeTz</name></type>
<name>GppcTmGetTimeTz</name><parameter_list>(<parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Timestamp</name></type>		<name>ts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeADT</name></type>			<name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeTzADT</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>gppctm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>DatumGetTimeADT</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>timestamp_time</name></expr></argument>, <argument><expr><call><name>TimestampGetDatum</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DatumGetTimeTzADTP</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>time_timetz</name></expr></argument>, <argument><expr><call><name>TimeADTGetDatum</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* adjust time zone. gmtoff is in sec */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>zone</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>GppcTimeTz</name><operator>)</operator> <name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GppcTimestampGetTm</name><parameter_list>(<parameter><decl><type><name>GppcTimestamp</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>timestamp2gppctm</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GppcTimestamp</name></type>
<name>GppcTmGetTimestamp</name><parameter_list>(<parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>gppctm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GppcTimestampTzGetTm</name><parameter_list>(<parameter><decl><type><name>GppcTimestampTz</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>timestamp2gppctm</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>GppcTimestampTz</name></type>
<name>GppcTmGetTimestampTz</name><parameter_list>(<parameter><decl><type><name>GppcTm</name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>gppctm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * palloc
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>GppcAlloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>palloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * palloc0
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>GppcAlloc0</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * repalloc
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>GppcRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>repalloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pfree
 */</comment>
<function><type><name>void</name></type>
<name>GppcFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * clen is byte length of the content
 */</comment>
<function><type><name>GppcText</name></type>
<name>GppcAllocText</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>clen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>bytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>VARHDRSZ</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>GppcText</name><operator>)</operator> <name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * clen is byte length of the content
 */</comment>
<function><type><name>GppcVarChar</name></type>
<name>GppcAllocVarChar</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>clen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>bytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>VARHDRSZ</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>GppcVarChar</name><operator>)</operator> <name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * clen is byte length of the content
 */</comment>
<function><type><name>GppcBpChar</name></type>
<name>GppcAllocBpChar</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>clen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>bytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>VARHDRSZ</name> <operator>+</operator> <name>clen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>GppcBpChar</name><operator>)</operator> <name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * blen is byte length of the content
 */</comment>
<function><type><name>GppcBytea</name></type>
<name>GppcAllocBytea</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>bytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bytes</name> <operator>=</operator> <name>VARHDRSZ</name> <operator>+</operator> <name>blen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>GppcBytea</name><operator>)</operator> <name>b</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CurrentMemoryContext
 */</comment>
<function><type><name>GppcMemoryContext</name></type>
<name>GppcGetCurrentMemoryContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcMemoryContext</name><operator>)</operator> <name>CurrentMemoryContext</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * AllocSetContextCreate
 */</comment>
<function><type><name>GppcMemoryContext</name></type>
<name>GppcMemoryContextCreate</name><parameter_list>(<parameter><decl><type><name>GppcMemoryContext</name></type> <name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcMemoryContext</name><operator>)</operator>
		<call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>parent</name></expr></argument>,
							  <argument><expr><literal type="string">"GppcUserContext"</literal></expr></argument>,
							  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
							  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
							  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * MemoryContextSwitchTo
 */</comment>
<function><type><name>GppcMemoryContext</name></type>
<name>GppcMemoryContextSwitchTo</name><parameter_list>(<parameter><decl><type><name>GppcMemoryContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcMemoryContext</name><operator>)</operator>
		<call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><operator>(</operator><name>MemoryContext</name><operator>)</operator> <name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * MemoryContextReset
 */</comment>
<function><type><name>void</name></type>
<name>GppcMemoryContextReset</name><parameter_list>(<parameter><decl><type><name>GppcMemoryContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><operator>(</operator><name>MemoryContext</name><operator>)</operator> <name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SRF_IS_FIRSTCALL
 */</comment>
<function><type><name>bool</name></type>
<name>GppcSRFIsFirstCall</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SRF_FIRSTCALL_INIT
 */</comment>
<function><type><name>GppcFuncCallContext</name></type>
<name>GppcSRFFirstCallInit</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>GppcFuncCallContext</name><operator>)</operator> <call><name>init_MultiFuncCall</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SRF_PERCALL_SETUP
 */</comment>
<function><type><name>GppcFuncCallContext</name></type>
<name>GppcSRFPerCallSetup</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>GppcFuncCallContext</name><operator>)</operator> <call><name>per_MultiFuncCall</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SRF_RETURN_NEXT
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcSRFReturnNext</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>GppcFuncCallContext</name></type> <name>funcctx</name></decl></parameter>, <parameter><decl><type><name>GppcDatum</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name>	   <modifier>*</modifier></type><name>rsi</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>FuncCallContext</name> <operator>*</operator><operator>)</operator> <name>funcctx</name><operator>)</operator><operator>-&gt;</operator><name>call_cntr</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>rsi</name> <operator>=</operator> <operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>isDone</name></name> <operator>=</operator> <name>ExprMultipleResult</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SRF_RETURN_DONE
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcSRFReturnDone</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>GppcFuncCallContext</name></type> <name>funcctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name>	   <modifier>*</modifier></type><name>rsi</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>end_MultiFuncCall</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>FuncCallContext</name> <operator>*</operator><operator>)</operator> <name>funcctx</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rsi</name> <operator>=</operator> <operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsi</name><operator>-&gt;</operator><name>isDone</name></name> <operator>=</operator> <name>ExprEndResult</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns TupleDesc for the exptected output of the function
 */</comment>
<function><type><name>GppcTupleDesc</name></type>
<name>GppcSRFResultDesc</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name>	   <modifier>*</modifier></type><name>rsi</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rsi</name> <operator>=</operator> <operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>GppcTupleDesc</name><operator>)</operator> <name><name>rsi</name><operator>-&gt;</operator><name>expectedDesc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>GppcSRFAlloc</name><parameter_list>(<parameter><decl><type><name>GppcFuncCallContext</name></type> <name>fctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name>	   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>FuncCallContext</name> <operator>*</operator><operator>)</operator> <name>fctx</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>GppcSRFAlloc0</name><parameter_list>(<parameter><decl><type><name>GppcFuncCallContext</name></type> <name>fctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name>	   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>FuncCallContext</name> <operator>*</operator><operator>)</operator> <name>fctx</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GppcSRFSave</name><parameter_list>(<parameter><decl><type><name>GppcFuncCallContext</name></type> <name>fctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name>	   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>FuncCallContext</name> <operator>*</operator><operator>)</operator> <name>fctx</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>GppcSRFRestore</name><parameter_list>(<parameter><decl><type><name>GppcFuncCallContext</name></type> <name>fctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name>	   <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>FuncCallContext</name> <operator>*</operator><operator>)</operator> <name>fctx</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GppcSPIConnect</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>rescode</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rescode</name> <operator>=</operator> <call><name>SPI_connect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>rescode</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GppcSPIFinish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GppcSPIResult</name></type>
<name>GppcSPIExec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>tcount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>				<name>rescode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GppcSPIResult</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rescode</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>GppcSPIResult</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GppcSPIResultData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rescode</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>tuptable</name></name> <operator>=</operator> <operator>(</operator>struct <name>GppcSPITupleTableData</name> <operator>*</operator><operator>)</operator> <name>SPI_tuptable</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>processed</name></name> <operator>=</operator> <name>SPI_processed</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>rescode</name></name> <operator>=</operator> <name>rescode</name></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcSPIGetValue</name><parameter_list>(<parameter><decl><type><name>GppcSPIResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fnumber</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>makecopy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SPITupleTable</name>  <modifier>*</modifier></type><name>tuptable</name> <init>= <expr><operator>(</operator><name>SPITupleTable</name> <operator>*</operator><operator>)</operator> <name><name>result</name><operator>-&gt;</operator><name>tuptable</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>SPI_getvalue</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * If the copy is demanded, move value to the upper context.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>makecopy</name> <operator>&amp;&amp;</operator> <name>value</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>SPI_palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>GppcDatum</name></type>
<name>GppcSPIGetDatum</name><parameter_list>(<parameter><decl><type><name>GppcSPIResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fnumber</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>makecopy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SPITupleTable</name>  <modifier>*</modifier></type><name>tuptable</name> <init>= <expr><operator>(</operator><name>SPITupleTable</name> <operator>*</operator><operator>)</operator> <name><name>result</name><operator>-&gt;</operator><name>tuptable</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * It might be better if we could copy only the datum, but SPI interface
	 * doesn't have such function and copying datumCopy code here is too ugly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>makecopy</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SPI_copytuple</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name><name>result</name><operator>-&gt;</operator><name>current</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>GppcSPIGetValueByName</name><parameter_list>(<parameter><decl><type><name>GppcSPIResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>makecopy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SPITupleTable</name>  <modifier>*</modifier></type><name>tuptable</name> <init>= <expr><operator>(</operator><name>SPITupleTable</name> <operator>*</operator><operator>)</operator> <name><name>result</name><operator>-&gt;</operator><name>tuptable</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>fnumber</name> <init>= <expr><call><name>SPI_fnumber</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>GppcSPIGetValue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>, <argument><expr><name>makecopy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>GppcDatum</name></type>
<name>GppcSPIGetDatumByName</name><parameter_list>(<parameter><decl><type><name>GppcSPIResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>makecopy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SPITupleTable</name>  <modifier>*</modifier></type><name>tuptable</name> <init>= <expr><operator>(</operator><name>SPITupleTable</name> <operator>*</operator><operator>)</operator> <name><name>result</name><operator>-&gt;</operator><name>tuptable</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>fnumber</name> <init>= <expr><call><name>SPI_fnumber</name><argument_list>(<argument><expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>GppcSPIGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>fnumber</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>makecopy</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TF_SET_USERDATA
 */</comment>
<function><type><name>void</name></type>
<name>GppcTFSetUserData</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>GppcFcinfo</name></decl></parameter>, <parameter><decl><type><name>GppcBytea</name></type> <name>userdata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>GppcFcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TF_SET_USERDATA</name><argument_list>(<argument><expr><operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <name>userdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * TF_GET_USERDATA
 */</comment>
<function><type><name>GppcBytea</name></type>
<name>GppcTFGetUserData</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>GppcFcinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>GppcFcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>GppcBytea</name><operator>)</operator> <call><name>TF_GET_USERDATA</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * AnyTable_GetTupleDesc
 */</comment>
<function><type><name>GppcTupleDesc</name></type>
<name>GppcAnyTableGetTupleDesc</name><parameter_list>(<parameter><decl><type><name>GppcAnyTable</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcTupleDesc</name><operator>)</operator> <call><name>AnyTable_GetTupleDesc</name><argument_list>(<argument><expr><operator>(</operator><name>AnyTable</name><operator>)</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * AnyTable_GetNextTuple
 */</comment>
<function><type><name>GppcHeapTuple</name></type>
<name>GppcAnyTableGetNextTuple</name><parameter_list>(<parameter><decl><type><name>GppcAnyTable</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcHeapTuple</name><operator>)</operator> <call><name>AnyTable_GetNextTuple</name><argument_list>(<argument><expr><operator>(</operator><name>AnyTable</name><operator>)</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Common code for the describe function.
 */</comment>
<function><type><specifier>static</specifier> <name>FuncExpr</name> <modifier>*</modifier></type>
<name>TFGetFuncExpr</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argno</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type>	<name>fcinfo</name> <init>= <expr><call><name>GPPC_MAP_FCINFO</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FuncExpr</name>		   <modifier>*</modifier></type><name>fexpr</name></decl>;</decl_stmt>

	<comment type="block">/* Describe function argument is only 1 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"invalid describe function or TFGetFuncExpr call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>fexpr</name> <operator>=</operator> <operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fexpr</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>fexpr</name></expr></argument>, <argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"expected FuncExpr, but something else is found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>fexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>argno</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"argno is out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>typid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>exprType</name><argument_list>(<argument><expr><call><name>list_nth</name><argument_list>(<argument><expr><name><name>fexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>argno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>typid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"expected type = %u, but the expression returns different"</literal></expr></argument>, <argument><expr><name>typid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>fexpr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Evaluates function argument to constant Datum.
 * iserror is set if function is unexpectedly structured.
 * This function is designed for describe function.
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcTFGetArgDatum</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>GppcOid</name></type> <name>typid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argno</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>iserror</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncExpr</name>	   <modifier>*</modifier></type><name>fexpr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>iserror</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fexpr</name> <operator>=</operator> <call><name>TFGetFuncExpr</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>argno</name></expr></argument>, <argument><expr><operator>(</operator><name>Oid</name><operator>)</operator> <name>typid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fexpr</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>iserror</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><operator>(</operator><name>GppcDatum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>ExecEvalFunctionArgToConst</name><argument_list>(<argument><expr><name>fexpr</name></expr></argument>, <argument><expr><name>argno</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create TupleDesc for the table function input TABLE expression.
 * iserror is set if function is unexpectedly structured.
 * This function is designed for describe function.
 */</comment>
<function><type><name>GppcTupleDesc</name></type>
<name>GppcTFInputDesc</name><parameter_list>(<parameter><decl><type><name>GppcFcinfo</name></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argno</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>iserror</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncExpr</name>		   <modifier>*</modifier></type><name>fexpr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TableValueExpr</name>	   <modifier>*</modifier></type><name>texpr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Query</name>			   <modifier>*</modifier></type><name>qexpr</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>iserror</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>fexpr</name> <operator>=</operator> <call><name>TFGetFuncExpr</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>argno</name></expr></argument>, <argument><expr><name>ANYTABLEOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fexpr</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>iserror</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>texpr</name> <operator>=</operator> <operator>(</operator><name>TableValueExpr</name> <operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name><name>fexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>argno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>texpr</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>texpr</name></expr></argument>, <argument><expr><name>TableValueExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>iserror</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>qexpr</name> <operator>=</operator> <operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <name><name>texpr</name><operator>-&gt;</operator><name>subquery</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>qexpr</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>qexpr</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>iserror</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>iserror</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>GppcTupleDesc</name><operator>)</operator> <call><name>ExecCleanTypeFromTL</name><argument_list>(<argument><expr><name><name>qexpr</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * elog
 */</comment>
<function><type><name>void</name></type>
<name>GppcReport</name><parameter_list>(<parameter><decl><type><name>GppcReportLevel</name></type> <name>elevel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* elog doesn't accept va_list. There could be a better way...  */</comment>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This gets in between user hook and error process and extracts error state from
 * the stack to pass to the hook function.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ReportCallbackInvoker</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcReportCallbackState</name></type>	<name>cbstate</name> <init>= <expr><operator>(</operator><name>GppcReportCallbackState</name><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ErrorData</name>			   <modifier>*</modifier></type><name>edata</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>			<name>oldcontext</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * CopyErrorData() needs to be in other context than ErrorContext.
	 */</comment>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CurTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cbstate</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><operator>(</operator><name>GppcReportInfo</name><operator>)</operator> <name>edata</name></expr></argument>, <argument><expr><name><name>cbstate</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add the error context callback to the stack.  This searches the
 * same callback with the same argument by comparing the callback
 * and arg address, and if found return the stack pointer without
 * installing new hook.  The function signature of the hook is
 * slightly different from PG's hook function, for we want to know
 * the error state.
 */</comment>
<function><type><name>GppcReportCallbackState</name></type>
<name>GppcInstallReportCallback</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>GppcReportInfo</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GppcReportCallbackState</name></type>		<name>cbstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ErrorContextCallback</name>	   <modifier>*</modifier></type><name>errcontext_cb</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errcontext_cb</name> <operator>=</operator> <name>error_context_stack</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>errcontext_cb</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If found, just return it. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>errcontext_cb</name><operator>-&gt;</operator><name>callback</name></name> <operator>==</operator> <name>ReportCallbackInvoker</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><operator>(</operator><name>GppcReportCallbackState</name><operator>)</operator> <name><name>errcontext_cb</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator><operator>-&gt;</operator><name>func</name> <operator>==</operator> <name>func</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><operator>(</operator><name>GppcReportCallbackState</name><operator>)</operator> <name><name>errcontext_cb</name><operator>-&gt;</operator><name>arg</name></name><operator>)</operator><operator>-&gt;</operator><name>arg</name> <operator>==</operator> <name>arg</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><name>GppcReportCallbackState</name><operator>)</operator> <name>errcontext_cb</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>errcontext_cb</name> <operator>=</operator> <name><name>errcontext_cb</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<comment type="block">/*
	 * Allocate it in ErrorContext as the caller may expect it to live longer.
	 */</comment>
	<expr_stmt><expr><name>cbstate</name> <operator>=</operator> <operator>(</operator><name>GppcReportCallbackState</name><operator>)</operator>
		<call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>ErrorContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GppcReportCallbackStateData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errcontext_cb</name> <operator>=</operator> <operator>(</operator><name>ErrorContextCallback</name> <operator>*</operator><operator>)</operator> <name>cbstate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cbstate</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cbstate</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>errcontext_cb</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>ReportCallbackInvoker</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>errcontext_cb</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>cbstate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>errcontext_cb</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name>error_context_stack</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <name>errcontext_cb</name></expr>;</expr_stmt>

	<return>return <expr><name>cbstate</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Uninstall the error context callback from the stack.  The callback
 * may be not on the top of stack, but we search it by the given pointer
 * and fix the linked list in the middle of stack if found.  In case
 * the hook is not found, this function does not do anything and silently
 * return.
 */</comment>
<function><type><name>void</name></type>
<name>GppcUninstallReportCallback</name><parameter_list>(<parameter><decl><type><name>GppcReportCallbackState</name></type> <name>cbstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ErrorContextCallback</name>	   <modifier>*</modifier></type><name>errcontext_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>errcontext_cb</name> <operator>=</operator> <name>error_context_stack</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>next</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>errcontext_cb</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errcontext_cb</name> <operator>==</operator> <operator>(</operator><name>ErrorContextCallback</name> <operator>*</operator><operator>)</operator> <name>cbstate</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name>errcontext_cb</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>errcontext_cb</name> <operator>=</operator> <name><name>errcontext_cb</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>errcontext_cb</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>next</name><operator>-&gt;</operator><name>previous</name></name> <operator>=</operator> <name><name>errcontext_cb</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <name><name>errcontext_cb</name><operator>-&gt;</operator><name>previous</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>errcontext_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>GppcReportLevel</name></type>
<name>GppcGetReportLevel</name><parameter_list>(<parameter><decl><type><name>GppcReportInfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>ErrorData</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>elevel</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GppcGetReportMessage</name><parameter_list>(<parameter><decl><type><name>GppcReportInfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>ErrorData</name> <operator>*</operator><operator>)</operator> <name>info</name><operator>)</operator><operator>-&gt;</operator><name>message</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>GppcCheckForInterrupts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * CreateTemplateTupleDesc
 * We omit unuseful last parameter.
 */</comment>
<function><type><name>GppcTupleDesc</name></type>
<name>GppcCreateTemplateTupleDesc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>natts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcTupleDesc</name><operator>)</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>natts</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TupleDescInitEntry
 * We omit unuseful last parameter.
 * attno starts from 1
 */</comment>
<function><type><name>void</name></type>
<name>GppcTupleDescInitEntry</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>desc</name></decl></parameter>,
					   <parameter><decl><type><name>uint16_t</name></type> <name>attno</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attname</name></decl></parameter>,
					   <parameter><decl><type><name>GppcOid</name></type> <name>typid</name></decl></parameter>,
					   <parameter><decl><type><name>int32_t</name></type> <name>typmod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><operator>(</operator><name>TupleDesc</name><operator>)</operator> <name>desc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>attname</name></expr></argument>, <argument><expr><name>typid</name></expr></argument>, <argument><expr><name>typmod</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * heap_form_tuple
 */</comment>
<function><type><name>GppcHeapTuple</name></type>
<name>GppcHeapFormTuple</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>GppcDatum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcHeapTuple</name><operator>)</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><operator>(</operator><name>TupleDesc</name><operator>)</operator> <name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Shortcut for heap_form_tuple + HeapTupleGetDatum
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcBuildHeapTupleDatum</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>GppcDatum</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><operator>(</operator><name>TupleDesc</name><operator>)</operator> <name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>GppcDatum</name><operator>)</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Accessor to HeapTuple
 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcGetAttributeByName</name><parameter_list>(<parameter><decl><type><name>GppcHeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attname</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcDatum</name><operator>)</operator> <call><name>GetAttributeByName</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>HeapTuple</name><operator>)</operator> <name>tuple</name><operator>)</operator><operator>-&gt;</operator><name>t_data</name></expr></argument>, <argument><expr><name>attname</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attno starts from 1 */</comment>
<function><type><name>GppcDatum</name></type>
<name>GppcGetAttributeByNum</name><parameter_list>(<parameter><decl><type><name>GppcHeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>attno</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>GppcDatum</name><operator>)</operator> <call><name>GetAttributeByNum</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>HeapTuple</name><operator>)</operator> <name>tuple</name><operator>)</operator><operator>-&gt;</operator><name>t_data</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Accessor to TupleDesc
 */</comment>
<function><type><name>int</name></type>
<name>GppcTupleDescNattrs</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>tupdesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name>TupleDesc</name><operator>)</operator> <name>tupdesc</name><operator>)</operator><operator>-&gt;</operator><name>natts</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attno starts from 0 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GppcTupleDescAttrName</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>attno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_TUPLEDESC_ATTNO</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>NameStr</name><argument_list>(<argument><expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><operator>(</operator><name>TupleDesc</name><operator>)</operator> <name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attno starts from 0 */</comment>
<function><type><name>GppcOid</name></type>
<name>GppcTupleDescAttrType</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>attno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_TUPLEDESC_ATTNO</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>GppcOid</name><operator>)</operator> <operator>(</operator><call><name>TupleDescAttr</name><argument_list>(<argument><expr><operator>(</operator><name>TupleDesc</name><operator>)</operator> <name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atttypid</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attno starts from 0 */</comment>
<function><type><name>int32_t</name></type>
<name>GppcTupleDescAttrTypmod</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>attno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_TUPLEDESC_ATTNO</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><call><name>TupleDescAttr</name><argument_list>(<argument><expr><operator>(</operator><name>TupleDesc</name><operator>)</operator> <name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atttypmod</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* attno starts from 0 */</comment>
<function><type><name>int16_t</name></type>
<name>GppcTupleDescAttrLen</name><parameter_list>(<parameter><decl><type><name>GppcTupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>attno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_TUPLEDESC_ATTNO</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>int16_t</name><operator>)</operator> <operator>(</operator><call><name>TupleDescAttr</name><argument_list>(<argument><expr><operator>(</operator><name>TupleDesc</name><operator>)</operator> <name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attlen</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * GetDatabaseEncoding
 * Returns the value from GetDatabaseEncoding for now, but if we renumber pg_enc,
 * we'll need to map it GppcEncoding to keep compatibility.
 */</comment>
<function><type><name>GppcEncoding</name></type>
<name>GppcGetDatabaseEncoding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_database_encoding_max_length
 */</comment>
<function><type><name>int</name></type>
<name>GppcDatabaseEncodingMaxLength</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pg_database_encoding_max_length</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Translates a GppcEncoding value to a human readable string.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GppcDatabaseEncodingName</name><parameter_list>(<parameter><decl><type><name>GppcEncoding</name></type> <name>enc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
