<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/libpq/win32.c"><comment type="block">/*
 * src/interfaces/libpq/win32.c
 *
 *
 *	FILE
 *		win32.c
 *
 *	DESCRIPTION
 *		Win32 support functions.
 *
 * Contains table and functions for looking up win32 socket error
 * descriptions. But will/may contain other win32 helper functions
 * for libpq.
 *
 * The error constants are taken from the Frambak Bakfram LGSOCKET
 * library guys who in turn took them from the Winsock FAQ.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 */</comment>

<comment type="block">/* Make stuff compile faster by excluding not used stuff */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VC_EXTRALEAN</name></cpp:macro></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__MINGW32__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOGDI</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOCRYPT</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32.h"</cpp:file></cpp:include>

<comment type="block">/* Declared here to avoid pulling in all includes, which causes name collisions */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_NLS</name></cpp:ifdef>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>libpq_gettext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msgid</name></decl></parameter>)</parameter_list> pg_attribute_format_arg<parameter_list>(</parameter_list>1</function_decl>)<empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>libpq_gettext</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<struct><specifier>static</specifier> struct <name>WSErrorEntry</name>
<block>{
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>
}</block>			<decl><name><name>WSErrors</name><index>[]</index></name> <init>=

<expr><block>{
	<expr><block>{
		<expr><literal type="number">0</literal></expr>, <expr><literal type="string">"No error"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEINTR</name></expr>, <expr><literal type="string">"Interrupted system call"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEBADF</name></expr>, <expr><literal type="string">"Bad file number"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEACCES</name></expr>, <expr><literal type="string">"Permission denied"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEFAULT</name></expr>, <expr><literal type="string">"Bad address"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEINVAL</name></expr>, <expr><literal type="string">"Invalid argument"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEMFILE</name></expr>, <expr><literal type="string">"Too many open sockets"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEWOULDBLOCK</name></expr>, <expr><literal type="string">"Operation would block"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEINPROGRESS</name></expr>, <expr><literal type="string">"Operation now in progress"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEALREADY</name></expr>, <expr><literal type="string">"Operation already in progress"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENOTSOCK</name></expr>, <expr><literal type="string">"Socket operation on non-socket"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEDESTADDRREQ</name></expr>, <expr><literal type="string">"Destination address required"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEMSGSIZE</name></expr>, <expr><literal type="string">"Message too long"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEPROTOTYPE</name></expr>, <expr><literal type="string">"Protocol wrong type for socket"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENOPROTOOPT</name></expr>, <expr><literal type="string">"Bad protocol option"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEPROTONOSUPPORT</name></expr>, <expr><literal type="string">"Protocol not supported"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAESOCKTNOSUPPORT</name></expr>, <expr><literal type="string">"Socket type not supported"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEOPNOTSUPP</name></expr>, <expr><literal type="string">"Operation not supported on socket"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEPFNOSUPPORT</name></expr>, <expr><literal type="string">"Protocol family not supported"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEAFNOSUPPORT</name></expr>, <expr><literal type="string">"Address family not supported"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEADDRINUSE</name></expr>, <expr><literal type="string">"Address already in use"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEADDRNOTAVAIL</name></expr>, <expr><literal type="string">"Cannot assign requested address"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENETDOWN</name></expr>, <expr><literal type="string">"Network is down"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENETUNREACH</name></expr>, <expr><literal type="string">"Network is unreachable"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENETRESET</name></expr>, <expr><literal type="string">"Net connection reset"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAECONNABORTED</name></expr>, <expr><literal type="string">"Software caused connection abort"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAECONNRESET</name></expr>, <expr><literal type="string">"Connection reset by peer"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENOBUFS</name></expr>, <expr><literal type="string">"No buffer space available"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEISCONN</name></expr>, <expr><literal type="string">"Socket is already connected"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENOTCONN</name></expr>, <expr><literal type="string">"Socket is not connected"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAESHUTDOWN</name></expr>, <expr><literal type="string">"Cannot send after socket shutdown"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAETOOMANYREFS</name></expr>, <expr><literal type="string">"Too many references, cannot splice"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAETIMEDOUT</name></expr>, <expr><literal type="string">"Connection timed out"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAECONNREFUSED</name></expr>, <expr><literal type="string">"Connection refused"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAELOOP</name></expr>, <expr><literal type="string">"Too many levels of symbolic links"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENAMETOOLONG</name></expr>, <expr><literal type="string">"File name too long"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEHOSTDOWN</name></expr>, <expr><literal type="string">"Host is down"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEHOSTUNREACH</name></expr>, <expr><literal type="string">"No route to host"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAENOTEMPTY</name></expr>, <expr><literal type="string">"Directory not empty"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEPROCLIM</name></expr>, <expr><literal type="string">"Too many processes"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEUSERS</name></expr>, <expr><literal type="string">"Too many users"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEDQUOT</name></expr>, <expr><literal type="string">"Disc quota exceeded"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAESTALE</name></expr>, <expr><literal type="string">"Stale NFS file handle"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEREMOTE</name></expr>, <expr><literal type="string">"Too many levels of remote in path"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSASYSNOTREADY</name></expr>, <expr><literal type="string">"Network system is unavailable"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAVERNOTSUPPORTED</name></expr>, <expr><literal type="string">"Winsock version out of range"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSANOTINITIALISED</name></expr>, <expr><literal type="string">"WSAStartup not yet called"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAEDISCON</name></expr>, <expr><literal type="string">"Graceful shutdown in progress"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSAHOST_NOT_FOUND</name></expr>, <expr><literal type="string">"Host not found"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSATRY_AGAIN</name></expr>, <expr><literal type="string">"NA Host not found / SERVFAIL"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSANO_RECOVERY</name></expr>, <expr><literal type="string">"Non recoverable FORMERR||REFUSED||NOTIMP"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>WSANO_DATA</name></expr>, <expr><literal type="string">"No host data of that type was found"</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>							<comment type="block">/* End of table */</comment>
}</block></expr></init></decl>;</struct>


<comment type="block">/*
 * Returns 0 if not found, linear but who cares, at this moment
 * we're already in pain :)
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>LookupWSErrorMessage</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>WSErrorEntry</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>WSErrors</name></expr>;</init> <condition><expr><name><name>e</name><operator>-&gt;</operator><name>description</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>err</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<struct>struct <name>MessageDLL</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dll_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>loaded</name></decl>;</decl_stmt>			<comment type="block">/* BOOL */</comment>
}</block>			<decl><name><name>dlls</name><index>[]</index></name> <init>=

<expr><block>{
	<expr><block>{
		<expr><literal type="string">"netmsg.dll"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"winsock.dll"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ws2_32.dll"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"wsock32n.dll"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"mswsock.dll"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ws2help.dll"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"ws2thk.dll"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>
	}</block></expr>							<comment type="block">/* Last one, no dll, always loaded */</comment>
}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DLLS_SIZE</name></cpp:macro> <cpp:value>(sizeof(dlls)/sizeof(struct MessageDLL))</cpp:value></cpp:define>

<comment type="block">/*
 * Returns a description of the socket error by first trying
 * to find it in the lookup table, and if that fails, tries
 * to load any of the winsock dlls to find that message.
 * The DLL thing works from Nt4 (spX ?) up, but some special
 * versions of winsock might have this as well (seen on Win98 SE
 * special install)			   / Magnus Naeslund (mag@fbab.net)
 *
 */</comment>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>winsock_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>strerrbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>offs</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>success</name> <init>= <expr><call><name>LookupWSErrorMessage</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>strerrbuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name>success</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>DLLS_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dlls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loaded</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>dlls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loaded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* Only load once */</comment>
			<expr_stmt><expr><name><name>dlls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>LoadLibraryEx</name><argument_list>(
													<argument><expr><name><name>dlls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dll_name</name></expr></argument>,
													<argument><expr><literal type="number">0</literal></expr></argument>,
													<argument><expr><name>LOAD_LIBRARY_AS_DATAFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dlls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dll_name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dlls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* Didn't load */</comment>

		<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>FORMAT_MESSAGE_FROM_SYSTEM</name>
			<operator>|</operator> <name>FORMAT_MESSAGE_IGNORE_INSERTS</name>
			<operator>|</operator> <operator>(</operator><ternary><condition><expr><name><name>dlls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle</name></expr> ?</condition><then> <expr><name>FORMAT_MESSAGE_FROM_HMODULE</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <literal type="number">0</literal> <operator>!=</operator> <call><name>FormatMessage</name><argument_list>(
									 <argument><expr><name>flags</name></expr></argument>,
									 <argument><expr><name><name>dlls</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>handle</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
									 <argument><expr><call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_ENGLISH</name></expr></argument>, <argument><expr><name>SUBLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><name>strerrbuf</name></expr></argument>, <argument><expr><name>buflen</name> <operator>-</operator> <literal type="number">64</literal></expr></argument>,
									 <argument><expr><literal type="number">0</literal></expr></argument>
			)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>strerrbuf</name></expr></argument>, <argument><expr><call><name>libpq_gettext</name><argument_list>(<argument><expr><literal type="string">"unrecognized socket error: 0x%08X/%d"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>strerrbuf</name><index>[<expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>offs</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>strerrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>offs</name> <operator>&gt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>buflen</name> <operator>-</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>offs</name> <operator>=</operator> <name>buflen</name> <operator>-</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>strerrbuf</name> <operator>+</operator> <name>offs</name></expr></argument>, <argument><expr><literal type="string">" (0x%08X/%d)"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>strerrbuf</name></expr>;</return>
</block_content>}</block></function>
</unit>
