<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/libpq/pqexpbuffer.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pqexpbuffer.c
 *
 * PQExpBuffer provides an indefinitely-extensible string data type.
 * It can be used to buffer either ordinary C strings (null-terminated text)
 * or arbitrary binary data.  All storage is allocated with malloc().
 *
 * This module is essentially the same as the backend's StringInfo data type,
 * but it is intended for use in frontend libpq and client applications.
 * Thus, it does not rely on palloc() nor elog(), nor psprintf.c which
 * will exit() on error.
 *
 * It does rely on vsnprintf(); if configure finds that libc doesn't provide
 * a usable vsnprintf(), then a copy of our own implementation of it will
 * be linked into libpq.
 *
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/interfaces/libpq/pqexpbuffer.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * This file is compiled with both frontend and backend codes, symlinked by
 * src/backend/Makefile, and use macro FRONTEND to switch.
 *
 * Include "c.h" to adopt Greenplum C types. Don't include "postgres_fe.h",
 * which only defines FRONTEND besides including "c.h"
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pqexpbuffer.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* All "broken" PQExpBuffers point to this string. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>oom_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Need a char * for unconstify() compatibility */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>oom_buffer_ptr</name> <init>= <expr><name>oom_buffer</name></expr></init></decl>;</decl_stmt>



<comment type="block">/*
 * markPQExpBufferBroken
 *
 * Put a PQExpBuffer in "broken" state if it isn't already.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>markPQExpBufferBroken</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>oom_buffer</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Casting away const here is a bit ugly, but it seems preferable to not
	 * marking oom_buffer const.  We want to do that to encourage the compiler
	 * to put oom_buffer in read-only storage, so that anyone who tries to
	 * scribble on a broken PQExpBuffer will get a failure.
	 */</comment>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>oom_buffer_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * createPQExpBuffer
 *
 * Create an empty 'PQExpBufferData' &amp; return a pointer to it.
 */</comment>
<function><type><name>PQExpBuffer</name></type>
<name>createPQExpBuffer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>PQExpBuffer</name><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PQExpBufferData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * initPQExpBuffer
 *
 * Initialize a PQExpBufferData struct (with previously undefined contents)
 * to describe an empty string.
 */</comment>
<function><type><name>void</name></type>
<name>initPQExpBuffer</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>INITIAL_EXPBUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>oom_buffer_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* see comment above */</comment>
		<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <name>INITIAL_EXPBUFFER_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * destroyPQExpBuffer(str);
 *
 *		free()s both the data buffer and the PQExpBufferData.
 *		This is the inverse of createPQExpBuffer().
 */</comment>
<function><type><name>void</name></type>
<name>destroyPQExpBuffer</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * termPQExpBuffer(str)
 *		free()s the data buffer but not the PQExpBufferData itself.
 *		This is the inverse of initPQExpBuffer().
 */</comment>
<function><type><name>void</name></type>
<name>termPQExpBuffer</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>oom_buffer</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* just for luck, make the buffer validly empty. */</comment>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>oom_buffer_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* see comment above */</comment>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * resetPQExpBuffer
 *		Reset a PQExpBuffer to empty
 *
 * Note: if possible, a "broken" PQExpBuffer is returned to normal.
 */</comment>
<function><type><name>void</name></type>
<name>resetPQExpBuffer</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>!=</operator> <name>oom_buffer</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* try to reinitialize to valid state */</comment>
			<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * enlargePQExpBuffer
 * Make sure there is enough space for 'needed' more bytes in the buffer
 * ('needed' does not include the terminating null).
 *
 * Returns 1 if OK, 0 if failed to enlarge buffer.  (In the latter case
 * the buffer is left in "broken" state.)
 */</comment>
<function><type><name>int</name></type>
<name>enlargePQExpBuffer</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>newlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>newdata</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* already failed */</comment>

	<comment type="block">/*
	 * Guard against ridiculous "needed" values, which can occur if we're fed
	 * bogus data.  Without this, we can get an overflow or infinite loop in
	 * the following.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>INT_MAX</name> <operator>-</operator> <name><name>str</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>markPQExpBufferBroken</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>needed</name> <operator>+=</operator> <name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>		<comment type="block">/* total space required now */</comment>

	<comment type="block">/* Because of the above test, we now have needed &lt;= INT_MAX */</comment>

	<if_stmt><if>if <condition>(<expr><name>needed</name> <operator>&lt;=</operator> <name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* got enough space already */</comment>

	<comment type="block">/*
	 * We don't want to allocate just a little more space with each append;
	 * for efficiency, double the buffer size each time it overflows.
	 * Actually, we might need to more than double it if 'needed' is big...
	 */</comment>
	<expr_stmt><expr><name>newlen</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>needed</name> <operator>&gt;</operator> <name>newlen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>newlen</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>newlen</name></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/*
	 * Clamp to INT_MAX in case we went past it.  Note we are assuming here
	 * that INT_MAX &lt;= UINT_MAX/2, else the above loop could overflow.  We
	 * will still have newlen &gt;= needed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>newlen</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>newlen</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>newdata</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>newlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newdata</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>newdata</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <name>newlen</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>markPQExpBufferBroken</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * printfPQExpBuffer
 * Format text data under the control of fmt (an sprintf-like format string)
 * and insert it into str.  More space is allocated to str if necessary.
 * This is a convenience routine that does the same thing as
 * resetPQExpBuffer() followed by appendPQExpBuffer().
 */</comment>
<function><type><name>void</name></type>
<name>printfPQExpBuffer</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>done</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* already failed */</comment>

	<comment type="block">/* Loop in case we have to retry after enlarging the buffer. */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>appendPQExpBufferVA</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>;</do>
</block_content>}</block></function>

<comment type="block">/*
 * appendPQExpBuffer
 *
 * Format text data under the control of fmt (an sprintf-like format string)
 * and append it to whatever is already in str.  More space is allocated
 * to str if necessary.  This is sort of like a combination of sprintf and
 * strcat.
 */</comment>
<function><type><name>void</name></type>
<name>appendPQExpBuffer</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>done</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQExpBufferBroken</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* already failed */</comment>

	<comment type="block">/* Loop in case we have to retry after enlarging the buffer. */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>done</name> <operator>=</operator> <call><name>appendPQExpBufferVA</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>;</do>
</block_content>}</block></function>

<comment type="block">/*
 * appendPQExpBufferVA
 * Shared guts of printfPQExpBuffer/appendPQExpBuffer.
 * Attempt to format data and append it to str.  Returns true if done
 * (either successful or hard failure), false if need to retry.
 *
 * Caution: callers must be sure to preserve their entry-time errno
 * when looping, in case the fmt contains "%m".
 */</comment>
<function><type><name>bool</name></type>
<name>appendPQExpBufferVA</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>avail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>needed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nprinted</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Try to format the given string into the available space; but if there's
	 * hardly any space, don't bother trying, just enlarge the buffer first.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>&gt;</operator> <name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">16</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>avail</name> <operator>=</operator> <name><name>str</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>-</operator> <name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>nprinted</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>avail</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If vsnprintf reports an error, fail (we assume this means there's
		 * something wrong with the format string).
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nprinted</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>markPQExpBufferBroken</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>nprinted</name> <operator>&lt;</operator> <name>avail</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Success.  Note nprinted does not include trailing null. */</comment>
			<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>nprinted</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We assume a C99-compliant vsnprintf, so believe its estimate of the
		 * required space, and add one for the trailing null.  (If it's wrong,
		 * the logic will still work, but we may loop multiple times.)
		 *
		 * Choke if the required space would exceed INT_MAX, since str-&gt;maxlen
		 * can't represent more than that.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nprinted</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>markPQExpBufferBroken</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>needed</name> <operator>=</operator> <name>nprinted</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * We have to guess at how much to enlarge, since we're skipping the
		 * formatting work.  Fortunately, because of enlargePQExpBuffer's
		 * preference for power-of-2 sizes, this number isn't very sensitive;
		 * the net effect is that we'll double the buffer size before trying
		 * to run vsnprintf, which seems sensible.
		 */</comment>
		<expr_stmt><expr><name>needed</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Increase the buffer size and try again. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enlargePQExpBuffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* oops, out of memory */</comment>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * appendPQExpBufferStr
 * Append the given string to a PQExpBuffer, allocating more space
 * if necessary.
 */</comment>
<function><type><name>void</name></type>
<name>appendPQExpBufferStr</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>appendBinaryPQExpBuffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * appendPQExpBufferChar
 * Append a single byte to str.
 * Like appendPQExpBuffer(str, "%c", ch) but much faster.
 */</comment>
<function><type><name>void</name></type>
<name>appendPQExpBufferChar</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Make more room if needed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enlargePQExpBuffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* OK, append the character */</comment>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * appendBinaryPQExpBuffer
 *
 * Append arbitrary binary data to a PQExpBuffer, allocating more space
 * if necessary.
 */</comment>
<function><type><name>void</name></type>
<name>appendBinaryPQExpBuffer</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>datalen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Make more room if needed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>enlargePQExpBuffer</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* OK, append the data */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>str</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>datalen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Keep a trailing null in place, even though it's probably useless for
	 * binary data...
	 */</comment>
	<expr_stmt><expr><name><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
