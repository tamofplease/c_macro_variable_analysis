<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/interfaces/libpq/libpq-events.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * libpq-events.c
 *	  functions for supporting the libpq "events" API
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/interfaces/libpq/libpq-events.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Registers an event proc with the given PGconn.
 *
 * The same proc can't be registered more than once in a PGconn.  This
 * restriction is required because we use the proc address to identify
 * the event for purposes such as PQinstanceData().
 *
 * The name argument is used within error messages to aid in debugging.
 * A name must be supplied, but it needn't be unique.  The string is
 * copied, so the passed value needn't be long-lived.
 *
 * The passThrough argument is an application specific pointer and can be set
 * to NULL if not required.  It is passed through to the event proc whenever
 * the event proc is called, and is not otherwise touched by libpq.
 *
 * The function returns a non-zero if successful.  If the function fails,
 * zero is returned.
 */</comment>
<function><type><name>int</name></type>
<name>PQregisterEventProc</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>PGEventProc</name></type> <name>proc</name></decl></parameter>,
					<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>passThrough</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGEventRegister</name></type> <name>regevt</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc</name> <operator>||</operator> <operator>!</operator><name>conn</name> <operator>||</operator> <operator>!</operator><name>name</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* bad arguments */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>==</operator> <name>proc</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>		<comment type="block">/* already registered */</comment>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name> <operator>&gt;=</operator> <name><name>conn</name><operator>-&gt;</operator><name>eventArraySize</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGEvent</name>    <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>newSize</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>newSize</name> <operator>=</operator> <ternary><condition><expr><name><name>conn</name><operator>-&gt;</operator><name>eventArraySize</name></name></expr> ?</condition><then> <expr><name><name>conn</name><operator>-&gt;</operator><name>eventArraySize</name></name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>events</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>PGEvent</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name></name></expr></argument>, <argument><expr><name>newSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGEvent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>PGEvent</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>newSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGEvent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>e</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>eventArraySize</name></name> <operator>=</operator> <name>newSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>=</operator> <name>proc</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>]</index></name><operator>.</operator><name>passThrough</name> <operator>=</operator> <name>passThrough</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>]</index></name><operator>.</operator><name>resultInitialized</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>regevt</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>proc</name><argument_list>(<argument><expr><name>PGEVT_REGISTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>regevt</name></expr></argument>, <argument><expr><name>passThrough</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set some "instance data" for an event within a PGconn.
 * Returns nonzero on success, zero on failure.
 */</comment>
<function><type><name>int</name></type>
<name>PQsetInstanceData</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>PGEventProc</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name> <operator>||</operator> <operator>!</operator><name>proc</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>==</operator> <name>proc</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Obtain the "instance data", if any, for the event.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>PQinstanceData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>PGEventProc</name></type> <name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conn</name> <operator>||</operator> <operator>!</operator><name>proc</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>conn</name><operator>-&gt;</operator><name>nEvents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>==</operator> <name>proc</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>conn</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set some "instance data" for an event within a PGresult.
 * Returns nonzero on success, zero on failure.
 */</comment>
<function><type><name>int</name></type>
<name>PQresultSetInstanceData</name><parameter_list>(<parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>PGEventProc</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name> <operator>||</operator> <operator>!</operator><name>proc</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>nEvents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>==</operator> <name>proc</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Obtain the "instance data", if any, for the event.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>PQresultInstanceData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>PGEventProc</name></type> <name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name> <operator>||</operator> <operator>!</operator><name>proc</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>nEvents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc</name> <operator>==</operator> <name>proc</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Fire RESULTCREATE events for an application-created PGresult.
 *
 * The conn argument can be NULL if event procedures won't use it.
 */</comment>
<function><type><name>int</name></type>
<name>PQfireResultCreateEvents</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>nEvents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>resultInitialized</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PGEventResultCreate</name></type> <name>evt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>evt</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>evt</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>res</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>proc</name><argument_list>(<argument><expr><name>PGEVT_RESULTCREATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>evt</name></expr></argument>,
									 <argument><expr><name><name>res</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>passThrough</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>resultInitialized</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
