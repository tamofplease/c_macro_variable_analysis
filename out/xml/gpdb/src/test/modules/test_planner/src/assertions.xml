<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/test/modules/test_planner/src/assertions.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"assertions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>int_to_bool_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="string">"false"</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="string">"true"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>int_to_int_string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_succeeded</name><parameter_list>(
	<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test_function_name</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>test_file_name</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>test_line_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(
		<argument><expr><name>INFO</name></expr></argument>,
		<argument><expr><literal type="string">"Success %s - %s:%d"</literal></expr></argument>,
		<argument><expr><name>test_function_name</name></expr></argument>,
		<argument><expr><name>test_file_name</name></expr></argument>,
		<argument><expr><name>test_line_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>test_failed</name><parameter_list>(
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>,
	<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>actual</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_function_name</name></decl></parameter>,
	<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_file_name</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>test_line_number</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(
		<argument><expr><name>WARNING</name></expr></argument>,
		<argument><expr><literal type="string">"expected %s, was %s in %s - %s:%d"</literal></expr></argument>,
		<argument><expr><name>expected</name></expr></argument>,
		<argument><expr><name>actual</name></expr></argument>,
		<argument><expr><name>test_function_name</name></expr></argument>,
		<argument><expr><name>test_file_name</name></expr></argument>,
		<argument><expr><name>test_line_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
