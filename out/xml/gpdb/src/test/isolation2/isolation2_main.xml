<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/test/isolation2/isolation2_main.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * isolation2_main --- pg_regress test launcher for Python isolation tests
 *
 * Portions Copyright (c) 1996-2011, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/test/isolation2/isolation2_main.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_regress.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
 * start a Python isolation tester process for specified file (including
 * redirection), and return process ID
 */</comment>
<function><type><specifier>static</specifier> <name>PID_TYPE</name></type>
<name>isolation_start_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testname</name></decl></parameter>,
					 <parameter><decl><type><name>_stringlist</name> <modifier>*</modifier><modifier>*</modifier></type> <name>resultfiles</name></decl></parameter>,
					 <parameter><decl><type><name>_stringlist</name> <modifier>*</modifier><modifier>*</modifier></type> <name>expectfiles</name></decl></parameter>,
					 <parameter><decl><type><name>_stringlist</name> <modifier>*</modifier><modifier>*</modifier></type> <name>tags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PID_TYPE</name></type>	<name>pid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>infile</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>outfile</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>expectfile</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>psql_cmd</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lastslash</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Look for files in the output dir first, consistent with a vpath search.
	 * This is mainly to create more reasonable error messages if the file is
	 * not found.  It also allows local test overrides when running pg_regress
	 * outside of the source tree.
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/sql/%s.sql"</literal></expr></argument>,
			 <argument><expr><name>outputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/sql/%s.sql"</literal></expr></argument>,
				 <argument><expr><name>inputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/results/%s.out"</literal></expr></argument>,
			 <argument><expr><name>outputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the test name contains slashes, create intermediary results
	 * directory.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>lastslash</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>resultdir</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>resultdir</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>lastslash</name> <operator>-</operator> <name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>resultdir</name><index>[<expr><name>lastslash</name> <operator>-</operator> <name>outfile</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>mkdir</name><argument_list>(<argument><expr><name>resultdir</name></expr></argument>, <argument><expr><name>S_IRWXU</name> <operator>|</operator> <name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EEXIST</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* exists already, that's OK */</comment>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not create directory \"%s\": %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>resultdir</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>optimizer_enabled</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/expected/%s_optimizer.out"</literal></expr></argument>,
				 <argument><expr><name>outputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>expectfile</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/expected/%s_optimizer.out"</literal></expr></argument>,
					 <argument><expr><name>inputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// if optimizer is off or there is no orca-specific answer file, then</comment>
	<comment type="line">// use the default answer file</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>expectfile</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/expected/%s.out"</literal></expr></argument>,
				 <argument><expr><name>outputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>file_exists</name><argument_list>(<argument><expr><name>expectfile</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectfile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectfile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/expected/%s.out"</literal></expr></argument>,
					 <argument><expr><name>inputdir</name></expr></argument>, <argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>resultfiles</name></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><name>expectfiles</name></expr></argument>, <argument><expr><name>expectfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>launcher</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>psql_cmd</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psql_cmd</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>offset</name></expr></argument>,
						   <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>launcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psql_cmd</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psql_cmd</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>offset</name></expr></argument>,
			 <argument><expr><literal type="string">"python3 ./sql_isolation_testcase.py --dbname=\"%s\" --initfile_prefix=\"%s\" &lt; \"%s\" &gt; \"%s\" 2&gt;&amp;1"</literal></expr></argument>,
			 <argument><expr><name><name>dblist</name><operator>-&gt;</operator><name>str</name></name></expr></argument>,
			 <argument><expr><name>outfile</name></expr></argument>,
			 <argument><expr><name>infile</name></expr></argument>,
			 <argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>spawn_process</name><argument_list>(<argument><expr><name>psql_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <name>INVALID_PID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not start process for test %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>testname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>isolation_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* set default regression database name */</comment>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dblist</name></expr></argument>, <argument><expr><literal type="string">"isolation2test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* run setup test as prerequisite for running tests */</comment>
	<expr_stmt><expr><call><name>add_stringlist_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name>setup_tests</name></expr></argument>, <argument><expr><literal type="string">"setup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>regression_main</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>isolation_init</name></expr></argument>, <argument><expr><name>isolation_start_test</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
