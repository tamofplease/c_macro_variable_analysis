<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/test/isolation2/workfile_mgr_test.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * workfile_mgr_test.c
 *	 Unit tests for workfile manager and cache.
 *
 * Portions Copyright (c) 2012, EMC Corp.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/test/regress/workfile_mgr_test.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbgang.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buffile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/logtape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/workfile_mgr.h"</cpp:file></cpp:include>

<comment type="block">/* Number of Workfiles created during the "stress" workfile test */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MAX_NUM_WORKFILES</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<comment type="block">/* Used to specify created workfiles, default is TEST_MAX_NUM_WORKFILES */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>num_workfiles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tests_passed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tests_failed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tests_total</name></decl>;</decl_stmt>

<comment type="block">/* Test definitions */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>execworkfile_buffile_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>buffile_size_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>buffile_large_file_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>logicaltape_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>execworkfile_create_one_MB_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>workfile_fill_sharedcache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>workfile_create_and_set_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>workfile_create_and_individual_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>workfile_made_in_temp_tablespace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>workfile_create_and_individual_cleanup_with_pinned_workfile_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>atomic_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Unit tests helper */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unit_test_result</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>unit_test_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>unit_test_summary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>gp_workfile_mgr_test_harness</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>Datum</name></type> <name>gp_workfile_mgr_create_workset</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_STR</name><parameter_list>(<parameter><type><name>textp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DatumGetCString(DirectFunctionCall1(textout, PointerGetDatum(textp)))</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>gp_workfile_mgr_test</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>test_def</name>
<block>{
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>test_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>gp_workfile_mgr_test</name></type> <name>test_func</name></decl>;</decl_stmt>
}</block></struct></type> <name>test_def</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>test_def</name></type> <name><name>test_defns</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"execworkfile_buffile_test"</literal></expr>, <expr><name>execworkfile_buffile_test</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"atomic_test"</literal></expr>, <expr><name>atomic_test</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"buffile_size_test"</literal></expr>, <expr><name>buffile_size_test</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"buffile_large_file_test"</literal></expr>, <expr><name>buffile_large_file_test</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"logicaltape_test"</literal></expr>, <expr><name>logicaltape_test</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"execworkfile_create_one_MB_file"</literal></expr>,<expr><name>execworkfile_create_one_MB_file</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"workfile_fill_sharedcache"</literal></expr>, <expr><name>workfile_fill_sharedcache</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"workfile_create_and_set_cleanup"</literal></expr>, <expr><name>workfile_create_and_set_cleanup</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"workfile_create_and_individual_cleanup"</literal></expr>, <expr><name>workfile_create_and_individual_cleanup</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"workfile_made_in_temp_tablespace"</literal></expr>, <expr><name>workfile_made_in_temp_tablespace</name></expr>}</block></expr>,
		<expr><block>{<expr><literal type="string">"workfile_create_and_individual_cleanup_with_pinned_workfile_set"</literal></expr>, <expr><name>workfile_create_and_individual_cleanup_with_pinned_workfile_set</name></expr>}</block></expr>,
		<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <comment type="block">/* This has to be the last element of the array */</comment>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gp_workfile_mgr_test_harness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>gp_workfile_mgr_test_harness</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>test_name</name> <init>= <expr><call><name>GET_STR</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>run_all_tests</name> <init>= <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>test_name</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ran_any_tests</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>num_workfiles</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>num_workfiles</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>num_workfiles</name> <operator>&gt;</operator> <name>TEST_MAX_NUM_WORKFILES</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>num_workfiles</name> <operator>=</operator> <name>TEST_MAX_NUM_WORKFILES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>crt_test</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>test_defns</name><index>[<expr><name>crt_test</name></expr>]</index></name><operator>.</operator><name>test_name</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>run_all_tests</name> <operator>||</operator> <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>test_name</name></expr></argument>, <argument><expr><name><name>test_defns</name><index>[<expr><name>crt_test</name></expr>]</index></name><operator>.</operator><name>test_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>&amp;&amp;</operator> <name><name>test_defns</name><index>[<expr><name>crt_test</name></expr>]</index></name><operator>.</operator><call><name>test_func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ran_any_tests</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>crt_test</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ran_any_tests</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"No tests match given name: %s"</literal></expr></argument>, <argument><expr><name>test_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>ran_any_tests</name> <operator>&amp;&amp;</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>gp_workfile_mgr_create_workset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>gp_workfile_mgr_create_workset</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>emptySet</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>interXact</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>holdPin</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>closeFile</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>worksetName</name> <init>= <expr><call><name>GET_STR</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>emptySet</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>interXact</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>holdPin</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>closeFile</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	
	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>buffile</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name> <init>= <expr><call><name>workfile_mgr_create_set</name><argument_list>(<argument><expr><name>worksetName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>holdPin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>work_set</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>emptySet</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>buffile</name> <operator>=</operator> <call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>interXact</name></expr></argument>, <argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>closeFile</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name>buffile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Creates a StringInfo object holding n_chars characters.
 */</comment>
<function><type><specifier>static</specifier> <name>StringInfo</name></type>
<name>create_text_stringinfo</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>n_chars</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>strInfo</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><literal type="string">"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int64</name></type> <name>to_write</name> <init>= <expr><name>n_chars</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>to_write</name> <operator>&gt;=</operator> <operator>(</operator><name>int64</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>strInfo</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>to_write</name> <operator>-=</operator> <operator>(</operator><name>int64</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>to_write</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>to_write</name> <operator>&lt;</operator> <operator>(</operator><name>int64</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Pad end */</comment>
	<while>while <condition>(<expr><name>to_write</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>strInfo</name></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>to_write</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>strInfo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit tests for new ExecWorkfile and WorkfileSegspace functionality
 *  with underlying Buffile files
 *
 * This test is only run when the per-segment limit GUC is non-zero.
 * If GUC is 0, then we don't keep track of the per-segment used size.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>execworkfile_buffile_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>expected_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>final_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>current_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>initial_diskspace</name> <init>= <expr><call><name>WorkfileSegspace_GetSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: execworkfile_buffile_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>gp_workfile_limit_per_segment</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Skipping test because the gp_workfile_limit_per_segment is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Create file name */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name> <init>= <expr><literal type="string">"test_execworkfile_buffile.dat"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Creating EWF/Buffile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>ewf</name> <init>= <expr><call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>,
										  <argument><expr><name>false</name></expr></argument> <comment type="block">/* interXact */</comment>,
										  <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* work_set */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>write_ewf</name> <init>= <expr><name>ewf</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>ewf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>nchars</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>text</name> <init>= <expr><call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Writing small amount data to EWF/Buffile and checking size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>written</name> <init>= <expr><call><name>BufFileWrite</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>expected_size</name> <operator>+=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>written</name> <operator>==</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <name>expected_size</name> <operator>==</operator> <call><name>WorkfileSegspace_GetSize</name><argument_list>()</argument_list></call> <operator>-</operator> <name>initial_diskspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Writing larger amount data (%d bytes) to EWF/Buffile and checking size"</literal></expr></argument>, <argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>BufFileWrite</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expected_size</name> <operator>+=</operator> <name>nchars</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>written</name> <operator>==</operator> <name>nchars</name> <operator>&amp;&amp;</operator> <name>expected_size</name> <operator>==</operator> <call><name>WorkfileSegspace_GetSize</name><argument_list>()</argument_list></call> <operator>-</operator> <name>initial_diskspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Writing to the middle of a EWF/Buffile and checking size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>BufFileSeek</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* fileno */</comment>, <argument><expr><call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This write should not add to the size */</comment>
	<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>BufFileWrite</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>success</name> <operator>&amp;&amp;</operator> <name>expected_size</name> <operator>==</operator> <call><name>WorkfileSegspace_GetSize</name><argument_list>()</argument_list></call> <operator>-</operator> <name>initial_diskspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Seeking past end and writing data to EWF/Buffile and checking size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>past_end_offset</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>past_end_write</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>BufFileSeek</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* fileno */</comment>, <argument><expr><call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>past_end_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>written</name> <operator>=</operator> <call><name>BufFileWrite</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>past_end_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expected_size</name> <operator>+=</operator> <name>past_end_offset</name> <operator>+</operator> <name>past_end_write</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>written</name> <operator>==</operator> <name>past_end_write</name> <operator>&amp;&amp;</operator> <name>expected_size</name> <operator>==</operator> <call><name>WorkfileSegspace_GetSize</name><argument_list>()</argument_list></call> <operator>-</operator> <name>initial_diskspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Closing EWF/Buffile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// keep it open</comment>
	<expr_stmt><expr><name>final_size</name> <operator>=</operator> <call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>final_size</name> <operator>==</operator> <name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>write_ewf</name> <operator>=</operator> <name>ewf</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Opening existing EWF/Buffile and checking size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ewf</name> <operator>=</operator> <call><name>BufFileCreateTemp</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>,
							   <argument><expr><name>false</name></expr></argument> <comment type="block">/* interXact */</comment>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>current_size</name> <operator>=</operator> <call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>current_size</name> <operator>==</operator> <name>final_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Reading from reopened EWF/Buffile file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>BufFileRead</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Closing EWF/Buffile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>final_size</name> <operator>=</operator> <call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>final_size</name> <operator>==</operator> <name>current_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Closing and deleting file from disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name>write_ewf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit tests for the buffile size functionality
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>buffile_size_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: buffile_size_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Creating buffile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create file name */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name> <init>= <expr><literal type="string">"test_buffile.dat"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>testBf</name> <init>= <expr><call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>,
											 <argument><expr><name>false</name></expr></argument> <comment type="block">/* interXact */</comment>,
											 <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* workfile_set */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>testBf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Size of newly created buffile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>test_size</name> <init>= <expr><call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>test_size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Writing to new buffile and reading size &lt; bufsize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nchars</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>expected_size</name> <init>= <expr><name>nchars</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>text</name> <init>= <expr><call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>BufFileWrite</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_size</name> <operator>=</operator> <call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>test_size</name> <operator>==</operator> <name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Writing to new buffile and reading size &gt; bufsize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nchars</name> <operator>=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>expected_size</name> <operator>+=</operator> <name>nchars</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BufFileWrite</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_size</name> <operator>=</operator> <call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>test_size</name> <operator>==</operator> <name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: seeking back and writing then testing size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BufFileSeek</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* fileno */</comment>, <argument><expr><name>expected_size</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This write should not add to the size */</comment>
	<expr_stmt><expr><call><name>BufFileWrite</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>expected_size</name> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_size</name> <operator>=</operator> <call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>test_size</name> <operator>==</operator> <name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Opening existing and testing size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>testBf1</name> <init>= <expr><name>testBf</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>test_size</name> <operator>=</operator> <call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>testBf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>test_size</name> <operator>==</operator> <name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Seek past end, appending and testing size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>past_end_offset</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>past_end_write</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>BufFileSeek</name><argument_list>(<argument><expr><name>testBf1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* fileno */</comment>, <argument><expr><name>expected_size</name> <operator>+</operator> <name>past_end_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BufFileWrite</name><argument_list>(<argument><expr><name>testBf1</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>past_end_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>expected_size</name> <operator>+=</operator> <name>past_end_offset</name> <operator>+</operator> <name>past_end_write</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>test_size</name> <operator>=</operator> <call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>testBf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>test_size</name> <operator>==</operator> <name>expected_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Closing buffile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name>testBf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit test for the atomic functions
 *
 * These are functional tests, they only test for correctness with no concurrency
 *
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>atomic_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: atomic_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: pg_atomic_compare_exchange_u64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>dest</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>old</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>new</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Before: dest=%d, old=%d, new=%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>old</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int32</name></type> <name>result</name> <init>= <expr><call><name>pg_atomic_compare_exchange_u64</name><argument_list>(<argument><expr><operator>(</operator><name>pg_atomic_uint64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>old</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"After: dest=%d, old=%d, new=%d, result=%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>dest</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>old</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>new</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>dest</name> <operator>==</operator> <name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: pg_atomic_add_fetch_u64 small addition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int64</name></type> <name>base</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type> <name>inc</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type> <name>expected_result</name> <init>= <expr><name>base</name> <operator>+</operator> <name>inc</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Before: base=%lld, inc=%lld, result=%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>inc</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pg_atomic_add_fetch_u64</name><argument_list>(<argument><expr><operator>(</operator><name>pg_atomic_uint64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"After: base=%lld, inc=%lld, result=%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>inc</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected_result</name> <operator>&amp;&amp;</operator> <name>base</name> <operator>==</operator> <name>expected_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: pg_atomic_sub_fetch_u64 small subtraction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>inc</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>expected_result</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>inc</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Before: base=%lld, inc=%lld, result=%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>inc</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pg_atomic_sub_fetch_u64</name><argument_list>(<argument><expr><operator>(</operator><name>pg_atomic_uint64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"After: base=%lld, inc=%lld, result=%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>inc</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected_result</name> <operator>&amp;&amp;</operator> <name>base</name> <operator>==</operator> <name>expected_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: pg_atomic_add_fetch_u64 huge addition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">37421634719307</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>inc</name>  <operator>=</operator> <literal type="number">738246483234</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>expected_result</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>inc</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Before: base=%lld, inc=%lld, result=%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>inc</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pg_atomic_add_fetch_u64</name><argument_list>(<argument><expr><operator>(</operator><name>pg_atomic_uint64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"After: base=%lld, inc=%lld, result=%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>inc</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected_result</name> <operator>&amp;&amp;</operator> <name>base</name> <operator>==</operator> <name>expected_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: pg_atomic_sub_fetch_u64 huge subtraction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>inc</name>  <operator>=</operator> <literal type="number">32738246483234</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>expected_result</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>inc</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Before: base=%lld, inc=%lld, result=%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>inc</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pg_atomic_sub_fetch_u64</name><argument_list>(<argument><expr><operator>(</operator><name>pg_atomic_uint64</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><name>inc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"After: base=%lld, inc=%lld, result=%lld"</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>base</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>inc</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name> <name>int</name><operator>)</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>expected_result</name> <operator>&amp;&amp;</operator> <name>base</name> <operator>==</operator> <name>expected_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>


	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit test for BufFile support of large files (greater than 4 GB).
 *
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>buffile_large_file_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: buffile_large_file_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>file_name</name> <init>= <expr><literal type="string">"Test_large_buff.dat"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>bfile</name> <init>= <expr><call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>,
											<argument><expr><name>true</name></expr></argument> <comment type="block">/* interXact */</comment>,
											<argument><expr><name>NULL</name></expr></argument> <comment type="block">/* workfile_set */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>nchars</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* 4.5 GBs */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>total_entries</name> <init>= <expr><literal type="number">48319</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Entry that requires an int64 seek */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>test_entry</name> <init>= <expr><literal type="number">45000</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>test_string</name> <init>= <expr><call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Creating file %s"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>test_entry</name> <operator>==</operator> <name>i</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>BufFileWrite</name><argument_list>(<argument><expr><name>bfile</name></expr></argument>, <argument><expr><name><name>test_string</name><operator>-&gt;</operator><name>data</name></name></expr></argument> , <argument><expr><name>nchars</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>StringInfo</name></type> <name>text</name> <init>= <expr><call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>BufFileWrite</name><argument_list>(<argument><expr><name>bfile</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument> , <argument><expr><name>nchars</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Reading record %s"</literal></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>nchars</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>BufFileSeek</name><argument_list>(<argument><expr><name>bfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* fileno */</comment>, <argument><expr><operator>(</operator><name>int64</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator><name>test_entry</name> <operator>*</operator> <operator>(</operator><name>int64</name><operator>)</operator> <name>nchars</name><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>nread</name> <init>= <expr><call><name>BufFileRead</name><argument_list>(<argument><expr><name>bfile</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nchars</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name>bfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Verify correct size of the inserted record and content */</comment>
	<expr_stmt><expr><call><name>unit_test_result</name> <argument_list>(<argument><expr><name>nread</name> <operator>==</operator> <name>nchars</name> <operator>&amp;&amp;</operator>
					 <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name><name>test_string</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>test_string</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>test_string</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>test_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit test for logical tape's support for large spill files.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>logicaltape_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: logicaltape_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>max_tapes</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nchars</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* 4.5 GBs */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>max_entries</name> <init>= <expr><literal type="number">48319</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Target record values */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>test_tape</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>test_entry</name> <init>= <expr><literal type="number">45000</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>LogicalTapeSet</name> <modifier>*</modifier></type><name>tape_set</name> <init>= <expr><call><name>LogicalTapeSetCreate</name><argument_list>(<argument><expr><name>max_tapes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>work_tape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>blocknum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>test_string</name> <init>= <expr><call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Creating LogicalTape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fill LogicalTapeSet */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_tapes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>work_tape</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

		<comment type="block">/* Create large SpillFile for LogicalTape */</comment>
		<if_stmt><if>if <condition>(<expr><name>test_tape</name> <operator>==</operator> <name>i</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Fill LogicalTape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>max_entries</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>( <expr><name>j</name> <operator>==</operator> <name>test_entry</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>LogicalTapeTell</name><argument_list>(<argument><expr><name>tape_set</name></expr></argument>, <argument><expr><name>work_tape</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blocknum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LogicalTapeWrite</name><argument_list>(<argument><expr><name>tape_set</name></expr></argument>, <argument><expr><name>work_tape</name></expr></argument>, <argument><expr><name><name>test_string</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>test_string</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* Add additional records */</comment>
					<decl_stmt><decl><type><name>StringInfo</name></type> <name>text</name> <init>= <expr><call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>LogicalTapeWrite</name><argument_list>(<argument><expr><name>tape_set</name></expr></argument>, <argument><expr><name>work_tape</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>text</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Add additional records */</comment>
			<decl_stmt><decl><type><name>StringInfo</name></type> <name>text</name> <init>= <expr><call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>LogicalTapeWrite</name><argument_list>(<argument><expr><name>tape_set</name></expr></argument>, <argument><expr><name>work_tape</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>text</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

	</block_content>}</block></for>

	<comment type="block">/* Set target LogicalTape */</comment>
	<expr_stmt><expr><name>work_tape</name> <operator>=</operator> <name>test_tape</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>nchars</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Freeze LogicalTape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LogicalTapeFreeze</name><argument_list>(<argument><expr><name>tape_set</name></expr></argument>, <argument><expr><name>work_tape</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Seek in LogicalTape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LogicalTapeSeek</name><argument_list>(<argument><expr><name>tape_set</name></expr></argument>, <argument><expr><name>work_tape</name></expr></argument>, <argument><expr><name>blocknum</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Reading from LogicalTape"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LogicalTapeRead</name><argument_list>(<argument><expr><name>tape_set</name></expr></argument>, <argument><expr><name>work_tape</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>nchars</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LogicalTapeSetClose</name><argument_list>(<argument><expr><name>tape_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name> <argument_list>(<argument><expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>test_string</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>test_string</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit test for writing a one MB execworkfile.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>execworkfile_create_one_MB_file</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: execworkfile_one_MB_file_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>filename</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,
					 <argument><expr><literal type="string">"%s"</literal></expr></argument>,
					 <argument><expr><literal type="string">"Test_buffile_one_MB_file_test.dat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>ewf</name> <init>= <expr><call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><name><name>filename</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
										  <argument><expr><name>false</name></expr></argument> <comment type="block">/* interXact */</comment>,
										  <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* work_set */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Number of characters in a MB */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nchars</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Creating file %s"</literal></expr></argument>, <argument><expr><name><name>filename</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>text</name> <init>= <expr><call><name>create_text_stringinfo</name><argument_list>(<argument><expr><name>nchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>BufFileWrite</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>, <argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>nchars</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>text</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Closing file %s"</literal></expr></argument>, <argument><expr><name><name>filename</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int64</name></type> <name>final_size</name> <init>= <expr><call><name>BufFileGetSize</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name>ewf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Verify correct size of the created file */</comment>
	<expr_stmt><expr><call><name>unit_test_result</name> <argument_list>(<argument><expr><name>final_size</name> <operator>==</operator> <operator>(</operator><name>int64</name><operator>)</operator><name>nchars</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>filename</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit test that inserts many entries in the workfile mgr shared cache
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>workfile_fill_sharedcache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: workfile_fill_sharedcache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n_entries</name> <init>= <expr><name>gp_workfile_max_entries</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Creating %d empty workfile sets"</literal></expr></argument>, <argument><expr><name>n_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>crt_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>crt_entry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>crt_entry</name> <operator>&lt;</operator> <name>n_entries</name></expr>;</condition> <incr><expr><name>crt_entry</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name> <init>= <expr><call><name>workfile_mgr_create_set</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* hold pin */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>work_set</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

<comment type="block">/*
 * Unit test that creates very many workfiles, and then cleans them up
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>workfile_create_and_set_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: workfile_create_and_set_cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Create Workset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name> <init>= <expr><call><name>workfile_mgr_create_set</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* hold pin */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Create %d workfiles"</literal></expr></argument>, <argument><expr><name>num_workfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>ewfiles</name> <init>= <expr><operator>(</operator><name>BufFile</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>num_workfiles</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufFile</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_workfiles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ewfiles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* interXact */</comment>, <argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ewfiles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">999</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Created %d workfiles so far"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Closing Workset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>workfile_mgr_close_set</name><argument_list>(<argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><operator>!</operator><name><name>work_set</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>workfile_made_in_temp_tablespace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bufFilePath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>bufFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set temp_tablespaces at a session level to simulate what a user does
	 */</comment>
	<expr_stmt><expr><call><name>SetConfigOption</name><argument_list>(<argument><expr><literal type="string">"temp_tablespaces"</literal></expr></argument>, <argument><expr><literal type="string">"work_file_test_ts"</literal></expr></argument>, <argument><expr><name>PGC_INTERNAL</name></expr></argument>, <argument><expr><name>PGC_S_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name> <init>= <expr><call><name>workfile_mgr_create_set</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* hold pin */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * BufFileCreateTempInSet calls PrepareTempTablespaces
	 * which parses the temp_tablespaces value and BufFileCreateTempInSet
	 * uses that value as the location for workfile created
	 */</comment>
	<expr_stmt><expr><name>bufFile</name> <operator>=</operator> <call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bufFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>bufFilePath</name> <operator>=</operator> <call><name>BufFileGetFilename</name><argument_list>(<argument><expr><name>bufFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>expectedPathPrefix</name> <init>= <expr><literal type="string">"pg_tblspc/"</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Expect workfile to be created in the temp tablespace specified above,
	 * which will have the prefix, "pg_tblspc". By default,
	 * workfiles are created in data directory having prefix, "base"
	 */</comment>
	<if_stmt><if>if<condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>bufFilePath</name></expr></argument>, <argument><expr><name>expectedPathPrefix</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>expectedPathPrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name>bufFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><operator>!</operator><name><name>work_set</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit test that creates very many workfiles, and then closes them one by one
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>workfile_create_and_individual_cleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: workfile_create_and_individual_cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Create Workset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name> <init>= <expr><call><name>workfile_mgr_create_set</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* hold pin */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Create %d workfiles"</literal></expr></argument>, <argument><expr><name>num_workfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>ewfiles</name> <init>= <expr><operator>(</operator><name>BufFile</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>num_workfiles</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufFile</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_workfiles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ewfiles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* interXact */</comment>, <argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ewfiles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">999</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Created %d workfiles so far"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Closing %d workfiles"</literal></expr></argument>, <argument><expr><name>num_workfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_workfiles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name><name>ewfiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">999</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Closed %d workfiles so far"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* the workfile_set should be freed since all it's files are closed */</comment>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><operator>!</operator><name><name>work_set</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Unit test that creates very many workfiles with pinned workfile_set, and
 * then closes them one by one
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>workfile_create_and_individual_cleanup_with_pinned_workfile_set</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running test: workfile_create_and_individual_cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Create Workset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name> <init>= <expr><call><name>workfile_mgr_create_set</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument> <comment type="block">/* hold pin */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Create %d workfiles"</literal></expr></argument>, <argument><expr><name>num_workfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BufFile</name> <modifier>*</modifier><modifier>*</modifier></type><name>ewfiles</name> <init>= <expr><operator>(</operator><name>BufFile</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>num_workfiles</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufFile</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_workfiles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ewfiles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><literal type="string">"workfile_test"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* interXact */</comment>, <argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ewfiles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">999</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Created %d workfiles so far"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Running sub-test: Closing %d workfiles"</literal></expr></argument>, <argument><expr><name>num_workfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_workfiles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>BufFileClose</name><argument_list>(<argument><expr><name><name>ewfiles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">999</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Closed %d workfiles so far"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* the workfile_set should not be freed since it gets pinned */</comment>
	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><name><name>work_set</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* free the workfile_set */</comment>
	<expr_stmt><expr><call><name>workfile_mgr_close_set</name><argument_list>(<argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>unit_test_result</name><argument_list>(<argument><expr><operator>!</operator><name><name>work_set</name><operator>-&gt;</operator><name>active</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>unit_test_summary</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>unit_test_summary</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Unit tests summary: PASSED: %d/%d, FAILED: %d/%d"</literal></expr></argument>,
			<argument><expr><name>tests_passed</name></expr></argument>, <argument><expr><name>tests_total</name></expr></argument>,
			<argument><expr><name>tests_failed</name></expr></argument>, <argument><expr><name>tests_total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>tests_failed</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unit_test_reset</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>tests_passed</name> <operator>=</operator> <name>tests_failed</name> <operator>=</operator> <name>tests_total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unit_test_result</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>tests_total</name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tests_passed</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"====== PASS ======"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>tests_failed</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"!!!!!! FAIL !!!!!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
