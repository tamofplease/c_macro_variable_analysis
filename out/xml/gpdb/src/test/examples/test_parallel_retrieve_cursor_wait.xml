<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/test/examples/test_parallel_retrieve_cursor_wait.c"><comment type="block">/*
 * src/test/examples/test_parallel_retrieve_cursor_wait.c
 *
 * this program only supports gpdb with the PARALLEL RETRIEVE CURSOR feature.
 * It shows how to use libpq to make a connect to the coordinator node, create
 * a PARALLEL RETRIEVE CURSOR, check it's state in wait mode, and test multiple
 * retrieve mode connections to all endpoints for the PARALLEL RETRIEVE CURSOR
 * (i.e. all segments in this sample) and retrieve the results of these
 * endpoints in parallel.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASTER_CONNECT_INDEX</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>finish_conn_nicely</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>master_conn</name></decl></parameter>, <parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name><name>endpoint_conns</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>endpoint_conns_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>master_conn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endpoint_conns_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>endpoint_conns</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name><name>endpoint_conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>endpoint_conns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>endpoint_conns_num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_prepare_conn</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conn_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* check to see that the backend connection was successfully made */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Connection to database \"%s\" failed: %s"</literal></expr></argument>,
				<argument><expr><name>dbName</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn_idx</name> <operator>==</operator> <name>MASTER_CONNECT_INDEX</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Set always-secure search path, so malicous users can't take
		 * control.
		 */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
					 <argument><expr><literal type="string">"SELECT pg_catalog.set_config('search_path', '', false)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SET failed: %s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* execute sql and check it is a command without result set returned */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>exec_sql_without_resultset</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conn_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res1</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn_idx</name> <operator>==</operator> <name>MASTER_CONNECT_INDEX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nExec SQL on Master:\n\t&gt; %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nExec SQL on EndPoint[%d]:\n\t&gt; %s\n"</literal></expr></argument>, <argument><expr><name>conn_idx</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"execute sql failed: \"%s\"\nfailed %s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * make sure to PQclear() a PGresult whenever it is no longer needed to
	 * avoid memory leaks
	 */</comment>
	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* execute sql and print the result set */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>exec_sql_with_resultset</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>conn_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nFields</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>conn_idx</name> <operator>==</operator> <name>MASTER_CONNECT_INDEX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nExec SQL on Master:\n\t&gt; %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nExec SQL on EndPoint[%d]:\n\t&gt; %s\n"</literal></expr></argument>, <argument><expr><name>conn_idx</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt><empty_stmt>;</empty_stmt>

	<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Query didn't return tuples properly: \"%s\"\nfailed %s"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* first, print out the attribute names */</comment>
	<expr_stmt><expr><name>nFields</name> <operator>=</operator> <call><name>PQnfields</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-15s"</literal></expr></argument>, <argument><expr><call><name>PQfname</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n---------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* next, print out the instances */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nFields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-15s"</literal></expr></argument>, <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* this function is run by the second thread*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>exec_parallel_cursor_threadfunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>master_conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator> <name>master_conn</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* call wait mode monitor UDF and it will wait for finish retrieving. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>exec_sql_with_resultset</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM gp_wait_parallel_retrieve_cursor('myportal');"</literal></expr></argument>, <argument><expr><name>MASTER_CONNECT_INDEX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pghost</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pgport</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pgoptions</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pgoptions_retrieve_mode</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pgtty</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dbName</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>dbUser</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>retVal</name></decl>;</decl_stmt>			<comment type="block">/* return value for this func */</comment>

	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>master_conn</name></decl>,
			  <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>endpoint_conns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>endpoint_conns_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>tokens</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			  <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>endpoint_names</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res1</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: %s dbUser dbName\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"      show how to use PARALLEL RETRIEVE CURSOR to parallelly retrieve data from multiple endpoints.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dbUser</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>dbName</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * begin, by setting the parameters for a backend connection if the
	 * parameters are null, then the system will try to use reasonable
	 * defaults by looking up environment variables or, failing that, using
	 * hardwired constants
	 */</comment>
	<expr_stmt><expr><name>pghost</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>				<comment type="block">/* host name of the backend */</comment>
	<expr_stmt><expr><name>pgport</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>				<comment type="block">/* port of the backend */</comment>
	<expr_stmt><expr><name>pgoptions</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>			<comment type="block">/* special options to start up the backend
								 * server */</comment>
	<expr_stmt><expr><name>pgoptions_retrieve_mode</name> <operator>=</operator> <literal type="string">"-c gp_retrieve_conn=true"</literal></expr>;</expr_stmt>	<comment type="block">/* specify this
															 * connection is for
															 * retrieve only */</comment>
	<expr_stmt><expr><name>pgtty</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>				<comment type="block">/* debugging tty for the backend */</comment>

	<comment type="block">/* make a connection to the database */</comment>
	<expr_stmt><expr><name>master_conn</name> <operator>=</operator> <call><name>PQsetdb</name><argument_list>(<argument><expr><name>pghost</name></expr></argument>, <argument><expr><name>pgport</name></expr></argument>, <argument><expr><name>pgoptions</name></expr></argument>, <argument><expr><name>pgtty</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_prepare_conn</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>MASTER_CONNECT_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* do some preparation for test */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>exec_sql_without_resultset</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><literal type="string">"DROP TABLE IF EXISTS public.tab_parallel_cursor;"</literal></expr></argument>, <argument><expr><name>MASTER_CONNECT_INDEX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>LABEL_ERR</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>exec_sql_without_resultset</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE public.tab_parallel_cursor AS SELECT id FROM pg_catalog.generate_series(1,100) id;"</literal></expr></argument>, <argument><expr><name>MASTER_CONNECT_INDEX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>LABEL_ERR</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * start a transaction block because PARALLEL RETRIEVE CURSOR only
	 * supports WITHOUT HOLD option
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>exec_sql_without_resultset</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><literal type="string">"BEGIN;"</literal></expr></argument>, <argument><expr><name>MASTER_CONNECT_INDEX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>LABEL_ERR</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* declare PARALLEL RETRIEVE CURSOR for this table */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>exec_sql_without_resultset</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><literal type="string">"DECLARE myportal PARALLEL RETRIEVE CURSOR FOR select * from public.tab_parallel_cursor;"</literal></expr></argument>, <argument><expr><name>MASTER_CONNECT_INDEX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>LABEL_ERR</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * get the endpoints info of this PARALLEL RETRIEVE CURSOR
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql1</name> <init>= <expr><literal type="string">"select hostname,port,auth_token,endpointname from gp_get_endpoints() where cursorname='myportal';"</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nExec SQL on Master:\n\t&gt; %s\n"</literal></expr></argument>, <argument><expr><name>sql1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><name>sql1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"select gp_get_endpoints view didn't return tuples properly\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>LABEL_ERR</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* firstly check that the endpoint info rows &gt; 0 */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>ntup</name> <init>= <expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ntup</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"select gp_get_endpoints view doesn't return rows\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>LABEL_ERR</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>endpoint_conns</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ntup</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGconn</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tokens</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ntup</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>endpoint_names</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ntup</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>endpoint_conns_num</name> <operator>=</operator> <name>ntup</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * create retrieve mode connection to endpoints according to the endpoints
	 * info fetched
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntup</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>port</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>endpoint_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res1</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>endpoint_conns</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PQsetdbLogin</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>pgoptions_retrieve_mode</name></expr></argument>,
										 <argument><expr><name>pgtty</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>,
										 <argument><expr><name>dbUser</name></expr></argument>, <argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>check_prepare_conn</name><argument_list>(<argument><expr><name><name>endpoint_conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<decl_stmt><decl><type><name>pthread_t</name></type>	<name>thread1</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Create a second thread to run wait mode monitor UDF because it will
	 * waiting until all data finished retrieved
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thread1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>exec_parallel_cursor_threadfunc</name></expr></argument>, <argument><expr><name>master_conn</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error creating thread of \"execute the PARALLEL RETRIEVE CURSOR\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>LABEL_ERR</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Call it to suspend the main thread, so that the thread of "execute the
	 * PARALLEL RETRIEVE CURSOR" will run fistly, which will make the
	 * statement printed out not misunderstanding. This is not necessary for
	 * functionality.
	 */</comment>
	<expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now the endpoint becomes 'READY' after "DECLARE ... PARALLEL RETRIEVE
	 * CURSOR" returns, then we can retrieve the result of the endpoints in
	 * parallel. This section can be executed parallely on different host or
	 * in different threads/processes on the same host. For simplicity, here
	 * just use loop in one process
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endpoint_conns_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>sql</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n------ Begin retrieving data from Endpoint %d# ------\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * the endpoint is ready to be retrieved when 'DECLARE PARALLEL
		 * RETRIEVE CURSOR returns, here begin to retrieve
		 */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"RETRIEVE ALL FROM ENDPOINT %s;"</literal></expr></argument>, <argument><expr><name><name>endpoint_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>exec_sql_with_resultset</name><argument_list>(<argument><expr><name><name>endpoint_conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error during retrieving result on endpoint.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>LABEL_ERR</name>;</goto>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n------ End retrieving data from Endpoint %d# ------.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* wait for the second thread to finish calling the wait mode monitor UDF */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pthread_join</name><argument_list>(<argument><expr><name>thread1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error joining thread of \"execute the PARALLEL RETRIEVE CURSOR\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>LABEL_ERR</name>;</goto>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* close the cursor */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>exec_sql_without_resultset</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><literal type="string">"CLOSE myportal;"</literal></expr></argument>, <argument><expr><name>MASTER_CONNECT_INDEX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>LABEL_ERR</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* end the transaction */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>exec_sql_without_resultset</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><literal type="string">"END;"</literal></expr></argument>, <argument><expr><name>MASTER_CONNECT_INDEX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>LABEL_ERR</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>retVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<goto>goto <name>LABEL_FINISH</name>;</goto>

<label><name>LABEL_ERR</name>:</label>
	<expr_stmt><expr><name>retVal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>LABEL_FINISH</name>:</label>
	<comment type="block">/* close the connections to the database and cleanup */</comment>
	<expr_stmt><expr><call><name>finish_conn_nicely</name><argument_list>(<argument><expr><name>master_conn</name></expr></argument>, <argument><expr><name>endpoint_conns</name></expr></argument>, <argument><expr><name>endpoint_conns_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tokens</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endpoint_conns_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>endpoint_names</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>endpoint_conns_num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>endpoint_names</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>endpoint_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>endpoint_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>retVal</name></expr>;</return>
</block_content>}</block></function>
</unit>
