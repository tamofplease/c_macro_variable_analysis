<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/test/regress/query_info_hook_test/query_info_hook_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/metrics_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/print.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execdesc.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>_PG_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>query_info_collect_hook_type</name></type> <name>prev_query_info_collect_hook</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>test_hook</name><parameter_list>(<parameter><decl><type><name>QueryMetricsStatus</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>prev_query_info_collect_hook</name> <operator>=</operator> <name>query_info_collect_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>query_info_collect_hook</name> <operator>=</operator> <name>test_hook</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>_PG_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>query_info_collect_hook</name> <operator>=</operator> <name>prev_query_info_collect_hook</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_hook</name><parameter_list>(<parameter><decl><type><name>QueryMetricsStatus</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>!=</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>METRICS_PLAN_NODE_INITIALIZE</name></expr>:</case>
			<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>QueryDesc</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name><name>plannedstmt</name><operator>-&gt;</operator><name>metricsQueryType</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TOP_LEVEL_QUERY</name></expr>:</case> 
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node initializing"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SPI_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node of SPI inner query initializing"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FUNCTION_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node of function inner query initializing"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>METRICS_PLAN_NODE_EXECUTING</name></expr>:</case>
			<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name><name>state</name><operator>-&gt;</operator><name>es_plannedstmt</name><operator>-&gt;</operator><name>metricsQueryType</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TOP_LEVEL_QUERY</name></expr>:</case> 
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node executing node_type: %s"</literal></expr></argument>, 
												<argument><expr><call><name>plannode_type</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name>plan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SPI_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node of SPI inner query executing node_type: %s"</literal></expr></argument>, 
												<argument><expr><call><name>plannode_type</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name>plan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FUNCTION_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node of function inner query executing node_type: %s"</literal></expr></argument>, 
											<argument><expr><call><name>plannode_type</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name>plan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>METRICS_PLAN_NODE_FINISHED</name></expr>:</case>
			<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name><name>state</name><operator>-&gt;</operator><name>es_plannedstmt</name><operator>-&gt;</operator><name>metricsQueryType</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TOP_LEVEL_QUERY</name></expr>:</case> 
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node finished"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SPI_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node of SPI inner query finished"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FUNCTION_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Plan node of function inner query finished"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>METRICS_QUERY_SUBMIT</name></expr>:</case>
			<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>QueryDesc</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name><name>plannedstmt</name><operator>-&gt;</operator><name>metricsQueryType</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TOP_LEVEL_QUERY</name></expr>:</case> 
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Query submit"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SPI_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI inner query submit"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FUNCTION_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function inner query submit"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>METRICS_QUERY_START</name></expr>:</case>
			<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>QueryDesc</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name><name>plannedstmt</name><operator>-&gt;</operator><name>metricsQueryType</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TOP_LEVEL_QUERY</name></expr>:</case> 
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Query start"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SPI_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI inner query start"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FUNCTION_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function inner query start"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>METRICS_QUERY_DONE</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Query done"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>METRICS_INNER_QUERY_DONE</name></expr>:</case>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Inner query done"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>METRICS_QUERY_ERROR</name></expr>:</case>
			<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>QueryDesc</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name><name>plannedstmt</name><operator>-&gt;</operator><name>metricsQueryType</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TOP_LEVEL_QUERY</name></expr>:</case> 
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Query Error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SPI_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI inner query Error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FUNCTION_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function inner query Error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>METRICS_QUERY_CANCELING</name></expr>:</case>
			<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>QueryDesc</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name><name>plannedstmt</name><operator>-&gt;</operator><name>metricsQueryType</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TOP_LEVEL_QUERY</name></expr>:</case> 
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Query Canceling"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SPI_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI inner query Canceling"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FUNCTION_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function inner query Canceling"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>METRICS_QUERY_CANCELED</name></expr>:</case>
			<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>QueryDesc</name> <operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name><name>plannedstmt</name><operator>-&gt;</operator><name>metricsQueryType</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TOP_LEVEL_QUERY</name></expr>:</case> 
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Query Canceled"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SPI_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI inner query Canceled"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>FUNCTION_INNER_QUERY</name></expr>:</case>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function inner query Canceled"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>


</unit>
