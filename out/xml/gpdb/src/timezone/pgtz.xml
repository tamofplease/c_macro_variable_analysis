<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/timezone/pgtz.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pgtz.c
 *	  Timezone Library Integration Functions
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/timezone/pgtz.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datatype/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtz.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>


<comment type="block">/* Current session timezone (controlled by TimeZone GUC) */</comment>
<decl_stmt><decl><type><name>pg_tz</name>	   <modifier>*</modifier></type><name>session_timezone</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Current log timezone (controlled by log_timezone GUC) */</comment>
<decl_stmt><decl><type><name>pg_tz</name>	   <modifier>*</modifier></type><name>log_timezone</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>scan_directory_ci</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fnamelen</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>canonname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>canonnamelen</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Return full pathname of timezone data directory
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pg_TZDIR</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYSTEMTZDIR</name></cpp:ifndef>
	<comment type="block">/* normal case: timezone stuff is under our share dir */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>done_tzdir</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tzdir</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>done_tzdir</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>tzdir</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>get_share_path</name><argument_list>(<argument><expr><name>my_exec_path</name></expr></argument>, <argument><expr><name>tzdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>tzdir</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tzdir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/timezone"</literal></expr></argument>, <argument><expr><name>MAXPGPATH</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tzdir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>done_tzdir</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><name>tzdir</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* we're configured to use system's timezone database */</comment>
	<return>return <expr><name>SYSTEMTZDIR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
 * Given a timezone name, open() the timezone data file.  Return the
 * file descriptor if successful, -1 if not.
 *
 * The input name is searched for case-insensitively (we assume that the
 * timezone database does not contain case-equivalent names).
 *
 * If "canonname" is not NULL, then on success the canonical spelling of the
 * given name is stored there (the buffer must be &gt; TZ_STRLEN_MAX bytes!).
 */</comment>
<function><type><name>int</name></type>
<name>pg_open_tzfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>canonname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fullname</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fullnamelen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>orignamelen</name></decl>;</decl_stmt>

	<comment type="block">/* Initialize fullname with base name of tzdata directory */</comment>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><call><name>pg_TZDIR</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>orignamelen</name> <operator>=</operator> <name>fullnamelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fullnamelen</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAXPGPATH</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* not gonna fit */</comment>

	<comment type="block">/*
	 * If the caller doesn't need the canonical spelling, first just try to
	 * open the name as-is.  This can be expected to succeed if the given name
	 * is already case-correct, or if the filesystem is case-insensitive; and
	 * we don't need to distinguish those situations if we aren't tasked with
	 * reporting the canonical spelling.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>canonname</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>fullname</name><index>[<expr><name>fullnamelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
		<comment type="block">/* test above ensured this will fit: */</comment>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fullname</name> <operator>+</operator> <name>fullnamelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
		<comment type="block">/* If that didn't work, fall through to do it the hard way */</comment>
		<expr_stmt><expr><name><name>fullname</name><index>[<expr><name>fullnamelen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Loop to split the given name into directory levels; for each level,
	 * search using scan_directory_ci().
	 */</comment>
	<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>slashptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>fnamelen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>slashptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>slashptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>fnamelen</name> <operator>=</operator> <name>slashptr</name> <operator>-</operator> <name>fname</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>fnamelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>scan_directory_ci</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fnamelen</name></expr></argument>,
							   <argument><expr><name>fullname</name> <operator>+</operator> <name>fullnamelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
							   <argument><expr><name>MAXPGPATH</name> <operator>-</operator> <name>fullnamelen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>fullname</name><index>[<expr><name>fullnamelen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>fullnamelen</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fullname</name> <operator>+</operator> <name>fullnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>slashptr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>slashptr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>canonname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>fullname</name> <operator>+</operator> <name>orignamelen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Scan specified directory for a case-insensitive match to fname
 * (of length fnamelen --- fname may not be null terminated!).  If found,
 * copy the actual filename into canonname and return true.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>scan_directory_ci</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dirname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fnamelen</name></decl></parameter>,
				  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>canonname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>canonnamelen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DIR</name>		   <modifier>*</modifier></type><name>dirdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>direntry</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dirdesc</name> <operator>=</operator> <call><name>AllocateDir</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>direntry</name> <operator>=</operator> <call><name>ReadDirExtended</name><argument_list>(<argument><expr><name>dirdesc</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Ignore . and .., plus any other "hidden" files.  This is a security
		 * measure to prevent access to files outside the timezone directory.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>direntry</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>direntry</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>fnamelen</name> <operator>&amp;&amp;</operator>
			<call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name><name>direntry</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fnamelen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Found our match */</comment>
			<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name><name>direntry</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>canonnamelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name>dirdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * We keep loaded timezones in a hashtable so we don't have to
 * load and parse the TZ definition file every time one is selected.
 * Because we want timezone names to be found case-insensitively,
 * the hash key is the uppercased name of the zone.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<comment type="block">/* tznameupper contains the all-upper-case name of the timezone */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tznameupper</name><index>[<expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_tz</name></type>		<name>tz</name></decl>;</decl_stmt>
}</block></struct></type> <name>pg_tz_cache</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>timezone_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>init_timezone_hashtable</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>hash_ctl</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_tz_cache</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>timezone_cache</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Timezones"</literal></expr></argument>,
								 <argument><expr><literal type="number">4</literal></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>,
								 <argument><expr><name>HASH_ELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timezone_cache</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Load a timezone from file or from cache.
 * Does not verify that the timezone is acceptable!
 *
 * "GMT" is always interpreted as the tzparse() definition, without attempting
 * to load a definition from the filesystem.  This has a number of benefits:
 * 1. It's guaranteed to succeed, so we don't have the failure mode wherein
 * the bootstrap default timezone setting doesn't work (as could happen if
 * the OS attempts to supply a leap-second-aware version of "GMT").
 * 2. Because we aren't accessing the filesystem, we can safely initialize
 * the "GMT" zone definition before my_exec_path is known.
 * 3. It's quick enough that we don't waste much time when the bootstrap
 * default timezone setting is later overridden from postgresql.conf.
 */</comment>
<function><type><name>pg_tz</name> <modifier>*</modifier></type>
<name>pg_tzset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_tz_cache</name> <modifier>*</modifier></type><name>tzp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>state</name></name></type> <name>tzstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>uppername</name><index>[<expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>canonname</name><index>[<expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TZ_STRLEN_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* not going to fit */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>timezone_cache</name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>init_timezone_hashtable</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Upcase the given name to perform a case-insensitive hashtable search.
	 * (We could alternatively downcase it, but we prefer upcase so that we
	 * can get consistently upcased results from tzparse() in case the name is
	 * a POSIX-style timezone spec.)
	 */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>uppername</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <call><name>pg_toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>name</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>tzp</name> <operator>=</operator> <operator>(</operator><name>pg_tz_cache</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>timezone_cache</name></expr></argument>,
									  <argument><expr><name>uppername</name></expr></argument>,
									  <argument><expr><name>HASH_FIND</name></expr></argument>,
									  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tzp</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Timezone found in cache, nothing more to do */</comment>
		<return>return <expr><operator>&amp;</operator><name><name>tzp</name><operator>-&gt;</operator><name>tz</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * "GMT" is always sent to tzparse(), as per discussion above.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>uppername</name></expr></argument>, <argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tzparse</name><argument_list>(<argument><expr><name>uppername</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzstate</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* This really, really should not happen ... */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not initialize GMT time zone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Use uppercase name as canonical */</comment>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>uppername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>tzload</name><argument_list>(<argument><expr><name>uppername</name></expr></argument>, <argument><expr><name>canonname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzstate</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>uppername</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>!</operator><call><name>tzparse</name><argument_list>(<argument><expr><name>uppername</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzstate</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Unknown timezone. Fail our call instead of loading GMT! */</comment>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* For POSIX timezone specs, use uppercase name as canonical */</comment>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>uppername</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Save timezone in the cache */</comment>
	<expr_stmt><expr><name>tzp</name> <operator>=</operator> <operator>(</operator><name>pg_tz_cache</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>timezone_cache</name></expr></argument>,
									  <argument><expr><name>uppername</name></expr></argument>,
									  <argument><expr><name>HASH_ENTER</name></expr></argument>,
									  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* hash_search already copied uppername into the hash key */</comment>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>tzp</name><operator>-&gt;</operator><name>tz</name><operator>.</operator><name>TZname</name></name></expr></argument>, <argument><expr><name>canonname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tzp</name><operator>-&gt;</operator><name>tz</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tzstate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tzstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>tzp</name><operator>-&gt;</operator><name>tz</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Load a fixed-GMT-offset timezone.
 * This is used for SQL-spec SET TIME ZONE INTERVAL 'foo' cases.
 * It's otherwise equivalent to pg_tzset().
 *
 * The GMT offset is specified in seconds, positive values meaning west of
 * Greenwich (ie, POSIX not ISO sign convention).  However, we use ISO
 * sign convention in the displayable abbreviation for the zone.
 *
 * Caution: this can fail (return NULL) if the specified offset is outside
 * the range allowed by the zic library.
 */</comment>
<function><type><name>pg_tz</name> <modifier>*</modifier></type>
<name>pg_tzset_offset</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>gmtoffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>absoffset</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>gmtoffset</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>gmtoffset</name></expr> </then><else>: <expr><name>gmtoffset</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>offsetstr</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tzname</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>offsetstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>offsetstr</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%02ld"</literal></expr></argument>, <argument><expr><name>absoffset</name> <operator>/</operator> <name>SECS_PER_HOUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>absoffset</name> <operator>%=</operator> <name>SECS_PER_HOUR</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>absoffset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>offsetstr</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>offsetstr</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>offsetstr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>offsetstr</name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><literal type="string">":%02ld"</literal></expr></argument>, <argument><expr><name>absoffset</name> <operator>/</operator> <name>SECS_PER_MINUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>absoffset</name> <operator>%=</operator> <name>SECS_PER_MINUTE</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>absoffset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>offsetstr</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>offsetstr</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>offsetstr</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>offsetstr</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><literal type="string">":%02ld"</literal></expr></argument>, <argument><expr><name>absoffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>gmtoffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&lt;-%s&gt;+%s"</literal></expr></argument>,
				 <argument><expr><name>offsetstr</name></expr></argument>, <argument><expr><name>offsetstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"&lt;+%s&gt;-%s"</literal></expr></argument>,
				 <argument><expr><name>offsetstr</name></expr></argument>, <argument><expr><name>offsetstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><call><name>pg_tzset</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Initialize timezone library
 *
 * This is called before GUC variable initialization begins.  Its purpose
 * is to ensure that log_timezone has a valid value before any logging GUC
 * variables could become set to values that require elog.c to provide
 * timestamps (e.g., log_line_prefix).  We may as well initialize
 * session_timestamp to something valid, too.
 */</comment>
<function><type><name>void</name></type>
<name>pg_timezone_initialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We may not yet know where PGSHAREDIR is (in particular this is true in
	 * an EXEC_BACKEND subprocess).  So use "GMT", which pg_tzset forces to be
	 * interpreted without reference to the filesystem.  This corresponds to
	 * the bootstrap default for these variables in guc.c, although in
	 * principle it could be different.
	 */</comment>
	<expr_stmt><expr><name>session_timezone</name> <operator>=</operator> <call><name>pg_tzset</name><argument_list>(<argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>log_timezone</name> <operator>=</operator> <name>session_timezone</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Functions to enumerate available timezones
 *
 * Note that pg_tzenumerate_next() will return a pointer into the pg_tzenum
 * structure, so the data is only valid up to the next call.
 *
 * All data is allocated using palloc in the current context.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TZDIR_DEPTH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<struct>struct <name>pg_tzenum</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>baselen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>depth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DIR</name>		   <modifier>*</modifier></type><name><name>dirdesc</name><index>[<expr><name>MAX_TZDIR_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>dirname</name><index>[<expr><name>MAX_TZDIR_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pg_tz</name></name></type> <name>tz</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* typedef pg_tzenum is declared in pgtime.h */</comment>

<function><type><name>pg_tzenum</name> <modifier>*</modifier></type>
<name>pg_tzenumerate_start</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_tzenum</name>  <modifier>*</modifier></type><name>ret</name> <init>= <expr><operator>(</operator><name>pg_tzenum</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_tzenum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>startdir</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pg_TZDIR</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>baselen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>startdir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>dirname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>startdir</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>dirdesc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AllocateDir</name><argument_list>(<argument><expr><name>startdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ret</name><operator>-&gt;</operator><name>dirdesc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open directory \"%s\": %m"</literal></expr></argument>, <argument><expr><name>startdir</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_tzenumerate_end</name><parameter_list>(<parameter><decl><type><name>pg_tzenum</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dirdesc</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dirname</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>pg_tz</name> <modifier>*</modifier></type>
<name>pg_tzenumerate_next</name><parameter_list>(<parameter><decl><type><name>pg_tzenum</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>direntry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>fullname</name><index>[<expr><name>MAXPGPATH</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>direntry</name> <operator>=</operator> <call><name>ReadDir</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dirdesc</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dirname</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>direntry</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* End of this directory */</comment>
			<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dirdesc</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dirname</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>direntry</name><operator>-&gt;</operator><name>d_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,
				 <argument><expr><name><name>dir</name><operator>-&gt;</operator><name>dirname</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>direntry</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not stat \"%s\": %m"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Step into the subdirectory */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;=</operator> <name>MAX_TZDIR_DEPTH</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"timezone directory stack overflow"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>dirname</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dir</name><operator>-&gt;</operator><name>dirdesc</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name> <operator>=</operator> <call><name>AllocateDir</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dir</name><operator>-&gt;</operator><name>dirdesc</name><index>[<expr><name><name>dir</name><operator>-&gt;</operator><name>depth</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open directory \"%s\": %m"</literal></expr></argument>,
								<argument><expr><name>fullname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* Start over reading in the new directory */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Load this timezone using tzload() not pg_tzset(), so we don't fill
		 * the cache.  Also, don't ask for the canonical spelling: we already
		 * know it, and pg_open_tzfile's way of finding it out is pretty
		 * inefficient.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>tzload</name><argument_list>(<argument><expr><name>fullname</name> <operator>+</operator> <name><name>dir</name><operator>-&gt;</operator><name>baselen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>tz</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Zone could not be loaded, ignore it */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_tz_acceptable</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>tz</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Ignore leap-second zones */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* OK, return the canonical zone name spelling. */</comment>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>tz</name><operator>.</operator><name>TZname</name></name></expr></argument>, <argument><expr><name>fullname</name> <operator>+</operator> <name><name>dir</name><operator>-&gt;</operator><name>baselen</name></name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dir</name><operator>-&gt;</operator><name>tz</name><operator>.</operator><name>TZname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Timezone loaded OK. */</comment>
		<return>return <expr><operator>&amp;</operator><name><name>dir</name><operator>-&gt;</operator><name>tz</name></name></expr>;</return>
	</block_content>}</block></while>

	<comment type="block">/* Nothing more found */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
