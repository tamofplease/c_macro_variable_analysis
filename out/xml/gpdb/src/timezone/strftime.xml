<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/timezone/strftime.c"><comment type="block">/* Convert a broken-down timestamp to a string.  */</comment>

<comment type="block">/*
 * Copyright 1989 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *	  may be used to endorse or promote products derived from this software
 *	  without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */</comment>

<comment type="block">/*
 * Based on the UCB version with the copyright notice appearing above.
 *
 * This is ANSIish only when "multibyte character == plain character".
 *
 * IDENTIFICATION
 *	  src/timezone/strftime.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private.h"</cpp:file></cpp:include>


<struct>struct <name>lc_time_T</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>mon</name><index>[<expr><name>MONSPERYEAR</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>month</name><index>[<expr><name>MONSPERYEAR</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>wday</name><index>[<expr><name>DAYSPERWEEK</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>weekday</name><index>[<expr><name>DAYSPERWEEK</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>X_fmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x_fmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c_fmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>am</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>date_fmt</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Locale</name></cpp:macro>	<cpp:value>(&amp;C_time_locale)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>lc_time_T</name></name></type> <name>C_time_locale</name> <init>= <expr><block>{
	<expr><block>{
		<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>,
		<expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>
	}</block></expr>, <expr><block>{
		<expr><literal type="string">"January"</literal></expr>, <expr><literal type="string">"February"</literal></expr>, <expr><literal type="string">"March"</literal></expr>, <expr><literal type="string">"April"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"June"</literal></expr>,
		<expr><literal type="string">"July"</literal></expr>, <expr><literal type="string">"August"</literal></expr>, <expr><literal type="string">"September"</literal></expr>, <expr><literal type="string">"October"</literal></expr>, <expr><literal type="string">"November"</literal></expr>, <expr><literal type="string">"December"</literal></expr>
	}</block></expr>, <expr><block>{
		<expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>,
		<expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>
	}</block></expr>, <expr><block>{
		<expr><literal type="string">"Sunday"</literal></expr>, <expr><literal type="string">"Monday"</literal></expr>, <expr><literal type="string">"Tuesday"</literal></expr>, <expr><literal type="string">"Wednesday"</literal></expr>,
		<expr><literal type="string">"Thursday"</literal></expr>, <expr><literal type="string">"Friday"</literal></expr>, <expr><literal type="string">"Saturday"</literal></expr>
	}</block></expr>,

	<comment type="block">/* X_fmt */</comment>
	<expr><literal type="string">"%H:%M:%S"</literal></expr>,

	<comment type="block">/*
	 * x_fmt
	 *
	 * C99 and later require this format. Using just numbers (as here) makes
	 * Quakers happier; it's also compatible with SVR4.
	 */</comment>
	<expr><literal type="string">"%m/%d/%y"</literal></expr>,

	<comment type="block">/*
	 * c_fmt
	 *
	 * C99 and later require this format. Previously this code used "%D %X",
	 * but we now conform to C99. Note that "%a %b %d %H:%M:%S %Y" is used by
	 * Solaris 2.3.
	 */</comment>
	<expr><literal type="string">"%a %b %e %T %Y"</literal></expr>,

	<comment type="block">/* am */</comment>
	<expr><literal type="string">"AM"</literal></expr>,

	<comment type="block">/* pm */</comment>
	<expr><literal type="string">"PM"</literal></expr>,

	<comment type="block">/* date_fmt */</comment>
	<expr><literal type="string">"%a %b %e %H:%M:%S %Z %Y"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<enum>enum <name>warn</name>
<block>{
	<decl><name>IN_NONE</name></decl>, <decl><name>IN_SOME</name></decl>, <decl><name>IN_THIS</name></decl>, <decl><name>IN_ALL</name></decl>
}</block>;</enum>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_conv</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pg_tm</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>,
				  <parameter><decl><type><name><name>enum</name> <name>warn</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_yconv</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>size_t</name></type>
<name>pg_strftime</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pg_tm</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>enum</name> <name>warn</name></name></type>	<name>warn</name> <init>= <expr><name>IN_NONE</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>maxsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>s</name> <operator>+</operator> <name>maxsize</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>p</name> <operator>-</operator> <name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_fmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pg_tm</name></name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>,
	 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptlim</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>warn</name></name> <modifier>*</modifier></type><name>warnp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>format</name></expr>;</condition> <incr><expr><operator>++</operator><name>format</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
		<block>{<block_content>
	<label><name>label</name>:</label>
			<switch>switch <condition>(<expr><operator>*</operator><operator>++</operator><name>format</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
					<expr_stmt><expr><operator>--</operator><name>format</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'A'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
							   <name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>&gt;=</operator> <name>DAYSPERWEEK</name><operator>)</operator></expr> ?</condition><then>
							  <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><name><name>Locale</name><operator>-&gt;</operator><name>weekday</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
							  <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'a'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
							   <name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>&gt;=</operator> <name>DAYSPERWEEK</name><operator>)</operator></expr> ?</condition><then>
							  <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><name><name>Locale</name><operator>-&gt;</operator><name>wday</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
							  <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'B'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
							   <name><name>t</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&gt;=</operator> <name>MONSPERYEAR</name><operator>)</operator></expr> ?</condition><then>
							  <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><name><name>Locale</name><operator>-&gt;</operator><name>month</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
							  <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'b'</literal></expr>:</case>
				<case>case <expr><literal type="char">'h'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
							   <name><name>t</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&gt;=</operator> <name>MONSPERYEAR</name><operator>)</operator></expr> ?</condition><then>
							  <expr><literal type="string">"?"</literal></expr> </then><else>: <expr><name><name>Locale</name><operator>-&gt;</operator><name>mon</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr></else></ternary></expr></argument>,
							  <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'C'</literal></expr>:</case>

					<comment type="block">/*
					 * %C used to do a... _fmt("%a %b %e %X %Y", t);
					 * ...whereas now POSIX 1003.2 calls for something
					 * completely different. (ado, 1993-05-24)
					 */</comment>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_yconv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name>TM_YEAR_BASE</name></expr></argument>,
								<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'c'</literal></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name><name>enum</name> <name>warn</name></name></type>	<name>warn2</name> <init>= <expr><name>IN_SOME</name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><name><name>Locale</name><operator>-&gt;</operator><name>c_fmt</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>warn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>warn2</name> <operator>==</operator> <name>IN_ALL</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>warn2</name> <operator>=</operator> <name>IN_THIS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>warn2</name> <operator>&gt;</operator> <operator>*</operator><name>warnp</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><operator>*</operator><name>warnp</name> <operator>=</operator> <name>warn2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'D'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><name>warnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'d'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'E'</literal></expr>:</case>
				<case>case <expr><literal type="char">'O'</literal></expr>:</case>

					<comment type="block">/*
					 * Locale modifiers of C99 and later. The sequences %Ec
					 * %EC %Ex %EX %Ey %EY %Od %oe %OH %OI %Om %OM %OS %Ou %OU
					 * %OV %Ow %OW %Oy are supposed to provide alternative
					 * representations.
					 */</comment>
					<goto>goto <name>label</name>;</goto>
				<case>case <expr><literal type="char">'e'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><literal type="string">"%2d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'F'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><literal type="string">"%Y-%m-%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><name>warnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'H'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'I'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">12</literal><operator>)</operator></expr> ?</condition><then>
							   <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">12</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr></argument>,
							   <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'j'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%03d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'k'</literal></expr>:</case>

					<comment type="block">/*
					 * This used to be... _conv(t-&gt;tm_hour % 12 ? t-&gt;tm_hour %
					 * 12 : 12, 2, ' '); ...and has been changed to the below
					 * to match SunOS 4.1.1 and Arnold Robbins' strftime
					 * version 3.0. That is, "%k" and "%l" have been swapped.
					 * (ado, 1993-05-24)
					 */</comment>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><literal type="string">"%2d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>KITCHEN_SINK</name></cpp:ifdef>
				<case>case <expr><literal type="char">'K'</literal></expr>:</case>

					<comment type="block">/*
					 * After all this time, still unclaimed!
					 */</comment>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><literal type="string">"kitchen sink"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* defined KITCHEN_SINK */</comment>
				<case>case <expr><literal type="char">'l'</literal></expr>:</case>

					<comment type="block">/*
					 * This used to be... _conv(t-&gt;tm_hour, 2, ' '); ...and
					 * has been changed to the below to match SunOS 4.1.1 and
					 * Arnold Robbin's strftime version 3.0. That is, "%k" and
					 * "%l" have been swapped. (ado, 1993-05-24)
					 */</comment>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">12</literal><operator>)</operator></expr> ?</condition><then>
							   <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">12</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr></argument>,
							   <argument><expr><literal type="string">"%2d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'M'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'m'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'n'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'p'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&gt;=</operator> <operator>(</operator><name>HOURSPERDAY</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr> ?</condition><then>
							  <expr><name><name>Locale</name><operator>-&gt;</operator><name>pm</name></name></expr> </then><else>:
							  <expr><name><name>Locale</name><operator>-&gt;</operator><name>am</name></name></expr></else></ternary></expr></argument>,
							  <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'R'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><literal type="string">"%H:%M"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><name>warnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'r'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><literal type="string">"%I:%M:%S %p"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><name>warnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'S'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'T'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><name>warnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'t'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><literal type="string">"\t"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'U'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>+</operator> <name>DAYSPERWEEK</name> <operator>-</operator>
								<name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name><operator>)</operator> <operator>/</operator> <name>DAYSPERWEEK</name></expr></argument>,
							   <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'u'</literal></expr>:</case>

					<comment type="block">/*
					 * From Arnold Robbins' strftime version 3.0: "ISO 8601:
					 * Weekday as a decimal number [1 (Monday) - 7]" (ado,
					 * 1993-05-24)
					 */</comment>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
							   <expr><name>DAYSPERWEEK</name></expr> </then><else>: <expr><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name></expr></else></ternary></expr></argument>,
							   <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'V'</literal></expr>:</case>		<comment type="block">/* ISO 8601 week number */</comment>
				<case>case <expr><literal type="char">'G'</literal></expr>:</case>		<comment type="block">/* ISO 8601 year (four digits) */</comment>
				<case>case <expr><literal type="char">'g'</literal></expr>:</case>		<comment type="block">/* ISO 8601 year (two digits) */</comment>
<comment type="block">/*
 * From Arnold Robbins' strftime version 3.0: "the week number of the
 * year (the first Monday as the first day of week 1) as a decimal number
 * (01-53)."
 * (ado, 1993-05-24)
 *
 * From &lt;https://www.cl.cam.ac.uk/~mgk25/iso-time.html&gt; by Markus Kuhn:
 * "Week 01 of a year is per definition the first week which has the
 * Thursday in this year, which is equivalent to the week which contains
 * the fourth day of January. In other words, the first week of a new year
 * is the week which has the majority of its days in the new year. Week 01
 * might also contain days from the previous year and the week before week
 * 01 of a year is the last week (52 or 53) of the previous year even if
 * it contains days from the new year. A week starts with Monday (day 1)
 * and ends with Sunday (day 7). For example, the first week of the year
 * 1997 lasts from 1996-12-30 to 1997-01-05..."
 * (ado, 1996-01-02)
 */</comment>
					<block>{<block_content>
						<decl_stmt><decl><type><name>int</name></type>			<name>year</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type>			<name>base</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type>			<name>yday</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type>			<name>wday</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>int</name></type>			<name>w</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>year</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>base</name> <operator>=</operator> <name>TM_YEAR_BASE</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>yday</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_yday</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>wday</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name></expr>;</expr_stmt>
						<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
						<block>{<block_content>
							<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>int</name></type>			<name>bot</name></decl>;</decl_stmt>
							<decl_stmt><decl><type><name>int</name></type>			<name>top</name></decl>;</decl_stmt>

							<expr_stmt><expr><name>len</name> <operator>=</operator> <ternary><condition><expr><call><name>isleap_sum</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
								<expr><name>DAYSPERLYEAR</name></expr> </then><else>:
								<expr><name>DAYSPERNYEAR</name></expr></else></ternary></expr>;</expr_stmt>

							<comment type="block">/*
							 * What yday (-3 ... 3) does the ISO year begin
							 * on?
							 */</comment>
							<expr_stmt><expr><name>bot</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>yday</name> <operator>+</operator> <literal type="number">11</literal> <operator>-</operator> <name>wday</name><operator>)</operator> <operator>%</operator>
								   <name>DAYSPERWEEK</name><operator>)</operator> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

							<comment type="block">/*
							 * What yday does the NEXT ISO year begin on?
							 */</comment>
							<expr_stmt><expr><name>top</name> <operator>=</operator> <name>bot</name> <operator>-</operator>
								<operator>(</operator><name>len</name> <operator>%</operator> <name>DAYSPERWEEK</name><operator>)</operator></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name>top</name> <operator>+=</operator> <name>DAYSPERWEEK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<expr_stmt><expr><name>top</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><name>yday</name> <operator>&gt;=</operator> <name>top</name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><operator>++</operator><name>base</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
								<break>break;</break>
							</block_content>}</block></if></if_stmt>
							<if_stmt><if>if <condition>(<expr><name>yday</name> <operator>&gt;=</operator> <name>bot</name></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>yday</name> <operator>-</operator> <name>bot</name><operator>)</operator> <operator>/</operator>
										 <name>DAYSPERWEEK</name><operator>)</operator></expr>;</expr_stmt>
								<break>break;</break>
							</block_content>}</block></if></if_stmt>
							<expr_stmt><expr><operator>--</operator><name>base</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>yday</name> <operator>+=</operator> <ternary><condition><expr><call><name>isleap_sum</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr> ?</condition><then>
								<expr><name>DAYSPERLYEAR</name></expr> </then><else>:
								<expr><name>DAYSPERNYEAR</name></expr></else></ternary></expr>;</expr_stmt>
						</block_content>}</block></for>
						<if_stmt><if>if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>,
									   <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><operator>*</operator><name>format</name> <operator>==</operator> <literal type="char">'g'</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>warnp</name> <operator>=</operator> <name>IN_ALL</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_yconv</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
										<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
										<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_yconv</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
										<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
										<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					</block_content>}</block>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'v'</literal></expr>:</case>

					<comment type="block">/*
					 * From Arnold Robbins' strftime version 3.0: "date as
					 * dd-bbb-YYYY" (ado, 1993-05-24)
					 */</comment>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><literal type="string">"%e-%b-%Y"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><name>warnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'W'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>+</operator> <name>DAYSPERWEEK</name> <operator>-</operator>
								<operator>(</operator><ternary><condition><expr><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name></expr> ?</condition><then>
								 <expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>:
								 <expr><operator>(</operator><name>DAYSPERWEEK</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>/</operator> <name>DAYSPERWEEK</name></expr></argument>,
							   <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'w'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_wday</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'X'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><name><name>Locale</name><operator>-&gt;</operator><name>X_fmt</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><name>warnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'x'</literal></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name><name>enum</name> <name>warn</name></name></type>	<name>warn2</name> <init>= <expr><name>IN_SOME</name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><name><name>Locale</name><operator>-&gt;</operator><name>x_fmt</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>warn2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>warn2</name> <operator>==</operator> <name>IN_ALL</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>warn2</name> <operator>=</operator> <name>IN_THIS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>warn2</name> <operator>&gt;</operator> <operator>*</operator><name>warnp</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><operator>*</operator><name>warnp</name> <operator>=</operator> <name>warn2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'y'</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>warnp</name> <operator>=</operator> <name>IN_ALL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_yconv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name>TM_YEAR_BASE</name></expr></argument>,
								<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
								<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_yconv</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name>TM_YEAR_BASE</name></expr></argument>,
								<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
								<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>tm_zone</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>tm_zone</name></name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<comment type="block">/*
					 * C99 and later say that %Z must be replaced by the empty
					 * string if the time zone abbreviation is not
					 * determinable.
					 */</comment>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'z'</literal></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>long</name></type>		<name>diff</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sign</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type>		<name>negative</name></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<continue>continue;</continue></block_content></block></if></if_stmt>
						<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>negative</name> <operator>=</operator> <name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>tm_zone</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name>negative</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>tm_zone</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>negative</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="string">"-"</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>-</operator><name>diff</name></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="string">"+"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>diff</name> <operator>/=</operator> <name>SECSPERMIN</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>diff</name> <operator>/</operator> <name>MINSPERHOUR</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator>
							<operator>(</operator><name>diff</name> <operator>%</operator> <name>MINSPERHOUR</name><operator>)</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><literal type="string">"%04d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'+'</literal></expr>:</case>
					<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_fmt</name><argument_list>(<argument><expr><name><name>Locale</name><operator>-&gt;</operator><name>date_fmt</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>,
							  <argument><expr><name>warnp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<continue>continue;</continue>
				<case>case <expr><literal type="char">'%'</literal></expr>:</case>

					<comment type="block">/*
					 * X311J/88-090 (4.12.3.5): if conversion char is
					 * undefined, behavior is undefined. Print out the
					 * character itself as printf(3) also does.
					 */</comment>
				<default>default:</default>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>pt</name> <operator>==</operator> <name>ptlim</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>pt</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>format</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>pt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_conv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptlim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><call><name>INT_STRLEN_MAXIMUM</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>_add</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptlim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>pt</name> <operator>&lt;</operator> <name>ptlim</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>pt</name> <operator>=</operator> <operator>*</operator><name>str</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>++</operator><name>pt</name></expr>;</expr_stmt></block_content></block></while>
	<return>return <expr><name>pt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POSIX and the C Standard are unclear or inconsistent about
 * what %C and %y do if the year is negative or exceeds 9999.
 * Use the convention that %C concatenated with %y yields the
 * same output as %Y, and that %Y contains at least 4 bytes,
 * with more only if necessary.
 */</comment>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_yconv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>convert_top</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>convert_yy</name></decl></parameter>,
	   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptlim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>lead</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>trail</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIVISOR</name></cpp:macro>	<cpp:value>100</cpp:value></cpp:define>
	<expr_stmt><expr><name>trail</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>DIVISOR</name> <operator>+</operator> <name>b</name> <operator>%</operator> <name>DIVISOR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lead</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>DIVISOR</name> <operator>+</operator> <name>b</name> <operator>/</operator> <name>DIVISOR</name> <operator>+</operator> <name>trail</name> <operator>/</operator> <name>DIVISOR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>trail</name> <operator>%=</operator> <name>DIVISOR</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>trail</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>lead</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>trail</name> <operator>+=</operator> <name>DIVISOR</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>--</operator><name>lead</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>lead</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>trail</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>trail</name> <operator>-=</operator> <name>DIVISOR</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>lead</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>convert_top</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>lead</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>trail</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_add</name><argument_list>(<argument><expr><literal type="string">"-0"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><name>lead</name></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>convert_yy</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pt</name> <operator>=</operator> <call><name>_conv</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>trail</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><name>trail</name></expr> </then><else>: <expr><name>trail</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>ptlim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>pt</name></expr>;</return>
</block_content>}</block></function>
</unit>
