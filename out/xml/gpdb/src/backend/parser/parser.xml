<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/parser/parser.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * parser.c
 *		Main entry point/driver for PostgreSQL grammar
 *
 * Note that the grammar is not allowed to perform any table access
 * (since we need to be able to do basic parsing even while inside an
 * aborted transaction).  Therefore, the data structures returned by
 * the grammar are "raw" parsetrees that still need to be analyzed by
 * analyze.c and related files.
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/parser/parser.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/gramparse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>

<comment type="block">/*
 * raw_parser
 *		Given a query in string form, do lexical and grammatical analysis.
 *
 * Returns a list of raw (un-analyzed) parse trees.  The immediate elements
 * of the list are always RawStmt nodes.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>raw_parser</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>core_yyscan_t</name></type> <name>yyscanner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>base_yy_extra_type</name></type> <name>yyextra</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>yyresult</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * In GPDB, temporarily disable escape_string_warning, if we're in a QE
	 * node. When we're parsing a PL/pgSQL function, e.g. in a CREATE FUNCTION
	 * command, you should've gotten the same warning from the QD node already.
	 * We could probably disable the warning in QE nodes altogether, not just
	 * in PL/pgSQL, but it can be useful for catching escaping bugs, when
	 * internal queries are dispatched from QD to QEs.
	 */</comment>
	<decl_stmt><decl><type><name>bool</name></type>            <name>save_escape_string_warning</name> <init>= <expr><name>escape_string_warning</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_EXECUTE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>escape_string_warning</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* initialize the flex scanner */</comment>
		<expr_stmt><expr><name>yyscanner</name> <operator>=</operator> <call><name>scanner_init</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>yyextra</name><operator>.</operator><name>core_yy_extra</name></name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name>ScanKeywords</name></expr></argument>, <argument><expr><name>ScanKeywordTokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_EXECUTE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>escape_string_warning</name> <operator>=</operator> <name>save_escape_string_warning</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_EXECUTE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>escape_string_warning</name> <operator>=</operator> <name>save_escape_string_warning</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* base_yylex() only needs this much initialization */</comment>
	<expr_stmt><expr><name><name>yyextra</name><operator>.</operator><name>have_lookahead</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yyextra</name><operator>.</operator><name>tail_partition_magic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* initialize the bison parser */</comment>
	<expr_stmt><expr><call><name>parser_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yyextra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Parse! */</comment>
	<expr_stmt><expr><name>yyresult</name> <operator>=</operator> <call><name>base_yyparse</name><argument_list>(<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Clean up (release memory) */</comment>
	<expr_stmt><expr><call><name>scanner_finish</name><argument_list>(<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>yyresult</name></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* error */</comment>
		<return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>yyextra</name><operator>.</operator><name>parsetree</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Intermediate filter between parser and core lexer (core_yylex in scan.l).
 *
 * This filter is needed because in some cases the standard SQL grammar
 * requires more than one token lookahead.  We reduce these cases to one-token
 * lookahead by replacing tokens here, in order to keep the grammar LALR(1).
 *
 * Using a filter is simpler than trying to recognize multiword tokens
 * directly in scan.l, because we'd have to allow for comments between the
 * words.  Furthermore it's not clear how to do that without re-introducing
 * scanner backtrack, which would cost more performance than this filter
 * layer does.
 *
 * The filter also provides a convenient place to translate between
 * the core_YYSTYPE and YYSTYPE representations (which are really the
 * same thing anyway, but notationally they're different).
 */</comment>
<function><type><name>int</name></type>
<name>base_yylex</name><parameter_list>(<parameter><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>lvalp</name></decl></parameter>, <parameter><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>llocp</name></decl></parameter>, <parameter><decl><type><name>core_yyscan_t</name></type> <name>yyscanner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>base_yy_extra_type</name> <modifier>*</modifier></type><name>yyextra</name> <init>= <expr><call><name>pg_yyget_extra</name><argument_list>(<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>next_token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_token_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YYLTYPE</name></type>		<name>cur_yylloc</name></decl>;</decl_stmt>

	<comment type="block">/* Get next token --- we might already have it */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>yyextra</name><operator>-&gt;</operator><name>have_lookahead</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_token</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name></name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylval</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>llocp</name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylloc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_hold_char</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>have_lookahead</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <call><name>core_yylex</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>lvalp</name><operator>-&gt;</operator><name>core_yystype</name></name><operator>)</operator></expr></argument>, <argument><expr><name>llocp</name></expr></argument>, <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Check for special handling of PARTITION keyword. (see
	 * OptFirstPartitionSpec rule in the grammar)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>yyextra</name><operator>-&gt;</operator><name>tail_partition_magic</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cur_token</name> <operator>==</operator> <name>PARTITION</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>tail_partition_magic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<return>return <expr><name>PARTITION_TAIL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If this token isn't one that requires lookahead, just return it.  If it
	 * does, determine the token length.  (We could get that via strlen(), but
	 * since we have such a small set of possibilities, hardwiring seems
	 * feasible and more efficient.)
	 */</comment>
	<switch>switch <condition>(<expr><name>cur_token</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NOT</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NULLS_P</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>WITH</name></expr>:</case>
			<expr_stmt><expr><name>cur_token_length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<return>return <expr><name>cur_token</name></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Identify end+1 of current token.  core_yylex() has temporarily stored a
	 * '\0' here, and will undo that when we call it again.  We need to redo
	 * it to fully revert the lookahead call for error reporting purposes.
	 */</comment>
	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name> <operator>=</operator> <name><name>yyextra</name><operator>-&gt;</operator><name>core_yy_extra</name><operator>.</operator><name>scanbuf</name></name> <operator>+</operator>
		<operator>*</operator><name>llocp</name> <operator>+</operator> <name>cur_token_length</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Save and restore *llocp around the call.  It might look like we could
	 * avoid this by just passing &amp;lookahead_yylloc to core_yylex(), but that
	 * does not work because flex actually holds onto the last-passed pointer
	 * internally, and will use that for error reporting.  We need any error
	 * reports to point to the current token, not the next one.
	 */</comment>
	<expr_stmt><expr><name>cur_yylloc</name> <operator>=</operator> <operator>*</operator><name>llocp</name></expr>;</expr_stmt>

	<comment type="block">/* Get next token, saving outputs into lookahead variables */</comment>
	<expr_stmt><expr><name>next_token</name> <operator>=</operator> <call><name>core_yylex</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylval</name></name><operator>)</operator></expr></argument>, <argument><expr><name>llocp</name></expr></argument>, <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_token</name></name> <operator>=</operator> <name>next_token</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_yylloc</name></name> <operator>=</operator> <operator>*</operator><name>llocp</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>llocp</name> <operator>=</operator> <name>cur_yylloc</name></expr>;</expr_stmt>

	<comment type="block">/* Now revert the un-truncation of the current token */</comment>
	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_hold_char</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>yyextra</name><operator>-&gt;</operator><name>lookahead_end</name></name><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>yyextra</name><operator>-&gt;</operator><name>have_lookahead</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Replace cur_token if needed, based on lookahead */</comment>
	<switch>switch <condition>(<expr><name>cur_token</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NOT</name></expr>:</case>
			<comment type="block">/* Replace NOT by NOT_LA if it's followed by BETWEEN, IN, etc */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>BETWEEN</name></expr>:</case>
				<case>case <expr><name>IN_P</name></expr>:</case>
				<case>case <expr><name>LIKE</name></expr>:</case>
				<case>case <expr><name>ILIKE</name></expr>:</case>
				<case>case <expr><name>SIMILAR</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>NOT_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>NULLS_P</name></expr>:</case>
			<comment type="block">/* Replace NULLS_P by NULLS_LA if it's followed by FIRST or LAST */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>FIRST_P</name></expr>:</case>
				<case>case <expr><name>LAST_P</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>NULLS_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>

		<case>case <expr><name>WITH</name></expr>:</case>
			<comment type="block">/* Replace WITH by WITH_LA if it's followed by TIME or ORDINALITY */</comment>
			<switch>switch <condition>(<expr><name>next_token</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>TIME</name></expr>:</case>
				<case>case <expr><name>ORDINALITY</name></expr>:</case>
					<expr_stmt><expr><name>cur_token</name> <operator>=</operator> <name>WITH_LA</name></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>cur_token</name></expr>;</return>
</block_content>}</block></function>
</unit>
