<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/catalog/objectaccess.c"><comment type="block">/* -------------------------------------------------------------------------
 *
 * objectaccess.c
 *		functions for object_access_hook on various events
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * -------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Hook on object accesses.  This is intended as infrastructure for security
 * and logging plugins.
 */</comment>
<decl_stmt><decl><type><name>object_access_hook_type</name></type> <name>object_access_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * RunObjectPostCreateHook
 *
 * It is entrypoint of OAT_POST_CREATE event
 */</comment>
<function><type><name>void</name></type>
<name>RunObjectPostCreateHook</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>classId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subId</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>is_internal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAccessPostCreate</name></type> <name>pc_arg</name></decl>;</decl_stmt>

	<comment type="block">/* caller should check, but just in case... */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>object_access_hook</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pc_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ObjectAccessPostCreate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pc_arg</name><operator>.</operator><name>is_internal</name></name> <operator>=</operator> <name>is_internal</name></expr>;</expr_stmt>

	<expr_stmt><expr><call>(<modifier>*</modifier><name>object_access_hook</name>) <argument_list>(<argument><expr><name>OAT_POST_CREATE</name></expr></argument>,
						   <argument><expr><name>classId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>,
						   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pc_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RunObjectDropHook
 *
 * It is entrypoint of OAT_DROP event
 */</comment>
<function><type><name>void</name></type>
<name>RunObjectDropHook</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>classId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subId</name></decl></parameter>,
				  <parameter><decl><type><name>int</name></type> <name>dropflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAccessDrop</name></type> <name>drop_arg</name></decl>;</decl_stmt>

	<comment type="block">/* caller should check, but just in case... */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>object_access_hook</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>drop_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ObjectAccessDrop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>drop_arg</name><operator>.</operator><name>dropflags</name></name> <operator>=</operator> <name>dropflags</name></expr>;</expr_stmt>

	<expr_stmt><expr><call>(<modifier>*</modifier><name>object_access_hook</name>) <argument_list>(<argument><expr><name>OAT_DROP</name></expr></argument>,
						   <argument><expr><name>classId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>,
						   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>drop_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RunObjectPostAlterHook
 *
 * It is entrypoint of OAT_POST_ALTER event
 */</comment>
<function><type><name>void</name></type>
<name>RunObjectPostAlterHook</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>classId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subId</name></decl></parameter>,
					   <parameter><decl><type><name>Oid</name></type> <name>auxiliaryId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_internal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAccessPostAlter</name></type> <name>pa_arg</name></decl>;</decl_stmt>

	<comment type="block">/* caller should check, but just in case... */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>object_access_hook</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pa_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ObjectAccessPostAlter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pa_arg</name><operator>.</operator><name>auxiliary_id</name></name> <operator>=</operator> <name>auxiliaryId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pa_arg</name><operator>.</operator><name>is_internal</name></name> <operator>=</operator> <name>is_internal</name></expr>;</expr_stmt>

	<expr_stmt><expr><call>(<modifier>*</modifier><name>object_access_hook</name>) <argument_list>(<argument><expr><name>OAT_POST_ALTER</name></expr></argument>,
						   <argument><expr><name>classId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>,
						   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>pa_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RunNamespaceSearchHook
 *
 * It is entrypoint of OAT_NAMESPACE_SEARCH event
 */</comment>
<function><type><name>bool</name></type>
<name>RunNamespaceSearchHook</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ereport_on_violation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAccessNamespaceSearch</name></type> <name>ns_arg</name></decl>;</decl_stmt>

	<comment type="block">/* caller should check, but just in case... */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>object_access_hook</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ns_arg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ObjectAccessNamespaceSearch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ns_arg</name><operator>.</operator><name>ereport_on_violation</name></name> <operator>=</operator> <name>ereport_on_violation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ns_arg</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><call>(<modifier>*</modifier><name>object_access_hook</name>) <argument_list>(<argument><expr><name>OAT_NAMESPACE_SEARCH</name></expr></argument>,
						   <argument><expr><name>NamespaceRelationId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
						   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ns_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>ns_arg</name><operator>.</operator><name>result</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * RunFunctionExecuteHook
 *
 * It is entrypoint of OAT_FUNCTION_EXECUTE event
 */</comment>
<function><type><name>void</name></type>
<name>RunFunctionExecuteHook</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* caller should check, but just in case... */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>object_access_hook</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call>(<modifier>*</modifier><name>object_access_hook</name>) <argument_list>(<argument><expr><name>OAT_FUNCTION_EXECUTE</name></expr></argument>,
						   <argument><expr><name>ProcedureRelationId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
						   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
