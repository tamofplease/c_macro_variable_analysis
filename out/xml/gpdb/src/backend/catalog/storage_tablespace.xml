<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/catalog/storage_tablespace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage_tablespace.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>pending_tablespace_scheduled_for_deletion_on_abort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>pending_tablespace_scheduled_for_deletion_on_commit</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>unlink_tablespace_dir</name>)<parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tablespace_for_unlink</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_redo</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>tablespace_storage_reset_on_abort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>pending_tablespace_scheduled_for_deletion_on_abort</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tablespace_storage_reset_on_commit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>pending_tablespace_scheduled_for_deletion_on_commit</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>perform_pending_tablespace_deletion_internal</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tablespace_oid_to_delete</name></decl></parameter>,
                                                         <parameter><decl><type><name>bool</name></type> <name>isRedo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>tablespace_oid_to_delete</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>unlink_tablespace_dir</name><argument_list>(<argument><expr><name>tablespace_oid_to_delete</name></expr></argument>, <argument><expr><name>isRedo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function> 

<function><type><name>void</name></type>
<name>TablespaceStorageInit</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>unlink_tablespace_dir_function</name>)<parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tablespace_oid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_redo</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>unlink_tablespace_dir</name> <operator>=</operator> <name>unlink_tablespace_dir_function</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tablespace_storage_reset_on_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tablespace_storage_reset_on_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * For abort:
 */</comment>
<function><type><name>void</name></type>
<name>ScheduleTablespaceDirectoryDeletionForAbort</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tablespace_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>pending_tablespace_scheduled_for_deletion_on_abort</name> <operator>=</operator> <name>tablespace_oid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Oid</name></type>
<name>GetPendingTablespaceForDeletionForAbort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>pending_tablespace_scheduled_for_deletion_on_abort</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DoPendingTablespaceDeletionForAbort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>perform_pending_tablespace_deletion_internal</name><argument_list>(
		<argument><expr><call><name>GetPendingTablespaceForDeletionForAbort</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><name>false</name></expr></argument>
		)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tablespace_storage_reset_on_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>UnscheduleTablespaceDirectoryDeletionForAbort</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tablespace_storage_reset_on_abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* 
 * For commit:
 */</comment>
<function><type><name>void</name></type>
<name>ScheduleTablespaceDirectoryDeletionForCommit</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tablespaceoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>pending_tablespace_scheduled_for_deletion_on_commit</name> <operator>=</operator> <name>tablespaceoid</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>UnscheduleTablespaceDirectoryDeletionForCommit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tablespace_storage_reset_on_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Oid</name></type>
<name>GetPendingTablespaceForDeletionForCommit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>pending_tablespace_scheduled_for_deletion_on_commit</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>DoPendingTablespaceDeletionForCommit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>perform_pending_tablespace_deletion_internal</name><argument_list>(
		<argument><expr><call><name>GetPendingTablespaceForDeletionForCommit</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tablespace_storage_reset_on_commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * For Xlog redo:
 *
 */</comment>
<function><type><name>void</name></type>
<name>DoTablespaceDeletionForRedoXlog</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tablespace_oid_to_delete</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>perform_pending_tablespace_deletion_internal</name><argument_list>(<argument><expr><name>tablespace_oid_to_delete</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
