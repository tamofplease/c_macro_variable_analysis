<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/catalog/storage_database.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/relpath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>PendingDbDelete</name>
<block>{
	<decl_stmt><decl><type><name>DbDirNode</name></type>	<name>dbDirNode</name></decl>;</decl_stmt>		<comment type="block">/* database dir that needs to be deleted */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>atCommit</name></decl>;</decl_stmt>		<comment type="block">/* T=delete at commit; F=delete at abort */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>PendingDbDelete</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>		<comment type="block">/* linked-list link */</comment>
}</block></struct></type> <name>PendingDbDelete</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dropDatabaseDirectory</name><parameter_list>(<parameter><decl><type><name>DbDirNode</name> <modifier>*</modifier></type><name>deldb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isRedo</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>PendingDbDelete</name> <modifier>*</modifier></type><name>pendingDbDeletes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* head of linked list */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>sessionLockMoveDbOid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * ScheduleDbDirDelete
 * 		Schedule dboid dir removal at transaction commit/abort
 */</comment>

<function><type><name>void</name></type>
<name>ScheduleDbDirDelete</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db_id</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>tablespace_oid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forCommit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PendingDbDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>

	<comment type="block">/* Add the relation to the list of stuff to delete at commit */</comment>
	<expr_stmt><expr><name>pending</name> <operator>=</operator> <operator>(</operator><name>PendingDbDelete</name> <operator>*</operator><operator>)</operator>
		<call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PendingDbDelete</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>=</operator> <name>forCommit</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>dbDirNode</name></name> <operator>=</operator> <operator>(</operator><name>DbDirNode</name><operator>)</operator>
		<block>{<expr><operator>.</operator><name>tablespace</name> <operator>=</operator> <name>tablespace_oid</name></expr>, <expr><operator>.</operator><name>database</name> <operator>=</operator> <name>db_id</name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pending</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pendingDbDeletes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pendingDbDeletes</name> <operator>=</operator> <name>pending</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DoPendingDbDeletes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PendingDbDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PendingDbDelete</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDbDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<comment type="block">/* unlink list entry first, so we don't retry on failure */</comment>
		<expr_stmt><expr><name>pendingDbDeletes</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		<comment type="block">/* do deletion if called for */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>==</operator> <name>isCommit</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>dropDatabaseDirectory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending</name><operator>-&gt;</operator><name>dbDirNode</name></name></expr></argument>,
								  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>MoveDbSessionLockAcquire</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>sessionLockMoveDbOid</name> <operator>==</operator> <name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LockSharedObjectForSession</name><argument_list>(<argument><expr><name>DatabaseRelationId</name></expr></argument>, <argument><expr><name>db_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							   <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sessionLockMoveDbOid</name> <operator>=</operator> <name>db_id</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>MoveDbSessionLockRelease</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>sessionLockMoveDbOid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>UnlockSharedObjectForSession</name><argument_list>(<argument><expr><name>DatabaseRelationId</name></expr></argument>, <argument><expr><name>sessionLockMoveDbOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DatabaseStorageResetSessionLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DatabaseStorageResetSessionLock</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>sessionLockMoveDbOid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>GetPendingDbDeletes</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>forCommit</name></decl></parameter>, <parameter><decl><type><name>DbDirNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ndbs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DbDirNode</name>	<modifier>*</modifier></type><name>dbptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PendingDbDelete</name> <modifier>*</modifier></type><name>pending</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ndbs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDbDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>==</operator> <name>forCommit</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ndbs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>ndbs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dbptr</name> <operator>=</operator> <operator>(</operator><name>DbDirNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>ndbs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DbDirNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>dbptr</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>pending</name> <operator>=</operator> <name>pendingDbDeletes</name></expr>;</init> <condition><expr><name>pending</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pending</name><operator>-&gt;</operator><name>atCommit</name></name> <operator>==</operator> <name>forCommit</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>dbptr</name> <operator>=</operator> <name><name>pending</name><operator>-&gt;</operator><name>dbDirNode</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>dbptr</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>ndbs</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This functions contains non-catalog modifications to be performed for movedb().
 * Its called after successfully marking the transaction as committed via pending
 * deletes.
 */</comment>
<function><type><name>void</name></type>
<name>DropDatabaseDirectories</name><parameter_list>(<parameter><decl><type><name>DbDirNode</name> <modifier>*</modifier></type><name>deldbs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndeldbs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isRedo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndeldbs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dropDatabaseDirectory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>deldbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>isRedo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
	<if_stmt><if>if<condition>(<expr><name>ndeldbs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"after_drop_database_directories"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 *	PostPrepare_DatabaseStorage -- Clean up after a successful PREPARE
 *
 * What we have to do here is throw away the in-memory state about pending
 * db deletes. It's all been recorded in the 2PC state file and
 * we no longer need to track it in memory.
 */</comment>
<function><type><name>void</name></type>
<name>PostPrepare_DatabaseStorage</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PendingDbDelete</name> <modifier>*</modifier></type><name>pendingDbDelete</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PendingDbDelete</name> <modifier>*</modifier></type><name>nextDbDelete</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>pendingDbDelete</name> <operator>=</operator> <name>pendingDbDeletes</name></expr>;</init> <condition><expr><name>pendingDbDelete</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pendingDbDelete</name> <operator>=</operator> <name>nextDbDelete</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>nextDbDelete</name> <operator>=</operator> <name><name>pendingDbDelete</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pendingDbDeletes</name> <operator>=</operator> <name>nextDbDelete</name></expr>;</expr_stmt>
		<comment type="block">/* must explicitly free the list entry */</comment>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pendingDbDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>DatabaseStorageResetSessionLock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dropDatabaseDirectory</name><parameter_list>(<parameter><decl><type><name>DbDirNode</name> <modifier>*</modifier></type><name>deldb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isRedo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dbpath</name> <init>= <expr><call><name>GetDatabasePath</name><argument_list>(<argument><expr><name><name>deldb</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>deldb</name><operator>-&gt;</operator><name>tablespace</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * Remove files from the old tablespace
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>rmtree</name><argument_list>(<argument><expr><name>dbpath</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"some useless files may be left behind in old database directory \"%s\""</literal></expr></argument>,
						<argument><expr><name>dbpath</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>isRedo</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>XLogDropDatabase</name><argument_list>(<argument><expr><name><name>deldb</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
