<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/catalog/test/storage_tablespace_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage_tablespace.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>unlink_called_with_tablespace_oid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>unlink_called_with_redo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>NOT_CALLED_OID</name> <init>= <expr><operator>-</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>unlink_tablespace_directory</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tablespaceOid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isRedo</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>unlink_called_with_tablespace_oid</name> <operator>=</operator> <name>tablespaceOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>unlink_called_with_redo</name> <operator>=</operator> <name>isRedo</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>unlink_called_with_redo</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>unlink_called_with_tablespace_oid</name> <operator>=</operator> <name>NOT_CALLED_OID</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>TablespaceStorageInit</name><argument_list>(<argument><expr><name>unlink_tablespace_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Tests
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_create_tablespace_storage_populates_the_pending_tablespace_deletes_list</name><parameter_list>(
	<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>someTablespaceOid</name> <init>= <expr><literal type="number">17999</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForAbort</name><argument_list>(<argument><expr><name>someTablespaceOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>tablespaceForDeletion</name> <init>= <expr><call><name>GetPendingTablespaceForDeletionForAbort</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">17999</literal></expr></argument>, <argument><expr><name>tablespaceForDeletion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>someTablespaceOid</name> <operator>=</operator> <literal type="number">88888</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForAbort</name><argument_list>(<argument><expr><name>someTablespaceOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tablespaceForDeletion</name> <operator>=</operator> <call><name>GetPendingTablespaceForDeletionForAbort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><literal type="number">88888</literal></expr></argument>, <argument><expr><name>tablespaceForDeletion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_get_pending_tablespace_for_deletion_returns_a_null_value_by_default</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>tablespaceForDeletion</name> <init>= <expr><call><name>GetPendingTablespaceForDeletionForAbort</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>tablespaceForDeletion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_DoPendingTablespaceDeletionForAbort_removes_the_pending_tablespace_for_deletion_so_it_is_not_deleted_by_the_next_transaction</name><parameter_list>(
	<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>someTablespaceOid</name> <init>= <expr><literal type="number">99999</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForAbort</name><argument_list>(<argument><expr><name>someTablespaceOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DoPendingTablespaceDeletionForAbort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>tablespaceForDeletion</name> <init>= <expr><call><name>GetPendingTablespaceForDeletionForAbort</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>tablespaceForDeletion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_DoPendingTablespaceDeletionForAbort_calls_unlink</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForAbort</name><argument_list>(<argument><expr><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DoPendingTablespaceDeletionForAbort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>unlink_called_with_tablespace_oid</name></expr></argument>, <argument><expr><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>unlink_called_with_redo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_delete_called_when_invalid_tablespace_set_does_not_call_unlink</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForAbort</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DoPendingTablespaceDeletionForAbort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>unlink_called_with_tablespace_oid</name></expr></argument>, <argument><expr><name>NOT_CALLED_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_DoTablespaceDeletionForRedoXlog_calls_unlink_with_tablespace_oid_and_redo_flag</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForAbort</name><argument_list>(<argument><expr><literal type="number">66666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DoTablespaceDeletionForRedoXlog</name><argument_list>(<argument><expr><literal type="number">77777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>unlink_called_with_tablespace_oid</name></expr></argument>, <argument><expr><literal type="number">77777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>unlink_called_with_redo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_UnscheduleTablespaceDirectoryDeletionForAbort_removes_the_scheduled_tablespace_for_deletion</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForAbort</name><argument_list>(<argument><expr><literal type="number">66666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnscheduleTablespaceDirectoryDeletionForAbort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>tablespaceForDeletion</name> <init>= <expr><call><name>GetPendingTablespaceForDeletionForAbort</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>tablespaceForDeletion</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_an_UnscheduleTablespaceDirectoryDeletionForAbort_does_not_get_unlinked</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForAbort</name><argument_list>(<argument><expr><literal type="number">66666</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnscheduleTablespaceDirectoryDeletionForAbort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>DoPendingTablespaceDeletionForAbort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>unlink_called_with_tablespace_oid</name></expr></argument>, <argument><expr><name>NOT_CALLED_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_a_tablespace_can_be_scheduled_for_deletion_on_commit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>pending_tablespace_for_deletion</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForCommit</name><argument_list>(<argument><expr><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pending_tablespace_for_deletion</name> <operator>=</operator> <call><name>GetPendingTablespaceForDeletionForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>pending_tablespace_for_deletion</name></expr></argument>, <argument><expr><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_a_tablespace_can_be_unscheduled_for_deletion_on_commit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>pending_tablespace_for_deletion</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForCommit</name><argument_list>(<argument><expr><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>UnscheduleTablespaceDirectoryDeletionForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pending_tablespace_for_deletion</name> <operator>=</operator> <call><name>GetPendingTablespaceForDeletionForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>pending_tablespace_for_deletion</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_a_tablespace_that_is_pending_is_deleted_on_commit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForCommit</name><argument_list>(<argument><expr><literal type="number">77777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DoPendingTablespaceDeletionForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>unlink_called_with_tablespace_oid</name></expr></argument>, <argument><expr><literal type="number">77777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>unlink_called_with_redo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_a_tablespace_that_has_been_deleted_on_commit_is_no_longer_pending</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ScheduleTablespaceDirectoryDeletionForCommit</name><argument_list>(<argument><expr><literal type="number">77777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DoPendingTablespaceDeletionForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>pending_tablespace_for_deletion</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>pending_tablespace_for_deletion</name> <operator>=</operator> <call><name>GetPendingTablespaceForDeletionForCommit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>pending_tablespace_for_deletion</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_create_tablespace_storage_populates_the_pending_tablespace_deletes_list</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_get_pending_tablespace_for_deletion_returns_a_null_value_by_default</name></expr></argument>)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_DoPendingTablespaceDeletionForAbort_removes_the_pending_tablespace_for_deletion_so_it_is_not_deleted_by_the_next_transaction</name></expr></argument>
		)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_DoPendingTablespaceDeletionForAbort_calls_unlink</name></expr></argument>
		)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_delete_called_when_invalid_tablespace_set_does_not_call_unlink</name></expr></argument>
			)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_DoTablespaceDeletionForRedoXlog_calls_unlink_with_tablespace_oid_and_redo_flag</name></expr></argument>
			)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_UnscheduleTablespaceDirectoryDeletionForAbort_removes_the_scheduled_tablespace_for_deletion</name></expr></argument>
			)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_an_UnscheduleTablespaceDirectoryDeletionForAbort_does_not_get_unlinked</name></expr></argument>
			)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_a_tablespace_can_be_scheduled_for_deletion_on_commit</name></expr></argument>
			)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_a_tablespace_can_be_unscheduled_for_deletion_on_commit</name></expr></argument>
			)</argument_list></call></expr>,
		<expr><call><name>unit_test</name><argument_list>(
			<argument><expr><name>test_a_tablespace_that_is_pending_is_deleted_on_commit</name></expr></argument>
			)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(
			<argument>test_a_tablespace_that_has_been_deleted_on_commit_is_no_longer_pending</argument>
			)</argument_list></macro>
			
	}</block></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
