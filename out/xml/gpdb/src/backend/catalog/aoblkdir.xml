<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/catalog/aoblkdir.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * aoblkdir.c
 *   This file contains routines to support creation of append-only block
 *   directory tables. This file is identical in functionality to aoseg.c
 *   that exists in the same directory.
 *
 * Portions Copyright (c) 2009, Greenplum Inc.
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/catalog/aoblkdir.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/aosegfiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/aocssegfiles.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/aoblkdir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/aocatalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>AlterTableCreateAoBlkdirTable</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexInfo</name>  <modifier>*</modifier></type><name>indexInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name><name>classObjectId</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name><name>coloptions</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>indexColNames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	   <name>isAO</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"before_acquire_lock_during_create_ao_blkdir_table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check if this is an appendoptimized table, without acquiring any lock.
	 */</comment>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>isAO</name> <operator>=</operator> <call><name>RelationIsAppendOptimized</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isAO</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Block directory creation must block any transactions that may create
	 * or update indexes such as insert, vacuum and create-index. Concurrent
	 * sequential scans (select) transactions need not be blocked. Index scans
	 * cannot happen because the fact that we are creating block directory
	 * implies no index is yet defined on this appendoptimized table.
	 * Using ShareRowExclusiveLock for this purpose as we allow read-only transactions
	 * being running concurrently. 
	 * 
	 * P.S. GPDB has specific behavior on select statement with locking clause,
	 * refer to comments around checkCanOptSelectLockingClause() for detail. 
	 */</comment>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>ShareRowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create a tuple descriptor */</comment>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">1</literal></expr></argument>,
					   <argument><expr><literal type="string">"segno"</literal></expr></argument>,
					   <argument><expr><name>INT4OID</name></expr></argument>,
					   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">2</literal></expr></argument>,
					   <argument><expr><literal type="string">"columngroup_no"</literal></expr></argument>,
					   <argument><expr><name>INT4OID</name></expr></argument>,
					   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">3</literal></expr></argument>,
					   <argument><expr><literal type="string">"first_row_no"</literal></expr></argument>,
					   <argument><expr><name>INT8OID</name></expr></argument>,
					   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <literal type="number">4</literal></expr></argument>,
					   <argument><expr><literal type="string">"minipage"</literal></expr></argument>,
					   <argument><expr><name>BYTEAOID</name></expr></argument>,
					   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* don't toast 'minipage' */</comment>
	<expr_stmt><expr><name><name>tupdesc</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>attstorage</name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Create index on segno, columngroup_no and first_row_no.
	 */</comment>
	<expr_stmt><expr><name>indexInfo</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>IndexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_NumIndexAttrs</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_NumIndexKeyAttrs</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_IndexAttrNumbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_IndexAttrNumbers</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_IndexAttrNumbers</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_Expressions</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_ExpressionsState</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_Predicate</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_PredicateState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_Unique</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>indexInfo</name><operator>-&gt;</operator><name>ii_Concurrent</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>indexColNames</name> <operator>=</operator> <call><name>list_make3</name><argument_list>(<argument><expr><literal type="string">"segno"</literal></expr></argument>, <argument><expr><literal type="string">"columngroup_no"</literal></expr></argument>, <argument><expr><literal type="string">"first_row_no"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>classObjectId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INT4_BTREE_OPS_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>classObjectId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INT4_BTREE_OPS_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>classObjectId</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>INT8_BTREE_OPS_OID</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>coloptions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>coloptions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>coloptions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>CreateAOAuxiliaryTable</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
								  <argument><expr><literal type="string">"pg_aoblkdir"</literal></expr></argument>,
								  <argument><expr><name>RELKIND_AOBLOCKDIR</name></expr></argument>,
								  <argument><expr><name>tupdesc</name></expr></argument>,
								  <argument><expr><name>indexInfo</name></expr></argument>, <argument><expr><name>indexColNames</name></expr></argument>,
								  <argument><expr><name>classObjectId</name></expr></argument>,
								  <argument><expr><name>coloptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * In relation versions older than AORelationVersion_PG12, block directory
 * entries can lie about the continuity of rows *within* their range, due to
 * legacy hole filling logic. Since unique index checks rely on this continuity,
 * such indexes cannot be created on these relations.
 *
 * Called only when rel has a block directory.
 */</comment>
<function><type><name>void</name></type>
<name>ValidateRelationVersionForUniqueIndex</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>	<name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 	<name>errsegno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>errversion</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>totalsegs</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsAppendOptimized</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RelationIsAoRows</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>FileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>fsInfo</name> <init>= <expr><call><name>GetAllFileSegInfo</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalsegs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalsegs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>fsInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>formatversion</name> <operator>&lt;</operator> <name>AORelationVersion_PG12</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>errsegno</name> <operator>=</operator> <name><name>fsInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>segno</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>errversion</name> <operator>=</operator> <name><name>fsInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>formatversion</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>AOCSFileSegInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>aocsFsInfo</name> <init>= <expr><call><name>GetAllAOCSFileSegInfo</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>totalsegs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalsegs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>aocsFsInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>formatversion</name> <operator>&lt;</operator> <name>AORelationVersion_PG12</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>errsegno</name> <operator>=</operator> <name><name>aocsFsInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>segno</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>errversion</name> <operator>=</operator> <name><name>aocsFsInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>formatversion</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * We currently raise an error in this scenario. We could alternatively
	 * recreate the block directory (and perform a relfile swap of the block
	 * directory relation, similar to alter table rewrites). Such a solution is
	 * complex enough and can be explored with appropriate user need. Block
	 * directory creation during DefineIndex() has exposed complexities in the
	 * past too, especially around locking when multiple indexes are being
	 * created at a time.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"append-only tables with older relation versions do not support unique indexes"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"in segno = %d: version found = %d, minimum version required = %d"</literal></expr></argument>,
							  <argument><expr><name>errsegno</name></expr></argument>, <argument><expr><name>errversion</name></expr></argument>, <argument><expr><name>AORelationVersion_PG12</name></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"truncate and reload the table data before creating the unique index"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
