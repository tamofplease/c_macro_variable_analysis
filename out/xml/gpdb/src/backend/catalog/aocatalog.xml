<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/catalog/aocatalog.c"><comment type="block">/*
 * aocatalog.c
 *
 * Helper function to support the creation of
 * append-only auxiliary relations such as block directories and visimaps.
 *
 * Copyright (c) 2013-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/catalog/aocatalog.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/aoblkdir.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/aocatalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/aoseg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/aovisimap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/heap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_appendonly.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/gp_fastsequence.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Create append-only auxiliary relations for target relation rel.
 * Returns true if they are newly created.  If pg_appendonly has already
 * known those tables, don't create them and returns false.
 */</comment>
<function><type><name>bool</name></type>
<name>CreateAOAuxiliaryTable</name><parameter_list>(
		<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>auxiliaryNamePrefix</name></decl></parameter>,
		<parameter><decl><type><name>char</name></type> <name>relkind</name></decl></parameter>,
		<parameter><decl><type><name>TupleDesc</name></type> <name>tupledesc</name></decl></parameter>,
		<parameter><decl><type><name>IndexInfo</name>  <modifier>*</modifier></type><name>indexInfo</name></decl></parameter>,
		<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>indexColNames</name></decl></parameter>,
		<parameter><decl><type><name>Oid</name>	<modifier>*</modifier></type><name>classObjectId</name></decl></parameter>,
		<parameter><decl><type><name>int16</name> <modifier>*</modifier></type><name>coloptions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>aoauxiliary_relname</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>aoauxiliary_idxname</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>shared_relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>mapped_relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>relOid</name></decl>, <decl><type ref="prev"/><name>aoauxiliary_relid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>aoauxiliary_idxid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>baseobject</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>aoauxiliaryobject</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>namespaceid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsValid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>RelationIsAppendOptimized</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>auxiliaryNamePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tupledesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_AOSEGMENTS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>indexInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>shared_relation</name> <operator>=</operator> <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relisshared</name></name></expr>;</expr_stmt>
	<comment type="block">/*
	 * We cannot allow creating an auxiliary table for a shared relation
	 * after initdb (because there's no way to let other databases know
	 * this visibility map.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>shared_relation</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"shared tables cannot have append-only auxiliary relations after initdb"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* It's mapped if and only if its parent is, too */</comment>
	<expr_stmt><expr><name>mapped_relation</name> <operator>=</operator> <call><name>RelationIsMapped</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>relOid</name> <operator>=</operator> <call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch<condition>(<expr><name>relkind</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELKIND_AOVISIMAP</name></expr>:</case>
			<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aoauxiliary_relid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aoauxiliary_idxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_AOBLOCKDIR</name></expr>:</case>
			<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>aoauxiliary_relid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aoauxiliary_idxid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_AOSEGMENTS</name></expr>:</case>
			<expr_stmt><expr><call><name>GetAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>aoauxiliary_relid</name></expr></argument>,
				<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported auxiliary relkind '%c'"</literal></expr></argument>, <argument><expr><name>relkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Does it have the auxiliary relation?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>aoauxiliary_relid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>aoauxiliary_relname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aoauxiliary_relname</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%s_%u"</literal></expr></argument>, <argument><expr><name>auxiliaryNamePrefix</name></expr></argument>, <argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>aoauxiliary_idxname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aoauxiliary_idxname</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%s_%u_index"</literal></expr></argument>, <argument><expr><name>auxiliaryNamePrefix</name></expr></argument>, <argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Aux tables for regular relations go in pg_aoseg; those for temp
	 * relations go into the per-backend temp-toast-table namespace.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>RelationUsesTempNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>namespaceid</name> <operator>=</operator> <call><name>GetTempToastNamespace</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>namespaceid</name> <operator>=</operator> <name>PG_AOSEGMENT_NAMESPACE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * We place auxiliary relation in the pg_aoseg namespace
	 * even if its master relation is a temp table. There cannot be
	 * any naming collision, and the auxiliary relation will be
	 * destroyed when its master is, so there is no need to handle
	 * the aovisimap relation as temp.
	 */</comment>
	<expr_stmt><expr><name>aoauxiliary_relid</name> <operator>=</operator> <call><name>heap_create_with_catalog</name><argument_list>(<argument><expr><name>aoauxiliary_relname</name></expr></argument>,
											     <argument><expr><name>namespaceid</name></expr></argument>,
											     <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltablespace</name></name></expr></argument>,
											     <argument><expr><name>InvalidOid</name></expr></argument>,
												 <argument><expr><name>InvalidOid</name></expr></argument>,
												 <argument><expr><name>InvalidOid</name></expr></argument>,
											     <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relowner</name></name></expr></argument>,
												 <argument><expr><name>HEAP_TABLE_AM_OID</name></expr></argument>,
											     <argument><expr><name>tupledesc</name></expr></argument>,
												 <argument><expr><name>NIL</name></expr></argument>,
											     <argument><expr><name>relkind</name></expr></argument>,
												 <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relpersistence</name></name></expr></argument>,
											     <argument><expr><name>shared_relation</name></expr></argument>,
												 <argument><expr><name>mapped_relation</name></expr></argument>,
											     <argument><expr><name>ONCOMMIT_NOOP</name></expr></argument>,
											     <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* GP Policy */</comment>
											     <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>,
												 <comment type="block">/* use_user_acl */</comment> <argument><expr><name>false</name></expr></argument>,
											     <argument><expr><name>true</name></expr></argument>,
												 <argument><expr><name>true</name></expr></argument>,
												 <argument><expr><name>InvalidOid</name></expr></argument>,
												 <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* typeaddress */</comment>
												 <comment type="block">/* valid_opts */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make this table visible, else index creation will fail */</comment>
	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create an index on AO auxiliary tables (like visimap) except for pg_aoseg table */</comment>
	<if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>!=</operator> <name>RELKIND_AOSEGMENTS</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>collationObjectId</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Relation</name></type>	<name>aoauxiliary_rel</name></decl>;</decl_stmt>

		<comment type="block">/* ShareLock is not really needed here, but take it anyway */</comment>
		<expr_stmt><expr><name>aoauxiliary_rel</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>aoauxiliary_relid</name></expr></argument>, <argument><expr><name>ShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>collationObjectId</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>indexColNames</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>aoauxiliary_idxid</name> <operator>=</operator> <call><name>index_create</name><argument_list>(<argument><expr><name>aoauxiliary_rel</name></expr></argument>,
										 <argument><expr><name>aoauxiliary_idxname</name></expr></argument>,
										 <argument><expr><name>InvalidOid</name></expr></argument>,
										 <argument><expr><name>InvalidOid</name></expr></argument>,
										 <argument><expr><name>InvalidOid</name></expr></argument>,
										 <argument><expr><name>InvalidOid</name></expr></argument>,
										 <argument><expr><name>indexInfo</name></expr></argument>,
										 <argument><expr><name>indexColNames</name></expr></argument>,
										 <argument><expr><name>BTREE_AM_OID</name></expr></argument>,
										 <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>reltablespace</name></name></expr></argument>,
										 <argument><expr><name>collationObjectId</name></expr></argument>, <argument><expr><name>classObjectId</name></expr></argument>, <argument><expr><name>coloptions</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>,
										 <argument><expr><name>INDEX_CREATE_IS_PRIMARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Unlock target table -- no one can see it */</comment>
		<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>aoauxiliary_rel</name></expr></argument>, <argument><expr><name>ShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Unlock the index -- no one can see it anyway */</comment>
		<expr_stmt><expr><call><name>UnlockRelationOid</name><argument_list>(<argument><expr><name>aoauxiliary_idxid</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Store the auxiliary table's OID in the parent relation's pg_appendonly row.
	 * TODO (How to generalize this?)
	 */</comment>
	<switch>switch <condition>(<expr><name>relkind</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>RELKIND_AOVISIMAP</name></expr>:</case>
			<expr_stmt><expr><call><name>UpdateAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
								 <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
								 <argument><expr><name>aoauxiliary_relid</name></expr></argument>, <argument><expr><name>aoauxiliary_idxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_AOBLOCKDIR</name></expr>:</case>
			<expr_stmt><expr><call><name>UpdateAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
								 <argument><expr><name>aoauxiliary_relid</name></expr></argument>, <argument><expr><name>aoauxiliary_idxid</name></expr></argument>,
								 <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELKIND_AOSEGMENTS</name></expr>:</case>
			<comment type="block">/* Add initial entries in gp_fastsequence */</comment>
			<expr_stmt><expr><call><name>InsertInitialFastSequenceEntries</name><argument_list>(<argument><expr><name>aoauxiliary_relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>UpdateAppendOnlyEntryAuxOids</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>,
								 <argument><expr><name>aoauxiliary_relid</name></expr></argument>,
								 <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
								 <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported auxiliary relkind '%c'"</literal></expr></argument>, <argument><expr><name>relkind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * Register dependency from the auxiliary table to the master, so that the
	 * aoseg table will be deleted if the master is.
	 */</comment>
	<expr_stmt><expr><name><name>baseobject</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>baseobject</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>relOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>baseobject</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aoauxiliaryobject</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aoauxiliaryobject</name><operator>.</operator><name>objectId</name></name> <operator>=</operator> <name>aoauxiliary_relid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aoauxiliaryobject</name><operator>.</operator><name>objectSubId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>recordDependencyOn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aoauxiliaryobject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>baseobject</name></expr></argument>, <argument><expr><name>DEPENDENCY_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make changes visible
	 */</comment>
	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>IsAppendonlyMetadataRelkind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>relkind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><operator>(</operator><name>relkind</name> <operator>==</operator> <name>RELKIND_AOSEGMENTS</name> <operator>||</operator>
			<name>relkind</name> <operator>==</operator> <name>RELKIND_AOBLOCKDIR</name> <operator>||</operator>
			<name>relkind</name> <operator>==</operator> <name>RELKIND_AOVISIMAP</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>NewRelationCreateAOAuxTables</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relOid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>createBlkDir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>AlterTableCreateAoSegTable</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AlterTableCreateAoVisimapTable</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>createBlkDir</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>AlterTableCreateAoBlkdirTable</name><argument_list>(<argument><expr><name>relOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
