<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/postmaster/autostats.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * autostats.c
 *
 * Greenplum auto-analyze code
 *
 *
 * Portions Copyright (c) 2005-2015, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 1996-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/postmaster/autostats.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/vacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"foreign/foreign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/autostats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/autovacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Forward declarations.
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>autostats_issue_analyze</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relationOid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>autostats_on_change_check</name><parameter_list>(<parameter><decl><type><name>AutoStatsCmdType</name></type> <name>cmdType</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>ntuples</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>autostats_on_no_stats_check</name><parameter_list>(<parameter><decl><type><name>AutoStatsCmdType</name></type> <name>cmdType</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationOid</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Auto-stats employs this sub-routine to issue an analyze on a specific relation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>autostats_issue_analyze</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relationOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VacuumStmt</name> <modifier>*</modifier></type><name>analyzeStmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VacuumRelation</name> <modifier>*</modifier></type><name>relation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gp_autostats_allow_nonowner</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If this user does not own the table, then auto-stats will not issue the
		 * analyze.  This check will be skipped if gp_autostats_allow_nonowner=true
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>pg_class_ownercheck</name><argument_list>(<argument><expr><name>relationOid</name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			 <operator>(</operator><call><name>pg_database_ownercheck</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsSharedRelation</name><argument_list>(<argument><expr><name>relationOid</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>log_autostats</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Auto-stats did not issue ANALYZE on tableoid %d since the user does not have table-owner level permissions."</literal></expr></argument>,
				<argument><expr><name>relationOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set up an ANALYZE command */</comment>
	<expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>makeVacuumRelation</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>relationOid</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>analyzeStmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>VacuumStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>analyzeStmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>analyzeStmt</name><operator>-&gt;</operator><name>rels</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>analyzeStmt</name><operator>-&gt;</operator><name>is_vacuumcmd</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>pstate</name> <operator>=</operator> <call><name>make_parsestate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecVacuum</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>analyzeStmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free_parsestate</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>analyzeStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Method determines if auto-stats should run as per onchange auto-stats policy. This policy
 * enables auto-analyze if the command was a CTAS, INSERT, DELETE, UPDATE or COPY
 * and the number of tuples is greater than a threshold.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>autostats_on_change_check</name><parameter_list>(<parameter><decl><type><name>AutoStatsCmdType</name></type> <name>cmdType</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>ntuples</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>cmdType</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_CTAS</name></expr>:</case>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_INSERT</name></expr>:</case>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_DELETE</name></expr>:</case>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_UPDATE</name></expr>:</case>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_COPY</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ntuples</name> <operator>&gt;</operator> <name>gp_autostats_on_change_threshold</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Method determines if auto-stats should run as per onnostats auto-stats policy. This policy
 * enables auto-analyze if :
 * (1) CTAS
 * (2) I-S or COPY if there are no statistics present
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>autostats_on_no_stats_check</name><parameter_list>(<parameter><decl><type><name>AutoStatsCmdType</name></type> <name>cmdType</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cmdType</name> <operator>==</operator> <name>AUTOSTATS_CMDTYPE_CTAS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cmdType</name> <operator>==</operator> <name>AUTOSTATS_CMDTYPE_INSERT</name>
		  <operator>||</operator> <name>cmdType</name> <operator>==</operator> <name>AUTOSTATS_CMDTYPE_COPY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * a relation has no stats if the corresponding row in pg_class has
	 * relpages=0, reltuples=0
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>classForm</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Must get the relation's tuple from pg_class
		 */</comment>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>,
							   <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relationOid</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_TABLE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"relation with OID %u does not exist"</literal></expr></argument>,
							<argument><expr><name>relationOid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>classForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"Auto-stats ONNOSTATS check on tableoid %d has relpages = %d reltuples = %.0f."</literal></expr></argument>,
			 <argument><expr><name>relationOid</name></expr></argument>,
			 <argument><expr><name><name>classForm</name><operator>-&gt;</operator><name>relpages</name></name></expr></argument>,
			 <argument><expr><name><name>classForm</name><operator>-&gt;</operator><name>reltuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>classForm</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_FOREIGN_TABLE</name> <operator>&amp;&amp;</operator>
			<call><name>rel_is_external_table</name><argument_list>(<argument><expr><name>relationOid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * To keep the behaviour the same as in GPDB 6, don't try to
			 * auto-analyze external tables. In GPDB 6, we used to populate
			 * pg_class.relpages with a constant at CREATE EXTERNAL TABLE.
			 * We don't do that anymore, for consistency with foreign tables,
			 * but without this special case here, we would then try to
			 * auto-analyze external tables. External tables don't have
			 * an ANALYZE callback, so it wouldn't do anything, but it would
			 * print an annoying "cannot analyze this foreign table" warning
			 * every time you inserted to an external table.
			 *
			 * All foreign tables without an analyze callback have the same
			 * problem, really, but we're not concerned about that right now.
			 */</comment>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>classForm</name><operator>-&gt;</operator><name>relpages</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>classForm</name><operator>-&gt;</operator><name>reltuples</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block>

	<comment type="block">/* we should not get here at all */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Convert command type to string for logging purposes.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>autostats_cmdtype_to_string</name><parameter_list>(<parameter><decl><type><name>AutoStatsCmdType</name></type> <name>cmdType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>cmdType</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_CTAS</name></expr>:</case>
			<return>return <expr><literal type="string">"CTAS"</literal></expr>;</return>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_INSERT</name></expr>:</case>
			<return>return <expr><literal type="string">"INSERT"</literal></expr>;</return>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_DELETE</name></expr>:</case>
			<return>return <expr><literal type="string">"DELETE"</literal></expr>;</return>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_UPDATE</name></expr>:</case>
			<return>return <expr><literal type="string">"UPDATE"</literal></expr>;</return>
		<case>case <expr><name>AUTOSTATS_CMDTYPE_COPY</name></expr>:</case>
			<return>return <expr><literal type="string">"COPY"</literal></expr>;</return>
		<default>default:</default>

			<comment type="block">/*
			 * we should not reach here .. but this method should probably not
			 * throw an error
			 */</comment>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function extracts the command type and id of the modified relation from a
 * a PlannedStmt. This is done in preparation to call auto_stats()
 */</comment>
<function><type><name>void</name></type>
<name>autostats_get_cmdtype</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>AutoStatsCmdType</name> <modifier>*</modifier></type> <name>pcmdType</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>prelationOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name><name>queryDesc</name><operator>-&gt;</operator><name>plannedstmt</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>relationOid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>		<comment type="block">/* relation that is modified */</comment>
	<decl_stmt><decl><type><name>AutoStatsCmdType</name></type> <name>cmdType</name> <init>= <expr><name>AUTOSTATS_CMDTYPE_SENTINEL</name></expr></init></decl>;</decl_stmt>		<comment type="block">/* command type */</comment>

	<switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>commandType</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CMD_SELECT</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>intoClause</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* CTAS */</comment>
				<expr_stmt><expr><name>relationOid</name> <operator>=</operator> <call><name>GetIntoRelOid</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cmdType</name> <operator>=</operator> <name>AUTOSTATS_CMDTYPE_CTAS</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>copyIntoClause</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>cmdType</name> <operator>=</operator> <name>AUTOSTATS_CMDTYPE_COPY</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>CMD_INSERT</name></expr>:</case>
		<case>case <expr><name>CMD_UPDATE</name></expr>:</case>
		<case>case <expr><name>CMD_DELETE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>resultRelations</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>rte</name> <operator>=</operator> <call><name>rt_fetch</name><argument_list>(<argument><expr><call><name>lfirst_int</name><argument_list>(<argument><expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>resultRelations</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>relationOid</name> <operator>=</operator> <name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>commandType</name></name> <operator>==</operator> <name>CMD_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>cmdType</name> <operator>=</operator> <name>AUTOSTATS_CMDTYPE_INSERT</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>commandType</name></name> <operator>==</operator> <name>CMD_UPDATE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>cmdType</name> <operator>=</operator> <name>AUTOSTATS_CMDTYPE_UPDATE</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>cmdType</name> <operator>=</operator> <name>AUTOSTATS_CMDTYPE_DELETE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>CMD_UTILITY</name></expr>:</case>
		<case>case <expr><name>CMD_UNKNOWN</name></expr>:</case>
		<case>case <expr><name>CMD_NOTHING</name></expr>:</case>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cmdType</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cmdType</name> <operator>&lt;=</operator> <name>AUTOSTATS_CMDTYPE_SENTINEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>pcmdType</name> <operator>=</operator> <name>cmdType</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>prelationOid</name> <operator>=</operator> <name>relationOid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This method takes a decision to run analyze based on the query and the number of modified tuples based
 * on the policy set via gp_autostats_mode. The following modes are currently supported:
 * none			:	no automatic analyzes are issued. simply return.
 * on_change	:	if the number of modified tuples &gt; gp_onchange_threshold, then an automatic analyze is issued.
 * on_no_stats	:	if the operation is a ctas/insert-select and there are no stats on the modified table,
 *					an automatic analyze is issued.
 */</comment>
<function><type><name>void</name></type>
<name>auto_stats</name><parameter_list>(<parameter><decl><type><name>AutoStatsCmdType</name></type> <name>cmdType</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationOid</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>ntuples</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inFunction</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>relkind</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>policyCheck</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>start</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>!=</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>relationOid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>relkind</name> <operator>=</operator> <call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>relationOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* relation not found */</comment>

	<comment type="block">/* Updates on views are possible via triggers, but we can't analyze views. */</comment>
	<if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>==</operator> <name>RELKIND_VIEW</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>relkind</name> <operator>==</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cmdType</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>cmdType</name> <operator>&lt;=</operator> <name>AUTOSTATS_CMDTYPE_SENTINEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* it is a valid command
																		 * as per auto-stats */</comment>

	<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"before_auto_stats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>GpAutoStatsModeValue</name></type> <name>actual_gp_autostats_mode</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>inFunction</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>actual_gp_autostats_mode</name> <operator>=</operator> <name>gp_autostats_mode_in_functions</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>actual_gp_autostats_mode</name> <operator>=</operator> <name>gp_autostats_mode</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<switch>switch <condition>(<expr><name>actual_gp_autostats_mode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>GP_AUTOSTATS_ON_CHANGE</name></expr>:</case>
			<expr_stmt><expr><name>policyCheck</name> <operator>=</operator> <call><name>autostats_on_change_check</name><argument_list>(<argument><expr><name>cmdType</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>GP_AUTOSTATS_ON_NO_STATS</name></expr>:</case>
			<expr_stmt><expr><name>policyCheck</name> <operator>=</operator> <call><name>autostats_on_no_stats_check</name><argument_list>(<argument><expr><name>cmdType</name></expr></argument>, <argument><expr><name>relationOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>actual_gp_autostats_mode</name> <operator>==</operator> <name>GP_AUTOSTATS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>policyCheck</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>policyCheck</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"In mode %s, command %s on (dboid,tableoid)=(%d,%d) modifying "</literal> <name>UINT64_FORMAT</name> <literal type="string">" tuples did not issue Auto-ANALYZE."</literal></expr></argument>,
			 <argument><expr><call><name>lookup_autostats_mode_by_value</name><argument_list>(<argument><expr><name>actual_gp_autostats_mode</name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><call><name>autostats_cmdtype_to_string</name><argument_list>(<argument><expr><name>cmdType</name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><name>MyDatabaseId</name></expr></argument>,
			 <argument><expr><name>relationOid</name></expr></argument>,
			 <argument><expr><name>ntuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>log_autostats</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"In mode %s, command %s on (dboid,tableoid)=(%d,%d) modifying "</literal> <name>UINT64_FORMAT</name> <literal type="string">" tuples caused Auto-ANALYZE."</literal></expr></argument>,
			 <argument><expr><call><name>lookup_autostats_mode_by_value</name><argument_list>(<argument><expr><name>actual_gp_autostats_mode</name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><call><name>autostats_cmdtype_to_string</name><argument_list>(<argument><expr><name>cmdType</name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><name>MyDatabaseId</name></expr></argument>,
			 <argument><expr><name>relationOid</name></expr></argument>,
			 <argument><expr><name>ntuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>autostats_issue_analyze</name><argument_list>(<argument><expr><name>relationOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>log_duration</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>long</name></type>		<name>secs</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>usecs</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>msecs</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>TimestampDifference</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>secs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>msecs</name> <operator>=</operator> <name>usecs</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"duration: %ld.%03d ms Auto-ANALYZE"</literal></expr></argument>, <argument><expr><name>secs</name> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <name>msecs</name></expr></argument>, <argument><expr><name>usecs</name> <operator>%</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
