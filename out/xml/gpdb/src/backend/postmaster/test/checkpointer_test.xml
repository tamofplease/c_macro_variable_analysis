<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/postmaster/test/checkpointer_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../checkpointer.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BGW_REQUESTS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_request_queue</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointerShmemStruct</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CheckpointerRequest</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_BGW_REQUESTS</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>CheckpointerShmem</name> <operator>=</operator> <operator>(</operator><name>CheckpointerShmemStruct</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>CheckpointerShmem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CheckpointerShmem</name><operator>-&gt;</operator><name>checkpointer_pid</name></name> <operator>=</operator> <literal type="number">1234</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CheckpointerShmem</name><operator>-&gt;</operator><name>max_requests</name></name> <operator>=</operator> <name>MAX_BGW_REQUESTS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>IsUnderPostmaster</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ProcGlobal</name> <operator>=</operator> <operator>(</operator><name>PROC_HDR</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PROC_HDR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ProcGlobal</name><operator>-&gt;</operator><name>checkpointerLatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Basic enqueue tests, including compaction upon enqueuing into a
 * full queue.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__ForwardSyncRequest_enqueue</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileTag</name></type> <name>dummy_tag</name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>MAIN_FORKNUM</name></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init_request_queue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ProcGlobal</name><operator>-&gt;</operator><name>checkpointerLatch</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>CheckpointerCommLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>CheckpointerCommLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* basic enqueue */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ForwardSyncRequest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy_tag</name></expr></argument>, <argument><expr><name>SYNC_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>CheckpointerShmem</name><operator>-&gt;</operator><name>num_requests</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* fill up the queue */</comment>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>MAX_BGW_REQUESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>CheckpointerCommLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>CheckpointerCommLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dummy_tag</name><operator>.</operator><name>segno</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ForwardSyncRequest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy_tag</name></expr></argument>, <argument><expr><name>SYNC_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>CheckpointerCommLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockAcquire</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>CheckpointerCommLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>LWLockRelease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>LWLockHeldByMe</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>CheckpointerCommLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>LWLockHeldByMe</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="block">/*
	 * This enqueue request should trigger compaction but no
	 * duplicates are in the queue.  So the queue should remain
	 * full.
	 */</comment>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ForwardSyncRequest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy_tag</name></expr></argument>, <argument><expr><name>SYNC_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_false</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>CheckpointerShmem</name><operator>-&gt;</operator><name>num_requests</name></name> <operator>==</operator> <name><name>CheckpointerShmem</name><operator>-&gt;</operator><name>max_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>CheckpointerShmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test__ForwardSyncRequest_enqueue</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
