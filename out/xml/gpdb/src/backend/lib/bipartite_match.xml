<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/lib/bipartite_match.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * bipartite_match.c
 *	  Hopcroft-Karp maximum cardinality algorithm for bipartite graphs
 *
 * This implementation is based on pseudocode found at:
 *
 * https://en.wikipedia.org/w/index.php?title=Hopcroft%E2%80%93Karp_algorithm&amp;oldid=593898016
 *
 * Copyright (c) 2015-2019, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/lib/bipartite_match.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/bipartite_match.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<comment type="block">/*
 * The distances computed in hk_breadth_search can easily be seen to never
 * exceed u_size.  Since we restrict u_size to be less than SHRT_MAX, we
 * can therefore use SHRT_MAX as the "infinity" distance needed as a marker.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HK_INFINITY</name></cpp:macro>  <cpp:value>SHRT_MAX</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hk_breadth_search</name><parameter_list>(<parameter><decl><type><name>BipartiteMatchState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>hk_depth_search</name><parameter_list>(<parameter><decl><type><name>BipartiteMatchState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Given the size of U and V, where each is indexed 1..size, and an adjacency
 * list, perform the matching and return the resulting state.
 */</comment>
<function><type><name>BipartiteMatchState</name> <modifier>*</modifier></type>
<name>BipartiteMatch</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v_size</name></decl></parameter>, <parameter><decl><type><name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>adjacency</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BipartiteMatchState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BipartiteMatchState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>u_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>u_size</name> <operator>&gt;=</operator> <name>SHRT_MAX</name> <operator>||</operator>
		<name>v_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>v_size</name> <operator>&gt;=</operator> <name>SHRT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid set size for BipartiteMatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>u_size</name></name> <operator>=</operator> <name>u_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v_size</name></name> <operator>=</operator> <name>v_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>adjacency</name></name> <operator>=</operator> <name>adjacency</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>matching</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pair_uv</name></name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><operator>(</operator><name>u_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pair_vu</name></name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><operator>(</operator><name>v_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>distance</name></name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>u_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>u_size</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>hk_breadth_search</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>u</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>u_size</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pair_uv</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><call><name>hk_depth_search</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>matching</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* just in case */</comment>
	</block_content>}</block></while>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free a state returned by BipartiteMatch, except for the original adjacency
 * list, which is owned by the caller. This only frees memory, so it's optional.
 */</comment>
<function><type><name>void</name></type>
<name>BipartiteMatchFree</name><parameter_list>(<parameter><decl><type><name>BipartiteMatchState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* adjacency matrix is treated as owned by the caller */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pair_uv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pair_vu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>distance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Perform the breadth-first search step of H-K matching.
 * Returns true if successful.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>hk_breadth_search</name><parameter_list>(<parameter><decl><type><name>BipartiteMatchState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>usize</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>u_size</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name>	   <modifier>*</modifier></type><name>queue</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>queue</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name>	   <modifier>*</modifier></type><name>distance</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>distance</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>qhead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* we never enqueue any node more than once */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>qtail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* so don't have to worry about wrapping */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>u</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>distance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>HK_INFINITY</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>usize</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pair_uv</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>distance</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>queue</name><index>[<expr><name>qhead</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>distance</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>HK_INFINITY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<while>while <condition>(<expr><name>qtail</name> <operator>&lt;</operator> <name>qhead</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>queue</name><index>[<expr><name>qtail</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>distance</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <name><name>distance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>short</name>	   <modifier>*</modifier></type><name>u_adj</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>adjacency</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><ternary><condition><expr><name>u_adj</name></expr> ?</condition><then> <expr><name><name>u_adj</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>u_next</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pair_vu</name><index>[<expr><name><name>u_adj</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>distance</name><index>[<expr><name>u_next</name></expr>]</index></name> <operator>==</operator> <name>HK_INFINITY</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>distance</name><index>[<expr><name>u_next</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>distance</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>qhead</name> <operator>&lt;</operator> <name>usize</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>queue</name><index>[<expr><name>qhead</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>u_next</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>(</operator><name><name>distance</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>HK_INFINITY</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform the depth-first search step of H-K matching.
 * Returns true if successful.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>hk_depth_search</name><parameter_list>(<parameter><decl><type><name>BipartiteMatchState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>short</name>	   <modifier>*</modifier></type><name>distance</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>distance</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name>	   <modifier>*</modifier></type><name>pair_uv</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pair_uv</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name>	   <modifier>*</modifier></type><name>pair_vu</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>pair_vu</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name>	   <modifier>*</modifier></type><name>u_adj</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>adjacency</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><ternary><condition><expr><name>u_adj</name></expr> ?</condition><then> <expr><name><name>u_adj</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>short</name></type>		<name>nextdist</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>distance</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <name>HK_INFINITY</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>nextdist</name> <operator>=</operator> <name><name>distance</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>v</name> <init>= <expr><name><name>u_adj</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>distance</name><index>[<expr><name><name>pair_vu</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name>nextdist</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>hk_depth_search</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>pair_vu</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>pair_vu</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pair_uv</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>distance</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>HK_INFINITY</name></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
