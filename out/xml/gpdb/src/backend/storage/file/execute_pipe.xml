<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/file/execute_pipe.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * execute_pipe.c
 *	   popen() replacement with stderr
 *
 * NOTES:
 *
 * COPY and external table can execute arbitary command. Upstream uses
 * OpenPipeStream(), which uses popen to create the new process. But
 * popen can't catch stderr, so when something goes wrong only exit code
 * is reported. This is a replacement that also catches stderr as well,
 * so we can get detail messages from child process if provided.
 *
 * Portions Copyright (C) 2020-Present VMware, Inc.
 *
 *
 * IDENTIFICATION
 *	    src/backend/storage/file/execute_pipe.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/execute_pipe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_DATA_P</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> <comment type="block">/* index to data pipe */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXEC_ERR_P</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define> <comment type="block">/* index to error pipe  */</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>read_err_msg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>sinfo</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * popen_with_stderr
 *
 * standard popen doesn't redirect stderr from the child process.
 * we need stderr in order to display the error that child process
 * encountered and show it to the user. This is, therefore, a wrapper
 * around a set of file descriptor redirections and a fork.
 *
 * if 'forwrite' is set then we set the data pipe write side on the
 * parent. otherwise, we set the read side on the parent.
 *
 * This function is used to replace OpenPipeStream in COPY TO/FROM
 * PROGRAM command. With OpenPipeStream, COPY command can only report
 * exit code.
 */</comment>
<function><type><name>int</name></type>
<name>popen_with_stderr</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pipes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forwrite</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* pipe to send data child &lt;--&gt; parent */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name><name>err</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>		<comment type="block">/* pipe to send errors child --&gt; parent */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>READ</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>WRITE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pipe</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>

	<expr_stmt><expr><name>pid</name> <operator>=</operator> <call><name>fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <comment type="block">/* parent */</comment>
	<block>{<block_content>

		<if_stmt><if>if <condition>(<expr><name>forwrite</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* parent writes to child */</comment>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>EXEC_DATA_P</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* parent reads from child */</comment>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>EXEC_DATA_P</name></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>err</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pipes</name><index>[<expr><name>EXEC_ERR_P</name></expr>]</index></name> <operator>=</operator> <name><name>err</name><index>[<expr><name>READ</name></expr>]</index></name></expr>;</expr_stmt>

		<return>return <expr><name>pid</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <comment type="block">/* child */</comment>
	<block>{<block_content>

		<comment type="block">/*
		 * set up the data pipe
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>forwrite</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* assign pipes to parent to stdin */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"dup2 error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* no longer needed after the duplication */</comment>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* assign pipes to parent to stdout */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"dup2 error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* no longer needed after the duplication */</comment>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * now set up the error pipe
		 */</comment>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>err</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>dup2</name><argument_list>(<argument><expr><name><name>err</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>forwrite</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"dup2 error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>err</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* go ahead and execute the user command */</comment>
		<expr_stmt><expr><call><name>execl</name><argument_list>(<argument><expr><literal type="string">"/bin/sh"</literal></expr></argument>, <argument><expr><literal type="string">"sh"</literal></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>, <argument><expr><name>exe</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* if we're here an error occurred */</comment>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><name>forwrite</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>err</name><index>[<expr><name>READ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>err</name><index>[<expr><name>WRITE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>pid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pclose_with_stderr
 *
 * close our data and error pipes and return the child process
 * termination status. if child terminated with error, 'buf' will
 * point to the error string retrieved from child's stderr.
 */</comment>
<function><type><name>int</name></type>
<name>pclose_with_stderr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pipes</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>sinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* close the data pipe. we can now read from error pipe without being blocked */</comment>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><name>EXEC_DATA_P</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>read_err_msg</name><argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><name>EXEC_ERR_P</name></expr>]</index></name></expr></argument>, <argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipes</name><index>[<expr><name>EXEC_ERR_P</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <comment type="block">/* process exists */</comment>
	<block>{<block_content>
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><call><name>waitpid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * read err msg from err pipe
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>read_err_msg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>StringInfo</name></type> <name>sinfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ebuf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ebuflen</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>nread</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>ebuflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if<condition>(<expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><name>ebuf</name></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"error string unavailable due to read error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>sinfo</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>write_log</name><argument_list>(<argument><expr><literal type="string">"read err msg from pipe, len:%d msg:%s"</literal></expr></argument>, <argument><expr><name><name>sinfo</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>sinfo</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
