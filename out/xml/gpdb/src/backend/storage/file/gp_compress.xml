<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/file/gp_compress.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gp_compress.c
 *	  Common compression utilities
 *
 * Portions Copyright (c) 2009, Greenplum Inc.
 * Portions Copyright (c) EMC, 2011
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/storage/file/gp_compress.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystoragelayer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/gp_compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zstd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Using the provided compression function this method will try to compress the data.
 * In case an issue occur during the compression it will abort the execution.
 */</comment>
<function><type><name>void</name></type>
<name>gp_trycompress</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>sourceData</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>sourceLen</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>compressedBuffer</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>compressedBufferLen</name></decl></parameter>,
			   <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>compressedLen</name></decl></parameter>, <parameter><decl><type><name>PGFunction</name></type> <name>compressor</name></decl></parameter>, <parameter><decl><type><name>CompressionState</name> <modifier>*</modifier></type><name>compressionState</name></decl></parameter>
)</parameter_list>

<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PointerIsValid</name><argument_list>(<argument><expr><name>compressor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>callCompressionActuator</name><argument_list>( <argument><expr><name>compressor</name></expr></argument>
						   , <argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>sourceData</name></expr></argument>
						   , <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sourceLen</name></expr></argument>
						   , <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>compressedBuffer</name></expr></argument>
						   , <argument><expr><name>compressedBufferLen</name></expr></argument>
						   , <argument><expr><name>compressedLen</name></expr></argument>
						   , <argument><expr><name>compressionState</name></expr></argument>
						   )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gp_decompress_generic</name><parameter_list>(
	  <parameter><decl><type><name>uint8</name>	 <modifier>*</modifier></type><name>compressed</name></decl></parameter>,
	  <parameter><decl><type><name>int32</name></type>	 <name>compressedLen</name></decl></parameter>,
	  <parameter><decl><type><name>uint8</name>	 <modifier>*</modifier></type><name>uncompressed</name></decl></parameter>,
	  <parameter><decl><type><name>int32</name></type>	 <name>uncompressedLen</name></decl></parameter>,
	  <parameter><decl><type><name>PGFunction</name></type>	 <name>decompressor</name></decl></parameter>,
	  <parameter><decl><type><name>CompressionState</name> <modifier>*</modifier></type><name>compressionState</name></decl></parameter>,
	  <parameter><decl><type><name>int64</name></type>	 <name>bufferCount</name></decl></parameter>
	  )</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>				 <name>resultingUncompressedLen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>callCompressionActuator</name><argument_list>(<argument><expr><name>decompressor</name></expr></argument>,
							<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name>compressed</name></expr></argument>,
							<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>compressedLen</name></expr></argument>,
							<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>uncompressed</name></expr></argument>,
							<argument><expr><name>uncompressedLen</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>resultingUncompressedLen</name></expr></argument>,
							<argument><expr><name>compressionState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<if_stmt><if>if <condition>(<expr><name>resultingUncompressedLen</name> <operator>!=</operator> <name>uncompressedLen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"Uncompress returned length %d which is different than the "</literal>
			 <literal type="string">"expected length %d (block count "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
			 <argument><expr><name>resultingUncompressedLen</name></expr></argument>,
			 <argument><expr><name>uncompressedLen</name></expr></argument>,
			 <argument><expr><name>bufferCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>  <comment type="block">/* end gp_decompress_generic */</comment>

<comment type="block">/*---------------------------------------------------------------------------*/</comment>
<function><type><name>void</name></type> <name>gp_decompress</name><parameter_list>(
		<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>compressed</name></decl></parameter>,
		<parameter><decl><type><name>int32</name></type> <name>compressedLen</name></decl></parameter>,
		<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>uncompressed</name></decl></parameter>,
		<parameter><decl><type><name>int32</name></type> <name>uncompressedLen</name></decl></parameter>,
		<parameter><decl><type><name>PGFunction</name></type> <name>decompressor</name></decl></parameter>,
		<parameter><decl><type><name>CompressionState</name> <modifier>*</modifier></type><name>compressionState</name></decl></parameter>,
		<parameter><decl><type><name>int64</name></type> <name>bufferCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>uncompressedSize</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type> <name>resultingUncompressedLen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>uncompressedSize</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>uncompressedLen</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>gp_decompress_generic</name><argument_list>( <argument><expr><name>compressed</name></expr></argument>
						, <argument><expr><name>compressedLen</name></expr></argument>
						, <argument><expr><name>uncompressed</name></expr></argument>
						, <argument><expr><name>uncompressedLen</name></expr></argument>
						, <argument><expr><name>decompressor</name></expr></argument>
						, <argument><expr><name>compressionState</name></expr></argument>
						, <argument><expr><name>bufferCount</name></expr></argument>
	)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>resultingUncompressedLen</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator><name>uncompressedSize</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>resultingUncompressedLen</name> <operator>!=</operator> <name>uncompressedLen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"Uncompress returned length %d which is different than the "</literal>
			 <literal type="string">"expected length %d (block count "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
			 <argument><expr><name>resultingUncompressedLen</name></expr></argument>,
			 <argument><expr><name>uncompressedLen</name></expr></argument>,
			 <argument><expr><name>bufferCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Support for tracking ZSTD handles with resource owners.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <name>dlist_head</name></type> <name>open_zstd_handles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>zstd_resowner_callback_registered</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>zstd_free_callback</name><parameter_list>(<parameter><decl><type><name>ResourceReleasePhase</name></type> <name>phase</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name></type> <name>isTopLevel</name></decl></parameter>,
				   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>zstd_context</name> <modifier>*</modifier></type>
<name>zstd_alloc_context</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>zstd_context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zstd_resowner_callback_registered</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RegisterResourceReleaseCallback</name><argument_list>(<argument><expr><name>zstd_free_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>zstd_resowner_callback_registered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zstd_context</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dlist_push_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name>open_zstd_handles</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>zstd_free_context</name><parameter_list>(<parameter><decl><type><name>zstd_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>cctx</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ZSTD_freeCCtx</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>cctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>dctx</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ZSTD_freeDCtx</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>dctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>dlist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Close any open ZSTD handles on abort. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>zstd_free_callback</name><parameter_list>(<parameter><decl><type><name>ResourceReleasePhase</name></type> <name>phase</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name></type> <name>isTopLevel</name></decl></parameter>,
				   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dlist_mutable_iter</name></type> <name>miter</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>!=</operator> <name>RESOURCE_RELEASE_AFTER_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<macro><name>dlist_foreach_modify</name><argument_list>(<argument>miter</argument>, <argument>&amp;open_zstd_handles</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>zstd_context</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>dlist_container</name><argument_list>(<argument><expr><name>zstd_context</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>miter</name><operator>.</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>CurrentResourceOwner</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>isCommit</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"zstd context reference leak: context %p still referenced"</literal></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>zstd_free_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* USE_ZSTD */</comment>
</unit>
