<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/file/buffile.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * buffile.c
 *	  Management of large buffered temporary files.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/storage/file/buffile.c
 *
 * NOTES:
 *
 * BufFiles provide a very incomplete emulation of stdio atop virtual Files
 * (as managed by fd.c).  Currently, we only support the buffered-I/O
 * aspect of stdio: a read or write of the low-level File occurs only
 * when the buffer is filled or emptied.  This is an even bigger win
 * for virtual Files than for ordinary kernel files, since reducing the
 * frequency with which a virtual File is touched reduces "thrashing"
 * of opening/closing file descriptors.
 *
 * Note that BufFile structs are allocated with palloc(), and therefore
 * will go away automatically at query/transaction end.  Since the underlying
 * virtual Files are made with OpenTemporaryFile, all resources for
 * the file are certain to be cleaned up even if processing is aborted
 * by ereport(ERROR).  The data structures required are made in the
 * palloc context that was current when the BufFile was created, and
 * any external resources such as temp files are owned by the ResourceOwner
 * that was current at that time.
 *
 * BufFile also supports temporary files that exceed the OS file size limit
 * (by opening multiple fd.c temporary files).  This is an essential feature
 * for sorts and hashjoins on large amounts of data.
 *
 * BufFile supports temporary files that can be made read-only and shared with
 * other backends, as infrastructure for parallel execution.  Such files need
 * to be created as a member of a SharedFileSet that all participants are
 * attached to.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zstd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buffile.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buf_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/gp_compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/workfile_mgr.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We break BufFiles into gigabyte-sized segments, regardless of RELSEG_SIZE.
 * The reason is that we'd like large BufFiles to be spread across multiple
 * tablespaces when available.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PHYSICAL_FILESIZE</name></cpp:macro>	<cpp:value>0x40000000</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFILE_SEG_SIZE</name></cpp:macro>		<cpp:value>(MAX_PHYSICAL_FILESIZE / BLCKSZ)</cpp:value></cpp:define>

<comment type="block">/* To align upstream's structure, minimize the code differences */</comment>
<typedef>typedef <type><union>union <name>FakeAlignedBlock</name>
<block>{
	<comment type="block">/*
	 * Greenplum uses char * so it could suspend and resume, to give the hash
	 * table as much space as possible.
	 */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
}</block></union></type> <name>FakeAlignedBlock</name>;</typedef>

<comment type="block">/*
 * This data structure represents a buffered file that consists of one or
 * more physical files (each accessed through a virtual file descriptor
 * managed by fd.c).
 */</comment>
<struct>struct <name>BufFile</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>numFiles</name></decl>;</decl_stmt>		<comment type="block">/* number of physical files in set */</comment>
	<comment type="block">/* all files except the last have length exactly MAX_PHYSICAL_FILESIZE */</comment>
	<decl_stmt><decl><type><name>File</name>	   <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>			<comment type="block">/* palloc'd array with numFiles entries */</comment>

	<decl_stmt><decl><type><name>bool</name></type>		<name>isInterXact</name></decl>;</decl_stmt>	<comment type="block">/* keep open over transactions? */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>dirty</name></decl>;</decl_stmt>			<comment type="block">/* does buffer need to be written? */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>readOnly</name></decl>;</decl_stmt>		<comment type="block">/* has the file been set to read only? */</comment>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>operation_name</name></decl>;</decl_stmt> <comment type="block">/* for naming temporary files. */</comment>

	<decl_stmt><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl>;</decl_stmt>		<comment type="block">/* space for segment files if shared */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>			<comment type="block">/* name of this BufFile if shared */</comment>

	<comment type="block">/*
	 * workfile_set for the files in current buffile. The workfile_set creator
	 * should take care of the workfile_set's lifecycle. So, no need to call
	 * workfile_mgr_close_set under the buffile logic.
	 * If the workfile_set is created in BufFileCreateTemp. The workfile_set
	 * should get freed once all the files in it are closed in BufFileClose.
	 */</comment>
	<decl_stmt><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * resowner is the ResourceOwner to use for underlying temp files.  (We
	 * don't need to remember the memory context we're using explicitly,
	 * because after creation we only repalloc our arrays larger.)
	 */</comment>
	<decl_stmt><decl><type><name>ResourceOwner</name></type> <name>resowner</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * "current pos" is position of start of buffer within the logical file.
	 * Position as seen by user of BufFile is (curFile, curOffset + pos).
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>curFile</name></decl>;</decl_stmt>		<comment type="block">/* file index (0..n) part of current pos */</comment>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>curOffset</name></decl>;</decl_stmt>		<comment type="block">/* offset part of current pos */</comment>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>pos</name></decl>;</decl_stmt>			<comment type="block">/* next read/write position in buffer */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>nbytes</name></decl>;</decl_stmt>			<comment type="block">/* total # of valid bytes in buffer */</comment>
	<decl_stmt><decl><type><name>FakeAlignedBlock</name></type> <name>buffer</name></decl>;</decl_stmt>	<comment type="block">/* GPDB: PG upstream uses PGAlignedBlock */</comment>

	<comment type="block">/*
	 * Current stage, if this is a sequential BufFile. A sequential BufFile
	 * can be written to once, and read once after that. Without compression,
	 * there is no real difference between sequential and random access
	 * buffiles, but we enforce the limitations anyway, to uncover possible
	 * bugs in sequential BufFile usage earlier.
	 */</comment>
	<enum>enum
	<block>{
		<decl><name>BFS_RANDOM_ACCESS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
		<decl><name>BFS_SEQUENTIAL_WRITING</name></decl>,
		<decl><name>BFS_SEQUENTIAL_READING</name></decl>,
		<decl><name>BFS_COMPRESSED_WRITING</name></decl>,
		<decl><name>BFS_COMPRESSED_READING</name></decl>
	}</block> <decl><name>state</name></decl>;</enum>

	<comment type="block">/* ZStandard compression support */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<decl_stmt><decl><type><name>zstd_context</name> <modifier>*</modifier></type><name>zstd_context</name></decl>;</decl_stmt>	<comment type="block">/* ZStandard library handles. */</comment>

	<comment type="block">/*
	 * During compression, tracks of the original, uncompressed size.
	 */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>uncompressed_bytes</name></decl>;</decl_stmt>

	<comment type="block">/* This holds compressed input, during decompression. */</comment>
	<decl_stmt><decl><type><name>ZSTD_inBuffer</name></type> <name>compressed_buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>decompression_finished</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>BufFile</name> <modifier>*</modifier></type><name>makeBufFileCommon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfiles</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>BufFile</name> <modifier>*</modifier></type><name>makeBufFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>firstfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>extendBufFile</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufFileLoadBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufFileDumpBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>BufFileFlush</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>File</name></type> <name>MakeNewSharedSegment</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segment</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufFileStartCompression</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufFileDumpCompressedBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufFileEndCompression</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>BufFileLoadCompressedBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Create BufFile and perform the common initialization.
 */</comment>
<function><type><specifier>static</specifier> <name>BufFile</name> <modifier>*</modifier></type>
<name>makeBufFileCommon</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nfiles</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufFile</name>    <modifier>*</modifier></type><name>file</name> <init>= <expr><operator>(</operator><name>BufFile</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>=</operator> <name>nfiles</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isInterXact</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>resowner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a BufFile given the first underlying physical file.
 * NOTE: caller must set isInterXact if appropriate.
 */</comment>
<function><type><specifier>static</specifier> <name>BufFile</name> <modifier>*</modifier></type>
<name>makeBufFile</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>firstfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operation_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufFile</name>    <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>makeBufFileCommon</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>firstfile</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>readOnly</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fileset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>operation_name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>operation_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add another component temp file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>extendBufFile</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>File</name></type>		<name>pfile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ResourceOwner</name></type> <name>oldowner</name></decl>;</decl_stmt>

	<comment type="block">/* Be sure to associate the file with the BufFile's resource owner */</comment>
	<expr_stmt><expr><name>oldowner</name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>resowner</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>fileset</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>OpenTemporaryFile</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>isInterXact</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>operation_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>MakeNewSharedSegment</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pfile</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name>oldowner</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name></expr></argument>,
									<argument><expr><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>]</index></name> <operator>=</operator> <name>pfile</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Register the file as a "work file", so that the Greenplum workfile
	 * limits apply to it.
	 *
	 * Note: The GUC gp_workfile_limit_files_per_query is used to control the
	 * maximum number of spill files for a given query, to prevent runaway
	 * queries from destroying the entire system. Counting each segment file is
	 * reasonable for this scenario.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>work_set</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FileSetIsWorkfile</name><argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RegisterFileWithSet</name><argument_list>(<argument><expr><name>pfile</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>work_set</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a BufFile for a new temporary file (which will expand to become
 * multiple temporary files if more than MAX_PHYSICAL_FILESIZE bytes are
 * written to it).
 *
 * If interXact is true, the temp file will not be automatically deleted
 * at end of transaction.
 *
 * Note: if interXact is true, the caller had better be calling us in a
 * memory context, and with a resource owner, that will survive across
 * transaction boundaries.
 */</comment>
<function><type><name>BufFile</name> <modifier>*</modifier></type>
<name>BufFileCreateTempInSet</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>operation_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>interXact</name></decl></parameter>, <parameter><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufFile</name>    <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>pfile</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Ensure that temp tablespaces are set up for OpenTemporaryFile to use.
	 * Possibly the caller will have done this already, but it seems useful to
	 * double-check here.  Failure to do this at all would result in the temp
	 * files always getting placed in the default tablespace, which is a
	 * pretty hard-to-detect bug.  Callers may prefer to do it earlier if they
	 * want to be sure that any required catalog access is done in some other
	 * resource context.
	 */</comment>
	<expr_stmt><expr><call><name>PrepareTempTablespaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pfile</name> <operator>=</operator> <call><name>OpenTemporaryFile</name><argument_list>(<argument><expr><name>interXact</name></expr></argument>, <argument><expr><name>operation_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pfile</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>makeBufFile</name><argument_list>(<argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>operation_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>isInterXact</name></name> <operator>=</operator> <name>interXact</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Register the file as a "work file", so that the Greenplum workfile
	 * limits apply to it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>work_set</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>work_set</name></name> <operator>=</operator> <name>work_set</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FileSetIsWorkfile</name><argument_list>(<argument><expr><name>pfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RegisterFileWithSet</name><argument_list>(<argument><expr><name>pfile</name></expr></argument>, <argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"workfile_creation_failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BufFile</name> <modifier>*</modifier></type>
<name>BufFileCreateTemp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>operation_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>interXact</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>work_set</name> <operator>=</operator> <call><name>workfile_mgr_create_set</name><argument_list>(<argument><expr><name>operation_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* hold pin */</comment>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>BufFileCreateTempInSet</name><argument_list>(<argument><expr><name>operation_name</name></expr></argument>, <argument><expr><name>interXact</name></expr></argument>, <argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Build the name for a given segment of a given BufFile.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SharedSegmentName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffile_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s.%d"</literal></expr></argument>, <argument><expr><name>buffile_name</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a new segment file backing a shared BufFile.
 */</comment>
<function><type><specifier>static</specifier> <name>File</name></type>
<name>MakeNewSharedSegment</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>buffile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>name</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * It is possible that there are files left over from before a crash
	 * restart with the same name.  In order for BufFileOpenShared() not to
	 * get confused about how many segments there are, we'll unlink the next
	 * segment number if it already exists.
	 */</comment>
	<expr_stmt><expr><call><name>SharedSegmentName</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>buffile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>segment</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SharedFileSetDelete</name><argument_list>(<argument><expr><name><name>buffile</name><operator>-&gt;</operator><name>fileset</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create the new segment. */</comment>
	<expr_stmt><expr><call><name>SharedSegmentName</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>buffile</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>SharedFileSetCreate</name><argument_list>(<argument><expr><name><name>buffile</name><operator>-&gt;</operator><name>fileset</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* SharedFileSetCreate would've errored out */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>file</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a BufFile that can be discovered and opened read-only by other
 * backends that are attached to the same SharedFileSet using the same name.
 *
 * The naming scheme for shared BufFiles is left up to the calling code.  The
 * name will appear as part of one or more filenames on disk, and might
 * provide clues to administrators about which subsystem is generating
 * temporary file data.  Since each SharedFileSet object is backed by one or
 * more uniquely named temporary directory, names don't conflict with
 * unrelated SharedFileSet objects.
 */</comment>
<function><type><name>BufFile</name> <modifier>*</modifier></type>
<name>BufFileCreateShared</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>workfile_set</name> <modifier>*</modifier></type><name>work_set</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufFile</name>    <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>makeBufFileCommon</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fileset</name></name> <operator>=</operator> <name>fileset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>MakeNewSharedSegment</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>readOnly</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<comment type="block">/*
	 * Register the file as a "work file", so that the Greenplum workfile
	 * limits apply to it.
	 */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>work_set</name></name> <operator>=</operator> <name>work_set</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FileSetIsWorkfile</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterFileWithSet</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>work_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Open a file that was previously created in another backend (or this one)
 * with BufFileCreateShared in the same SharedFileSet using the same name.
 * The backend that created the file must have called BufFileClose() or
 * BufFileExportShared() to make sure that it is ready to be opened by other
 * backends and render it read-only.
 */</comment>
<function><type><name>BufFile</name> <modifier>*</modifier></type>
<name>BufFileOpenShared</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufFile</name>    <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>segment_name</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>capacity</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name>	   <modifier>*</modifier></type><name>files</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nfiles</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We don't know how many segments there are, so we'll probe the
	 * filesystem to find out.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/* See if we need to expand our file segment array. */</comment>
		<if_stmt><if>if <condition>(<expr><name>nfiles</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>capacity</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>capacity</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>files</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Try to load a segment. */</comment>
		<expr_stmt><expr><call><name>SharedSegmentName</name><argument_list>(<argument><expr><name>segment_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>nfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>files</name><index>[<expr><name>nfiles</name></expr>]</index></name> <operator>=</operator> <call><name>SharedFileSetOpen</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>, <argument><expr><name>segment_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>files</name><index>[<expr><name>nfiles</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name>nfiles</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If we didn't find any files at all, then no BufFile exists with this
	 * name.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nfiles</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not open temporary file \"%s\" from BufFile \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>segment_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>makeBufFileCommon</name><argument_list>(<argument><expr><name>nfiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <name>files</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>readOnly</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>		<comment type="block">/* Can't write to files opened this way */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fileset</name></name> <operator>=</operator> <name>fileset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Delete a BufFile that was created by BufFileCreateShared in the given
 * SharedFileSet using the given name.
 *
 * It is not necessary to delete files explicitly with this function.  It is
 * provided only as a way to delete files proactively, rather than waiting for
 * the SharedFileSet to be cleaned up.
 *
 * Only one backend should attempt to delete a given name, and should know
 * that it exists and has been exported or closed.
 */</comment>
<function><type><name>void</name></type>
<name>BufFileDeleteShared</name><parameter_list>(<parameter><decl><type><name>SharedFileSet</name> <modifier>*</modifier></type><name>fileset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>segment_name</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>segment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We don't know how many segments the file has.  We'll keep deleting
	 * until we run out.  If we don't manage to find even an initial segment,
	 * raise an error.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SharedSegmentName</name><argument_list>(<argument><expr><name>segment_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SharedFileSetDelete</name><argument_list>(<argument><expr><name>fileset</name></expr></argument>, <argument><expr><name>segment_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>segment</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not delete unknown shared BufFile \"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileExportShared --- flush and make read-only, in preparation for sharing.
 */</comment>
<function><type><name>void</name></type>
<name>BufFileExportShared</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Must be a file belonging to a SharedFileSet. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>fileset</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* It's probably a bug if someone calls this twice. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>readOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>readOnly</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Close a BufFile
 *
 * Like fclose(), this also implicitly FileCloses the underlying File.
 */</comment>
<function><type><name>void</name></type>
<name>BufFileClose</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* flush any unwritten data */</comment>
	<expr_stmt><expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* close and delete the underlying file(s) */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* release the buffer space */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* release zstd handles */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>zstd_free_context</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileLoadBuffer
 *
 * Load some data into buffer, if possible, starting from curOffset.
 * At call, must have dirty = false, pos and nbytes = 0.
 * On exit, nbytes is number of bytes loaded.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileLoadBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>File</name></type>		<name>thisfile</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Advance to next component file if necessary and possible.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>&gt;=</operator> <name>MAX_PHYSICAL_FILESIZE</name> <operator>&amp;&amp;</operator>
		<name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Read whatever we can get, up to a full bufferload.
	 */</comment>
	<expr_stmt><expr><name>thisfile</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <call><name>FileRead</name><argument_list>(<argument><expr><name>thisfile</name></expr></argument>,
							<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>,
							<argument><expr><name>BLCKSZ</name></expr></argument>,
							<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr></argument>,
							<argument><expr><name>WAIT_EVENT_BUFFILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* we choose not to advance curOffset here */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pgBufferUsage</name><operator>.</operator><name>temp_blks_read</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileDumpBuffer
 *
 * Dump buffer contents starting at curOffset.
 * At call, should have dirty = true, nbytes &gt; 0.
 * On exit, dirty is cleared if successful write, and curOffset is advanced.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileDumpBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>wpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bytestowrite</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>thisfile</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Unlike BufFileLoadBuffer, we must dump the whole buffer even if it
	 * crosses a component-file boundary; so we need a loop.
	 */</comment>
	<while>while <condition>(<expr><name>wpos</name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>off_t</name></type>		<name>availbytes</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Advance to next component file if necessary and possible.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>&gt;=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>)</condition>
		<block>{<block_content>
			<while>while <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>extendBufFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Determine how much we need to write into this file.
		 */</comment>
		<expr_stmt><expr><name>bytestowrite</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>-</operator> <name>wpos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>availbytes</name> <operator>=</operator> <name>MAX_PHYSICAL_FILESIZE</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>off_t</name><operator>)</operator> <name>bytestowrite</name> <operator>&gt;</operator> <name>availbytes</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bytestowrite</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>availbytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>thisfile</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bytestowrite</name> <operator>=</operator> <call><name>FileWrite</name><argument_list>(<argument><expr><name>thisfile</name></expr></argument>,
								 <argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>wpos</name></expr></argument>,
								 <argument><expr><name>bytestowrite</name></expr></argument>,
								 <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name></expr></argument>,
								 <argument><expr><name>WAIT_EVENT_BUFFILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>bytestowrite</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>				<comment type="block">/* failed to write */</comment>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name>bytestowrite</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>wpos</name> <operator>+=</operator> <name>bytestowrite</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>pgBufferUsage</name><operator>.</operator><name>temp_blks_written</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * At this point, curOffset has been advanced to the end of the buffer,
	 * ie, its original value + nbytes.  We need to make it point to the
	 * logical file position, ie, original value + pos, in case that is less
	 * (as could happen due to a small backwards seek in a dirty buffer!)
	 */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>-=</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>	<comment type="block">/* handle possible segment crossing */</comment>
	<block>{<block_content>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Now we can set the buffer empty without changing the logical position
	 */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileRead
 *
 * Like fread() except we assume 1-byte element size.
 */</comment>
<function><type><name>size_t</name></type>
<name>BufFileRead</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>nread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>nthistime</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BFS_RANDOM_ACCESS</name></expr>:</case>
		<case>case <expr><name>BFS_SEQUENTIAL_READING</name></expr>:</case>
			<break>break;</break>

		<case>case <expr><name>BFS_SEQUENTIAL_WRITING</name></expr>:</case>
		<case>case <expr><name>BFS_COMPRESSED_WRITING</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot read from sequential BufFile before rewinding to start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>BFS_COMPRESSED_READING</name></expr>:</case>
			<return>return <expr><call><name>BufFileLoadCompressedBuffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* could not flush... */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Try to load more data into buffer. */</comment>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>BufFileLoadBuffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>			<comment type="block">/* no more data available */</comment>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>nthistime</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nthistime</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nthistime</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nthistime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>nthistime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>nthistime</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name> <operator>+</operator> <name>nthistime</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>nthistime</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nread</name> <operator>+=</operator> <name>nthistime</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>nread</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileReadFromBuffer
 *
 * This function provides a faster implementation of Read which applies
 * when the data is already in the underlying buffer.
 * In that case, it returns a pointer to the data in the buffer
 * If the data is not in the buffer, returns NULL and the caller must
 * call the regular BufFileRead with a destination buffer.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>BufFileReadFromBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BFS_RANDOM_ACCESS</name></expr>:</case>
		<case>case <expr><name>BFS_SEQUENTIAL_READING</name></expr>:</case>
			<break>break;</break>

		<case>case <expr><name>BFS_SEQUENTIAL_WRITING</name></expr>:</case>
		<case>case <expr><name>BFS_COMPRESSED_WRITING</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot read from sequential BufFile before rewinding to start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>

		<case>case <expr><name>BFS_COMPRESSED_READING</name></expr>:</case>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>size</name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileWrite
 *
 * Like fwrite() except we assume 1-byte element size.
 */</comment>
<function><type><name>size_t</name></type>
<name>BufFileWrite</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>nwritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>nthistime</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>readOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"workfile_write_failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BFS_RANDOM_ACCESS</name></expr>:</case>
		<case>case <expr><name>BFS_SEQUENTIAL_WRITING</name></expr>:</case>
			<break>break;</break>

		<case>case <expr><name>BFS_COMPRESSED_WRITING</name></expr>:</case>
			<expr_stmt><expr><call><name>BufFileDumpCompressedBuffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>size</name></expr>;</return>

		<case>case <expr><name>BFS_SEQUENTIAL_READING</name></expr>:</case>
		<case>case <expr><name>BFS_COMPRESSED_READING</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot write to sequential BufFile after reading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>&gt;=</operator> <name>BLCKSZ</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Buffer full, dump it out */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>BufFileDumpBuffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>		<comment type="block">/* I/O error */</comment>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Hmm, went directly from reading to writing? */</comment>
				<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>nthistime</name> <operator>=</operator> <name>BLCKSZ</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>nthistime</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nthistime</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nthistime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>nthistime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>nthistime</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>&lt;</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ptr</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name> <operator>+</operator> <name>nthistime</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>nthistime</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nwritten</name> <operator>+=</operator> <name>nthistime</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>nwritten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileFlush
 *
 * Like fflush()
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BufFileFlush</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BFS_RANDOM_ACCESS</name></expr>:</case>
		<case>case <expr><name>BFS_SEQUENTIAL_WRITING</name></expr>:</case>
			<break>break;</break>

		<case>case <expr><name>BFS_COMPRESSED_WRITING</name></expr>:</case>
			<expr_stmt><expr><call><name>BufFileEndCompression</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>BFS_SEQUENTIAL_READING</name></expr>:</case>
		<case>case <expr><name>BFS_COMPRESSED_READING</name></expr>:</case>
			<comment type="block">/* no-op. */</comment>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>BufFileDumpBuffer</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileSeek
 *
 * Like fseek(), except that target position needs two values in order to
 * work when logical filesize exceeds maximum value representable by off_t.
 * We do not support relative seeks across more than that, however.
 *
 * Result is 0 if OK, EOF if not.  Logical position is not moved if an
 * impossible seek is attempted.
 */</comment>
<function><type><name>int</name></type>
<name>BufFileSeek</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileno</name></decl></parameter>, <parameter><decl><type><name>off_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>newFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>newOffset</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BFS_RANDOM_ACCESS</name></expr>:</case>
			<break>break;</break>

		<case>case <expr><name>BFS_SEQUENTIAL_WRITING</name></expr>:</case>
			<comment type="block">/*
			 * We have been writing. The uncompressed sequential mode is the
			 * same as uncompressed, but we check that the caller doesn't try
			 * to do random access after pledging sequential mode.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>fileno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>whence</name> <operator>!=</operator> <name>SEEK_SET</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid seek in sequential BufFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>BFS_COMPRESSED_WRITING</name></expr>:</case>
			<comment type="block">/* We have been writing. Flush the last data, and switch to reading mode */</comment>
			<if_stmt><if>if <condition>(<expr><name>fileno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>whence</name> <operator>!=</operator> <name>SEEK_SET</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid seek in sequential BufFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>BufFileEndCompression</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>

		<case>case <expr><name>BFS_COMPRESSED_READING</name></expr>:</case>
		<case>case <expr><name>BFS_SEQUENTIAL_READING</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot seek in sequential BufFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<switch>switch <condition>(<expr><name>whence</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>SEEK_SET</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>fileno</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>newFile</name> <operator>=</operator> <name>fileno</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>newOffset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SEEK_CUR</name></expr>:</case>

			<comment type="block">/*
			 * Relative seek considers only the signed offset, ignoring
			 * fileno. Note that large offsets (&gt; 1 gig) risk overflow in this
			 * add, unless we have 64-bit off_t.
			 */</comment>
			<expr_stmt><expr><name>newFile</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>newOffset</name> <operator>=</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SEEK_END</name></expr>:</case>
			<comment type="block">/*
			 * The file size of the last file gives us the end offset of that
			 * file.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>dirty</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>newFile</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>newOffset</name> <operator>=</operator> <call><name>FileSize</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>newOffset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not determine size of temporary file \"%s\" from BufFile \"%s\": %m"</literal></expr></argument>,
							 <argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>	
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid whence: %d"</literal></expr></argument>, <argument><expr><name>whence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>EOF</name></expr>;</return>
	</block_content>}</block></switch>
	<while>while <condition>(<expr><name>newOffset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>--</operator><name>newFile</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>newOffset</name> <operator>+=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>newFile</name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>&amp;&amp;</operator>
		<name>newOffset</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>&amp;&amp;</operator>
		<name>newOffset</name> <operator>&lt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Seek is to a point within existing buffer; we can just adjust
		 * pos-within-buffer, without flushing buffer.  Note this is OK
		 * whether reading or writing, but buffer remains dirty if we were
		 * writing.
		 */</comment>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>newOffset</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name><operator>)</operator></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Otherwise, must reposition buffer, so flush any dirty data */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * At this point and no sooner, check for seek past last segment. The
	 * above flush could have created a new segment, so checking sooner would
	 * not work (at least not with this code).
	 */</comment>

	<comment type="block">/* convert seek to "start of next seg" to "end of last seg" */</comment>
	<if_stmt><if>if <condition>(<expr><name>newFile</name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>&amp;&amp;</operator> <name>newOffset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>newFile</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>newOffset</name> <operator>=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><name>newOffset</name> <operator>&gt;</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>++</operator><name>newFile</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>newOffset</name> <operator>-=</operator> <name>MAX_PHYSICAL_FILESIZE</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>newFile</name> <operator>&gt;=</operator> <name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* Seek is OK! */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>=</operator> <name>newFile</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>=</operator> <name>newOffset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>BufFileTell</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fileno</name></decl></parameter>, <parameter><decl><type><name>off_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>fileno</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufFileSeekBlock --- block-oriented seek
 *
 * Performs absolute seek to the start of the n'th BLCKSZ-sized block of
 * the file.  Note that users of this interface will fail if their files
 * exceed BLCKSZ * LONG_MAX bytes, but that is quite a lot; we don't work
 * with tables bigger than that, either...
 *
 * Result is 0 if OK, EOF if not.  Logical position is not moved if an
 * impossible seek is attempted.
 */</comment>
<function><type><name>int</name></type>
<name>BufFileSeekBlock</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>blknum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>BufFileSeek</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
					   <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>blknum</name> <operator>/</operator> <name>BUFFILE_SEG_SIZE</name><operator>)</operator></expr></argument>,
					   <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator> <operator>(</operator><name>blknum</name> <operator>%</operator> <name>BUFFILE_SEG_SIZE</name><operator>)</operator> <operator>*</operator> <name>BLCKSZ</name></expr></argument>,
					   <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
<comment type="block">/*
 * BufFileTellBlock --- block-oriented tell
 *
 * Any fractional part of a block in the current seek position is ignored.
 */</comment>
<function><type><name>long</name></type>
<name>BufFileTellBlock</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>blknum</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>blknum</name> <operator>=</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator> <operator>/</operator> <name>BLCKSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>blknum</name> <operator>+=</operator> <name><name>file</name><operator>-&gt;</operator><name>curFile</name></name> <operator>*</operator> <name>BUFFILE_SEG_SIZE</name></expr>;</expr_stmt>
	<return>return <expr><name>blknum</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Return the current fileset based BufFile size.
 *
 * Counts any holes left behind by BufFileAppend as part of the size.
 * ereport()s on failure.
 */</comment>
<function><type><name>int64</name></type>
<name>BufFileSize</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>lastFileSize</name></decl>;</decl_stmt>

	<comment type="line">// In upstream, this is only used for shared BufFiles, but in GPDB</comment>
	<comment type="line">// also for getting the file size for extra EXPLAIN ANALYZE stats.</comment>
	<comment type="line">//Assert(file-&gt;fileset != NULL);</comment>

	<comment type="block">/* Get the size of the last physical file. */</comment>
	<expr_stmt><expr><name>lastFileSize</name> <operator>=</operator> <call><name>FileSize</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>lastFileSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not determine size of temporary file \"%s\" from BufFile \"%s\": %m"</literal></expr></argument>,
						<argument><expr><call><name>FilePathName</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int64</name><operator>)</operator> <name>MAX_PHYSICAL_FILESIZE</name><operator>)</operator> <operator>+</operator>
		<name>lastFileSize</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the size of this file according to current accounting.
 *
 * Unlike BufFileSize(), which only returns the size of BufFile flushed to the
 * disk, BufFileGetSize() returns the size of whole BufFile including buffer.
 *
 * For a compressed BufFile, this returns the uncompressed size!
 */</comment>
<function><type><name>int64</name></type>
<name>BufFileGetSize</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>NULL</name> <operator>!=</operator> <name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
	<case>case <expr><name>BFS_RANDOM_ACCESS</name></expr>:</case>
	<case>case <expr><name>BFS_SEQUENTIAL_WRITING</name></expr>:</case>
	<case>case <expr><name>BFS_SEQUENTIAL_READING</name></expr>:</case>
		<break>break;</break>
	<case>case <expr><name>BFS_COMPRESSED_WRITING</name></expr>:</case>
	<case>case <expr><name>BFS_COMPRESSED_READING</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>
		<return>return <expr><name><name>file</name><operator>-&gt;</operator><name>uncompressed_bytes</name></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></switch>

	<decl_stmt><decl><type><name>int64</name></type> <name>fileSizeWithoutBuffer</name> <init>= <expr><call><name>BufFileSize</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Writing after seek back doesn't always change the size. */</comment>
	<if_stmt><if>if <condition>(<expr><name>fileSizeWithoutBuffer</name> <operator>&gt;</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>fileSizeWithoutBuffer</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Append the contents of source file (managed within shared fileset) to
 * end of target file (managed within same shared fileset).
 *
 * Note that operation subsumes ownership of underlying resources from
 * "source".  Caller should never call BufFileClose against source having
 * called here first.  Resource owners for source and target must match,
 * too.
 *
 * This operation works by manipulating lists of segment files, so the
 * file content is always appended at a MAX_PHYSICAL_FILESIZE-aligned
 * boundary, typically creating empty holes before the boundary.  These
 * areas do not contain any interesting data, and cannot be read from by
 * caller.
 *
 * Returns the block number within target where the contents of source
 * begins.  Caller should apply this as an offset when working off block
 * positions that are in terms of the original BufFile space.
 */</comment>
<function><type><name>long</name></type>
<name>BufFileAppend</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BFS_COMPRESSED_WRITING</name> <operator>||</operator>
		<name><name>target</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BFS_COMPRESSED_READING</name> <operator>||</operator>
		<name><name>source</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BFS_COMPRESSED_WRITING</name> <operator>||</operator>
		<name><name>source</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BFS_COMPRESSED_READING</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot append a compressed BufFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>long</name></type>		<name>startBlock</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>*</operator> <name>BUFFILE_SEG_SIZE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>newNumFiles</name> <init>= <expr><name><name>target</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>+</operator> <name><name>source</name><operator>-&gt;</operator><name>numFiles</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>fileset</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>readOnly</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>source</name><operator>-&gt;</operator><name>dirty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>source</name><operator>-&gt;</operator><name>fileset</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>resowner</name></name> <operator>!=</operator> <name><name>source</name><operator>-&gt;</operator><name>resowner</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not append BufFile with non-matching resource owner"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>files</name></name> <operator>=</operator> <operator>(</operator><name>File</name> <operator>*</operator><operator>)</operator>
		<call><name>repalloc</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>files</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>File</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newNumFiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>numFiles</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>newNumFiles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>files</name><index>[<expr><name>i</name> <operator>-</operator> <name><name>target</name><operator>-&gt;</operator><name>numFiles</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>numFiles</name></name> <operator>=</operator> <name>newNumFiles</name></expr>;</expr_stmt>

	<return>return <expr><name>startBlock</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return filename of the underlying file.
 *
 * For debugging purposes only. Returns the filename of the
 * first file, if it's segmented.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>BufFileGetFilename</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>buffile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>FileGetFilename</name><argument_list>(<argument><expr><name><name>buffile</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>BufFileSuspend</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>buffile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>buffile</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BFS_RANDOM_ACCESS</name></expr>:</case>
		<case>case <expr><name>BFS_SEQUENTIAL_WRITING</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>BFS_COMPRESSED_WRITING</name></expr>:</case>
			<return>return <expr><call><name>BufFileEndCompression</name><argument_list>(<argument><expr><name>buffile</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>BFS_SEQUENTIAL_READING</name></expr>:</case>
		<case>case <expr><name>BFS_COMPRESSED_READING</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot suspend a sequential BufFile after reading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>BufFileFlush</name><argument_list>(<argument><expr><name>buffile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buffile</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffile</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffile</name><operator>-&gt;</operator><name>nbytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>BufFileResume</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>buffile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>buffile</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BFS_RANDOM_ACCESS</name></expr>:</case>
		<case>case <expr><name>BFS_SEQUENTIAL_READING</name></expr>:</case>
			<break>break;</break>

		<case>case <expr><name>BFS_COMPRESSED_READING</name></expr>:</case>
			<comment type="block">/* no buffer needed */</comment>
			<return>return;</return>

		<case>case <expr><name>BFS_SEQUENTIAL_WRITING</name></expr>:</case>
		<case>case <expr><name>BFS_COMPRESSED_WRITING</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot resume a sequential BufFile that is still writing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>buffile</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffile</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufFileSeek</name><argument_list>(<argument><expr><name>buffile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not seek to the first block of temporary file: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ZStandard Compression support
 */</comment>

<decl_stmt><decl><type><name>bool</name></type> <name>gp_workfile_compression</name></decl>;</decl_stmt>		<comment type="block">/* GUC */</comment>

<comment type="block">/*
 * BufFilePledgeSequential
 *
 * Promise that the caller will only do sequential I/O on the given file.
 * This allows the BufFile to be compressed, if 'gp_workfile_compression=on'.
 *
 * A sequential file is used in two stages:
 *
 * 0. Create file with BufFileCreateTemp().
 * 1. Write all data, using BufFileWrite()
 * 2. Rewind to beginning, with BufFileSeek(file, 0, 0, SEEK_SET).
 * 3. Read as much as you want with BufFileRead()
 * 4. BufFileClose()
 *
 * Trying to do arbitrary seeks
 *
 * A sequential file that is to be passed between processes, using
 * BufFileCreateNamedTemp/BufFileOpenNamedTemp(), can also be used in
 * sequential mode. If the file was pledged as sequential when creating
 * it, the reading side must also pledge sequential access after calling
 * BufFileOpenNamedTemp(). Otherwise, the reader might try to read a
 * compressed file as uncompressed. (As of this writing, none of the callers
 * that use buffiles across processes pledge sequential access, though.)
 */</comment>
<function><type><name>void</name></type>
<name>BufFilePledgeSequential</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>buffile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>BufFileSize</name><argument_list>(<argument><expr><name>buffile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot pledge sequential access to a temporary file after writing it"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>gp_workfile_compression</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BufFileStartCompression</name><argument_list>(<argument><expr><name>buffile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The rest of the code is only needed when compression support is compiled in.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ZSTD</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFILE_ZSTD_COMPRESSION_LEVEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*
 * Temporary buffer used during compression. It's used only within the
 * functions, so we can allocate this once and reuse it for all files.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>compression_buffer</name></decl>;</decl_stmt>

<comment type="block">/*
 * Initialize the compressor.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileStartCompression</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ResourceOwner</name></type> <name>oldowner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * When working with compressed files, we rely on libzstd's buffer,
	 * and the BufFile's own buffer is unused. It's a bit silly that we
	 * allocate it in makeBufFile(), just to free it here again, but it
	 * doesn't seem worth the trouble to avoid that either.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>compression_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>compression_buffer</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Make sure the zstd handle is kept in the same resource owner as
	 * the underlying file. In the typical use, when BufFileCompressOK is
	 * called immediately after opening the file, this wouldn't be
	 * necessary, but better safe than sorry.
	 */</comment>
	<expr_stmt><expr><name>oldowner</name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>resowner</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name></name> <operator>=</operator> <call><name>zstd_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>cctx</name></name> <operator>=</operator> <call><name>ZSTD_createCStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>cctx</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZSTD_initCStream</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>cctx</name></name></expr></argument>, <argument><expr><name>BUFFILE_ZSTD_COMPRESSION_LEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to initialize zstd stream: %s"</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <name>oldowner</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BFS_COMPRESSED_WRITING</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileDumpCompressedBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZSTD_inBuffer</name></type> <name>input</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>uncompressed_bytes</name></name> <operator>+=</operator> <name>nbytes</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Call ZSTD_compressStream() until all the input has been consumed.
	 */</comment>
	<expr_stmt><expr><name><name>input</name><operator>.</operator><name>src</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>nbytes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>input</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>input</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>input</name><operator>.</operator><name>size</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ZSTD_outBuffer</name></type> <name>output</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>output</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>compression_buffer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>BLCKSZ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZSTD_compressStream</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>cctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>output</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>wrote</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>FileWrite</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>WAIT_EVENT_BUFFILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>wrote</name> <operator>!=</operator> <name><name>output</name><operator>.</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not write %d bytes to compressed temporary file: %m"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>output</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>wrote</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * End compression stage. Rewind and prepare the BufFile for decompression.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileEndCompression</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZSTD_outBuffer</name></type> <name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>wrote</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>BFS_COMPRESSED_WRITING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name><name>output</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>compression_buffer</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>BLCKSZ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZSTD_endStream</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>cctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>wrote</name> <operator>=</operator> <call><name>FileWrite</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>dst</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>WAIT_EVENT_BUFFILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>wrote</name> <operator>!=</operator> <name><name>output</name><operator>.</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not write %d bytes to compressed temporary file: %m"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>output</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>wrote</name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>ZSTD_freeCCtx</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>cctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>cctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"BufFile compressed from %ld to %ld bytes"</literal></expr></argument>,
		 <argument><expr><name><name>file</name><operator>-&gt;</operator><name>uncompressed_bytes</name></name></expr></argument>, <argument><expr><call><name>BufFileSize</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Done writing. Initialize for reading */</comment>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>dctx</name></name> <operator>=</operator> <call><name>ZSTD_createDStream</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>dctx</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZSTD_initDStream</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>dctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to initialize zstd dstream: %s"</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>src</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BFS_RANDOM_ACCESS</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>BufFileSeek</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not seek in temporary file: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>BFS_COMPRESSED_READING</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>BufFileLoadCompressedBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ZSTD_outBuffer</name></type> <name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type>		<name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>decompression_finished</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Initialize Zstd output buffer. */</comment>
	<expr_stmt><expr><name><name>output</name><operator>.</operator><name>dst</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<comment type="block">/* No more compressed input? Load some. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>size</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>nb</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>FileRead</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>files</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>src</name></name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+</operator> <name><name>file</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>WAIT_EVENT_BUFFILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not read from temporary file: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>nb</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Decompress, and check result */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ZSTD_decompressStream</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>zstd_context</name><operator>-&gt;</operator><name>dctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"zstd decompression failed: %s"</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* End of compressed data. */</comment>
			<expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <name><name>file</name><operator>-&gt;</operator><name>compressed_buffer</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>decompression_finished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eof</name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>output</name><operator>.</operator><name>size</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We ran out of compressed input, but Zstd expects more. File was
			 * truncated on disk after we wrote it?
			 */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected end of compressed temporary file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><name><name>output</name><operator>.</operator><name>pos</name></name> <operator>&lt;</operator> <name><name>output</name><operator>.</operator><name>size</name></name></expr>)</condition>;</do>

	<expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>curOffset</name></name> <operator>+=</operator> <name>pos</name></expr>;</expr_stmt>

	<return>return <expr><name><name>output</name><operator>.</operator><name>pos</name></name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>		<comment type="block">/* USE_ZSTD */</comment>

<comment type="block">/*
 * Dummy versions of the compression functions, when the server is built
 * without libzstd. gp_workfile_compression cannot be enabled without
 * libzstd - there's a GUC assign hook to check that - so these should
 * never be called. They exists just to avoid having so many #ifdefs in
 * the code.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileStartCompression</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"zstandard compression not supported by this build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileDumpCompressedBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"zstandard compression not supported by this build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufFileEndCompression</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"zstandard compression not supported by this build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>BufFileLoadCompressedBuffer</name><parameter_list>(<parameter><decl><type><name>BufFile</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"zstandard compression not supported by this build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>		<comment type="block">/* USE_ZSTD */</comment>
</unit>
