<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/page/itemptr.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * itemptr.c
 *	  POSTGRES disk item pointer code.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/page/itemptr.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/itemptr.h"</cpp:file></cpp:include>


<comment type="block">/*
 * ItemPointerEquals
 *	Returns true if both item pointers point to the same item,
 *	 otherwise returns false.
 *
 * Note:
 *	Asserts that the disk item pointers are both valid!
 */</comment>
<function><type><name>bool</name></type>
<name>ItemPointerEquals</name><parameter_list>(<parameter><decl><type><name>ItemPointer</name></type> <name>pointer1</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>pointer2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We really want ItemPointerData to be exactly 6 bytes.  This is rather a
	 * random place to check, but there is no better place.
	 */</comment>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"ItemPointerData struct is improperly padded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ItemPointerGetBlockNumber</name><argument_list>(<argument><expr><name>pointer1</name></expr></argument>)</argument_list></call> <operator>==</operator>
		<call><name>ItemPointerGetBlockNumber</name><argument_list>(<argument><expr><name>pointer2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>ItemPointerGetOffsetNumber</name><argument_list>(<argument><expr><name>pointer1</name></expr></argument>)</argument_list></call> <operator>==</operator>
		<call><name>ItemPointerGetOffsetNumber</name><argument_list>(<argument><expr><name>pointer2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ItemPointerCompare
 *		Generic btree-style comparison for item pointers.
 */</comment>
<function><type><name>int32</name></type>
<name>ItemPointerCompare</name><parameter_list>(<parameter><decl><type><name>ItemPointer</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Use ItemPointerGet{Offset,Block}NumberNoCheck to avoid asserting
	 * ip_posid != 0, which may not be true for a user-supplied TID.
	 */</comment>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>b1</name> <init>= <expr><call><name>ItemPointerGetBlockNumberNoCheck</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>b2</name> <init>= <expr><call><name>ItemPointerGetBlockNumberNoCheck</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>b1</name> <operator>&lt;</operator> <name>b2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>b1</name> <operator>&gt;</operator> <name>b2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>ItemPointerGetOffsetNumberNoCheck</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>
			 <call><name>ItemPointerGetOffsetNumberNoCheck</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>ItemPointerGetOffsetNumberNoCheck</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator>
			 <call><name>ItemPointerGetOffsetNumberNoCheck</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ItemPointerToBuffer</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Do not assert valid ItemPointer -- it is ok if it is (0,0)...</comment>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>blockNumber</name> <init>= <expr><call><name>BlockIdGetBlockNumber</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tid</name><operator>-&gt;</operator><name>ip_blkid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>offsetNumber</name> <init>= <expr><name><name>tid</name><operator>-&gt;</operator><name>ip_posid</name></name></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
		    <argument><expr><literal type="string">"(%u,%u)"</literal></expr></argument>,
		    <argument><expr><name>blockNumber</name></expr></argument>, 
		    <argument><expr><name>offsetNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buffer</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>itemPointerBuffer</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>itemPointerBuffer2</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ItemPointerToString</name><parameter_list>(<parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ItemPointerToBuffer</name><argument_list>(<argument><expr><name>itemPointerBuffer</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>ItemPointerToString2</name><parameter_list>(<parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ItemPointerToBuffer</name><argument_list>(<argument><expr><name>itemPointerBuffer2</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
