<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/sync/sync.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sync.c
 *	  File synchronization management code.
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/sync/sync.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability/instr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgwriter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/md.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>pendingOpsCxt</name></decl>;</decl_stmt> <comment type="block">/* context for the pending ops state  */</comment>

<comment type="block">/*
 * In some contexts (currently, standalone backends and the checkpointer)
 * we keep track of pending fsync operations: we need to remember all relation
 * segments that have been written since the last checkpoint, so that we can
 * fsync them down to disk before completing the next checkpoint.  This hash
 * table remembers the pending operations.  We use a hash table mostly as
 * a convenient way of merging duplicate requests.
 *
 * We use a similar mechanism to remember no-longer-needed files that can
 * be deleted after the next checkpoint, but we use a linked list instead of
 * a hash table, because we don't expect there to be any duplicate requests.
 *
 * These mechanisms are only used for non-temp relations; we never fsync
 * temp rels, nor do we need to postpone their deletion (see comments in
 * mdunlink).
 *
 * (Regular backends do not track pending operations locally, but forward
 * them to the checkpointer.)
 */</comment>
<typedef>typedef <type><name>uint16</name></type> <name>CycleCtr</name>;</typedef>		<comment type="block">/* can be any convenient integer size */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>FileTag</name></type>		<name>tag</name></decl>;</decl_stmt>			<comment type="block">/* identifies handler and file */</comment>
	<decl_stmt><decl><type><name>CycleCtr</name></type>	<name>cycle_ctr</name></decl>;</decl_stmt>		<comment type="block">/* sync_cycle_ctr of oldest request */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>canceled</name></decl>;</decl_stmt>		<comment type="block">/* canceled is true if we canceled "recently" */</comment>
}</block></struct></type> <name>PendingFsyncEntry</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>FileTag</name></type>		<name>tag</name></decl>;</decl_stmt>			<comment type="block">/* identifies handler and file */</comment>
	<decl_stmt><decl><type><name>CycleCtr</name></type>	<name>cycle_ctr</name></decl>;</decl_stmt>		<comment type="block">/* checkpoint_cycle_ctr when request was made */</comment>
}</block></struct></type> <name>PendingUnlinkEntry</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>pendingOps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>pendingUnlinks</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>pendingOpsCxt</name></decl>;</decl_stmt> <comment type="block">/* context for the above  */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>CycleCtr</name></type> <name>sync_cycle_ctr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>CycleCtr</name></type> <name>checkpoint_cycle_ctr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Intervals for calling AbsorbSyncRequests */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSYNCS_PER_ABSORB</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNLINKS_PER_ABSORB</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>

<comment type="block">/*
 * Function pointers for handling sync and unlink requests.
 */</comment>
<typedef>typedef <type><struct>struct <name>SyncOps</name>
<block>{
	<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>sync_syncfiletag</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileTag</name> <modifier>*</modifier></type><name>ftag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>sync_unlinkfiletag</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileTag</name> <modifier>*</modifier></type><name>ftag</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
	<function_decl><type><name>bool</name></type>		(<modifier>*</modifier><name>sync_filetagmatches</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileTag</name> <modifier>*</modifier></type><name>ftag</name></decl></parameter>,
										<parameter><decl><type><specifier>const</specifier> <name>FileTag</name> <modifier>*</modifier></type><name>candidate</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>SyncOps</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SyncOps</name></type> <name><name>syncsw</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* magnetic disk */</comment>
	<expr><block>{
		<expr><operator>.</operator><name>sync_syncfiletag</name> <operator>=</operator> <name>mdsyncfiletag</name></expr>,
		<expr><operator>.</operator><name>sync_unlinkfiletag</name> <operator>=</operator> <name>mdunlinkfiletag</name></expr>,
		<expr><operator>.</operator><name>sync_filetagmatches</name> <operator>=</operator> <name>mdfiletagmatches</name></expr>
	}</block></expr>,
	<comment type="block">/* append-optimized storage */</comment>
	<expr><block>{
		<expr><operator>.</operator><name>sync_syncfiletag</name> <operator>=</operator> <name>aosyncfiletag</name></expr>,
		<expr><operator>.</operator><name>sync_unlinkfiletag</name> <operator>=</operator> <name>mdunlinkfiletag</name></expr>,
		<expr><operator>.</operator><name>sync_filetagmatches</name> <operator>=</operator> <name>mdfiletagmatches</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initialize data structures for the file sync tracking.
 */</comment>
<function><type><name>void</name></type>
<name>InitSync</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Create pending-operations hashtable if we need it.  Currently, we need
	 * it if we are standalone (not under a postmaster) or if we are a startup
	 * or checkpointer auxiliary process.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name> <operator>||</operator> <call><name>AmStartupProcess</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>AmCheckpointerProcess</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>hash_ctl</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * XXX: The checkpointer needs to add entries to the pending ops table
		 * when absorbing fsync requests.  That is done within a critical
		 * section, which isn't usually allowed, but we make an exception. It
		 * means that there's a theoretical possibility that you run out of
		 * memory while absorbing fsync requests, which leads to a PANIC.
		 * Fortunately the hash table is small so that's unlikely to happen in
		 * practice.
		 */</comment>
		<expr_stmt><expr><name>pendingOpsCxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
											  <argument><expr><literal type="string">"Pending ops context"</literal></expr></argument>,
											  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextAllowInCriticalSection</name><argument_list>(<argument><expr><name>pendingOpsCxt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FileTag</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PendingFsyncEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>pendingOpsCxt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pendingOps</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Pending Ops Table"</literal></expr></argument>,
								 <argument><expr><literal type="number">100L</literal></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>,
								 <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pendingUnlinks</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block">/*
 * SyncPreCheckpoint() -- Do pre-checkpoint work
 *
 * To distinguish unlink requests that arrived before this checkpoint
 * started from those that arrived during the checkpoint, we use a cycle
 * counter similar to the one we use for fsync requests. That cycle
 * counter is incremented here.
 *
 * This must be called *before* the checkpoint REDO point is determined.
 * That ensures that we won't delete files too soon.
 *
 * Note that we can't do anything here that depends on the assumption
 * that the checkpoint will be completed.
 */</comment>
<function><type><name>void</name></type>
<name>SyncPreCheckpoint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Any unlink requests arriving after this point will be assigned the next
	 * cycle counter, and won't be unlinked until next checkpoint.
	 */</comment>
	<expr_stmt><expr><name>checkpoint_cycle_ctr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SyncPostCheckpoint() -- Do post-checkpoint work
 *
 * Remove any lingering files that can now be safely removed.
 */</comment>
<function><type><name>void</name></type>
<name>SyncPostCheckpoint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>absorb_counter</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>absorb_counter</name> <operator>=</operator> <name>UNLINKS_PER_ABSORB</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>pendingUnlinks</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PendingUnlinkEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>PendingUnlinkEntry</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>pendingUnlinks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/*
		 * New entries are appended to the end, so if the entry is new we've
		 * reached the end of old entries.
		 *
		 * Note: if just the right number of consecutive checkpoints fail, we
		 * could be fooled here by cycle_ctr wraparound.  However, the only
		 * consequence is that we'd delay unlinking for one more checkpoint,
		 * which is perfectly tolerable.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>cycle_ctr</name></name> <operator>==</operator> <name>checkpoint_cycle_ctr</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* Unlink the file */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>syncsw</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>handler</name></name></expr>]</index></name><operator>.</operator><call><name>sync_unlinkfiletag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>,
														  <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * There's a race condition, when the database is dropped at the
			 * same time that we process the pending unlink requests. If the
			 * DROP DATABASE deletes the file before we do, we will get ENOENT
			 * here. rmtree() also has to ignore ENOENT errors, to deal with
			 * the possibility that we delete the file first.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not remove file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* And remove the list entry */</comment>
		<expr_stmt><expr><name>pendingUnlinks</name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name>pendingUnlinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * As in ProcessSyncRequests, we don't want to stop absorbing fsync
		 * requests for along time when there are many deletions to be done.
		 * We can safely call AbsorbSyncRequests() at this point in the loop
		 * (note it might try to delete list entries).
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>--</operator><name>absorb_counter</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>AbsorbSyncRequests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>absorb_counter</name> <operator>=</operator> <name>UNLINKS_PER_ABSORB</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*

 *	ProcessSyncRequests() -- Process queued fsync requests.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessSyncRequests</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>sync_in_progress</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hstat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PendingFsyncEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>absorb_counter</name></decl>;</decl_stmt>

	<comment type="block">/* Statistics on sync times */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>processed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>	<name>sync_start</name></decl>,
				<decl><type ref="prev"/><name>sync_end</name></decl>,
				<decl><type ref="prev"/><name>sync_diff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>elapsed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>longest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>total_elapsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * This is only called during checkpoints, and checkpoints should only
	 * occur in processes that have created a pendingOps.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pendingOps</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot sync without a pendingOps table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If we are in the checkpointer, the sync had better include all fsync
	 * requests that were queued by backends up to this point.  The tightest
	 * race condition that could occur is that a buffer that must be written
	 * and fsync'd for the checkpoint could have been dumped by a backend just
	 * before it was visited by BufferSync().  We know the backend will have
	 * queued an fsync request before clearing the buffer's dirtybit, so we
	 * are safe as long as we do an Absorb after completing BufferSync().
	 */</comment>
	<expr_stmt><expr><call><name>AbsorbSyncRequests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * To avoid excess fsync'ing (in the worst case, maybe a never-terminating
	 * checkpoint), we want to ignore fsync requests that are entered into the
	 * hashtable after this point --- they should be processed next time,
	 * instead.  We use sync_cycle_ctr to tell old entries apart from new
	 * ones: new ones will have cycle_ctr equal to the incremented value of
	 * sync_cycle_ctr.
	 *
	 * In normal circumstances, all entries present in the table at this point
	 * will have cycle_ctr exactly equal to the current (about to be old)
	 * value of sync_cycle_ctr.  However, if we fail partway through the
	 * fsync'ing loop, then older values of cycle_ctr might remain when we
	 * come back here to try again.  Repeated checkpoint failures would
	 * eventually wrap the counter around to the point where an old entry
	 * might appear new, causing us to skip it, possibly allowing a checkpoint
	 * to succeed that should not have.  To forestall wraparound, any time the
	 * previous ProcessSyncRequests() failed to complete, run through the
	 * table and forcibly set cycle_ctr = sync_cycle_ctr.
	 *
	 * Think not to merge this loop with the main loop, as the problem is
	 * exactly that that loop may fail before having visited all the entries.
	 * From a performance point of view it doesn't matter anyway, as this path
	 * will never be taken in a system that's functioning normally.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>sync_in_progress</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* prior try failed, so update any stale cycle_ctr values */</comment>
		<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstat</name></expr></argument>, <argument><expr><name>pendingOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <operator>(</operator><name>PendingFsyncEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cycle_ctr</name></name> <operator>=</operator> <name>sync_cycle_ctr</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Advance counter so that new hashtable entries are distinguishable */</comment>
	<expr_stmt><expr><name>sync_cycle_ctr</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* Set flag to detect failure if we don't reach the end of the loop */</comment>
	<expr_stmt><expr><name>sync_in_progress</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Now scan the hashtable for fsync requests to process */</comment>
	<expr_stmt><expr><name>absorb_counter</name> <operator>=</operator> <name>FSYNCS_PER_ABSORB</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstat</name></expr></argument>, <argument><expr><name>pendingOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <operator>(</operator><name>PendingFsyncEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>failures</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>cycle_ctr</name></name> <operator>!=</operator> <name>sync_cycle_ctr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>canceled</name></name> <operator>&amp;&amp;</operator>
			<operator>(</operator><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"fsync_counter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeSkip</name>
			 <operator>||</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>handler</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
				 <call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"ao_fsync_counter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeSkip</name><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>MyAuxProcType</name> <operator>==</operator> <name>CheckpointerProcess</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>segno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"checkpoint performing fsync for %d/%d/%d"</literal></expr></argument>,
						 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
						 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"checkpoint performing fsync for %d/%d/%d.%d"</literal></expr></argument>,
						 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
						 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"fsync_counter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeSkip</name><operator>)</operator></expr> ?</condition><then> <expr><name>ERROR</name></expr> </then><else>: <expr><name>LOG</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>segno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"non checkpoint process trying to fsync "</literal>
						 <literal type="string">"%d/%d/%d when fsync_counter fault is set"</literal></expr></argument>,
						 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
						 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"non checkpoint process trying to fsync "</literal>
						 <literal type="string">"%d/%d/%d.%d when fsync_counter fault is set"</literal></expr></argument>,
						 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
						 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>rnode</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * If the entry is new then don't process it this time; it is new.
		 * Note "continue" bypasses the hash-remove call at the bottom of the
		 * loop.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>cycle_ctr</name></name> <operator>==</operator> <name>sync_cycle_ctr</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* Else assert we haven't missed it */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>CycleCtr</name><operator>)</operator> <operator>(</operator><name><name>entry</name><operator>-&gt;</operator><name>cycle_ctr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>sync_cycle_ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If fsync is off then we don't have to bother opening the file at
		 * all.  (We delay checking until this point so that changing fsync on
		 * the fly behaves sensibly.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>enableFsync</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If in checkpointer, we want to absorb pending requests every so
			 * often to prevent overflow of the fsync request queue.  It is
			 * unspecified whether newly-added entries will be visited by
			 * hash_seq_search, but we don't care since we don't need to
			 * process them anyway.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>--</operator><name>absorb_counter</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>AbsorbSyncRequests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>absorb_counter</name> <operator>=</operator> <name>FSYNCS_PER_ABSORB</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * The fsync table could contain requests to fsync segments that
			 * have been deleted (unlinked) by the time we get to them. Rather
			 * than just hoping an ENOENT (or EACCES on Windows) error can be
			 * ignored, what we do on error is absorb pending requests and
			 * then retry. Since mdunlink() queues a "cancel" message before
			 * actually unlinking, the fsync request is guaranteed to be
			 * marked canceled after the absorb if it really was this case.
			 * DROP DATABASE likewise has to tell us to forget fsync requests
			 * before it starts deletions.
			 */</comment>
			<for>for <control>(<init><expr><name>failures</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>canceled</name></name></expr>;</condition> <incr><expr><name>failures</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>sync_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>syncsw</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>handler</name></name></expr>]</index></name><operator>.</operator><call><name>sync_syncfiletag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>,
																<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* Success; update statistics about sync timing */</comment>
					<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>sync_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>sync_diff</name> <operator>=</operator> <name>sync_end</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>sync_diff</name></expr></argument>, <argument><expr><name>sync_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>elapsed</name> <operator>=</operator> <call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>sync_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>elapsed</name> <operator>&gt;</operator> <name>longest</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>longest</name> <operator>=</operator> <name>elapsed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>total_elapsed</name> <operator>+=</operator> <name>elapsed</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>processed</name><operator>++</operator></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>log_checkpoints</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"checkpoint sync: number=%d file=%s time=%.3f msec"</literal></expr></argument>,
							 <argument><expr><name>processed</name></expr></argument>,
							 <argument><expr><name>path</name></expr></argument>,
							 <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>elapsed</name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<break>break;</break>		<comment type="block">/* out of retry loop */</comment>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/*
				 * It is possible that the relation has been dropped or
				 * truncated since the fsync request was entered. Therefore,
				 * allow ENOENT, but only if we didn't fail already on this
				 * file.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FILE_POSSIBLY_DELETED</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>failures</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><call><name>data_sync_elevel</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not fsync file \"%s\": %m"</literal></expr></argument>,
									<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not fsync file \"%s\" but retrying: %m"</literal></expr></argument>,
									<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<comment type="block">/*
				 * Absorb incoming requests and check to see if a cancel
				 * arrived for this relation fork.
				 */</comment>
				<expr_stmt><expr><call><name>AbsorbSyncRequests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>absorb_counter</name> <operator>=</operator> <name>FSYNCS_PER_ABSORB</name></expr>;</expr_stmt> <comment type="block">/* might as well... */</comment>
			</block_content>}</block></for>					<comment type="block">/* end retry loop */</comment>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* We are done with this entry, remove it */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>pendingOps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pendingOps corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>							<comment type="block">/* end loop over hashtable entries */</comment>

	<comment type="block">/* Return sync performance metrics for report at checkpoint end */</comment>
	<expr_stmt><expr><name><name>CheckpointStats</name><operator>.</operator><name>ckpt_sync_rels</name></name> <operator>=</operator> <name>processed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CheckpointStats</name><operator>.</operator><name>ckpt_longest_sync</name></name> <operator>=</operator> <name>longest</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>CheckpointStats</name><operator>.</operator><name>ckpt_agg_sync_time</name></name> <operator>=</operator> <name>total_elapsed</name></expr>;</expr_stmt>

	<comment type="block">/* Flag successful completion of ProcessSyncRequests */</comment>
	<expr_stmt><expr><name>sync_in_progress</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RememberSyncRequest() -- callback from checkpointer side of sync request
 *
 * We stuff fsync requests into the local hash table for execution
 * during the checkpointer's next checkpoint.  UNLINK requests go into a
 * separate linked list, however, because they get processed separately.
 *
 * See sync.h for more information on the types of sync requests supported.
 */</comment>
<function><type><name>void</name></type>
<name>RememberSyncRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileTag</name> <modifier>*</modifier></type><name>ftag</name></decl></parameter>, <parameter><decl><type><name>SyncRequestType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pendingOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>SYNC_FORGET_REQUEST</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PendingFsyncEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

		<comment type="block">/* Cancel previously entered request */</comment>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>PendingFsyncEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pendingOps</name></expr></argument>,
												  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ftag</name></expr></argument>,
												  <argument><expr><name>HASH_FIND</name></expr></argument>,
												  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>SYNC_FILTER_REQUEST</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hstat</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PendingFsyncEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

		<comment type="block">/* Cancel matching fsync requests */</comment>
		<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstat</name></expr></argument>, <argument><expr><name>pendingOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <operator>(</operator><name>PendingFsyncEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hstat</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>handler</name></name> <operator>==</operator> <name><name>ftag</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator>
				<name><name>syncsw</name><index>[<expr><name><name>ftag</name><operator>-&gt;</operator><name>handler</name></name></expr>]</index></name><operator>.</operator><call><name>sync_filetagmatches</name><argument_list>(<argument><expr><name>ftag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></while>

		<comment type="block">/* Remove matching unlink requests */</comment>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>cell</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name>pendingUnlinks</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cell</name></expr>;</condition> <incr><expr><name>cell</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PendingUnlinkEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>PendingUnlinkEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name><operator>.</operator><name>handler</name></name> <operator>==</operator> <name><name>ftag</name><operator>-&gt;</operator><name>handler</name></name> <operator>&amp;&amp;</operator>
				<name><name>syncsw</name><index>[<expr><name><name>ftag</name><operator>-&gt;</operator><name>handler</name></name></expr>]</index></name><operator>.</operator><call><name>sync_filetagmatches</name><argument_list>(<argument><expr><name>ftag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>pendingUnlinks</name> <operator>=</operator> <call><name>list_delete_cell</name><argument_list>(<argument><expr><name>pendingUnlinks</name></expr></argument>, <argument><expr><name>cell</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>cell</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>SYNC_UNLINK_REQUEST</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Unlink request: put it in the linked list */</comment>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>pendingOpsCxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PendingUnlinkEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PendingUnlinkEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>tag</name></name> <operator>=</operator> <operator>*</operator><name>ftag</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cycle_ctr</name></name> <operator>=</operator> <name>checkpoint_cycle_ctr</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>pendingUnlinks</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>pendingUnlinks</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Normal case: enter a request to fsync this segment */</comment>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>pendingOpsCxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PendingFsyncEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>SYNC_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>PendingFsyncEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pendingOps</name></expr></argument>,
												  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ftag</name></expr></argument>,
												  <argument><expr><name>HASH_ENTER</name></expr></argument>,
												  <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* if new entry, initialize it */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>cycle_ctr</name></name> <operator>=</operator> <name>sync_cycle_ctr</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * NB: it's intentional that we don't change cycle_ctr if the entry
		 * already exists.  The cycle_ctr must represent the oldest fsync
		 * request that could be in the entry.
		 */</comment>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Register the sync request locally, or forward it to the checkpointer.
 *
 * If retryOnError is true, we'll keep trying if there is no space in the
 * queue.  Return true if we succeeded, or false if there wasn't space.
 */</comment>
<function><type><name>bool</name></type>
<name>RegisterSyncRequest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>FileTag</name> <modifier>*</modifier></type><name>ftag</name></decl></parameter>, <parameter><decl><type><name>SyncRequestType</name></type> <name>type</name></decl></parameter>,
					<parameter><decl><type><name>bool</name></type> <name>retryOnError</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pendingOps</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* standalone backend or startup process: fsync state is local */</comment>
		<expr_stmt><expr><call><name>RememberSyncRequest</name><argument_list>(<argument><expr><name>ftag</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * Notify the checkpointer about it.  If we fail to queue a message in
		 * retryOnError mode, we have to sleep and try again ... ugly, but
		 * hopefully won't happen often.
		 *
		 * XXX should we CHECK_FOR_INTERRUPTS in this loop?  Escaping with an
		 * error in the case of SYNC_UNLINK_REQUEST would leave the
		 * no-longer-used file still present on disk, which would be bad, so
		 * I'm inclined to assume that the checkpointer will always empty the
		 * queue soon.
		 */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ForwardSyncRequest</name><argument_list>(<argument><expr><name>ftag</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If we are successful in queueing the request, or we failed and were
		 * instructed not to retry on error, break.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>||</operator> <operator>(</operator><operator>!</operator><name>ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>retryOnError</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">10000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * In archive recovery, we rely on checkpointer to do fsyncs, but we will have
 * already created the pendingOps during initialization of the startup
 * process.  Calling this function drops the local pendingOps so that
 * subsequent requests will be forwarded to checkpointer.
 */</comment>
<function><type><name>void</name></type>
<name>EnableSyncRequestForwarding</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Perform any pending fsyncs we may have queued up, then drop table */</comment>
	<if_stmt><if>if <condition>(<expr><name>pendingOps</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ProcessSyncRequests</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name>pendingOps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>pendingOps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We should not have any pending unlink requests, since mdunlink doesn't
	 * queue unlink requests when isRedo.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pendingUnlinks</name> <operator>==</operator> <name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
