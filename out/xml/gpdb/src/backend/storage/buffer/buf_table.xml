<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/buffer/buf_table.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * buf_table.c
 *	  routines for mapping BufferTags to buffer indexes.
 *
 * Note: the routines in this file do no locking of their own.  The caller
 * must hold a suitable lock on the appropriate BufMappingLock, as specified
 * in the comments.  We can't do the locking inside these functions because
 * in most cases the caller needs to adjust the buffer header contents
 * before the lock is released (see notes in README).
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/buffer/buf_table.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buf_internals.h"</cpp:file></cpp:include>


<comment type="block">/* entry for buffer lookup hashtable */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>BufferTag</name></type>	<name>key</name></decl>;</decl_stmt>			<comment type="block">/* Tag of a disk page */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>id</name></decl>;</decl_stmt>				<comment type="block">/* Associated buffer ID */</comment>
}</block></struct></type> <name>BufferLookupEnt</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>SharedBufHash</name></decl>;</decl_stmt>


<comment type="block">/*
 * Estimate space needed for mapping hashtable
 *		size is the desired hash table size (possibly more than NBuffers)
 */</comment>
<function><type><name>Size</name></type>
<name>BufTableShmemSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>hash_estimate_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferLookupEnt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize shmem hash table for mapping buffers
 *		size is the desired hash table size (possibly more than NBuffers)
 */</comment>
<function><type><name>void</name></type>
<name>InitBufTable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>info</name></decl>;</decl_stmt>

	<comment type="block">/* assume no locking is needed yet */</comment>

	<comment type="block">/* BufferTag maps to Buffer */</comment>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufferTag</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BufferLookupEnt</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>num_partitions</name></name> <operator>=</operator> <name>NUM_BUFFER_PARTITIONS</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>SharedBufHash</name> <operator>=</operator> <call><name>ShmemInitHash</name><argument_list>(<argument><expr><literal type="string">"Shared Buffer Lookup Table"</literal></expr></argument>,
								  <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>,
								  <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_PARTITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BufTableHashCode
 *		Compute the hash code associated with a BufferTag
 *
 * This must be passed to the lookup/insert/delete routines along with the
 * tag.  We do it like this because the callers need to know the hash code
 * in order to determine which buffer partition to lock, and we don't want
 * to do the hash computation twice (hash_any is a bit slow).
 */</comment>
<function><type><name>uint32</name></type>
<name>BufTableHashCode</name><parameter_list>(<parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tagPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>get_hash_value</name><argument_list>(<argument><expr><name>SharedBufHash</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>tagPtr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufTableLookup
 *		Lookup the given BufferTag; return buffer ID, or -1 if not found
 *
 * Caller must hold at least share lock on BufMappingLock for tag's partition
 */</comment>
<function><type><name>int</name></type>
<name>BufTableLookup</name><parameter_list>(<parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tagPtr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferLookupEnt</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>BufferLookupEnt</name> <operator>*</operator><operator>)</operator>
		<call><name>hash_search_with_hash_value</name><argument_list>(<argument><expr><name>SharedBufHash</name></expr></argument>,
									<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>tagPtr</name></expr></argument>,
									<argument><expr><name>hashcode</name></expr></argument>,
									<argument><expr><name>HASH_FIND</name></expr></argument>,
									<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufTableInsert
 *		Insert a hashtable entry for given tag and buffer ID,
 *		unless an entry already exists for that tag
 *
 * Returns -1 on successful insertion.  If a conflicting entry exists
 * already, returns the buffer ID in that entry.
 *
 * Caller must hold exclusive lock on BufMappingLock for tag's partition
 */</comment>
<function><type><name>int</name></type>
<name>BufTableInsert</name><parameter_list>(<parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tagPtr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferLookupEnt</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>buf_id</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* -1 is reserved for not-in-table */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tagPtr</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>!=</operator> <name>P_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* invalid tag */</comment>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>BufferLookupEnt</name> <operator>*</operator><operator>)</operator>
		<call><name>hash_search_with_hash_value</name><argument_list>(<argument><expr><name>SharedBufHash</name></expr></argument>,
									<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>tagPtr</name></expr></argument>,
									<argument><expr><name>hashcode</name></expr></argument>,
									<argument><expr><name>HASH_ENTER</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>					<comment type="block">/* found something already in the table */</comment>
		<return>return <expr><name><name>result</name><operator>-&gt;</operator><name>id</name></name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>buf_id</name></expr>;</expr_stmt>

	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BufTableDelete
 *		Delete the hashtable entry for given tag (which must exist)
 *
 * Caller must hold exclusive lock on BufMappingLock for tag's partition
 */</comment>
<function><type><name>void</name></type>
<name>BufTableDelete</name><parameter_list>(<parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tagPtr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferLookupEnt</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>BufferLookupEnt</name> <operator>*</operator><operator>)</operator>
		<call><name>hash_search_with_hash_value</name><argument_list>(<argument><expr><name>SharedBufHash</name></expr></argument>,
									<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>tagPtr</name></expr></argument>,
									<argument><expr><name>hashcode</name></expr></argument>,
									<argument><expr><name>HASH_REMOVE</name></expr></argument>,
									<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>				<comment type="block">/* shouldn't happen */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"shared buffer hash table corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
