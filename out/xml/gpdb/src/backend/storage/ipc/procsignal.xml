<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/ipc/procsignal.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * procsignal.c
 *	  Routines for interprocess signalling
 *
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/storage/ipc/procsignal.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/parallel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/latch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/latch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/sinval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resgroup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>

<comment type="block">/*
 * The SIGUSR1 signal is multiplexed to support signalling multiple event
 * types. The specific reason is communicated via flags in shared memory.
 * We keep a boolean flag for each possible "reason", so that different
 * reasons can be signaled to a process concurrently.  (However, if the same
 * reason is signaled more than once nearly simultaneously, the process may
 * observe it only once.)
 *
 * Each process that wants to receive signals registers its process ID
 * in the ProcSignalSlots array. The array is indexed by backend ID to make
 * slot allocation simple, and to avoid having to search the array when you
 * know the backend ID of the process you're signalling.  (We do support
 * signalling without backend ID, but it's a bit less efficient.)
 *
 * The flags are actually declared as "volatile sig_atomic_t" for maximum
 * portability.  This should ensure that loads and stores of the flag
 * values are atomic, allowing us to dispense with any explicit locking.
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>pid_t</name></type>		<name>pss_pid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sig_atomic_t</name></type> <name><name>pss_signalFlags</name><index>[<expr><name>NUM_PROCSIGNALS</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>ProcSignalSlot</name>;</typedef>

<comment type="block">/*
 * We reserve a slot for each possible BackendId, plus one for each
 * possible auxiliary process type.  (This scheme assumes there is not
 * more than one of any auxiliary process type at a time.)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NumProcSignalSlots</name></cpp:macro>	<cpp:value>(MaxBackends + NUM_AUXPROCTYPES)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ProcSignalSlot</name> <modifier>*</modifier></type><name>ProcSignalSlots</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>ProcSignalSlot</name> <modifier>*</modifier></type><name>MyProcSignalSlot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CheckProcSignal</name><parameter_list>(<parameter><decl><type><name>ProcSignalReason</name></type> <name>reason</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CleanupProcSignalState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * ProcSignalShmemSize
 *		Compute space needed for procsignal's shared memory
 */</comment>
<function><type><name>Size</name></type>
<name>ProcSignalShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>NumProcSignalSlots</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ProcSignalSlot</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ProcSignalShmemInit
 *		Allocate and initialize procsignal's shared memory
 */</comment>
<function><type><name>void</name></type>
<name>ProcSignalShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name> <init>= <expr><call><name>ProcSignalShmemSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ProcSignalSlots</name> <operator>=</operator> <operator>(</operator><name>ProcSignalSlot</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"ProcSignalSlots"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we're first, set everything to zeroes */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>ProcSignalSlots</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ProcSignalInit
 *		Register the current process in the procsignal array
 *
 * The passed index should be my BackendId if the process has one,
 * or MaxBackends + aux process type if not.
 */</comment>
<function><type><name>void</name></type>
<name>ProcSignalInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pss_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>ProcSignalSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pss_idx</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pss_idx</name> <operator>&lt;=</operator> <name>NumProcSignalSlots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>&amp;</operator><name><name>ProcSignalSlots</name><index>[<expr><name>pss_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>pss_pid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"process %d taking over ProcSignal slot %d, but it's not empty"</literal></expr></argument>,
			 <argument><expr><name>MyProcPid</name></expr></argument>, <argument><expr><name>pss_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Clear out any leftover signal reasons */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>pss_signalFlags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NUM_PROCSIGNALS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sig_atomic_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Mark slot with my PID */</comment>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pss_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>

	<comment type="block">/* Remember slot location for CheckProcSignal */</comment>
	<expr_stmt><expr><name>MyProcSignalSlot</name> <operator>=</operator> <name>slot</name></expr>;</expr_stmt>

	<comment type="block">/* Set up to release the slot on process exit */</comment>
	<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>CleanupProcSignalState</name></expr></argument>, <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>pss_idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * CleanupProcSignalState
 *		Remove current process from ProcSignalSlots
 *
 * This function is called via on_shmem_exit() during backend shutdown.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CleanupProcSignalState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>pss_idx</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>ProcSignalSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>&amp;</operator><name><name>ProcSignalSlots</name><index>[<expr><name>pss_idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>==</operator> <name>MyProcSignalSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Clear MyProcSignalSlot, so that a SIGUSR1 received after this point
	 * won't try to access it after it's no longer ours (and perhaps even
	 * after we've unmapped the shared memory segment).
	 */</comment>
	<expr_stmt><expr><name>MyProcSignalSlot</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>pss_pid</name></name> <operator>!=</operator> <name>MyProcPid</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * don't ERROR here. We're exiting anyway, and don't want to get into
		 * infinite loop trying to exit
		 */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"process %d releasing ProcSignal slot %d, but it contains %d"</literal></expr></argument>,
			 <argument><expr><name>MyProcPid</name></expr></argument>, <argument><expr><name>pss_idx</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>slot</name><operator>-&gt;</operator><name>pss_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>					<comment type="block">/* XXX better to zero the slot anyway? */</comment>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pss_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SendProcSignal
 *		Send a signal to a Postgres process
 *
 * Providing backendId is optional, but it will speed up the operation.
 *
 * On success (a signal was sent), zero is returned.
 * On error, -1 is returned, and errno is set (typically to ESRCH or EPERM).
 *
 * Not to be confused with ProcSendSignal
 */</comment>
<function><type><name>int</name></type>
<name>SendProcSignal</name><parameter_list>(<parameter><decl><type><name>pid_t</name></type> <name>pid</name></decl></parameter>, <parameter><decl><type><name>ProcSignalReason</name></type> <name>reason</name></decl></parameter>, <parameter><decl><type><name>BackendId</name></type> <name>backendId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>ProcSignalSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>backendId</name> <operator>!=</operator> <name>InvalidBackendId</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>&amp;</operator><name><name>ProcSignalSlots</name><index>[<expr><name>backendId</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Note: Since there's no locking, it's possible that the target
		 * process detaches from shared memory and exits right after this
		 * test, before we set the flag and send signal. And the signal slot
		 * might even be recycled by a new process, so it's remotely possible
		 * that we set a flag for a wrong process. That's OK, all the signals
		 * are such that no harm is done if they're mistakenly fired.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>pss_pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Atomically set the proper flag */</comment>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pss_signalFlags</name><index>[<expr><name>reason</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<comment type="block">/* Send signal */</comment>
			<return>return <expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * BackendId not provided, so search the array using pid.  We search
		 * the array back to front so as to reduce search overhead.  Passing
		 * InvalidBackendId means that the target is most likely an auxiliary
		 * process, which will have a slot near the end of the array.
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>NumProcSignalSlots</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>slot</name> <operator>=</operator> <operator>&amp;</operator><name><name>ProcSignalSlots</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>pss_pid</name></name> <operator>==</operator> <name>pid</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* the above note about race conditions applies here too */</comment>

				<comment type="block">/* Atomically set the proper flag */</comment>
				<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pss_signalFlags</name><index>[<expr><name>reason</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<comment type="block">/* Send signal */</comment>
				<return>return <expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ESRCH</name></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CheckProcSignal - check to see if a particular reason has been
 * signaled, and clear the signal flag.  Should be called after receiving
 * SIGUSR1.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>CheckProcSignal</name><parameter_list>(<parameter><decl><type><name>ProcSignalReason</name></type> <name>reason</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>ProcSignalSlot</name> <modifier>*</modifier></type><name>slot</name> <init>= <expr><name>MyProcSignalSlot</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>slot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Careful here --- don't clear flag if we haven't seen it set */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>pss_signalFlags</name><index>[<expr><name>reason</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>pss_signalFlags</name><index>[<expr><name>reason</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Query-finish signal from QD.  The executor will deliverately try
 * to finish execution as quickly as possible.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>QueryFinishHandler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * It might be too much to check Gp_role but just in case.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>proc_exit_inprogress</name> <operator>&amp;&amp;</operator> <name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_EXECUTE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>QueryFinishPending</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * procsignal_sigusr1_handler - handle SIGUSR1 signal.
 */</comment>
<function><type><name>void</name></type>
<name>procsignal_sigusr1_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_CATCHUP_INTERRUPT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>HandleCatchupInterrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_NOTIFY_INTERRUPT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>HandleNotifyInterrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_PARALLEL_MESSAGE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>HandleParallelMessageInterrupt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_WALSND_INIT_STOPPING</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>HandleWalSndInitStopping</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_DATABASE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RecoveryConflictInterrupt</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_DATABASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_TABLESPACE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RecoveryConflictInterrupt</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_TABLESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_LOCK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RecoveryConflictInterrupt</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_SNAPSHOT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RecoveryConflictInterrupt</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_SNAPSHOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_STARTUP_DEADLOCK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RecoveryConflictInterrupt</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_STARTUP_DEADLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_BUFFERPIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>RecoveryConflictInterrupt</name><argument_list>(<argument><expr><name>PROCSIG_RECOVERY_CONFLICT_BUFFERPIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_QUERY_FINISH</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>QueryFinishHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CheckProcSignal</name><argument_list>(<argument><expr><name>PROCSIG_RESOURCE_GROUP_MOVE_QUERY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>HandleMoveResourceGroup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>latch_sigusr1_handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
