<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/ipc/shmqueue.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * shmqueue.c
 *	  shared memory linked lists
 *
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/ipc/shmqueue.c
 *
 * NOTES
 *
 * Package for managing doubly-linked lists in shared memory.
 * The only tricky thing is that SHM_QUEUE will usually be a field
 * in a larger record.  SHMQueueNext has to return a pointer
 * to the record itself instead of a pointer to the SHMQueue field
 * of the record.  It takes an extra parameter and does some extra
 * pointer arithmetic to do this correctly.
 *
 * NOTE: These are set up so they can be turned into macros some day.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>


<comment type="block">/*
 * ShmemQueueInit -- make the head of a new queue point
 *		to itself
 */</comment>
<function><type><name>void</name></type>
<name>SHMQueueInit</name><parameter_list>(<parameter><decl><type><name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>queue</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SHMQueueIsDetached -- true if element is not currently
 *		in a queue.
 */</comment>
<function><type><name>bool</name></type>
<name>SHMQueueIsDetached</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name><name>queue</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SHMQueueElemInit -- clear an element's links
 */</comment>
<function><type><name>void</name></type>
<name>SHMQueueElemInit</name><parameter_list>(<parameter><decl><type><name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SHMQueueDelete -- remove an element from the queue and
 *		close the links
 */</comment>
<function><type><name>void</name></type>
<name>SHMQueueDelete</name><parameter_list>(<parameter><decl><type><name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHM_QUEUE</name>  <modifier>*</modifier></type><name>nextElem</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SHM_QUEUE</name>  <modifier>*</modifier></type><name>prevElem</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>nextElem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>prevElem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>prevElem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nextElem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SHMQueueInsertBefore -- put elem in queue before the given queue
 *		element.  Inserting "before" the queue head puts the elem
 *		at the tail of the queue.
 */</comment>
<function><type><name>void</name></type>
<name>SHMQueueInsertBefore</name><parameter_list>(<parameter><decl><type><name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>SHM_QUEUE</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHM_QUEUE</name>  <modifier>*</modifier></type><name>prevPtr</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>prevPtr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prevPtr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SHMQueueInsertAfter -- put elem in queue after the given queue
 *		element.  Inserting "after" the queue head puts the elem
 *		at the head of the queue.
 */</comment>
<function><type><name>void</name></type>
<name>SHMQueueInsertAfter</name><parameter_list>(<parameter><decl><type><name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><name>SHM_QUEUE</name> <modifier>*</modifier></type><name>elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHM_QUEUE</name>  <modifier>*</modifier></type><name>nextPtr</name> <init>= <expr><name><name>queue</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>nextPtr</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>queue</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>queue</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nextPtr</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>elem</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*--------------------
 * SHMQueueNext -- Get the next element from a queue
 *
 * To start the iteration, pass the queue head as both queue and curElem.
 * Returns NULL if no more elements.
 *
 * Next element is at curElem-&gt;next.  If SHMQueue is part of
 * a larger structure, we want to return a pointer to the
 * whole structure rather than a pointer to its SHMQueue field.
 * For example,
 * struct {
 *		int				stuff;
 *		SHMQueue		elem;
 * } ELEMType;
 * When this element is in a queue, prevElem-&gt;next points at struct.elem.
 * We subtract linkOffset to get the correct start address of the structure.
 *
 * calls to SHMQueueNext should take these parameters:
 *	 &amp;(queueHead), &amp;(queueHead), offsetof(ELEMType, elem)
 * or
 *	 &amp;(queueHead), &amp;(curElem-&gt;elem), offsetof(ELEMType, elem)
 *--------------------
 */</comment>
<function><type><name>Pointer</name></type>
<name>SHMQueueNext</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SHM_QUEUE</name> <modifier>*</modifier></type><name>curElem</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>linkOffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHM_QUEUE</name>  <modifier>*</modifier></type><name>elemPtr</name> <init>= <expr><name><name>curElem</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>curElem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>elemPtr</name> <operator>==</operator> <name>queue</name></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* back to the queue head? */</comment>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>elemPtr</name><operator>)</operator> <operator>-</operator> <name>linkOffset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*--------------------
 * SHMQueuePrev -- Get the previous element from a queue
 *
 * Same as SHMQueueNext, just starting at tail and moving towards head.
 * All other comments and usage applies.
 */</comment>
<function><type><name>Pointer</name></type>
<name>SHMQueuePrev</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SHM_QUEUE</name> <modifier>*</modifier></type><name>curElem</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>linkOffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SHM_QUEUE</name>  <modifier>*</modifier></type><name>elemPtr</name> <init>= <expr><name><name>curElem</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>curElem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>elemPtr</name> <operator>==</operator> <name>queue</name></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* back to the queue head? */</comment>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>Pointer</name><operator>)</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>elemPtr</name><operator>)</operator> <operator>-</operator> <name>linkOffset</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SHMQueueEmpty -- true if queue head is only element, false otherwise
 */</comment>
<function><type><name>bool</name></type>
<name>SHMQueueEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SHM_QUEUE</name> <modifier>*</modifier></type><name>queue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ShmemAddrIsValid</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>queue</name><operator>-&gt;</operator><name>prev</name></name> <operator>==</operator> <name>queue</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>queue</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
