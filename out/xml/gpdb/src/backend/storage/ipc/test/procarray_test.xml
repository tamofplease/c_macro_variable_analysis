<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/storage/ipc/test/procarray_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../procarray.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OF_IN_PROGRESS_ARRAY</name></cpp:macro> <cpp:value>(10 * sizeof(DistributedTransactionId))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PROCS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>VariableCacheData</name></type> <name>vcdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint32</name></type> <name>nextSnapshotId</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_committed_xacts</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>ShmemVariableCache</name> <operator>=</operator> <operator>&amp;</operator><name>vcdata</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmNextSnapshotId</name> <operator>=</operator> <operator>&amp;</operator><name>nextSnapshotId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmNumCommittedGxacts</name> <operator>=</operator> <operator>&amp;</operator><name>num_committed_xacts</name></expr>;</expr_stmt>

	<comment type="block">/* Some imaginary LWLockId number */</comment>
	<expr_stmt><expr><operator>*</operator><name>shmNumCommittedGxacts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>allTmGxact</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TMGXACT</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MAX_PROCS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>procArray</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProcArrayStruct</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>MAX_PROCS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>maxProcs</name></name> <operator>=</operator> <name>MAX_PROCS</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__CreateDistributedSnapshot</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistributedSnapshot</name></type> <name>ds</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name></name> <operator>=</operator>
		<operator>(</operator><name>DistributedTransactionId</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>SIZE_OF_IN_PROGRESS_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>setup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><call><name>expect_value_count</name><argument_list>(<argument><expr><name>LWLockHeldByMe</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>ProcArrayLock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>LWLockHeldByMe</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>ShmemVariableCache</name><operator>-&gt;</operator><name>latestCompletedGxid</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

	<comment type="block">/* This is going to act as our gxact */</comment>
	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>gxid</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>xminDistributedSnapshot</name> <operator>=</operator> <name>InvalidDistributedTransactionId</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>numProcs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>MyTmGxact</name> <operator>=</operator> <operator>&amp;</operator><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/********************************************************
	 * Basic case, no other in progress transaction in system
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_OF_IN_PROGRESS_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CreateDistributedSnapshot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* perform all the validations */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xminAllDistributedSnapshots</name></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xmin</name></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xmax</name></name> <operator>==</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MyTmGxact</name><operator>-&gt;</operator><name>xminDistributedSnapshot</name></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/*************************************************************************
	 * Case where there exist in-progress having taken snpashot with lower
	 * gxid than ours. This case demonstrates when xmin of snapshot will
	 * differ from xminAllDistributedSnapshots. Also, validates xmin and xmax
	 * get adjusted correctly based on in-progress.
	 */</comment>
	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>xminDistributedSnapshot</name> <operator>=</operator> <name>InvalidDistributedTransactionId</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>gxid</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>xminDistributedSnapshot</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>gxid</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>xminDistributedSnapshot</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>numProcs</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_OF_IN_PROGRESS_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CreateDistributedSnapshot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* perform all the validations */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xminAllDistributedSnapshots</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xmin</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* xmax should be latestCompletedGxid+1 */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xmax</name></name> <operator>==</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MyTmGxact</name><operator>-&gt;</operator><name>xminDistributedSnapshot</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/*************************************************************************
	 * Add more elemnets, just to have validation that in-progress array is in
	 * ascending sorted order with distributed transactions.
	 */</comment>
	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>xminDistributedSnapshot</name> <operator>=</operator> <name>InvalidDistributedTransactionId</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>gxid</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>xminDistributedSnapshot</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>gxid</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>allTmGxact</name><index>[<expr><name><name>procArray</name><operator>-&gt;</operator><name>pgprocnos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>xminDistributedSnapshot</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>procArray</name><operator>-&gt;</operator><name>numProcs</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIZE_OF_IN_PROGRESS_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CreateDistributedSnapshot</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ds</name><operator>.</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name></name></expr></argument>, <argument><expr><name><name>ds</name><operator>.</operator><name>count</name></name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DistributedTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>DistributedSnapshotMappedEntry_Compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* perform all the validations */</comment>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xminAllDistributedSnapshots</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xmin</name></name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>xmax</name></name> <operator>==</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>count</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>MyTmGxact</name><operator>-&gt;</operator><name>xminDistributedSnapshot</name></name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ds</name><operator>.</operator><name>inProgressXidArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>allTmGxact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>procArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>=
	<expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test__CreateDistributedSnapshot</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
