<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/test/cdbappendonlyxlog_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cdbappendonlyxlog.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_magic_oid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_relfilenode_function</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LargestIntegralType</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LargestIntegralType</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>RelFileNode</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>RelFileNode</name> <operator>*</operator><operator>)</operator> <name>arg1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>RelFileNode</name> <modifier>*</modifier></type><name>check_value</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>RelFileNode</name> <operator>*</operator><operator>)</operator> <name>arg2</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>RelFileNodeEquals</name><argument_list>(<argument><expr><operator>*</operator><name>value</name></expr></argument>, <argument><expr><operator>*</operator><name>check_value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Test that XLogAOSegmentFile will be called when we cannot find the AO
 * segment file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ao_invalid_segment_file_test</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>xl_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RelFileNode</name></type> <name>relfilenode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecord</name></type> <name>record</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>mockrecord</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xl_ao_target</name></type> <name>xlaotarget</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xl_ao_insert</name></type> <name>xlaoinsert</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xl_ao_truncate</name></type> <name>xlaotruncate</name></decl>;</decl_stmt>

	<comment type="block">/* create mock transaction log */</comment>
	<expr_stmt><expr><name><name>relfilenode</name><operator>.</operator><name>spcNode</name></name> <operator>=</operator> <name>DEFAULTTABLESPACE_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>relfilenode</name><operator>.</operator><name>dbNode</name></name> <operator>=</operator> <literal type="number">12087</literal></expr> <comment type="block">/* postgres database */</comment>;</expr_stmt>
	<expr_stmt><expr><name><name>relfilenode</name><operator>.</operator><name>relNode</name></name> <operator>=</operator> <name>FirstNormalObjectId</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>xlaotarget</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>relfilenode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xlaotarget</name><operator>.</operator><name>segment_filenum</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xlaotarget</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">12345</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>record</name><operator>.</operator><name>xl_info</name></name> <operator>=</operator> <name>xl_info</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>record</name><operator>.</operator><name>xl_rmid</name></name> <operator>=</operator> <name>RM_APPEND_ONLY_ID</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>mockrecord</name> <operator>=</operator> <call><name>XLogReaderAllocate</name><argument_list>(<argument><expr><name>DEFAULT_XLOG_SEG_SIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xl_info</name> <operator>==</operator> <name>XLOG_APPENDONLY_INSERT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>xlaoinsert</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>xlaotarget</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mockrecord</name><operator>-&gt;</operator><name>main_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlaoinsert</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>xl_info</name> <operator>==</operator> <name>XLOG_APPENDONLY_TRUNCATE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>xlaotruncate</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>xlaotarget</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mockrecord</name><operator>-&gt;</operator><name>main_data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlaotruncate</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* mock to not find AO segment file */</comment>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>PathNameOpenFile</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any</name><argument_list>(<argument><expr><name>PathNameOpenFile</name></expr></argument>, <argument><expr><name>fileFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>PathNameOpenFile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* XLogAOSegmentFile should be called with our mock relfilenode and segment file number */</comment>
	<expr_stmt><expr><call><name>expect_check</name><argument_list>(<argument><expr><name>XLogAOSegmentFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rnode</name></expr></argument>, <argument><expr><name>check_relfilenode_function</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relfilenode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>XLogAOSegmentFile</name></expr></argument>, <argument><expr><name>segmentFileNum</name></expr></argument>, <argument><expr><name><name>xlaotarget</name><operator>.</operator><name>segment_filenum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>XLogAOSegmentFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* run test */</comment>
	<if_stmt><if>if <condition>(<expr><name>xl_info</name> <operator>==</operator> <name>XLOG_APPENDONLY_INSERT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ao_insert_replay</name><argument_list>(<argument><expr><name>mockrecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>xl_info</name> <operator>==</operator> <name>XLOG_APPENDONLY_TRUNCATE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ao_truncate_replay</name><argument_list>(<argument><expr><name>mockrecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test that ao_insert_replay will call XLogAOSegmentFile when we cannot find
 * the AO segment file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ao_insert_replay_invalid_segment_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ao_invalid_segment_file_test</name><argument_list>(<argument><expr><name>XLOG_APPENDONLY_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Test that ao_truncate_replay will call XLogAOSegmentFile when we cannot find
 * the AO segment file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test_ao_truncate_replay_invalid_segment_file</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ao_invalid_segment_file_test</name><argument_list>(<argument><expr><name>XLOG_APPENDONLY_TRUNCATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test_ao_insert_replay_invalid_segment_file</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test_ao_truncate_replay_invalid_segment_file</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
