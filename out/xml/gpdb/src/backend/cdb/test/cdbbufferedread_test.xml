<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/test/cdbbufferedread_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cdbbufferedread.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__BufferedReadInit__IsConsistent</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BufferedRead</name> <modifier>*</modifier></type><name>bufferedRead</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferedRead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>memoryLen</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* maxBufferLen + largeReadLen */</comment>
	<decl_stmt><decl><type><name>uint8</name> <modifier>*</modifier></type><name>memory</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memoryLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>relname</name> <init>= <expr><literal type="string">"test"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxBufferLen</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxLargeReadLen</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufferedRead</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferedRead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Call the function so as to set the above values.
	 */</comment>
	<expr_stmt><expr><call><name>BufferedReadInit</name><argument_list>(<argument><expr><name>bufferedRead</name></expr></argument>, <argument><expr><name>memory</name></expr></argument>, <argument><expr><name>memoryLen</name></expr></argument>, <argument><expr><name>maxBufferLen</name></expr></argument>, <argument><expr><name>maxLargeReadLen</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Check for consistency
	 */</comment>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>maxBufferLen</name></name></expr></argument>,<argument><expr><name>maxBufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>maxLargeReadLen</name></name></expr></argument>,<argument><expr><name>maxLargeReadLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_string_equal</name><argument_list>(<argument><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>memory</name></name></expr></argument>, <argument><expr><name>memory</name></expr></argument>, <argument><expr><name>memoryLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>memoryLen</name></name></expr></argument>, <argument><expr><name>memoryLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>exception_cxt</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__BufferedReadUseBeforeBuffer__IsNextReadLenZero</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BufferedRead</name> <modifier>*</modifier></type><name>bufferedRead</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferedRead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>memoryLen</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* maxBufferLen + largeReadLen */</comment>
	<decl_stmt><decl><type><name>uint8</name> <modifier>*</modifier></type><name>memory</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memoryLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>relname</name> <init>= <expr><literal type="string">"test"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxBufferLen</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxLargeReadLen</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>nextBufferLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxReadAheadLen</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>;</decl_stmt>
        
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufferedRead</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferedRead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Initialize the buffer
	 */</comment>
	<expr_stmt><expr><call><name>BufferedReadInit</name><argument_list>(<argument><expr><name>bufferedRead</name></expr></argument>, <argument><expr><name>memory</name></expr></argument>, <argument><expr><name>memoryLen</name></expr></argument>, <argument><expr><name>maxBufferLen</name></expr></argument>, <argument><expr><name>maxLargeReadLen</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * filling up the bufferedRead struct
	 */</comment>
	<expr_stmt><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>largeReadLen</name></name><operator>=</operator><literal type="number">100</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>bufferOffset</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>fileLen</name></name><operator>=</operator><literal type="number">200</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>temporaryLimitFileLen</name></name><operator>=</operator><literal type="number">200</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>largeReadPosition</name></name><operator>=</operator><literal type="number">50</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedRead</name><operator>-&gt;</operator><name>maxLargeReadLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* this will get assigned to nextReadLen(=0) */</comment>

    <expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
    	<comment type="block">/*
    	 * This will throw a ereport(ERROR).
    	 */</comment>
		<expr_stmt><expr><call><name>BufferedReadUseBeforeBuffer</name><argument_list>(<argument><expr><name>bufferedRead</name></expr></argument>, <argument><expr><name>maxReadAheadLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextBufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>exception_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>edata</name> <operator>=</operator> <call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Validate the expected error
		 */</comment>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>edata</name><operator>-&gt;</operator><name>sqlerrcode</name></name> <operator>==</operator> <name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>==</operator> <name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__BufferedReadUseBeforeBuffer__IsNextReadLenZero</name></expr></argument>)</argument_list></call></expr>,
		<macro><name>unit_test</name><argument_list>(<argument>test__BufferedReadInit__IsConsistent</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>exception_cxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
										  <argument><expr><literal type="string">"mock error handling context"</literal></expr></argument>,
										  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
										  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
										  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
