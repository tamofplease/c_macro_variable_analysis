<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/test/cdbdistributedsnapshot_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cdbdistributedsnapshot.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_OF_IN_PROGRESS_ARRAY</name></cpp:macro> <cpp:value>(10 * sizeof(DistributedTransactionId))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__DistributedSnapshotWithLocalMapping_CommittedTest</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DistributedSnapshotCommitted</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistributedSnapshotWithLocalMapping</name></type> <name>dslm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistributedSnapshot</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><operator>&amp;</operator><name><name>dslm</name><operator>.</operator><name>ds</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Static initializations */</comment>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dslm</name><operator>.</operator><name>minCachedLocalXid</name></name> <operator>=</operator> <name>InvalidTransactionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dslm</name><operator>.</operator><name>maxCachedLocalXid</name></name> <operator>=</operator> <name>InvalidTransactionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dslm</name><operator>.</operator><name>currentLocalXidsCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name></name> <operator>=</operator>
			<operator>(</operator><name>TransactionId</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>inProgressXidArray</name></name> <operator>=</operator>
			<operator>(</operator><name>DistributedTransactionId</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>SIZE_OF_IN_PROGRESS_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>distribSnapshotId</name></name> <operator>=</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * Define how distributed xids will map to localXids. For the purpose of
	 * the testing keep it extremely simple distribXid == 10 * localXid.
	 */</comment>
	<block>{<block_content>
		<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>distribXid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>localXid</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>distribXid</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>localXid</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>distribXid</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>localXid</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>distribXid</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>expect_value</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>localXid</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>will_assign_value</name><argument_list>(<argument><expr><name>DistributedLog_CommittedCheck</name></expr></argument>, <argument><expr><name>distribXid</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* Empty in-progress array test */</comment>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>xminAllDistributedSnapshots</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DistributedSnapshotWithLocalMapping_CommittedTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dslm</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DISTRIBUTEDSNAPSHOT_COMMITTED_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>currentLocalXidsCount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>minCachedLocalXid</name></name> <operator>==</operator> <name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>maxCachedLocalXid</name></name> <operator>==</operator> <name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* Populated in-progress array for validating the local cache working */</comment>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>xminAllDistributedSnapshots</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>xmin</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>xmax</name></name> <operator>=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>inProgressXidArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>inProgressXidArray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ds</name><operator>-&gt;</operator><name>inProgressXidArray</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* First time the local xid cache should get populated */</comment>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DistributedSnapshotWithLocalMapping_CommittedTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dslm</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DISTRIBUTEDSNAPSHOT_COMMITTED_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>currentLocalXidsCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>minCachedLocalXid</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>maxCachedLocalXid</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Next call nothing should change in snapshot's local xid cache. Also,
	 * importantly based on cache
	 * DistributedSnapshotWithLocalMapping_CommittedTest() should return early
	 * and not reach to reversemap distributed xid again. With the beauty of
	 * this framework its getting validated, as if
	 * DistributedSnapshotWithLocalMapping_CommittedTest() doesn't correctly
	 * return based on cache, would call DistributedLog_CommittedCheck() and
	 * since we coded above that it should get called only once with localXid
	 * == 10, verifies the return was based on cache.
	 */</comment>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DistributedSnapshotWithLocalMapping_CommittedTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dslm</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DISTRIBUTEDSNAPSHOT_COMMITTED_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>currentLocalXidsCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>minCachedLocalXid</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>maxCachedLocalXid</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now lets simulate we got tuple with xid=20 */</comment>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DistributedSnapshotWithLocalMapping_CommittedTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dslm</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DISTRIBUTEDSNAPSHOT_COMMITTED_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>currentLocalXidsCount</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>minCachedLocalXid</name></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>maxCachedLocalXid</name></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now lets simulate we got tuple with xid=5 */</comment>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DistributedSnapshotWithLocalMapping_CommittedTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dslm</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DISTRIBUTEDSNAPSHOT_COMMITTED_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>currentLocalXidsCount</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>minCachedLocalXid</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>maxCachedLocalXid</name></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Lets revalidate that local cache is working and
	 * DistributedSnapshotWithLocalMapping_CommittedTest() returns result
	 * based on local cache when more than one element is present in cache.
	 */</comment>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DistributedSnapshotWithLocalMapping_CommittedTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dslm</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DISTRIBUTEDSNAPSHOT_COMMITTED_INPROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>currentLocalXidsCount</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>minCachedLocalXid</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>maxCachedLocalXid</name></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Test where local cache should not be touched, if distributedXid is not
	 * in-progress.
	 */</comment>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>DistributedSnapshotWithLocalMapping_CommittedTest</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dslm</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>retval</name> <operator>==</operator> <name>DISTRIBUTEDSNAPSHOT_COMMITTED_VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>currentLocalXidsCount</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>minCachedLocalXid</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>maxCachedLocalXid</name></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ds</name><operator>-&gt;</operator><name>inProgressXidArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dslm</name><operator>.</operator><name>inProgressMappedLocalXids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>=
	<expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test__DistributedSnapshotWithLocalMapping_CommittedTest</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
