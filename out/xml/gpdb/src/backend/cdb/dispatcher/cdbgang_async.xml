<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/dispatcher/cdbgang_async.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbgang_async.c
 *	  Functions for asynchronous implementation of creating gang.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/dispatcher/cdbgang_async.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_POLL_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_POLL_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>		<comment type="block">/* For proc_exit_inprogress  */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbfts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbgang.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbgang_async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>getPollTimeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>startTS</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Creates a new gang by logging on a session to each segDB involved.
 *
 * call this function in GangContext memory context.
 * elog ERROR or return a non-NULL gang.
 */</comment>
<function><type><name>Gang</name> <modifier>*</modifier></type>
<name>cdbgang_createGang_async</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>segments</name></decl></parameter>, <parameter><decl><type><name>SegmentType</name></type> <name>segmentType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PostgresPollingStatusType</name>	<modifier>*</modifier></type><name>pollingStatus</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SegmentDatabaseDescriptor</name>	<modifier>*</modifier></type><name>segdbDesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type>	<name>startTS</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Gang</name>	<modifier>*</modifier></type><name>newGangDefinition</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>create_gang_retry_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>in_recovery_mode_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>successful_connections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>poll_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>totalSegs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>allStatusDone</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>retry</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>WaitEventSet</name>    <modifier>*</modifier><specifier>volatile</specifier></type> <name>gang_waitset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* the returned events of waiteventset */</comment>
	<decl_stmt><decl><type><name>WaitEvent</name>		<modifier>*</modifier></type><name>revents</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/* true means connection status is confirmed, either established or in recovery mode */</comment>
	<decl_stmt><decl><type><name>bool</name>		<modifier>*</modifier></type><name>connStatusDone</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"createGang size = %d, segment type = %d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>segmentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentGangCreating</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we're in a retry, we may need to reset our initial state, a bit */</comment>
	<expr_stmt><expr><name>newGangDefinition</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* allocate and initialize a gang structure */</comment>
	<expr_stmt><expr><name>newGangDefinition</name> <operator>=</operator> <call><name>buildGangDefinition</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>segmentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentGangCreating</name> <operator>=</operator> <name>newGangDefinition</name></expr>;</expr_stmt>
	<comment type="block">/*
	 * If we're in a global transaction, and there is some segment configuration change,
	 * we have to error out so that the current global transaction can be aborted.
	 * This is because within a transaction we use cached version of configuration information 
	 * obtained at start of transaction, which we can't update in-middle of transaction.
	 * so QD will still talk to the old primary but not a new promoted one. This isn't an issue 
	 * if the old primary is completely down since we'll find a FATAL error during communication,
	 * but becomes an issue if the old primary is working and acting like normal to QD.
	 * 
	 * Before error out, we need to reset the session instead of disconnectAndDestroyAllGangs.
	 * The latter will drop CdbComponentsContext what we will use in AtAbort_Portals.
	 * Because some primary segment is down writerGangLost will be marked when recycling gangs,
	 * All Gangs will be destroyed by ResetAllGangs in AtAbort_DispatcherState.
	 *
	 * We shouldn't error out in transaction abort state to avoid recursive abort.
	 * In such case, the dispatcher would catch the error and then dtm does (retry)
	 * abort.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsTransactionState</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>FtsIsSegmentDown</name><argument_list>(<argument><expr><name><name>newGangDefinition</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>segment_database_info</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>resetSessionForPrimaryGangLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gang was lost due to cluster reconfiguration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>totalSegs</name> <operator>=</operator> <call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>totalSegs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>create_gang_retry</name>:</label>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>newGangDefinition</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>newGangDefinition</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>successful_connections</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_recovery_mode_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>pollingStatus</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PostgresPollingStatusType</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>connStatusDone</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>revents</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WaitEvent</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>gpqeid</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>diff_options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * Create the connection requests.	If we find a segment without a
			 * valid segdb we error out.  Also, if this segdb is invalid, we
			 * must fail the connection.
			 */</comment>
			<expr_stmt><expr><name>segdbDesc</name> <operator>=</operator> <name><name>newGangDefinition</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<comment type="block">/* if it's a cached QE, skip */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cdbconn_isBadConnection</name><argument_list>(<argument><expr><name>segdbDesc</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<comment type="block">/* -1 means this connection is cached */</comment>
				<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>establishConnTime</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>successful_connections</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Build the connection string.  Writer-ness needs to be processed
			 * early enough now some locks are taken before command line
			 * options are recognized.
			 */</comment>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>build_gpqeid_param</name><argument_list>(<argument><expr><name>gpqeid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gpqeid</name></expr></argument>)</argument_list></sizeof></expr></argument>,
									 <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>isWriter</name></name></expr></argument>,
									 <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>,
									 <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>segment_database_info</name><operator>-&gt;</operator><name>hostPrimaryCount</name></name></expr></argument>,
									 <argument><expr><name>totalSegs</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to construct connectionstring"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>makeOptions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>diff_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* start connection in asynchronous way */</comment>
			<expr_stmt><expr><call><name>cdbconn_doConnectStart</name><argument_list>(<argument><expr><name>segdbDesc</name></expr></argument>, <argument><expr><name>gpqeid</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>diff_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>cdbconn_isBadConnection</name><argument_list>(<argument><expr><name>segdbDesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * If connection status is not CONNECTION_BAD after
			 * PQconnectStart(), we must act as if the PQconnectPoll() had
			 * returned PGRES_POLLING_WRITING
			 */</comment>
			<expr_stmt><expr><name><name>pollingStatus</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>PGRES_POLLING_WRITING</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/*
		 * Ok, we've now launched all the connection attempts. Start the
		 * timeout clock (= get the start timestamp), and poll until they're
		 * all completed or we reach timeout.
		 */</comment>
		<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>instr_time</name></type>              <name>starttime</name></decl>, <decl><type ref="prev"/><name>endtime</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>starttime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* record starttime of create gang */</comment>
		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>poll_timeout</name> <operator>=</operator> <call><name>getPollTimeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>poll_timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"timeout expired\n (%s)"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * GPDB_12_MERGE_FIXME: create and destroy waiteventset in each loop
			 * may impact the performance, please see:
			 * https://github.com/greenplum-db/gpdb/pull/13494#discussion_r874243725
			 * Let's verify it later.
			 */</comment>
			<comment type="block">/*
			 * Since the set of FDs can change when we call PQconnectPoll() below,
			 * create a new wait event set to poll on for every loop iteration.
			 */</comment>
			<expr_stmt><expr><name>gang_waitset</name> <operator>=</operator> <call><name>CreateWaitEventSet</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>segdbDesc</name> <operator>=</operator> <name><name>newGangDefinition</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>PQsocket</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"event pollingStatus, i:%d fd:%d conn-status:%d polling-status:%d"</literal></expr></argument>,
					<argument><expr><name>i</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pollingStatus</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Skip established connections and in-recovery-mode
				 * connections
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<switch>switch <condition>(<expr><name><name>pollingStatus</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>PGRES_POLLING_OK</name></expr>:</case>
						<expr_stmt><expr><call><name>cdbconn_doConnectComplete</name><argument_list>(<argument><expr><name>segdbDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>motionListener</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
											<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
											<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Internal error: No motion listener port (%s)"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><name>successful_connections</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<comment type="block">/* the connection of segdbDesc is established successfully, calculate the time of establishConnTime */</comment>
						<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>starttime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>establishConnTime</name></name> <operator>=</operator> <call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<continue>continue;</continue>

					<case>case <expr><name>PGRES_POLLING_READING</name></expr>:</case>
						<expr_stmt><expr><call><name>AddWaitEventToSet</name><argument_list>(<argument><expr><name>gang_waitset</name></expr></argument>, <argument><expr><name>WL_SOCKET_READABLE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* "i" as the event's userdata */</comment>

						<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"added readable event into waitset, i:%d fd:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>PGRES_POLLING_WRITING</name></expr>:</case>
						<expr_stmt><expr><call><name>AddWaitEventToSet</name><argument_list>(<argument><expr><name>gang_waitset</name></expr></argument>, <argument><expr><name>WL_SOCKET_WRITEABLE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>long</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* "i" as the event's userdata */</comment>

						<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"added writable event into waitset, i:%d fd:%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>PGRES_POLLING_FAILED</name></expr>:</case>
						<if_stmt><if>if <condition>(<expr><call><name>segment_failure_due_to_recovery</name><argument_list>(<argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>in_recovery_mode_count</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"segment is in reset/recovery mode (%s)"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><call><name>segment_failure_due_to_missing_writer</name><argument_list>(<argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>markCurrentGxactWriterGangLost</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
											<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
											<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
						<break>break;</break>

					<default>default:</default>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
										<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
										<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"unknown pollstatus (%s)"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block></for>

			<expr_stmt><expr><name>allStatusDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name>allStatusDone</name> <operator>&amp;=</operator> <name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><name>allStatusDone</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>FreeWaitEventSet</name><argument_list>(<argument><expr><name>gang_waitset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>gang_waitset</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"create_gang_in_progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Wait until something happens */</comment>
			<decl_stmt><decl><type><name>int</name></type> <name>nready</name> <init>= <expr><call><name>WaitEventSetWait</name><argument_list>(<argument><expr><name>gang_waitset</name></expr></argument>, <argument><expr><name>poll_timeout</name></expr></argument>, <argument><expr><name>revents</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>WAIT_EVENT_GANG_ASSIGN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nready</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>FreeWaitEventSet</name><argument_list>(<argument><expr><name>gang_waitset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>gang_waitset</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>nready</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"cdbgang_createGang_async(): WaitEventSetWait timeout after %d ms"</literal></expr></argument>, <argument><expr><name>poll_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>nready</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nready</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<comment type="block">/* original position in the db_descriptors */</comment>
					<decl_stmt><decl><type><name>long</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name><name>revents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>user_data</name><operator>)</operator></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>connStatusDone</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
						<continue>continue;</continue></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>segdbDesc</name> <operator>=</operator> <name><name>newGangDefinition</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name> <name>fd_desc</name></type> <name>PG_USED_FOR_ASSERTS_ONLY</name> <init>= <expr><call><name>PQsocket</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fd_desc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fd_desc</name> <operator>==</operator> <name><name>revents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"ready event[%d] pos:%ld fd:%d event:%d"</literal></expr></argument>,
						<argument><expr><name>i</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>revents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>revents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>revents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>WL_SOCKET_WRITEABLE</name> <operator>||</operator>
						<name><name>revents</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>&amp;</operator> <name>WL_SOCKET_READABLE</name></expr>)</condition><block type="pseudo"><block_content>
						<comment type="block">/*
						 * The official documentation says:
						 * Caution: do not assume that the socket remains the same across PQconnectPoll calls.
						 *
						 * So must add all sock FDs to waiteventset again in the next loop.
						 */</comment>
						<expr_stmt><expr><name><name>pollingStatus</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>PQconnectPoll</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"createGang: %d processes requested; %d successful connections %d in recovery"</literal></expr></argument>,
							  <argument><expr><name>size</name></expr></argument>, <argument><expr><name>successful_connections</name></expr></argument>, <argument><expr><name>in_recovery_mode_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* some segments are in reset/recovery mode */</comment>
		<if_stmt><if>if <condition>(<expr><name>successful_connections</name> <operator>!=</operator> <name>size</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>successful_connections</name> <operator>+</operator> <name>in_recovery_mode_count</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>gp_gang_creation_retry_count</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
				<name>create_gang_retry_counter</name><operator>++</operator> <operator>&gt;=</operator> <name>gp_gang_creation_retry_count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Segments are in reset/recovery mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"createGang: gang creation failed, but retryable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt> <comment type="block">/* for(;;) */</comment>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>gang_waitset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>FreeWaitEventSet</name><argument_list>(<argument><expr><name>gang_waitset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>FtsNotifyProber</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* FTS shows some segment DBs are down */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>FtsTestSegmentDBIsDown</name><argument_list>(<argument><expr><name><name>newGangDefinition</name><operator>-&gt;</operator><name>db_descriptors</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"FTS detected one or more segments are down"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pollingStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>connStatusDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>revents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"gang_created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retry</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>gp_gang_creation_retry_timer</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<goto>goto <name>create_gang_retry</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>CurrentGangCreating</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>newGangDefinition</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getPollTimeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>startTS</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>diff_us</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>gp_segment_connect_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>diff_us</name> <operator>=</operator> <operator>(</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>startTS</name><operator>-&gt;</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff_us</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>startTS</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff_us</name> <operator>&gt;=</operator> <operator>(</operator><name>int64</name><operator>)</operator> <name>gp_segment_connect_timeout</name> <operator>*</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>gp_segment_connect_timeout</name> <operator>*</operator> <literal type="number">1000</literal> <operator>-</operator> <name>diff_us</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/* wait forever */</comment>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>timeout</name></expr>;</return>
</block_content>}</block></function>
</unit>
