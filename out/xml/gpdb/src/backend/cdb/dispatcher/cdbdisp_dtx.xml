<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/dispatcher/cdbdisp_dtx.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbdisp_dtx.c
 *	  Functions to dispatch DTX commands to QExecutors.
 *
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/dispatcher/cdbdisp_dtx.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbconn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdisp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdisp_dtx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdispatchresult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbgang.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>	<comment type="block">/* updateSharedLocalSnapshot */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Parameter structure for DTX protocol commands
 */</comment>
<typedef>typedef <type><struct>struct <name>DispatchCommandDtxProtocolParms</name>
<block>{
	<decl_stmt><decl><type><name>DtxProtocolCommand</name></type> <name>dtxProtocolCommand</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dtxProtocolCommandLoggingStr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>gid</name><index>[<expr><name>TMGIDSIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>serializedDtxContextInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>serializedDtxContextInfoLen</name></decl>;</decl_stmt>
}</block></struct></type> <name>DispatchCommandDtxProtocolParms</name>;</typedef>

<comment type="block">/*
 * STATIC STATE VARIABLES should not be declared!
 * global state will break the ability to run cursors.
 * only globals with a higher granularity than a running
 * command (i.e: transaction, session) are ok.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>DtxContextInfo</name></type> <name>TempQDDtxContextInfo</name> <init>= <expr><name>DtxContextInfo_StaticInit</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>buildGpDtxProtocolCommand</name><parameter_list>(<parameter><decl><type><name>DispatchCommandDtxProtocolParms</name> <modifier>*</modifier></type><name>pDtxProtocolParms</name></decl></parameter>,
						  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>finalLen</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * CdbDispatchDtxProtocolCommand:
 * Sends a non-cancelable command to all segment dbs
 *
 * Returns a malloc'ed array containing the PGresult objects thus
 * produced; the caller must PQclear() them and free() the array.
 * A NULL entry follows the last used entry in the array.
 *
 * Any error message - whether or not it is associated with an
 * PGresult object - is returned in *qeError.
 */</comment>
<function><type><name><name>struct</name> <name>pg_result</name></name> <modifier>*</modifier><modifier>*</modifier></type>
<name>CdbDispatchDtxProtocolCommand</name><parameter_list>(<parameter><decl><type><name>DtxProtocolCommand</name></type> <name>dtxProtocolCommand</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dtxProtocolCommandLoggingStr</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
							  <parameter><decl><type><name>ErrorData</name> <modifier>*</modifier><modifier>*</modifier></type><name>qeError</name></decl></parameter>,
							  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numresults</name></decl></parameter>,
							  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>dtxSegments</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>serializedDtxContextInfo</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>serializedDtxContextInfoLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbDispatcherState</name> <modifier>*</modifier></type><name>ds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CdbDispatchResults</name> <modifier>*</modifier></type><name>pr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CdbPgResults</name></type> <name>cdb_pgresults</name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DispatchCommandDtxProtocolParms</name></type> <name>dtxProtocolParms</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Gang</name>	   <modifier>*</modifier></type><name>primaryGang</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>queryText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>queryTextLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>qeError</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dtxProtocolParms</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dtxProtocolParms</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dtxProtocolParms</name><operator>.</operator><name>dtxProtocolCommand</name></name> <operator>=</operator> <name>dtxProtocolCommand</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dtxProtocolParms</name><operator>.</operator><name>dtxProtocolCommandLoggingStr</name></name> <operator>=</operator> <name>dtxProtocolCommandLoggingStr</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>TMGIDSIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Distribute transaction identifier too long (%d)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dtxProtocolParms</name><operator>.</operator><name>gid</name></name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>TMGIDSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dtxProtocolParms</name><operator>.</operator><name>serializedDtxContextInfo</name></name> <operator>=</operator> <name>serializedDtxContextInfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dtxProtocolParms</name><operator>.</operator><name>serializedDtxContextInfoLen</name></name> <operator>=</operator> <name>serializedDtxContextInfoLen</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Dispatch the command.
	 */</comment>
	<expr_stmt><expr><name>ds</name> <operator>=</operator> <call><name>cdbdisp_makeDispatcherState</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>queryText</name> <operator>=</operator> <call><name>buildGpDtxProtocolCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dtxProtocolParms</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>queryTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>primaryGang</name> <operator>=</operator> <call><name>AllocateGang</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>GANGTYPE_PRIMARY_WRITER</name></expr></argument>, <argument><expr><name>dtxSegments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>primaryGang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cdbdisp_makeDispatchResults</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>cdbdisp_makeDispatchParams</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>queryText</name></expr></argument>, <argument><expr><name>queryTextLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cdbdisp_dispatchToGang</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>primaryGang</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>addToGxactDtxSegments</name><argument_list>(<argument><expr><name>primaryGang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cdbdisp_waitDispatchFinish</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cdbdisp_checkDispatchResult</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>DISPATCH_WAIT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pr</name> <operator>=</operator> <call><name>cdbdisp_getDispatchResults</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>qeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>cdbdisp_destroyDispatcherState</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>cdbdisp_returnResults</name><argument_list>(<argument><expr><name>pr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cdb_pgresults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cdbdisp_destroyDispatcherState</name><argument_list>(<argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>numresults</name> <operator>=</operator> <name><name>cdb_pgresults</name><operator>.</operator><name>numResults</name></name></expr>;</expr_stmt>
	<return>return <expr><name><name>cdb_pgresults</name><operator>.</operator><name>pg_results</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>qdSerializeDtxContextInfo</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wantSnapshot</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inCursor</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>txnOptions</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>debugCaller</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>serializedDtxContextInfo</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Snapshot</name></type>	<name>snapshot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>serializedLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DtxContextInfo</name> <modifier>*</modifier></type><name>pDtxContextInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DtxContext</name></type> <name>currentDistributedTransactionContext</name> <init>= <expr><name>DistributedTransactionContext</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If 'wantSnapshot' is set, then serialize the ActiveSnapshot. The
	 * caller better have ActiveSnapshot set.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>wantSnapshot</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ActiveSnapshotSet</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not serialize current snapshot, ActiveSnapshot not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>snapshot</name> <operator>=</operator> <call><name>GetActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>currentDistributedTransactionContext</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DTX_CONTEXT_QD_DISTRIBUTED_CAPABLE</name></expr>:</case>
		<case>case <expr><name>DTX_CONTEXT_LOCAL_ONLY</name></expr>:</case>
			<expr_stmt><expr><call><name>DtxContextInfo_CreateOnMaster</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TempQDDtxContextInfo</name></expr></argument>, <argument><expr><name>inCursor</name></expr></argument>,
										  <argument><expr><name>txnOptions</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>DistributedTransactionContext</name> <operator>==</operator>
				<name>DTX_CONTEXT_QD_DISTRIBUTED_CAPABLE</name> <operator>&amp;&amp;</operator> <name>snapshot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>updateSharedLocalSnapshot</name><argument_list>(
					<argument><expr><operator>&amp;</operator><name>TempQDDtxContextInfo</name></expr></argument>,
					<argument><expr><name>currentDistributedTransactionContext</name></expr></argument>,
					<argument><expr><name>snapshot</name></expr></argument>,
					<argument><expr><literal type="string">"qdSerializeDtxContextInfo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>pDtxContextInfo</name> <operator>=</operator> <operator>&amp;</operator><name>TempQDDtxContextInfo</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DTX_CONTEXT_QD_RETRY_PHASE_2</name></expr>:</case>
		<case>case <expr><name>DTX_CONTEXT_QE_ENTRY_DB_SINGLETON</name></expr>:</case>
		<case>case <expr><name>DTX_CONTEXT_QE_AUTO_COMMIT_IMPLICIT</name></expr>:</case>
		<case>case <expr><name>DTX_CONTEXT_QE_TWO_PHASE_EXPLICIT_WRITER</name></expr>:</case>
		<case>case <expr><name>DTX_CONTEXT_QE_TWO_PHASE_IMPLICIT_WRITER</name></expr>:</case>
		<case>case <expr><name>DTX_CONTEXT_QE_READER</name></expr>:</case>
		<case>case <expr><name>DTX_CONTEXT_QE_PREPARED</name></expr>:</case>
		<case>case <expr><name>DTX_CONTEXT_QE_FINISH_PREPARED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unexpected distribute transaction context: '%s'"</literal></expr></argument>,
				 <argument><expr><call><name>DtxContextToString</name><argument_list>(<argument><expr><name>DistributedTransactionContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized DTX transaction context: %d"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>DistributedTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>serializedLen</name> <operator>=</operator> <call><name>DtxContextInfo_SerializeSize</name><argument_list>(<argument><expr><name>pDtxContextInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>serializedLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>serializedLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>serializedDtxContextInfo</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DtxContextInfo_Serialize</name><argument_list>(<argument><expr><name>serializedDtxContextInfo</name></expr></argument>, <argument><expr><name>pDtxContextInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
		 <argument><expr><literal type="string">"qdSerializeDtxContextInfo (called by %s) returning a snapshot of %d bytes (ptr is %s)"</literal></expr></argument>,
		 <argument><expr><name>debugCaller</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>,
		 <argument><expr><operator>(</operator><ternary><condition><expr><name>serializedDtxContextInfo</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"Non-NULL"</literal></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>serializedDtxContextInfo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Build a dtx protocol command string to be dispatched to QE.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>buildGpDtxProtocolCommand</name><parameter_list>(<parameter><decl><type><name>DispatchCommandDtxProtocolParms</name> <modifier>*</modifier></type><name>pDtxProtocolParms</name></decl></parameter>,
						 <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>finalLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dtxProtocolCommand</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>pDtxProtocolParms</name><operator>-&gt;</operator><name>dtxProtocolCommand</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dtxProtocolCommandLoggingStr</name> <init>= <expr><name><name>pDtxProtocolParms</name><operator>-&gt;</operator><name>dtxProtocolCommandLoggingStr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>gid</name> <init>= <expr><name><name>pDtxProtocolParms</name><operator>-&gt;</operator><name>gid</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>serializedDtxContextInfo</name> <init>= <expr><name><name>pDtxProtocolParms</name><operator>-&gt;</operator><name>serializedDtxContextInfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>serializedDtxContextInfoLen</name> <init>= <expr><name><name>pDtxProtocolParms</name><operator>-&gt;</operator><name>serializedDtxContextInfoLen</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>loggingStrLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dtxProtocolCommandLoggingStr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>gidLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>total_query_len</name> <init>= <expr><literal type="number">1</literal> <comment type="block">/* 'T' */</comment> <operator>+</operator>
	<sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
	<sizeof>sizeof<argument_list>(<argument><expr><name>dtxProtocolCommand</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
	<sizeof>sizeof<argument_list>(<argument><expr><name>loggingStrLen</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
	<name>loggingStrLen</name> <operator>+</operator>
	<sizeof>sizeof<argument_list>(<argument><expr><name>gidLen</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
	<name>gidLen</name> <operator>+</operator>
	<sizeof>sizeof<argument_list>(<argument><expr><name>serializedDtxContextInfoLen</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
	<name>serializedDtxContextInfoLen</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>shared_query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Allocate query text within DispatcherContext */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>DispatcherContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>DispatcherContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>shared_query</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>total_query_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>shared_query</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>pos</name><operator>++</operator> <operator>=</operator> <literal type="char">'T'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>			<comment type="block">/* placeholder for message length */</comment>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>dtxProtocolCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>loggingStrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>dtxProtocolCommandLoggingStr</name></expr></argument>, <argument><expr><name>loggingStrLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>loggingStrLen</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>gidLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>gid</name></expr></argument>, <argument><expr><name>gidLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>gidLen</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>serializedDtxContextInfoLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>serializedDtxContextInfoLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>serializedDtxContextInfo</name></expr></argument>, <argument><expr><name>serializedDtxContextInfoLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>serializedDtxContextInfoLen</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>pos</name> <operator>-</operator> <name>shared_query</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * fill in length placeholder
	 */</comment>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>shared_query</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>finalLen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>finalLen</name> <operator>=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>shared_query</name></expr>;</return>
</block_content>}</block></function>
</unit>
