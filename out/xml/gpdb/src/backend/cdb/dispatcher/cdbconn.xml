<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/dispatcher/cdbconn.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbconn.c
 *
 * SegmentDatabaseDescriptor methods
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/dispatcher/cdbconn.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbconn.h"</cpp:file></cpp:include>		<comment type="block">/* me */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbutil.h"</cpp:file></cpp:include>		<comment type="block">/* CdbComponentDatabaseInfo */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbgang.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>cdbconn_get_motion_listener_port</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cdbconn_disconnect</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>MPPnoticeReceiver</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>transStatusToString</name><parameter_list>(<parameter><decl><type><name>PGTransactionStatusType</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>status</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PQTRANS_IDLE</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"idle"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PQTRANS_ACTIVE</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"active"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PQTRANS_INTRANS</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"idle, within transaction"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PQTRANS_INERROR</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"idle, within failed transaction"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PQTRANS_UNKNOWN</name></expr>:</case>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"unknown transaction status"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Initialize a QE connection descriptor in CdbComponentsContext */</comment>
<function><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type>
<name>cdbconn_createSegmentDescriptor</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>CdbComponentDatabaseInfo</name></name> <modifier>*</modifier></type><name>cdbinfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>identifier</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWriter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CdbComponentsContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CdbComponentsContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>segdbDesc</name> <operator>=</operator> <operator>(</operator><name>SegmentDatabaseDescriptor</name> <operator>*</operator><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SegmentDatabaseDescriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Segment db info */</comment>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>segment_database_info</name></name> <operator>=</operator> <name>cdbinfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name></expr>;</expr_stmt>

	<comment type="block">/* Connection info, set in function cdbconn_doConnect */</comment>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>motionListener</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>backendPid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* whoami */</comment>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>identifier</name></name> <operator>=</operator> <name>identifier</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>isWriter</name></name> <operator>=</operator> <name>isWriter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>establishConnTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>segdbDesc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Free memory of segment descriptor. */</comment>
<function><type><name>void</name></type>
<name>cdbconn_termSegmentDescriptor</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdbs</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CdbComponentsContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cdbs</name> <operator>=</operator> <name><name>segdbDesc</name><operator>-&gt;</operator><name>segment_database_info</name><operator>-&gt;</operator><name>cdbs</name></name></expr>;</expr_stmt>

	<comment type="block">/* put qe identifier to free list for reuse */</comment>
	<expr_stmt><expr><name><name>cdbs</name><operator>-&gt;</operator><name>freeCounterList</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>cdbs</name><operator>-&gt;</operator><name>freeCounterList</name></name></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cdbconn_disconnect</name><argument_list>(<argument><expr><name>segdbDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>segdbDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>								<comment type="block">/* cdbconn_termSegmentDescriptor */</comment>

<comment type="block">/*
 * Establish socket connection via libpq.
 * Caller should call PQconnectPoll to finish it up.
 */</comment>
<function><type><name>void</name></type>
<name>cdbconn_doConnectStart</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gpqeid</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>options</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>diff_options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEYWORDS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INT_STRING_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>= <expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>segment_database_info</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>keywords</name><index>[<expr><name>MAX_KEYWORDS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>values</name><index>[<expr><name>MAX_KEYWORDS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>portstr</name><index>[<expr><name>MAX_INT_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>keepalivesIdleStr</name><index>[<expr><name>MAX_INT_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>keepalivesCountStr</name><index>[<expr><name>MAX_INT_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>keepalivesIntervalStr</name><index>[<expr><name>MAX_INT_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nkeywords</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"gpqeid"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>gpqeid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Build the connection string
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"options"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>diff_options</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"diff_options"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>diff_options</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For entry DB connection, we make sure both "hostaddr" and "host" are
	 * empty string. Or else, it will fall back to environment variables and
	 * won't use domain socket in function connectDBStart. Also we set the
	 * connection type for entrydb connection so that QE could change Gp_role
	 * from DISPATCH to EXECUTE.
	 *
	 * For other QE connections, we set "hostaddr". "host" is not used.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>segindex</name></name> <operator>==</operator> <name>MASTER_CONTENT_ID</name> <operator>&amp;&amp;</operator>
		<call><name>IS_QUERY_DISPATCHER</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"hostaddr"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"hostaddr"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"host"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"port"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>portstr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"dbname"</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>MyProcPort</name> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>database_name</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>database_name</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * get database name from MyDatabaseId, which is initialized
		 * in InitPostgres()
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>MyDatabaseId</name> <operator>!=</operator> <name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <call><name>get_database_name</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set the client encoding to match database encoding in QD-&gt;QE
	 * connections.  All the strings dispatched from QD to be in the database
	 * encoding, and all strings sent back to the QD will also be in the
	 * database encoding.
	 *
	 * Most things don't pay attention to client_encoding in QE processes:
	 * query results are normally sent back via the interconnect, and the 'M'
	 * type QD-&gt;QE messages, used to dispatch queries, don't perform encoding
	 * conversion.  But some things, like error messages, and internal
	 * commands dispatched directly with CdbDispatchCommand, do care.
	 */</comment>
	<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"client_encoding"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <call><name>GetDatabaseEncodingName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"user"</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>MyProcPort</name> <operator>&amp;&amp;</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>user_name</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name><name>MyProcPort</name><operator>-&gt;</operator><name>user_name</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * get user name from AuthenticatedUserId which is initialized
		 * in InitPostgres()
		 */</comment>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <call><name>GetUserNameFromId</name><argument_list>(<argument><expr><call><name>GetAuthenticatedUserId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>GPCONN_TYPE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>GPCONN_TYPE_DEFAULT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set QD-QE dispatch keepalive settings.
	 * We only set the value if it is non-zero as setsockopt() with option_value=0 results in:
	 * 'Invalid argument' on Linux based systems
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>gp_dispatch_keepalives_idle</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"keepalives_idle"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>keepalivesIdleStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keepalivesIdleStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>gp_dispatch_keepalives_idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>keepalivesIdleStr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>gp_dispatch_keepalives_interval</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"keepalives_interval"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>keepalivesIntervalStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keepalivesIntervalStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>gp_dispatch_keepalives_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>keepalivesIntervalStr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>gp_dispatch_keepalives_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <literal type="string">"keepalives_count"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>keepalivesCountStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keepalivesCountStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>gp_dispatch_keepalives_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>keepalivesCountStr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nkeywords</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>nkeywords</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nkeywords</name> <operator>&lt;</operator> <name>MAX_KEYWORDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <call><name>PQconnectStartParams</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cdbconn_doConnectComplete</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PQsetNoticeReceiver</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MPPnoticeReceiver</name></expr></argument>, <argument><expr><name>segdbDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Command the QE to initialize its motion layer. Wait for it to respond
	 * giving us the TCP port number where it listens for connections from the
	 * gang below.
	 */</comment>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>motionListener</name></name> <operator>=</operator> <call><name>cdbconn_get_motion_listener_port</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>backendPid</name></name> <operator>=</operator> <call><name>PQbackendPID</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>motionListener</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<name>gp_log_gang</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Connected to %s motionListenerPorts=%u/%u with options %s"</literal></expr></argument>,
			 <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>,
			 <argument><expr><operator>(</operator><name><name>segdbDesc</name><operator>-&gt;</operator><name>motionListener</name></name> <operator>&amp;</operator> <literal type="number">0x0ffff</literal><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><operator>(</operator><name><name>segdbDesc</name><operator>-&gt;</operator><name>motionListener</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0ffff</literal><operator>)</operator></expr></argument>,
			 <argument><expr><call><name>PQoptions</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Disconnect from QE */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cdbconn_disconnect</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_BAD</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGTransactionStatusType</name></type> <name>status</name> <init>= <expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>gp_log_gang</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Finishing connection with %s; %s"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>, <argument><expr><call><name>transStatusToString</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PQTRANS_ACTIVE</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>errbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>sent</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>Debug_cancel_print</name> <operator>||</operator> <name>gp_log_gang</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Calling PQcancel for %s"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>sent</name> <operator>=</operator> <call><name>cdbconn_signalQE</name><argument_list>(<argument><expr><name>segdbDesc</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sent</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Unable to cancel: %s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"cannot allocate PGCancel"</literal></expr> </then><else>: <expr><name>errbuf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read result from connection and discard it.
 *
 * Retry at most N times.
 *
 * Return false if there'er still leftovers.
 */</comment>
<function><type><name>bool</name></type>
<name>cdbconn_discardResults</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>retryCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>pRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExecStatusType</name></type> <name>stat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>retval</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* PQstatus() is smart enough to handle NULL */</comment>
	<while>while <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>pRes</name> <operator>=</operator> <call><name>PQgetResult</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>stat</name> <operator>=</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"(%s) Leftover result at freeGang time: %s %s"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>,
			 <argument><expr><call><name>PQresStatus</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>stat</name> <operator>==</operator> <name>PGRES_FATAL_ERROR</name> <operator>||</operator> <name>stat</name> <operator>==</operator> <name>PGRES_BAD_RESPONSE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>&gt;</operator> <name>retryCount</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>retval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Clear of all the notify messages as well.
	 */</comment>
	<decl_stmt><decl><type><name>PGnotify</name>   <modifier>*</modifier></type><name>notify</name> <init>= <expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>notifyHead</name></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>notify</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGnotify</name>   <modifier>*</modifier></type><name>prev</name> <init>= <expr><name>notify</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>notify</name> <operator>=</operator> <name><name>notify</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>notifyHead</name></name> <operator>=</operator> <name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>notifyTail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return if it's a bad connection */</comment>
<function><type><name>bool</name></type>
<name>cdbconn_isBadConnection</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>PQstatus</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return if it's a connection OK */</comment>
<function><type><name>bool</name></type>
<name>cdbconn_isConnectionOk</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>PQstatus</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_OK</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Build text to identify this QE in error messages.
 * Don't call this function in threads.
 */</comment>
<function><type><name>void</name></type>
<name>cdbconn_setQEIdentifier</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>,
				<parameter><decl><type><name>int</name></type> <name>sliceIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>= <expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>segment_database_info</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CdbComponentsContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CdbComponentsContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Format the identity of the segment db. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>segindex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><literal type="string">"seg%d"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Format the slice index. */</comment>
		<if_stmt><if>if <condition>(<expr><name>sliceIndex</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><literal type="string">" slice%d"</literal></expr></argument>, <argument><expr><name>sliceIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>SEGMENT_IS_ACTIVE_PRIMARY</name><argument_list>(<argument><expr><name>cdbinfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"entry db"</literal></expr> </then><else>: <expr><literal type="string">"mirror entry db"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Format the connection info. */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><literal type="string">" %s:%d"</literal></expr></argument>, <argument><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name></expr></argument>, <argument><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If connected, format the QE's process id. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>backendPid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>string</name></expr></argument>, <argument><expr><literal type="string">" pid=%d"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>backendPid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name> <operator>=</operator> <name><name>string</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Send cancel/finish signal to still-running QE through libpq.
 *
 * errbuf is used to return error message(recommended size is 256 bytes).
 *
 * Returns true if we successfully sent a signal
 * (not necessarily received by the target process).
 */</comment>
<function><type><name>bool</name></type>
<name>cdbconn_signalQE</name><parameter_list>(<parameter><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name></decl></parameter>,
				 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name></type> <name>isCancel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PGcancel</name>   <modifier>*</modifier></type><name>cn</name> <init>= <expr><call><name>PQgetCancel</name><argument_list>(<argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>cn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>isCancel</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PQcancel</name><argument_list>(<argument><expr><name>cn</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>PQrequestFinish</name><argument_list>(<argument><expr><name>cn</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>PQfreeCancel</name><argument_list>(<argument><expr><name>cn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* GPDB function to retrieve QE-backend details (motion listener) */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>cdbconn_get_motion_listener_port</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>PQparameterStatus</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><literal type="string">"qe_listener_port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>endptr</name> <operator>==</operator> <name>val</name> <operator>||</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*-------------------------------------------------------------------------
 * QE Notice receiver support
 *
 * When a QE process emits a NOTICE (or WARNING, INFO, etc.) message, it
 * needs to be delivered to the user. To do that, we install a libpq Notice
 * receiver callback to every QD-&gt;QE connection.
 *
 * The callback is very limited in what it can do, so it cannot directly
 * forward the Notice to the user-&gt;QD connection. Instead, it queues the
 * Notices as a list of QENotice structs. Later, when we are out of the
 * callback, forwardQENotices() sends the queued Notices to the client.
 *-------------------------------------------------------------------------
 */</comment>

<typedef>typedef <type><name><name>struct</name> <name>QENotice</name></name></type> <name>QENotice</name>;</typedef>
<struct>struct <name>QENotice</name>
<block>{
	<decl_stmt><decl><type><name>QENotice</name>   <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>elevel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sqlstate</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>severity</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>line</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>func</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>whoami</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>detail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>hint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>QENotice</name> <modifier>*</modifier></type><name>qeNotices_head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>QENotice</name> <modifier>*</modifier></type><name>qeNotices_tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * libpq Notice receiver callback.
 *
 * NB: This is a callback, so we are very limited in what we can do. In
 * particular, we must not call ereport() or elog(), which might longjmp()
 * out of the callback. Libpq might get confused by that. That also means
 * that we cannot call palloc()!
 *
 * A QENotice struct is created for each incoming Notice, and put in a
 * queue for later processing. The QENotices are allocatd with good old
 * malloc()!
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>MPPnoticeReceiver</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGMessageField</name> <modifier>*</modifier></type><name>pfield</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>elevel</name> <init>= <expr><name>INFO</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sqlstate</name> <init>= <expr><literal type="string">"00000"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>severity</name> <init>= <expr><literal type="string">"WARNING"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>file</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>func</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>message</name><init>= <expr><literal type="string">"missing error text"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>detail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>hint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>whoami</name><index>[<expr><literal type="number">200</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>segdbDesc</name> <init>= <expr><operator>(</operator><name>SegmentDatabaseDescriptor</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If MyProcPort is NULL, there is no client, so no need to generate notice.
	 * One example is that there is no client for a background worker.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>||</operator> <name>MyProcPort</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> 
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>segdbDesc</name> <operator>&amp;&amp;</operator> <name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>whoami</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>whoami</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"  (%s)"</literal></expr></argument>, <argument><expr><name><name>segdbDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>pfield</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>errFields</name></name></expr>;</init> <condition><expr><name>pfield</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pfield</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name><name>pfield</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>PG_DIAG_SEVERITY</name></expr>:</case>
				<expr_stmt><expr><name>severity</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"WARNING"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>WARNING</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"NOTICE"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>NOTICE</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"DEBUG1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
						 <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"DEBUG"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>DEBUG1</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"DEBUG2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>DEBUG2</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"DEBUG3"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>DEBUG3</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"DEBUG4"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>DEBUG4</name></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr></argument>, <argument><expr><literal type="string">"DEBUG5"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>DEBUG5</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>elevel</name> <operator>=</operator> <name>INFO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SQLSTATE</name></expr>:</case>
				<expr_stmt><expr><name>sqlstate</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_MESSAGE_PRIMARY</name></expr>:</case>
				<expr_stmt><expr><name>message</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_MESSAGE_DETAIL</name></expr>:</case>
				<expr_stmt><expr><name>detail</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_MESSAGE_HINT</name></expr>:</case>
				<expr_stmt><expr><name>hint</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_STATEMENT_POSITION</name></expr>:</case>
			<case>case <expr><name>PG_DIAG_INTERNAL_POSITION</name></expr>:</case>
			<case>case <expr><name>PG_DIAG_INTERNAL_QUERY</name></expr>:</case>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_CONTEXT</name></expr>:</case>
				<expr_stmt><expr><name>context</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SOURCE_FILE</name></expr>:</case>
				<expr_stmt><expr><name>file</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SOURCE_LINE</name></expr>:</case>
				<expr_stmt><expr><name>line</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_SOURCE_FUNCTION</name></expr>:</case>
				<expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>pfield</name><operator>-&gt;</operator><name>contents</name></name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PG_DIAG_GP_PROCESS_TAG</name></expr>:</case>
				<break>break;</break>
			<default>default:</default>
				<break>break;</break>

		</block_content>}</block></switch>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If this message is filtered out by client_min_messages, we have nothing
	 * to do. (The QE shouldn't have sent it to us in the first place...)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>elevel</name> <operator>&gt;=</operator> <name>client_min_messages</name> <operator>||</operator> <name>elevel</name> <operator>==</operator> <name>INFO</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QENotice</name>   <modifier>*</modifier></type><name>notice</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type>		<name>size</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>bufptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>file_len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>func_len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>detail_len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>hint_len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>context_len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>message_len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>whoami_len</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * We use malloc(), because we are in a libpq callback, and we CANNOT
		 * use palloc(). We allocate space for the QENotice and the strings in
		 * a single malloc() call.
		 */</comment>

		<comment type="block">/*
		 * First, compute the required size of the allocation.
		 */</comment>

<comment type="block">/* helper macro for computing the total allocation size */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_VARLEN_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
		<cpp:value>if (fldname != NULL) \
		{ \
			fldname##_len = strlen(fldname) + 1; \
			size += fldname##_len; \
		} \
		else \
			fldname##_len = 0</cpp:value></cpp:define>

		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>QENotice</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIZE_VARLEN_FIELD</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIZE_VARLEN_FIELD</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIZE_VARLEN_FIELD</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIZE_VARLEN_FIELD</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIZE_VARLEN_FIELD</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIZE_VARLEN_FIELD</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SIZE_VARLEN_FIELD</name><argument_list>(<argument><expr><name>whoami</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Perform the allocation.  Put a limit on the max size, as a sanity
		 * check.  (The libpq protocol itself limits the size the message can
		 * be, but better safe than sorry.)
		 *
		 * We can't ereport() if this fails, so we just drop the notice to
		 * the floor. Hope it wasn't important...
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>MaxAllocSize</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>notice</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>notice</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Allocation succeeded.  Now fill in the struct.
		 */</comment>
		<expr_stmt><expr><name>bufptr</name> <operator>=</operator> <name><name>notice</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_VARLEN_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
		<cpp:value>if (fldname != NULL) \
		{ \
			notice-&gt;fldname = bufptr; \
			memcpy(bufptr, fldname, fldname##_len); \
			bufptr += fldname##_len; \
		} \
		else \
			notice-&gt;fldname = NULL</cpp:value></cpp:define>

		<expr_stmt><expr><name><name>notice</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>elevel</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>notice</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>notice</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>notice</name><operator>-&gt;</operator><name>severity</name></name></expr></argument>, <argument><expr><name>severity</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>notice</name><operator>-&gt;</operator><name>severity</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COPY_VARLEN_FIELD</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>notice</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>notice</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COPY_VARLEN_FIELD</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COPY_VARLEN_FIELD</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COPY_VARLEN_FIELD</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COPY_VARLEN_FIELD</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Concatenate message and whoami string together */</comment>
		<expr_stmt><expr><call><name>COPY_VARLEN_FIELD</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bufptr</name><operator>--</operator></expr>;</expr_stmt> <comment type="block">/* lets whoami overwrite '\0' byte of message body */</comment>
		<expr_stmt><expr><call><name>COPY_VARLEN_FIELD</name><argument_list>(<argument><expr><name>whoami</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufptr</name> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>notice</name> <operator>==</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Link it to the queue */</comment>
		<expr_stmt><expr><name><name>notice</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>qeNotices_tail</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>qeNotices_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>notice</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>qeNotices_tail</name> <operator>=</operator> <name>notice</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>qeNotices_tail</name> <operator>=</operator> <name>qeNotices_head</name> <operator>=</operator> <name>notice</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Send all Notices to the client, that we have accumulated from QEs since last
 * call.
 *
 * This should be called after every libpq call that might read from the QD-&gt;QE
 * connection, so that the notices are sent to the user in a timely fashion.
 */</comment>
<function><type><name>void</name></type>
<name>forwardQENotices</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>hasNotices</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>qeNotices_head</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QENotice</name> <modifier>*</modifier></type><name>notice</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>StringInfoData</name></type> <name>msgbuf</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>notice</name> <operator>=</operator> <name>qeNotices_head</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hasNotices</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Unlink it first, so that if something goes wrong in sending it to
		 * the client, we don't get stuck in a loop trying to send the same
		 * message again and again.
		 */</comment>
		<expr_stmt><expr><name>qeNotices_head</name> <operator>=</operator> <name><name>notice</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>qeNotices_head</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>qeNotices_tail</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Use PG_TRY() - PG_CATCH() to make sure we free the struct, no
		 * matter what.
		 */</comment>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<comment type="block">/* 'N' (Notice) is for nonfatal conditions, 'E' is for errors */</comment>
			<expr_stmt><expr><call><name>pq_beginmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>PG_PROTOCOL_MAJOR</name><argument_list>(<argument><expr><name>FrontendProtocol</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* New style with separate fields */</comment>
				<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>PG_DIAG_SEVERITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>severity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>PG_DIAG_SQLSTATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* M field is required per protocol, so always send something */</comment>
				<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>PG_DIAG_MESSAGE_PRIMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>notice</name><operator>-&gt;</operator><name>detail</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>PG_DIAG_MESSAGE_DETAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>notice</name><operator>-&gt;</operator><name>hint</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>PG_DIAG_MESSAGE_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>notice</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>PG_DIAG_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>notice</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>PG_DIAG_SOURCE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>notice</name><operator>-&gt;</operator><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>,<argument><expr><name>PG_DIAG_SOURCE_LINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>notice</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name>PG_DIAG_SOURCE_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* terminator */</comment>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Old style --- gin up a backwards-compatible message */</comment>
				<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s:  "</literal></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>severity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>notice</name><operator>-&gt;</operator><name>func</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s: "</literal></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>notice</name><operator>-&gt;</operator><name>message</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>notice</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"missing error text"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><call><name>pq_endmessage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>notice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>notice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>hasNotices</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pq_flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
