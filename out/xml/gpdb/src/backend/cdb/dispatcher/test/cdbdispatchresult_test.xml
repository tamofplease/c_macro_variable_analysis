<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/dispatcher/test/cdbdispatchresult_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;setjmp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cdbdispatchresult.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNITTEST_NUM_SEGS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>CdbDispatchResults</name></name> <modifier>*</modifier></type>
<name>_init_cdbdisp_makeResult</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>CdbDispatchResults</name></name> <modifier>*</modifier></type><name>results</name> <init>=
	<expr><operator>(</operator>struct <name>CdbDispatchResults</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>results</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>results</name><operator>-&gt;</operator><name>resultArray</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>UNITTEST_NUM_SEGS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>results</name><operator>-&gt;</operator><name>resultArray</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>results</name><operator>-&gt;</operator><name>resultCapacity</name></name> <operator>=</operator> <name>UNITTEST_NUM_SEGS</name></expr>;</expr_stmt>

	<return>return <expr><name>results</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Test cdbdisp_makeResult would return NULL if OOM happens
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__cdbdisp_makeResult__oom</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbDispatchResult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>CdbDispatchResults</name></name> <modifier>*</modifier></type><name>results</name> <init>= <expr><call><name>_init_cdbdisp_makeResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>SegmentDatabaseDescriptor</name></name> <modifier>*</modifier></type><name>segdbDesc</name> <init>=
	<expr><operator>(</operator>struct <name>SegmentDatabaseDescriptor</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SegmentDatabaseDescriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * createPQExpBuffer is supposed to return NULL in OOM cases
	 */</comment>
	<expr_stmt><expr><call><name>will_return_count</name><argument_list>(<argument><expr><name>createPQExpBuffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>expect_any_count</name><argument_list>(<argument><expr><name>destroyPQExpBuffer</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_be_called_count</name><argument_list>(<argument><expr><name>destroyPQExpBuffer</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cdbdisp_makeResult</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>segdbDesc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_true</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier>		<name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>=
	<expr><block>{
		<macro><name>unit_test</name><argument_list>(<argument>test__cdbdisp_makeResult__oom</argument>)</argument_list></macro>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>Gp_role</name> <operator>=</operator> <name>GP_ROLE_DISPATCH</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
