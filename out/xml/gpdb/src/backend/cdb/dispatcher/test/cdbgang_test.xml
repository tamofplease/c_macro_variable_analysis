<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/dispatcher/test/cdbgang_test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cmockery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbconn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../cdbgang.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOTOAL_SEGMENTS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>s_cdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>segHostIp</name><index>[<expr><name>TOTOAL_SEGMENTS</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"10.10.10.0"</literal></expr>,
	<expr><literal type="string">"10.10.10.1"</literal></expr>,
	<expr><literal type="string">"10.10.10.2"</literal></expr>,
	<expr><literal type="string">"10.10.10.3"</literal></expr>,
	<expr><literal type="string">"10.10.10.4"</literal></expr>,
	<expr><literal type="string">"10.10.10.5"</literal></expr>,
	<expr><literal type="string">"10.10.10.6"</literal></expr>,
	<expr><literal type="string">"10.10.10.7"</literal></expr>,
	<expr><literal type="string">"10.10.10.8"</literal></expr>,
	<expr><literal type="string">"10.10.10.9"</literal></expr>,
	<expr><literal type="string">"10.10.10.10"</literal></expr>,
	<expr><literal type="string">"10.10.10.11"</literal></expr>,
	<expr><literal type="string">"10.10.10.12"</literal></expr>,
	<expr><literal type="string">"10.10.10.13"</literal></expr>,
	<expr><literal type="string">"10.10.10.14"</literal></expr>,
	<expr><literal type="string">"10.10.10.15"</literal></expr>,
	<expr><literal type="string">"10.10.10.16"</literal></expr>,
	<expr><literal type="string">"10.10.10.17"</literal></expr>,
	<expr><literal type="string">"10.10.10.18"</literal></expr>,
	<expr><literal type="string">"10.10.10.19"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>qdHostIp</name> <init>= <expr><literal type="string">"127.0.0.1"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>segBasePort</name> <init>= <expr><literal type="number">30000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>qdPort</name> <init>= <expr><literal type="number">5432</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>CdbComponentDatabases</name> <modifier>*</modifier></type>
<name>makeTestCdb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>entryCnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>segCnt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CdbComponentDatabases</name> <modifier>*</modifier></type><name>cdb</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CdbComponentDatabases</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>total_entry_dbs</name></name> <operator>=</operator> <name>entryCnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>total_segments</name></name> <operator>=</operator> <name>segCnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>total_segment_dbs</name></name> <operator>=</operator> <name>TOTOAL_SEGMENTS</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>	<comment type="block">/* with mirror */</comment>
	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>entry_db_info</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(
								 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CdbComponentDatabaseInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cdb</name><operator>-&gt;</operator><name>total_entry_dbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cdb</name><operator>-&gt;</operator><name>segment_db_info</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(
								   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CdbComponentDatabaseInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cdb</name><operator>-&gt;</operator><name>total_segment_dbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cdb</name><operator>-&gt;</operator><name>total_entry_dbs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>= <expr><operator>&amp;</operator><name><name>cdb</name><operator>-&gt;</operator><name>entry_db_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <operator>(</operator><name>GpSegConfigEntry</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GpSegConfigEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>=</operator> <name>qdHostIp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>qdPort</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>preferred_role</name></name> <operator>=</operator> <literal type="char">'p'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="char">'u'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cdb</name><operator>-&gt;</operator><name>total_segment_dbs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CdbComponentDatabaseInfo</name> <modifier>*</modifier></type><name>cdbinfo</name> <init>= <expr><operator>&amp;</operator><name><name>cdb</name><operator>-&gt;</operator><name>segment_db_info</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <operator>(</operator><name>GpSegConfigEntry</name><operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GpSegConfigEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>=</operator> <name><name>segHostIp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>segBasePort</name> <operator>+</operator> <name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="char">'m'</literal></expr> </then><else>: <expr><literal type="char">'p'</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>preferred_role</name></name> <operator>=</operator> <ternary><condition><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="char">'m'</literal></expr> </then><else>: <expr><literal type="char">'p'</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="char">'u'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cdbinfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>cdb</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Make sure resetSessionForPrimaryGangLoss doesn't access catalog.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>test__resetSessionForPrimaryGangLoss</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>will_be_called</name><argument_list>(<argument><expr><name>RedZoneHandler_DetectRunawaySession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ProcCanSetMppSessionId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Assum we have created a temporary namespace. */</comment>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>TempNamespaceOidIsValid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>will_return</name><argument_list>(<argument><expr><name>ResetTempNamespace</name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>OldTempNamespace</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>resetSessionForPrimaryGangLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>OldTempNamespace</name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cmockery_parse_arguments</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier>		<name>UnitTest</name></type> <name><name>tests</name><index>[]</index></name> <init>=
	<expr><block>{
		<expr><call><name>unit_test</name><argument_list>(<argument><expr><name>test__resetSessionForPrimaryGangLoss</name></expr></argument>)</argument_list></call></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemoryContextInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>DispatcherContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
											  <argument><expr><literal type="string">"Dispatch Context"</literal></expr></argument>,
											  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
											  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
											  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <call><name>ResourceOwnerCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"gang test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>Gp_role</name> <operator>=</operator> <name>GP_ROLE_DISPATCH</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GpIdentity</name><operator>.</operator><name>dbid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Port</name></type>		<name>procport</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>MyProcPort</name> <operator>=</operator> <operator>&amp;</operator><name>procport</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>database_name</name></name> <operator>=</operator> <literal type="string">"test"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyProcPort</name><operator>-&gt;</operator><name>user_name</name></name> <operator>=</operator> <literal type="string">"gpadmin"</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>s_cdb</name> <operator>=</operator> <call><name>makeTestCdb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TOTOAL_SEGMENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>run_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
