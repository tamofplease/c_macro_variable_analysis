<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/tupchunklist.c"><comment type="block">/*-------------------------------------------------------------------------
 * tupchunklist.c
 *	  The data-structures and functions for dealing with tuple chunk lists.
 *
 * Portions Copyright (c) 2005-2008, Greenplum
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/motion/tupchunklist.c
 *
 * Reviewers: jzhang, ftian, tkordas
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbmotion.h"</cpp:file></cpp:include>


<comment type="block">/* Appends a TupleChunkListItem to the end of a TupleChunkList.  The list's
* "num_chunks" value is incremented as well.
*/</comment>
<function><type><name>void</name></type>
<name>appendChunkToTCList</name><parameter_list>(<parameter><decl><type><name>TupleChunkList</name></type> <name>tcList</name></decl></parameter>, <parameter><decl><type><name>TupleChunkListItem</name></type> <name>tcItem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>tcList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>tcItem</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Append the chunk to the list. */</comment>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>num_chunks</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <comment type="block">/* List not empty. */</comment>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>tcItem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>tcItem</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
		<comment type="block">/* List is empty. */</comment>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>tcItem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>tcItem</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>gp_interconnect_chunk_cache</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<function><type><name>TupleChunkListItem</name></type>
<name>getChunkFromCache</name><parameter_list>(<parameter><decl><type><name>TupleChunkListCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>item</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>items</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>items</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <operator>(</operator><name>TupleChunkListItem</name><operator>)</operator>
			<call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleChunkListItemData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>Gp_max_tuple_chunk_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>MemSetAligned</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleChunkListItemData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>putChunkToCache</name><parameter_list>(<parameter><decl><type><name>TupleChunkListCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>TupleChunkListItem</name></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>gp_interconnect_chunk_cache</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>items</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>clearTCList</name><parameter_list>(<parameter><decl><type><name>TupleChunkListCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>TupleChunkList</name></type> <name>tcList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>tcItem</name></decl>,
				<decl><type ref="prev"/><name>tcNext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>tcList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>tcItem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tcNext</name> <operator>=</operator> <name><name>tcItem</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>cache</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>putChunkToCache</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>tcItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tcItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <name>tcNext</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>num_chunks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>serialized_data_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
