<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/htupfifo.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * htupfifo.c
 *	   A FIFO queue for HeapTuples.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/motion/htupfifo.c
 *
 * Reviewers: tkordas
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/htupfifo.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>htfifo_cleanup</name><parameter_list>(<parameter><decl><type><name>htup_fifo</name></type> <name>htf</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Create and initialize a HeapTuple FIFO. The FIFO state is allocated
 * by this function, then initialized and returned.
 */</comment>
<function><type><name>htup_fifo</name></type>
<name>htfifo_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>htup_fifo</name></type>	<name>htf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>htf</name> <operator>=</operator> <operator>(</operator><name>htup_fifo</name><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>htup_fifo_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>htf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up a HeapTuple FIFO.  This frees all dynamically-allocated
 * contents of the FIFO, but not the FIFO state itself.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>htfifo_cleanup</name><parameter_list>(<parameter><decl><type><name>htup_fifo</name></type> <name>htf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MinimalTuple</name></type> <name>tup</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>htf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* TODO:  This can be faster if we didn't reuse code, but this will work. */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>tup</name> <operator>=</operator> <call><name>htfifo_gettuple</name><argument_list>(<argument><expr><name>htf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<while>while <condition>(<expr><name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>htf_entry</name></type>	<name>trash</name> <init>= <expr><name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name> <operator>=</operator> <name><name>trash</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>trash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up and free a HeapTuple FIFO. This frees both the
 * dynamically- allocated contents of the FIFO, and the FIFO's state.
 */</comment>
<function><type><name>void</name></type>
<name>htfifo_destroy</name><parameter_list>(<parameter><decl><type><name>htup_fifo</name></type> <name>htf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * MPP-3910: race with cancel -- if we haven't been initialized, there is
	 * nothing to do.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>htf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>htfifo_cleanup</name><argument_list>(<argument><expr><name>htf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>htf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Append the specified HeapTuple to the end of a HeapTuple FIFO.
 *
 * The HeapTuple must NOT be NULL.
 *
 * If the current memory usage of the FIFO exceeds the maximum specified at
 * init-time, then an error is flagged.
 */</comment>
<function><type><name>void</name></type>
<name>htfifo_addtuple</name><parameter_list>(<parameter><decl><type><name>htup_fifo</name></type> <name>htf</name></decl></parameter>, <parameter><decl><type><name>MinimalTuple</name></type> <name>tup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>htf_entry</name></type>	<name>p_ent</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>htf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>tup</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Serialized tuple should never have external attribute */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>tup</name><operator>-&gt;</operator><name>t_infomask</name></name> <operator>&amp;</operator> <name>HEAP_HASEXTERNAL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Populate the new entry. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>p_ent</name> <operator>=</operator> <name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name> <operator>=</operator> <name><name>p_ent</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>p_ent</name> <operator>=</operator> <operator>(</operator><name>htf_entry</name><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>htf_entry_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>p_ent</name><operator>-&gt;</operator><name>tup</name></name> <operator>=</operator> <name>tup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p_ent</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* Put the new entry at the end of the FIFO. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>htf</name><operator>-&gt;</operator><name>p_last</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name><name>htf</name><operator>-&gt;</operator><name>p_first</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_ent</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
		<comment type="block">/* htf-&gt;p_last == NULL */</comment>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name><name>htf</name><operator>-&gt;</operator><name>p_first</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>p_ent</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>p_ent</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Retrieve the next tuple from the start of the FIFO. If the FIFO
 * is empty then NULL is returned.
 */</comment>
<function><type><name>MinimalTuple</name></type>
<name>htfifo_gettuple</name><parameter_list>(<parameter><decl><type><name>htup_fifo</name></type> <name>htf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>htf_entry</name></type>	<name>p_ent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MinimalTuple</name></type> <name>tup</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>htf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Pull the first entry from the FIFO. */</comment>

	<expr_stmt><expr><name>p_ent</name> <operator>=</operator> <name><name>htf</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>p_ent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Got something.  Unhook the first entry from the list. */</comment>

		<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name><name>p_ent</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>htf</name><operator>-&gt;</operator><name>p_first</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>p_ent</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* Just for the sake of completeness... */</comment>

		<expr_stmt><expr><name>tup</name> <operator>=</operator> <name><name>p_ent</name><operator>-&gt;</operator><name>tup</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name>tup</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Free the FIFO entry. */</comment>
		<expr_stmt><expr><name><name>p_ent</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>htf</name><operator>-&gt;</operator><name>freelist</name></name> <operator>=</operator> <name>p_ent</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* No entries in FIFO. */</comment>
		<expr_stmt><expr><name>tup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>tup</name></expr>;</return>
</block_content>}</block></function>
</unit>
