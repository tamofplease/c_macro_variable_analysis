<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/ic_proxy_packet.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ic_proxy_message.c
 *
 *    Interconnect Proxy Packet and Message
 *
 * Similar to the ic-udp, in ic-proxy mode we also need to transfer the data as
 * packets, the packet header contains all the necessary information to
 * identify the sender, the receiver, as well the sequence (session id, command
 * id, slice id).
 *
 * A message is a special kind of packet, it contains only the header, no
 * payload.
 *
 * Packets and messages are all allocated from the packet cache, they must be
 * freed with the ic_proxy_pkt_cache_free() function.
 *
 *
 * Copyright (c) 2020-Present VMware, Inc. or its affiliates.
 *
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_pkt_cache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Get the name string of a message type.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ic_proxy_message_type_to_str</name><parameter_list>(<parameter><decl><type><name>ICProxyMessageType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>IC_PROXY_MESSAGE_DATA</name></expr>:</case>
			<return>return <expr><literal type="string">"DATA"</literal></expr>;</return>
		<case>case <expr><name>IC_PROXY_MESSAGE_PEER_HELLO</name></expr>:</case>
			<return>return <expr><literal type="string">"PEER HELLO"</literal></expr>;</return>
		<case>case <expr><name>IC_PROXY_MESSAGE_PEER_HELLO_ACK</name></expr>:</case>
			<return>return <expr><literal type="string">"PEER HELLO ACK"</literal></expr>;</return>
		<case>case <expr><name>IC_PROXY_MESSAGE_PEER_QUIT</name></expr>:</case>
			<return>return <expr><literal type="string">"PEER QUIT"</literal></expr>;</return>
		<case>case <expr><name>IC_PROXY_MESSAGE_HELLO</name></expr>:</case>
			<return>return <expr><literal type="string">"HELLO"</literal></expr>;</return>
		<case>case <expr><name>IC_PROXY_MESSAGE_HELLO_ACK</name></expr>:</case>
			<return>return <expr><literal type="string">"HELLO ACK"</literal></expr>;</return>
		<case>case <expr><name>IC_PROXY_MESSAGE_BYE</name></expr>:</case>
			<return>return <expr><literal type="string">"BYE"</literal></expr>;</return>
		<case>case <expr><name>IC_PROXY_MESSAGE_DATA_ACK</name></expr>:</case>
			<return>return <expr><literal type="string">"DATA ACK"</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="string">"UNKNOWN"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Build a new message from the key.
 *
 * The returned packet must be freed with the ic_proxy_pkt_cache_free()
 * function.
 */</comment>
<function><type><name>ICProxyPkt</name> <modifier>*</modifier></type>
<name>ic_proxy_message_new</name><parameter_list>(<parameter><decl><type><name>ICProxyMessageType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>ic_proxy_pkt_cache_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ic_proxy_message_init</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pkt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a message from the key.
 *
 * The pkt must be large enough to contain a packet header.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_message_init</name><parameter_list>(<parameter><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>ICProxyMessageType</name></type> <name>type</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name>      <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>sessionId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>commandId</name></name>      <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>commandId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>sendSliceIndex</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>sendSliceIndex</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>recvSliceIndex</name></name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>recvSliceIndex</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcContentId</name></name>   <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>localContentId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcDbid</name></name>        <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>localDbid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcPid</name></name>         <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>localPid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstContentId</name></name>   <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>remoteContentId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name>        <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>remoteDbid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstPid</name></name>         <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>remotePid</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Build a new packet.
 *
 * The data will also be copied to the packet.
 *
 * The returned packet must be freed with the ic_proxy_pkt_cache_free()
 * function.
 */</comment>
<function><type><name>ICProxyPkt</name> <modifier>*</modifier></type>
<name>ic_proxy_pkt_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <name>IC_PROXY_MAX_PKT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pkt</name> <operator>=</operator> <call><name>ic_proxy_pkt_cache_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_message_init</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>IC_PROXY_MESSAGE_DATA</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pkt</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr>;</expr_stmt>

	<return>return <expr><name>pkt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Duplicate a packet.
 *
 * The returned packet must be freed with the ic_proxy_pkt_cache_free()
 * function.
 */</comment>
<function><type><name>ICProxyPkt</name> <modifier>*</modifier></type>
<name>ic_proxy_pkt_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>newpkt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>newpkt</name> <operator>=</operator> <call><name>ic_proxy_pkt_cache_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newpkt</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>newpkt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Build a describe string of a packet.
 *
 * The string contains all the header information, can be used in log &amp; error
 * messages.
 *
 * Return the string, which must not be freed.  The string is in a static
 * buffer, so a second call to this function will overwrite the result of the
 * previous call.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ic_proxy_pkt_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>	<name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"%s [con%d,cmd%d,slice[%hd-&gt;%hd] %hu bytes seg%hd:dbid%hu:p%d-&gt;seg%hd:dbid%hu:p%d]"</literal></expr></argument>,
			 <argument><expr><call><name>ic_proxy_message_type_to_str</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>commandId</name></name></expr></argument>,
			 <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>sendSliceIndex</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>recvSliceIndex</name></name></expr></argument>,
			 <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
			 <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcContentId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcDbid</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcPid</name></name></expr></argument>,
			 <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstContentId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstPid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether a packet is from a client.
 *
 * The client is identified by the key.
 */</comment>
<function><type><name>bool</name></type>
<name>ic_proxy_pkt_is_from_client</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>srcDbid</name></name>        <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>localDbid</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>srcPid</name></name>         <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>localPid</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name>        <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>remoteDbid</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dstPid</name></name>         <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>remotePid</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>sendSliceIndex</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>sendSliceIndex</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>recvSliceIndex</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>recvSliceIndex</name></name></expr>
		;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether a packet is to a client.
 *
 * The client is identified by the key.
 */</comment>
<function><type><name>bool</name></type>
<name>ic_proxy_pkt_is_to_client</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name>        <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>localDbid</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dstPid</name></name>         <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>localPid</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>srcDbid</name></name>        <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>remoteDbid</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>srcPid</name></name>         <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>remotePid</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>sendSliceIndex</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>sendSliceIndex</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>recvSliceIndex</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>recvSliceIndex</name></name></expr>
		;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether a packet is live to a client.
 *
 * The client is identified by the key.
 *
 * A live packet has the same (sessionId, commandId) with the client.
 */</comment>
<function><type><name>bool</name></type>
<name>ic_proxy_pkt_is_live</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>sessionId</name></name>
		<operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>commandId</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>commandId</name></name></expr>
		;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether a packet is out-of-date to a client.
 *
 * The client is identified by the key.
 *
 * A packet is out-of-date if
 *
 *     pkt.(sessionId, commandId) &lt; client.(sessionId, commandId)
 */</comment>
<function><type><name>bool</name></type>
<name>ic_proxy_pkt_is_out_of_date</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>&lt;</operator>  <name><name>key</name><operator>-&gt;</operator><name>sessionId</name></name><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>&amp;&amp;</operator>
			 <name><name>pkt</name><operator>-&gt;</operator><name>commandId</name></name> <operator>&lt;</operator>  <name><name>key</name><operator>-&gt;</operator><name>commandId</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether a packet is in the future to a client.
 *
 * The client is identified by the key.
 *
 * A packet is in the future if
 *
 *     pkt.(sessionId, commandId) &gt; client.(sessionId, commandId)
 */</comment>
<function><type><name>bool</name></type>
<name>ic_proxy_pkt_is_in_the_future</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>&gt;</operator>  <name><name>key</name><operator>-&gt;</operator><name>sessionId</name></name><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>==</operator> <name><name>key</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>&amp;&amp;</operator>
			 <name><name>pkt</name><operator>-&gt;</operator><name>commandId</name></name> <operator>&gt;</operator>  <name><name>key</name><operator>-&gt;</operator><name>commandId</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
