<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/ic_proxy_iobuf.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ic_proxy_iobuf.c
 *
 *	  Interconnect Proxy I/O Buffer
 *
 * An ibuf detects the boundaries of input packets and generate a callback for
 * every complete packet.
 *
 * An obuf combines small output packets into large ones, which helps to reduce
 * the overhead of packet headers.
 *
 * Both i/o bufs are designed to support any kind of packets, as long as they
 * have a fixed-size packet header, and the maximum packet size does not exceed
 * IC_PROXY_MAX_PKT_SIZE.  Two built-in packet formats are provided:
 *
 * - b2c packet: the the ic-tcp packet, which contains a 4-byte header;
 * - p2p packet: the ic-proxy packet, which contains a 32-byte header;
 *
 * Other formats can be supported by providing custom methods.
 *
 *
 * Copyright (c) 2020-Present VMware, Inc. or its affiliates.
 *
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/ml_ipc.h"</cpp:file></cpp:include>					<comment type="block">/* for ic-tcp packet */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_iobuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_pkt_cache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Initialize an ibuf.
 *
 * The packet format must has a fixed-size header, which is specified by
 * header_size.  Once a complete header is received the get_packet_size()
 * method is called to parse the packet size, including both the header and the
 * body.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_ibuf_init</name><parameter_list>(<parameter><decl><type><name>ICProxyIBuf</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>header_size</name></decl></parameter>,
				   <parameter><function_decl><type><name>uint16</name></type> (<modifier>*</modifier> <name>get_packet_size</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>get_packet_size</name></name> <operator>=</operator> <name>get_packet_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Uninitialize an ibuf.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_ibuf_uninit</name><parameter_list>(<parameter><decl><type><name>ICProxyIBuf</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Clear the ibuf.
 *
 * Unconsumed bytes are dropped directly.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_ibuf_clear</name><parameter_list>(<parameter><decl><type><name>ICProxyIBuf</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: dropped %d bytes"</literal></expr></argument>, <argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return true if the ibuf is empty.
 */</comment>
<function><type><name>bool</name></type>
<name>ic_proxy_ibuf_empty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyIBuf</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Push data to the ibuf.
 *
 * The "data" and "size" are the pointer and the size of the data, they are
 * appended to the "ibuf".  If a complete packet is composed the "callback" is
 * called with the "opaque" as the callback data.
 *
 * If "size" is 0 then a force flush is triggered, the "callback" is called
 * with the incomplete packet.
 *
 * TODO: libuv supports sending an array of buffers, so it is technically
 * possible to prevent the memory copying in this function, we only need to let
 * the get_packet_size() method supports parsing the packet size from an array
 * of buffers.  However the callback function also needs to support
 * non-continues packet, an easy way is to only copying the header into
 * continues memory.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_ibuf_push</name><parameter_list>(<parameter><decl><type><name>ICProxyIBuf</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>,
				   <parameter><decl><type><name>ic_proxy_iobuf_data_callback</name></type> <name>callback</name></decl></parameter>,
				   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>packet_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>delta</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>ic_proxy_pkt_cache_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* a force-flush */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* TODO: do we need to flush if ibuf-&gt;len is 0? */</comment>
		<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>ibuf</name><operator>-&gt;</operator><name>header_size</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* haven't got a complete header yet */</comment>

			<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>header_size</name></name> <operator>-</operator> <name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>ibuf</name><operator>-&gt;</operator><name>header_size</name></name></expr>)</condition><block type="pseudo"><block_content>
				<comment type="block">/* still not having a complete header */</comment>
				<return>return;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<block>{<block_content>
			<comment type="block">/* have a complete header now */</comment>

			<expr_stmt><expr><name>packet_size</name> <operator>=</operator> <call><name><name>ibuf</name><operator>-&gt;</operator><name>get_packet_size</name></name><argument_list>(<argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>packet_size</name> <operator>-</operator> <name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name>packet_size</name></expr>)</condition><block type="pseudo"><block_content>
				<comment type="block">/* still not having a complete packet */</comment>
				<return>return;</return></block_content></block></if></if_stmt>
		</block_content>}</block>

		<block>{<block_content>
			<comment type="block">/* have a complete pkt now */</comment>

			<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name><name>ibuf</name><operator>-&gt;</operator><name>header_size</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>packet_size</name> <operator>=</operator> <call><name><name>ibuf</name><operator>-&gt;</operator><name>get_packet_size</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>packet_size</name> <operator>&lt;=</operator> <name>size</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* got a complete pkt */</comment>
			<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>packet_size</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>packet_size</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="block">/* got a incomplete pkt */</comment>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* got a incomplete pkt */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ibuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ibuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the packet size of a b2c one.
 *
 * The b2c packet only contains a 4-byte packet length in host byte-order.
 */</comment>
<function><type><specifier>static</specifier> <name>uint16</name></type>
<name>ic_proxy_ibuf_get_packet_size_b2c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize an ibuf for b2c packet.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_ibuf_init_b2c</name><parameter_list>(<parameter><decl><type><name>ICProxyIBuf</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ic_proxy_ibuf_init</name><argument_list>(<argument><expr><name>ibuf</name></expr></argument>, <argument><expr><name>PACKET_HEADER_SIZE</name></expr></argument>,
					   <argument><expr><name>ic_proxy_ibuf_get_packet_size_b2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the packet size of a p2p one.
 *
 * The p2p packet contains a 32-byte ICProxyPkt header, all the fields are in
 * host byte-order.
 */</comment>
<function><type><specifier>static</specifier> <name>uint16</name></type>
<name>ic_proxy_ibuf_get_packet_size_p2p</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize an ibuf for p2p packet.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_ibuf_init_p2p</name><parameter_list>(<parameter><decl><type><name>ICProxyIBuf</name> <modifier>*</modifier></type><name>ibuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ic_proxy_ibuf_init</name><argument_list>(<argument><expr><name>ibuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ICProxyPkt</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					   <argument><expr><name>ic_proxy_ibuf_get_packet_size_p2p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Initialize an obuf.
 *
 * The packet format must has a fixed-size header, which is specified by
 * header_size.  Once a packet is to be sent, the set_packet_size() method is
 * called to set the packet size in the header.
 *
 * The ic_proxy_obuf_ensure_buffer() must be called after init and before any
 * data is pushed.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_obuf_init</name><parameter_list>(<parameter><decl><type><name>ICProxyOBuf</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>header_size</name></decl></parameter>,
				   <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>set_packet_size</name>) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>set_packet_size</name></name> <operator>=</operator> <name>set_packet_size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Uninitialize an obuf.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_obuf_uninit</name><parameter_list>(<parameter><decl><type><name>ICProxyOBuf</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Ensure that the obuf has allocated its buffer.
 *
 * The ibuf does not allocate buffer until this function is called, this helps
 * to prevent some unnecessary memory allocation.
 *
 * The buffer pointer is returned, the caller is responsible to initialize the
 * header.  The packet size, however, should be set in the set_packet_size()
 * method.
 *
 * TODO: This used to be useful to improve the performance slightly, however as
 * we have the packet cache already, we do not need this lazy allocation
 * anymore, we could retire it.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>ic_proxy_obuf_ensure_buffer</name><parameter_list>(<parameter><decl><type><name>ICProxyOBuf</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>ic_proxy_pkt_cache_alloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>obuf</name><operator>-&gt;</operator><name>header_size</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Push data to the obuf.
 *
 * The "data" and "size" are the pointer and the size of the data, it is
 * promised that the data is always fed to the "callback" as an entity.  If
 * there is no enough room for the "data", the bytes in the buffer will first
 * be fed to the "callback" to clear the room.
 *
 * If "size" is 0 then a force flush is triggered.
 *
 * The "callback" will be called with one or more complete data.  The output
 * packet header is always set before feeding to the "callback".
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_obuf_push</name><parameter_list>(<parameter><decl><type><name>ICProxyOBuf</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>,
				   <parameter><decl><type><name>ic_proxy_iobuf_data_callback</name></type> <name>callback</name></decl></parameter>,
				   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					 <argument><expr><literal type="string">"ic-proxy: the caller must init the header before pushing data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Need a flush when:
	 * - size == 0 means a force flush;
	 * - or no enough space for the new data;
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>size</name> <operator>+</operator> <name><name>obuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>IC_PROXY_MAX_PKT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>obuf</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>IC_PROXY_MAX_PKT_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						 <argument><expr><literal type="string">"ic-proxy: not enough buffer to store the data:"</literal>
						 <literal type="string">" the data size is %d bytes,"</literal>
						 <literal type="string">" but the buffer size is only %zd bytes,"</literal>
						 <literal type="string">" including a %d bytes header"</literal></expr></argument>,
						 <argument><expr><name>size</name></expr></argument>, <argument><expr><name>IC_PROXY_MAX_PKT_SIZE</name></expr></argument>, <argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* TODO: should we flush if no data in the packet? */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>obuf</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>obuf</name><operator>-&gt;</operator><name>header_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG1</name></expr></argument>,
				   <argument><expr><literal type="string">"ic-proxy: no data to flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>obuf</name><operator>-&gt;</operator><name>set_packet_size</name></name><argument_list>(<argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* we will reuse the header */</comment>
			<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>obuf</name><operator>-&gt;</operator><name>header_size</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* the trailing data will be sent later */</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>obuf</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>obuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>obuf</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set the packet size of a b2c one.
 *
 * The b2c packet only contains a 4-byte packet length in host byte-order.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_obuf_set_packet_size_b2c</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize an obuf for b2c packet.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_obuf_init_b2c</name><parameter_list>(<parameter><decl><type><name>ICProxyOBuf</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ic_proxy_obuf_init</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><name>PACKET_HEADER_SIZE</name></expr></argument>,
					   <argument><expr><name>ic_proxy_obuf_set_packet_size_b2c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set the packet size of a p2p one.
 *
 * The p2p packet contains a 32-byte ICProxyPkt header, all the fields are in
 * host byte-order.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_obuf_set_packet_size_p2p</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize an obuf for p2p packet.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_obuf_init_p2p</name><parameter_list>(<parameter><decl><type><name>ICProxyOBuf</name> <modifier>*</modifier></type><name>obuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ic_proxy_obuf_init</name><argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ICProxyPkt</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					   <argument><expr><name>ic_proxy_obuf_set_packet_size_p2p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
