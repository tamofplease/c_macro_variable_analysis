<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/ic_proxy_main.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ic_proxy_main.c
 *
 *	  The main loop of the ic-proxy, it listens for both new peers and new
 *	  clients, it also establish the peer connections.
 *
 *
 * Copyright (c) 2020-Present VMware, Inc. or its affiliates.
 *
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_addr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_pkt_cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ic_proxy_server_peer_listener_init</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>uv_loop_t</name></type>	<name>ic_proxy_server_loop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uv_signal_t</name></type>	<name>ic_proxy_server_signal_hup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uv_signal_t</name></type>	<name>ic_proxy_server_signal_int</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uv_signal_t</name></type>	<name>ic_proxy_server_signal_term</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uv_signal_t</name></type>	<name>ic_proxy_server_signal_stop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uv_timer_t</name></type>	<name>ic_proxy_server_timer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uv_tcp_t</name></type>		<name>ic_proxy_peer_listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>			<name>ic_proxy_peer_listening</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>			<name>ic_proxy_peer_relistening</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uv_pipe_t</name></type>	<name>ic_proxy_client_listener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>			<name>ic_proxy_client_listening</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>			<name>ic_proxy_server_exit_code</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* pipe to check whether postmaster is alive */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>uv_pipe_t</name></type>	<name>ic_proxy_postmaster_pipe</name></decl>;</decl_stmt>

<comment type="block">/*
 * The peer listener is closed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_peer_listener_on_closed</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: peer listener: closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* A new peer listener will be created on the next timer callback */</comment>
	<expr_stmt><expr><name>ic_proxy_peer_listening</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* If relisten is requested, do it now */</comment>
	<if_stmt><if>if <condition>(<expr><name>ic_proxy_peer_relistening</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ic_proxy_peer_relistening</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_server_peer_listener_init</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * New peer arrives.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_on_new_peer</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: new peer error: %s"</literal></expr></argument>,
					 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <name>server</name></expr></argument>,
				 <argument><expr><name>ic_proxy_server_peer_listener_on_closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: new peer to the server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>peer</name> <operator>=</operator> <call><name>ic_proxy_peer_new</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>,
							 <argument><expr><name>IC_PROXY_INVALID_CONTENT</name></expr></argument>, <argument><expr><name>IC_PROXY_INVALID_DBID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_accept</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: fail to accept new peer: %s"</literal></expr></argument>,
					 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_peer_free</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* TODO: it is better to only touch the states in peer.c */</comment>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_ACCEPTED</name></expr>;</expr_stmt>

	<comment type="block">/* Dump some connection information, not very useful though */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>peeraddr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>peeraddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>name</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>uv_tcp_getpeername</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peeraddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>peeraddr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>peeraddr4</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peeraddr</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>uv_ip4_name</name><argument_list>(<argument><expr><name>peeraddr4</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
				   <argument><expr><literal type="string">"ic-proxy: the new peer is from %s:%d"</literal></expr></argument>,
						 <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>peeraddr4</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>peeraddr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>peeraddr6</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peeraddr</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>uv_ip6_name</name><argument_list>(<argument><expr><name>peeraddr6</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
				   <argument><expr><literal type="string">"ic-proxy: the new peer is from %s:%d"</literal></expr></argument>,
						 <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>peeraddr6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>ic_proxy_peer_read_hello</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Setup the peer listener.
 *
 * The peer listener listens on a tcp socket, the peer connections will come
 * through it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_peer_listener_init</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uv_tcp_t</name>   <modifier>*</modifier></type><name>listener</name> <init>= <expr><operator>&amp;</operator><name>ic_proxy_peer_listener</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ic_proxy_addrs</name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ic_proxy_peer_listening</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Get the addr from the gp_interconnect_proxy_addresses */</comment>
	<expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>ic_proxy_get_my_addr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>addr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* Cannot get my addr, maybe the setting is invalid */</comment>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>name</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>family</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ic_proxy_extract_sockaddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sockaddr</name></name></expr></argument>,
									<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
						 <argument><expr><literal type="string">"ic-proxy: setting up peer listener on %s:%s (%s:%d family=%d)"</literal></expr></argument>,
						 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
						 <argument><expr><literal type="string">"ic-proxy: setting up peer listener on %s:%s (%s:%d family=%d) (fail to extract the address: %s)"</literal></expr></argument>,
						 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>family</name></expr></argument>,
						 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * It is important to set TCP_NODELAY, otherwise we will suffer from
	 * significant latency and get very bad OLTP performance.
	 */</comment>
	<expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_tcp_nodelay</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_tcp_bind</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sockaddr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: tcp: fail to bind: %s"</literal></expr></argument>,
					 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <name>listener</name></expr></argument>,
					<argument><expr><name>IC_PROXY_BACKLOG</name></expr></argument>, <argument><expr><name>ic_proxy_server_on_new_peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: tcp: fail to listen: %s"</literal></expr></argument>,
					 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>uv_fileno</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <name>listener</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: tcp: listening on socket %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ic_proxy_peer_listening</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reinit the peer listener.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_peer_listener_reinit</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyAddr</name> <modifier>*</modifier></type><name>myaddr</name> <init>= <expr><call><name>ic_proxy_get_my_addr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ic_proxy_peer_relistening</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ic_proxy_peer_listening</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We are listening already, so must first close the current one, we
		 * keep the ic_proxy_peer_listening as true during the process to
		 * prevent double connect.
		 */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: closing the legacy peer listener"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Only recreate a new listener if an address is assigned to us */</comment>
		<expr_stmt><expr><name>ic_proxy_peer_relistening</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>myaddr</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ic_proxy_peer_listener</name></expr></argument>,
				 <argument><expr><name>ic_proxy_server_peer_listener_on_closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>myaddr</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Otherwise simply establish a new one */</comment>
		<expr_stmt><expr><name>ic_proxy_peer_relistening</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_server_peer_listener_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The client listener is closed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_client_listener_on_closed</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: client listener: closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* A new client listener will be created on the next timer callback */</comment>
	<expr_stmt><expr><name>ic_proxy_client_listening</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * New client arrives.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_on_new_client</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: new client error: %s"</literal></expr></argument>,
					 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <name>server</name></expr></argument>,
				 <argument><expr><name>ic_proxy_server_client_listener_on_closed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: new client to the server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>ic_proxy_client_new</name><argument_list>(<argument><expr><name><name>server</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_accept</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>ic_proxy_client_get_stream</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: fail to accept new client: %s"</literal></expr></argument>,
					 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ic_proxy_client_read_hello</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Setup the client listener.
 *
 * The client listener listens on a domain socket, the client connections will
 * come through it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_client_listener_init</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uv_pipe_t</name>  <modifier>*</modifier></type><name>listener</name> <init>= <expr><operator>&amp;</operator><name>ic_proxy_client_listener</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ic_proxy_client_listening</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ic_proxy_build_server_sock_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* FIXME: do not unlink here */</comment>
	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: unlink(%s) ..."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: setting up client listener on address %s"</literal></expr></argument>,
				 <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_pipe_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
					 <argument><expr><literal type="string">"ic-proxy: fail to init a client listener: %s"</literal></expr></argument>,
					 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_pipe_bind</name><argument_list>(<argument><expr><name>listener</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: pipe: fail to bind(%s): %s"</literal></expr></argument>,
					 <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_listen</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <name>listener</name></expr></argument>,
					<argument><expr><name>IC_PROXY_BACKLOG</name></expr></argument>, <argument><expr><name>ic_proxy_server_on_new_client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: pipe: fail to listen on path %s: %s"</literal></expr></argument>,
					 <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>uv_fileno</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <name>listener</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: pipe: listening on socket %d"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Dump the inode of the domain socket file, this helps us to know that the
	 * file is replaced by someone.  This is not likely to happen, we have
	 * carefully choosen the file path to not conflict with each other.
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type>	<name>st</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: dev=%lu, inode=%lu, path=%s"</literal></expr></argument>,
					 <argument><expr><name><name>st</name><operator>.</operator><name>st_dev</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_ino</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>ic_proxy_client_listening</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Establish the peer connections.
 *
 * A proxy connects to all the other proxies, all these connections form the
 * proxy network.  Only one connection is needed between 2 proxies, this is
 * ensured by a policy that "proxy X connects to proxy Y iff X &gt; Y".  To support
 * mirror promotion, X attempts to connect to Y even if Y is a mirror, or even
 * if we have connected to Y's primary.  In fact we do not know whether Y is a
 * mirror or not, and we do not care.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_ensure_peers</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>ic_proxy_addrs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name> <operator>&gt;=</operator> <name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name> <operator>==</operator> <name><name>GpIdentity</name><operator>.</operator><name>dbid</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* do not connect to my primary / mirror */</comment>

		<comment type="block">/*
		 * First get the peer with the peer id, then connect to it.  The peer
		 * can be a placeholder, can be in the progress of a connection, or can
		 * be connected, the ic_proxy_peer_connect() function will take care of
		 * the state.
		 */</comment>
		<expr_stmt><expr><name>peer</name> <operator>=</operator> <call><name>ic_proxy_peer_blessed_lookup</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_peer_connect</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Drop legacy peers.
 *
 * The list ic_proxy_removed_addrs contains both removed and updated addresses,
 * the corresponding peers must be disconnected before taking further actions.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_drop_legacy_peers</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyAddr</name> <modifier>*</modifier></type><name>myaddr</name> <init>= <expr><call><name>ic_proxy_get_my_addr</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Also take the chance to check the peer listener.
	 *
	 * If myaddr cannot be found at all, the address must have been removed,
	 * close the current listener.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>myaddr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ic_proxy_server_peer_listener_reinit</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>ic_proxy_removed_addrs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Also take the chance to check the peer listener.
		 *
		 * If myaddr appears in the removed list, then the address must have
		 * been changed or removed, no need to compare the sockaddrs again.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>myaddr</name> <operator>&amp;&amp;</operator> <name><name>myaddr</name><operator>-&gt;</operator><name>dbid</name></name> <operator>==</operator> <name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ic_proxy_server_peer_listener_reinit</name><argument_list>(<argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Refer to ic_proxy_server_ensure_peers() on why we need below checks.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name> <operator>&gt;=</operator> <name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name> <operator>==</operator> <name><name>GpIdentity</name><operator>.</operator><name>dbid</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt> <comment type="block">/* do not connect to my primary / mirror */</comment>

		<expr_stmt><expr><name>peer</name> <operator>=</operator> <call><name>ic_proxy_peer_lookup</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>peer</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ic_proxy_peer_disconnect</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Timer handler.
 *
 * This is used to maintain the proxy-proxy network, as well as the client and
 * peer listeners.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_on_timer</name><parameter_list>(<parameter><decl><type><name>uv_timer_t</name> <modifier>*</modifier></type><name>timer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ic_proxy_server_peer_listener_init</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_server_ensure_peers</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_server_client_listener_init</name><argument_list>(<argument><expr><name><name>timer</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Signal handler.
 *
 * Signals are handled via the signalfd() call in libuv, so this is a normal
 * callback as others, nothing special, errors can be raised, too.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_on_signal</name><parameter_list>(<parameter><decl><type><name>uv_signal_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_TERSE</name></expr></argument>,
		   <argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: received signal %d"</literal></expr></argument>, <argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>signum</name> <operator>==</operator> <name>SIGHUP</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ProcessConfigFile</name><argument_list>(<argument><expr><name>PGC_SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ic_proxy_reload_addresses</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_server_drop_legacy_peers</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ic_proxy_server_peer_listener_init</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_server_ensure_peers</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_server_client_listener_init</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>uv_stop</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * callback when received data from ic_proxy_postmaster_pipe
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_server_on_read_postmaster_pipe</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* return the pkt to cache freelist, we don't care about the buffer content */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* nread = 0 means EAGAIN and EWOULDBLOCK, while nread = EOF means postmaster is dead */</comment>
	<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>==</operator> <name>UV_EOF</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: read on postmaster death monitoring pipe failed: %s"</literal></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>nread</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: unexpected data in postmaster death monitoring pipe with length: %ld"</literal></expr></argument>, <argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The main loop of the ic-proxy.
 */</comment>
<function><type><name>int</name></type>
<name>ic_proxy_server_main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_TERSE</name></expr></argument>,
		   <argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: server setting up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_pkt_cache_init</name><argument_list>(<argument><expr><name>IC_PROXY_MAX_PKT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_reload_addresses</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_router_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_peer_table_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_client_table_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ic_proxy_peer_listening</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ic_proxy_peer_relistening</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ic_proxy_client_listening</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_signal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic_proxy_server_signal_hup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_signal_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_signal_hup</name></expr></argument>, <argument><expr><name>ic_proxy_server_on_signal</name></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_signal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic_proxy_server_signal_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_signal_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_signal_int</name></expr></argument>, <argument><expr><name>ic_proxy_server_on_signal</name></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* on master */</comment>
	<expr_stmt><expr><call><name>uv_signal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic_proxy_server_signal_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_signal_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_signal_term</name></expr></argument>, <argument><expr><name>ic_proxy_server_on_signal</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* on segments */</comment>
	<expr_stmt><expr><call><name>uv_signal_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic_proxy_server_signal_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_signal_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_signal_stop</name></expr></argument>, <argument><expr><name>ic_proxy_server_on_signal</name></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* TODO: we could stop the timer if all the peers are connected */</comment>
	<expr_stmt><expr><call><name>uv_timer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic_proxy_server_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_timer_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_timer</name></expr></argument>, <argument><expr><name>ic_proxy_server_on_timer</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* monitor the postmaster pipe to check whether postmaster is still alive */</comment>
	<expr_stmt><expr><call><name>uv_pipe_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic_proxy_postmaster_pipe</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_pipe_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_postmaster_pipe</name></expr></argument>, <argument><expr><name><name>postmaster_alive_fds</name><index>[<expr><name>POSTMASTER_FD_WATCH</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ic_proxy_postmaster_pipe</name></expr></argument>, <argument><expr><name>ic_proxy_pkt_cache_alloc_buffer</name></expr></argument>,
				  <argument><expr><name>ic_proxy_server_on_read_postmaster_pipe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_TERSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: server running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We're now ready to receive signals */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * return non-zero value so we are restarted by the postmaster, but this
	 * behavior can be controled by calling ic_proxy_server_quit()
	 */</comment>
	<expr_stmt><expr><name>ic_proxy_server_exit_code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_loop_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_TERSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: server closing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_client_table_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_peer_table_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_router_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_build_server_sock_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	elogif(gp_log_interconnect &gt;= GPVARS_VERBOSITY_DEBUG5, LOG, "unlink(%s) ...", path);
	unlink(path);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>ic_proxy_pkt_cache_uninit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_TERSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: server closed with code %d"</literal></expr></argument>,
				 <argument><expr><name>ic_proxy_server_exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ic_proxy_server_exit_code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ic_proxy_server_quit</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>relaunch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_TERSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: server quiting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>relaunch</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* return non-zero value so we are restarted by the postmaster */</comment>
		<expr_stmt><expr><name>ic_proxy_server_exit_code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>ic_proxy_server_exit_code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * we can't close the loop directly, we need to properly shutdown all the
	 * clients first.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ic_proxy_peer_listening</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* cancel pending relistening request */</comment>
		<expr_stmt><expr><name>ic_proxy_peer_relistening</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>uv_unref</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ic_proxy_peer_listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ic_proxy_peer_listener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ic_proxy_client_listening</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>uv_unref</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ic_proxy_client_listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ic_proxy_client_listener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>uv_timer_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ic_proxy_server_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_unref</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ic_proxy_server_signal_hup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_unref</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ic_proxy_server_signal_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_unref</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>ic_proxy_server_signal_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	uv_client_table_disconnect_all();
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * do not close the loop directly, it will quit automatically after all the
	 * clients are closed.
	 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	uv_loop_close(loop);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
