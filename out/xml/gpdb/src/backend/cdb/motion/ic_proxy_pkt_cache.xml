<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/ic_proxy_pkt_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ic_proxy_pkt_cache.c
 *
 *    Interconnect Proxy Packet Cache
 *
 * Libuv needs us to allocate the packet buffer, and it does not reuse the
 * buffer, so it is expansive to repeatedly allocating and freeing the packets.
 *
 * To make it more efficient we save all the freed packets in a free list, and
 * reuse them later.
 *
 * All the allocated packets are of the same size, the max possible packet
 * size, discarding the size requested by libuv, so the packet buffer can be
 * safely reused later.
 *
 * TODO:
 * - many libuv requests, such as uv_write(), needs us to allocate the request
 *   buffer, they are not reused, too, we could consider saving them in a
 *   free list similarly, or even share the same free list with packets;
 *
 *
 * Copyright (c) 2020-Present VMware, Inc. or its affiliates.
 *
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_pkt_cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>ICProxyPktCache</name></name></type> <name>ICProxyPktCache</name>;</typedef>

<comment type="block">/*
 * A simple free list.
 */</comment>
<struct>struct <name>ICProxyPktCache</name>
<block>{
	<decl_stmt><decl><type><name>ICProxyPktCache</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>

<struct><specifier>static</specifier> struct 
<block>{
	<decl_stmt><decl><type><name>ICProxyPktCache</name> <modifier>*</modifier></type><name>freelist</name></decl>;</decl_stmt>	<comment type="block">/* the free list */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>pkt_size</name></decl>;</decl_stmt>		<comment type="block">/* the packet size for all the packets */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>n_free</name></decl>;</decl_stmt>			<comment type="block">/* count of packets in the free list */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>n_total</name></decl>;</decl_stmt>		<comment type="block">/* count of all the allocated packets */</comment>
}</block> <decl><name>ic_proxy_pkt_cache</name></decl>;</struct>

<comment type="block">/*
 * Initialize the packet cache.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_pkt_cache_init</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>pkt_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>pkt_size</name></name> <operator>=</operator> <name>pkt_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_free</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_total</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cleanup the packet cache.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_pkt_cache_uninit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyPktCache</name> <modifier>*</modifier></type><name>cpkt</name> <init>= <expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name> <operator>=</operator> <name><name>cpkt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>cpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate a packet from the cache.
 *
 * If the free list is empty a new packet is allocated and returned, otherwise
 * one is detached from the free list and returned directly.
 *
 * If pkt_size is not NULL it is set with the actual packet buffer size.
 *
 * Return the packet buffer.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>ic_proxy_pkt_cache_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pkt_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPktCache</name> <modifier>*</modifier></type><name>cpkt</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cpkt</name> <operator>=</operator> <name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name> <operator>=</operator> <name><name>cpkt</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_free</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>cpkt</name> <operator>=</operator> <call><name>ic_proxy_alloc</name><argument_list>(<argument><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>pkt_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_total</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pkt_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>pkt_size</name> <operator>=</operator> <name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>pkt_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="block">/* for debug purpose */</comment>
	memset(cpkt, 0, ic_proxy_pkt_cache.pkt_size);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: pkt-cache: allocated, %d free, %d total"</literal></expr></argument>,
				 <argument><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_free</name></name></expr></argument>, <argument><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>cpkt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate a packet from the cache, as a libuv callback.
 *
 * This is a wrapper of ic_proxy_pkt_cache_alloc(), this function can be used
 * as the libuv uv_alloc_cb callback.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_pkt_cache_alloc_buffer</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name> <operator>=</operator> <call><name>ic_proxy_pkt_cache_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return a packet to the free list.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_pkt_cache_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPktCache</name> <modifier>*</modifier></type><name>cpkt</name> <init>= <expr><name>pkt</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="block">/* for debug purpose */</comment>
	memset(cpkt, 0, ic_proxy_pkt_cache.pkt_size);

	for (ICProxyPktCache *iter = ic_proxy_pkt_cache.freelist;
		 iter; iter = iter-&gt;next)
		Assert(iter != cpkt);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* need to limit the size of the free list */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_total</name></name> <operator>&gt;</operator> <name>IC_PROXY_PKT_CACHE_MAX_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_total</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>cpkt</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>freelist</name></name> <operator>=</operator> <name>cpkt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_free</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: pkt-cache: recycled, %d free, %d total"</literal></expr></argument>,
					 <argument><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_free</name></name></expr></argument>, <argument><expr><name><name>ic_proxy_pkt_cache</name><operator>.</operator><name>n_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
