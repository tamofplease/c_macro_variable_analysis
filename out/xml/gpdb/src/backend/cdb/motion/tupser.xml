<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/tupser.c"><comment type="block">/*-------------------------------------------------------------------------
 * tupser.c
 *	   Functions for serializing and deserializing a heap tuple.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/motion/tupser.c
 *
 *      Reviewers: jzhang, ftian, tkordas
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/memtup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tuptoaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbmotion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbsrlz.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/tupser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Transient record types table is sent to upsteam via a specially constructed
 * chunk, with a special "tuple length".
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECORD_CACHE_MAGIC_TUPLEN</name></cpp:macro>	<cpp:value>-1</cpp:value></cpp:define>

<comment type="block">/* A MemoryContext used within the tuple serialize code, so that freeing of
 * space is SUPAFAST.  It is initialized in the first call to InitSerTupInfo()
 * since that must be called before any tuple serialization or deserialization
 * work can be done.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>s_tupSerMemCtxt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>addByteStringToChunkList</name><parameter_list>(<parameter><decl><type><name>TupleChunkList</name></type> <name>tcList</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>TupleChunkListCache</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addCharToChunkList</name><parameter_list>(<parameter><type><name>tcList</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>							\
	<cpp:value>do															\
	{															\
		char y = (x);											\
		addByteStringToChunkList((tcList), (char *)&amp;y, sizeof(y), (c));	\
	} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>addInt32ToChunkList</name><parameter_list>(<parameter><type><name>tcList</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>							\
	<cpp:value>do															\
	{															\
		int32 y = (x);											\
		addByteStringToChunkList((tcList), (char *)&amp;y, sizeof(y), (c));	\
	} while (0)</cpp:value></cpp:define>


<comment type="block">/* Look up all of the information that SerializeTuple() and DeserializeTuple()
 * need to perform their jobs quickly.	Also, scratchpad space is allocated
 * for serialization and desrialization of datum values, and for formation/
 * deformation of tuples themselves.
 *
 * NOTE:  This function allocates various data-structures, but it assumes that
 *		  the current memory-context is acceptable.  So the caller should set
 *		  the desired memory-context before calling this function.
 */</comment>
<function><type><name>void</name></type>
<name>InitSerTupInfo</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>, <parameter><decl><type><name>SerTupInfo</name> <modifier>*</modifier></type><name>pSerInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>numAttrs</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>tupdesc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>pSerInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>s_tupSerMemCtxt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Create tuple-serialization memory context. */</comment>
		<expr_stmt><expr><name>s_tupSerMemCtxt</name> <operator>=</operator>
			<call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
								  <argument><expr><literal type="string">"TupSerMemCtxt"</literal></expr></argument>,
								  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,	<comment type="block">/* always have some
																 * memory */</comment>
								  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
								  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set contents to all 0, just to make things clean and easy. */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pSerInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SerTupInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Store the tuple-descriptor so we can use it later. */</comment>
	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>tupdesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>has_record_types</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we have some attributes, go ahead and prepare the information for
	 * each attribute in the descriptor.  Otherwise, we can return right away.
	 */</comment>
	<expr_stmt><expr><name>numAttrs</name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>numAttrs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>myinfo</name></name> <operator>=</operator> <operator>(</operator><name>SerAttrInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>numAttrs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SerAttrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>numAttrs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>nulls</name></name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>numAttrs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numAttrs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SerAttrInfo</name> <modifier>*</modifier></type><name>attrInfo</name> <init>= <expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>myinfo</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Get attribute's data-type Oid.  This lets us shortcut the comm
		 * operations for some attribute-types.
		 */</comment>
		<expr_stmt><expr><name><name>attrInfo</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>atttypid</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Serialization will be performed at a high level abstraction, we
		 * only care about whether it's toasted or pass-by-value or a CString,
		 * so only track the high level type information.
		 */</comment>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>typeTuple</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>pt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>typeTuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>attrInfo</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>typeTuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name><name>attrInfo</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>pt</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>typeTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Consider any non-basic types as potential containers of record
			 * types
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>typtype</name></name> <operator>!=</operator> <name>TYPTYPE_BASE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>has_record_types</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pt</name><operator>-&gt;</operator><name>typisdefined</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"type %s is only a shell"</literal></expr></argument>,
								<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>attrInfo</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>attrInfo</name><operator>-&gt;</operator><name>typlen</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>attrInfo</name><operator>-&gt;</operator><name>typbyval</name></name> <operator>=</operator> <name><name>pt</name><operator>-&gt;</operator><name>typbyval</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>typeTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/* Free up storage in a previously initialized SerTupInfo struct. */</comment>
<function><type><name>void</name></type>
<name>CleanupSerTupInfo</name><parameter_list>(<parameter><decl><type><name>SerTupInfo</name> <modifier>*</modifier></type><name>pSerInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>pSerInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Free any old data.
	 *
	 * NOTE:  This works because data-structure was bzero()ed in init call.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>myinfo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>myinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>myinfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>values</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>nulls</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>nulls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>tupdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name><operator>.</operator><name>items</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>item</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name><operator>.</operator><name>items</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name><operator>.</operator><name>items</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * When manipulating chunks before transmit, it is important to notice that the
 * tcItem's chunk_length field *includes* the 4-byte chunk header, but that the
 * length within the header itself does not. Getting the two confused results
 * heap overruns and that way lies pain.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>addByteStringToChunkList</name><parameter_list>(<parameter><decl><type><name>TupleChunkList</name></type> <name>tcList</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datalen</name></decl></parameter>, <parameter><decl><type><name>TupleChunkListCache</name> <modifier>*</modifier></type><name>chunkCache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>tcItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>remain</name></decl>,
				<decl><type ref="prev"/><name>curSize</name></decl>,
				<decl><type ref="prev"/><name>available</name></decl>,
				<decl><type ref="prev"/><name>copyLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>tcList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add onto last chunk, lists always start with one chunk */</comment>
	<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name></expr>;</expr_stmt>

	<comment type="block">/* we'll need to add chunks */</comment>
	<expr_stmt><expr><name>remain</name> <operator>=</operator> <name>datalen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>curSize</name> <operator>=</operator> <name><name>tcItem</name><operator>-&gt;</operator><name>chunk_length</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>available</name> <operator>=</operator> <name><name>tcList</name><operator>-&gt;</operator><name>max_chunk_length</name></name> <operator>-</operator> <name>curSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>copyLen</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>available</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>copyLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * make sure we don't stomp on the serialized header, chunk_length
			 * already accounts for it
			 */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_data</name></name> <operator>+</operator> <name>curSize</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>copyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>remain</name> <operator>-=</operator> <name>copyLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>copyLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>serialized_data_length</name></name> <operator>+=</operator> <name>copyLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>curSize</name> <operator>+=</operator> <name>copyLen</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>SetChunkDataSize</name><argument_list>(<argument><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_data</name></name></expr></argument>, <argument><expr><name>curSize</name> <operator>-</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_length</name></name> <operator>=</operator> <name>curSize</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>remain</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <call><name>getChunkFromCache</name><argument_list>(<argument><expr><name>chunkCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_length</name></name> <operator>=</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_data</name></name></expr></argument>, <argument><expr><name>TC_PARTIAL_MID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendChunkToTCList</name><argument_list>(<argument><expr><name>tcList</name></expr></argument>, <argument><expr><name>tcItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>remain</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert RecordCache into a byte-sequence, and store it directly
 * into a chunklist for transmission.
 *
 * This code is based on the printtup_internal_20() function in printtup.c.
 */</comment>
<function><type><name>void</name></type>
<name>SerializeRecordCacheIntoChunks</name><parameter_list>(<parameter><decl><type><name>SerTupInfo</name> <modifier>*</modifier></type><name>pSerInfo</name></decl></parameter>,
							   <parameter><decl><type><name>TupleChunkList</name></type> <name>tcList</name></decl></parameter>,
							   <parameter><decl><type><name>MotionConn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>tcItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCtxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>typelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>tcList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>pSerInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get ready to go */</comment>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>num_chunks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>serialized_data_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>max_chunk_length</name></name> <operator>=</operator> <name>Gp_max_tuple_chunk_size</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <call><name>getChunkFromCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* assume that we'll take a single chunk */</comment>
	<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_data</name></name></expr></argument>, <argument><expr><name>TC_WHOLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_length</name></name> <operator>=</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendChunkToTCList</name><argument_list>(<argument><expr><name>tcList</name></expr></argument>, <argument><expr><name>tcItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name>s_tupSerMemCtxt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * To avoid inconsistency of record cache between sender and receiver in
	 * the same motion, send the serialized record cache to receiver before
	 * the first tuple is sent, the receiver is responsible for registering
	 * the records to its own local cache and remapping the typmod of tuples
	 * sent by sender.
	 */</comment>
	<expr_stmt><expr><name>oldCtxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>s_tupSerMemCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>typelist</name> <operator>=</operator> <call><name>build_tuple_node_list</name><argument_list>(<argument><expr><name><name>conn</name><operator>-&gt;</operator><name>sent_record_typmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>serializeNode</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>typelist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * we use magic tuplen to identify that this chunk (or list of chunks)
	 * actually carries the serialized record cache table.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>tupbodylen</name> <init>= <expr><name>RECORD_CACHE_MAGIC_TUPLEN</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>addByteStringToChunkList</name><argument_list>(<argument><expr><name>tcList</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tupbodylen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Now write out the real length */</comment>
	<expr_stmt><expr><call><name>addByteStringToChunkList</name><argument_list>(<argument><expr><name>tcList</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>addByteStringToChunkList</name><argument_list>(<argument><expr><name>tcList</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * if we have more than 1 chunk we have to set the chunk types on our
	 * first chunk and last chunk
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tcList</name><operator>-&gt;</operator><name>num_chunks</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>first</name></decl>,
					<decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>first</name> <operator>!=</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>last</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>chunk_data</name></name></expr></argument>, <argument><expr><name>TC_PARTIAL_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>chunk_data</name></name></expr></argument>, <argument><expr><name>TC_PARTIAL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * any intervening chunks are already set to TC_PARTIAL_MID when
		 * allocated
		 */</comment>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>CandidateForSerializeDirect</name><parameter_list>(<parameter><decl><type><name>int16</name></type> <name>targetRoute</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directTransportBuffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>targetRoute</name> <operator>!=</operator> <name>BROADCAST_SEGIDX</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>pri</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>prilen</name></name> <operator>&gt;</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *
 * First try to serialize a tuple directly into a buffer.
 *
 * We're called with at least enough space for a tuple-chunk-header.
 *
 * Convert a HeapTuple into a byte-sequence, and store it directly
 * into a chunklist for transmission.
 *
 * This code is based on the printtup_internal_20() function in printtup.c.
 */</comment>
<function><type><name>int</name></type>
<name>SerializeTuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>SerTupInfo</name> <modifier>*</modifier></type><name>pSerInfo</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>directTransportBuffer</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>TupleChunkList</name></type> <name>tcList</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>targetRoute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>                <name>natts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>                <name>dataSize</name> <init>= <expr><name>TUPLE_CHUNK_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>          <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>tcItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MinimalTuple</name></type>       <name>mintuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>               <name>shouldFreeTuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>               <modifier>*</modifier></type><name>tupbody</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>tupbodylen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>       <name>tuplen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>               <name>hasExternalAttr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>pSerInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>pSerInfo</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>natts</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>CandidateForSerializeDirect</name><argument_list>(<argument><expr><name>targetRoute</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* TC_EMPTY is just one chunk */</comment>
		<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pri</name></name></expr></argument>, <argument><expr><name>TC_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetChunkDataSize</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pri</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>TUPLE_CHUNK_HEADER_SIZE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>num_chunks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>serialized_data_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcList</name><operator>-&gt;</operator><name>max_chunk_length</name></name> <operator>=</operator> <name>Gp_max_tuple_chunk_size</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * GPDB_12_MERGE_FIXME: This used to support serializing memtuples directly.
	 * That got removed with MinimalTuples in the merge. Resurrect the MemtUple
	 * support if there's a performance benefit.
	 */</comment>
	<comment type="block">/* Check if the slot has external attribute */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>hasExternalAttr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If the slot contains any toasted attributes, detoast them now before serializing
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>hasExternalAttr</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>values</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr>;</expr_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>val</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name> <operator>&amp;&amp;</operator> <name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>VARATT_IS_EXTERNAL</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>values</name> <operator>==</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>values</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>, <argument><expr><name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>heap_tuple_fetch_attr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>varlena</name> <operator>*</operator><operator>)</operator>
																<call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>mintuple</name> <operator>=</operator> <call><name>heap_form_minimal_tuple</name><argument_list>(<argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>,
										   <argument><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>values</name> <operator>!=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>shouldFreeTuple</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>mintuple</name> <operator>=</operator> <call><name>ExecFetchSlotMinimalTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shouldFreeTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>tupbody</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>mintuple</name> <operator>+</operator> <name>MINIMAL_TUPLE_DATA_OFFSET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupbodylen</name> <operator>=</operator> <name><name>mintuple</name><operator>-&gt;</operator><name>t_len</name></name> <operator>-</operator> <name>MINIMAL_TUPLE_DATA_OFFSET</name></expr>;</expr_stmt>

	<comment type="block">/* total on-wire footprint: */</comment>
	<expr_stmt><expr><name>tuplen</name> <operator>=</operator> <name>tupbodylen</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CandidateForSerializeDirect</name><argument_list>(<argument><expr><name>targetRoute</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<name>tuplen</name> <operator>+</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name> <operator>&lt;=</operator> <name><name>b</name><operator>-&gt;</operator><name>prilen</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * The tuple fits in the direct transport buffer.
		 */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pri</name></name> <operator>+</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupbodylen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tupbodylen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pri</name></name> <operator>+</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>tupbody</name></expr></argument>, <argument><expr><name>tupbodylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>dataSize</name> <operator>+=</operator> <name>tuplen</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pri</name></name></expr></argument>, <argument><expr><name>TC_WHOLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetChunkDataSize</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>pri</name></name></expr></argument>, <argument><expr><name>dataSize</name> <operator>-</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>shouldFreeTuple</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>mintuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>dataSize</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If direct in-line serialization failed then we fallback to chunked
	 * out-of-line serialization.
	 */</comment>
	<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <call><name>getChunkFromCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_data</name></name></expr></argument>, <argument><expr><name>TC_WHOLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_length</name></name> <operator>=</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendChunkToTCList</name><argument_list>(<argument><expr><name>tcList</name></expr></argument>, <argument><expr><name>tcItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name>s_tupSerMemCtxt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>addByteStringToChunkList</name><argument_list>(<argument><expr><name>tcList</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tupbodylen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tupbodylen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>addByteStringToChunkList</name><argument_list>(<argument><expr><name>tcList</name></expr></argument>, <argument><expr><name>tupbody</name></expr></argument>, <argument><expr><name>tupbodylen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSerInfo</name><operator>-&gt;</operator><name>chunkCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * GPDB_12_MERGE_FIXME: This function does not use this context. This context
	 * is only used in SerializeRecordCacheIntoChunks(). We need to find a better
	 * place for resetting it, or eliminating the needs for this context.
	 */</comment>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>s_tupSerMemCtxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * if we have more than 1 chunk we have to set the chunk types on our
	 * first chunk and last chunk
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>tcList</name><operator>-&gt;</operator><name>num_chunks</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>first</name></decl>,
					<decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>tcList</name><operator>-&gt;</operator><name>p_last</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>first</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>first</name> <operator>!=</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>last</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>first</name><operator>-&gt;</operator><name>chunk_data</name></name></expr></argument>, <argument><expr><name>TC_PARTIAL_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SetChunkType</name><argument_list>(<argument><expr><name><name>last</name><operator>-&gt;</operator><name>chunk_data</name></name></expr></argument>, <argument><expr><name>TC_PARTIAL_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * any intervening chunks are already set to TC_PARTIAL_MID when
		 * allocated
		 */</comment>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>shouldFreeTuple</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>mintuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * performed "out-of-line" serialization
	 */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Reassemble and deserialize a list of tuple chunks, into a tuple.
 */</comment>
<function><type><name>MinimalTuple</name></type>
<name>CvtChunksToTup</name><parameter_list>(<parameter><decl><type><name>TupleChunkList</name></type> <name>tcList</name></decl></parameter>, <parameter><decl><type><name>SerTupInfo</name> <modifier>*</modifier></type><name>pSerInfo</name></decl></parameter>, <parameter><decl><type><name>TupleRemapper</name> <modifier>*</modifier></type><name>remapper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>serData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>serDataMustFree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>tcItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleChunkListItem</name></type> <name>firstTcItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MinimalTuple</name></type> <name>tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleChunkType</name></type> <name>tcType</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>tcList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>pSerInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Parse the first chunk, and reassemble the chunks if needed.
	 */</comment>
	<expr_stmt><expr><name>firstTcItem</name> <operator>=</operator> <name><name>tcList</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GetChunkType</name><argument_list>(<argument><expr><name>firstTcItem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tcType</name> <operator>==</operator> <name>TC_WHOLE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>firstTcItem</name><operator>-&gt;</operator><name>p_next</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Single chunk's type must be TC_WHOLE."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * We cheat a little, and point the StringInfo's buffer directly to the
		 * incoming data. This saves a palloc and memcpy.
		 *
		 * NB: We mustn't modify the string buffer!
		 */</comment>
		<expr_stmt><expr><name><name>serData</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>GetChunkDataPtr</name><argument_list>(<argument><expr><name>firstTcItem</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>serData</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>serData</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name><name>firstTcItem</name><operator>-&gt;</operator><name>chunk_length</name></name> <operator>-</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>serData</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>serDataMustFree</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>tcType</name> <operator>==</operator> <name>TC_EMPTY</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * the sender is indicating that there was a row with no
		 * attributes: return a NULL tuple
		 */</comment>
		<return>return <expr><call><name>heap_form_minimal_tuple</name><argument_list>(<argument><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></argument>, <argument><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>values</name></name></expr></argument>, <argument><expr><name><name>pSerInfo</name><operator>-&gt;</operator><name>nulls</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>tcType</name> <operator>==</operator> <name>TC_PARTIAL_START</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Re-assemble the chunks into a contiguous buffer..
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>total_len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

		<comment type="block">/* Sanity-check the chunk types, and compute total length. */</comment>
		<expr_stmt><expr><name>total_len</name> <operator>=</operator> <name><name>firstTcItem</name><operator>-&gt;</operator><name>chunk_length</name></name> <operator>-</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <name><name>firstTcItem</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>tcItem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>this_len</name> <init>= <expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_length</name></name> <operator>-</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>GetChunkType</name><argument_list>(<argument><expr><name>tcItem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>tcItem</name><operator>-&gt;</operator><name>p_next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>tcType</name> <operator>!=</operator> <name>TC_PARTIAL_END</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"last chunk of collection must have type TC_PARTIAL_END"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>tcType</name> <operator>!=</operator> <name>TC_PARTIAL_MID</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"middle chunk of collection must have type TC_PARTIAL_MID"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>total_len</name> <operator>+=</operator> <name>this_len</name></expr>;</expr_stmt>

			<comment type="block">/* make sure we don't overflow total_len */</comment>
			<if_stmt><if>if <condition>(<expr><name>this_len</name> <operator>&gt;</operator> <name>MaxAllocSize</name> <operator>||</operator> <name>total_len</name> <operator>&gt;</operator> <name>MaxAllocSize</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"chunked tuple is too large"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* go to the next chunk. */</comment>
			<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <name><name>tcItem</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><name><name>serData</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>total_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>serData</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>serData</name><operator>.</operator><name>maxlen</name></name> <operator>=</operator> <name>total_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>serData</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>serDataMustFree</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="block">/* Copy the data from each chunk into the buffer.  Don't include the headers! */</comment>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>serData</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <name>firstTcItem</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>tcItem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>this_len</name> <init>= <expr><name><name>tcItem</name><operator>-&gt;</operator><name>chunk_length</name></name> <operator>-</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,
				   <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>GetChunkDataPtr</name><argument_list>(<argument><expr><name>tcItem</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>TUPLE_CHUNK_HEADER_SIZE</name></expr></argument>,
				   <argument><expr><name>this_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>this_len</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>tcItem</name> <operator>=</operator> <name><name>tcItem</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * The caller handles TC_END_OF_STREAM directly, so we should not see
		 * them here.
		 *
		 * TC_PARTIAL_MID/END should not appear at the beginning of a chunk
		 * list, without TC_PARTIAL_START.
		 */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROTOCOL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected tuple chunk type %d at beginning of chunk list"</literal></expr></argument>, <argument><expr><name>tcType</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* We now have the reassembled data in 'serData'. Deserialize it back to a tuple. */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name> <init>= <expr><name><name>serData</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>tupbodylen</name></decl>;</decl_stmt>

		<comment type="block">/* read length */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tupbodylen</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tupbodylen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tupbodylen</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tupbodylen</name> <operator>==</operator> <name>RECORD_CACHE_MAGIC_TUPLEN</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* a special tuple with record type cache */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>size</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>typelist</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

			<expr_stmt><expr><name>typelist</name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>deserializeNode</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>TRHandleTypeLists</name><argument_list>(<argument><expr><name>remapper</name></expr></argument>, <argument><expr><name>typelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Free up memory we used. */</comment>
			<if_stmt><if>if <condition>(<expr><name>serDataMustFree</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>serData</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* A normal MinimalTuple */</comment>
			<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tuplen</name> <init>= <expr><name>tupbodylen</name> <operator>+</operator> <name>MINIMAL_TUPLE_DATA_OFFSET</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tupbody</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>tuplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tup</name><operator>-&gt;</operator><name>t_len</name></name> <operator>=</operator> <name>tuplen</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>tupbody</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>tup</name> <operator>+</operator> <name>MINIMAL_TUPLE_DATA_OFFSET</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tupbody</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>tupbodylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<comment type="block">/* Free up memory we used. */</comment>
	<if_stmt><if>if <condition>(<expr><name>serDataMustFree</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>serData</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>tup</name></expr>;</return>
</block_content>}</block></function>
</unit>
