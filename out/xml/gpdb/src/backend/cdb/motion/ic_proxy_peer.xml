<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/ic_proxy_peer.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ic_proxy_server_peer.c
 *
 *    Interconnect Proxy Peer
 *
 * A peer lives in the proxy bgworker and connects to a proxy on an other
 * segment.  When there are N segments, including the master, a proxy bgworker
 * needs to connect to all the other (N - 1) segments, the same amount of peers
 * are needed, too.
 *
 * A peer is identified with the dbid, so two different peers are used to
 * connect to a remote segment's primary and mirror.  The proxy bgworker is not
 * launched on a mirror until it is promoted, so most of time there is only the
 * peer to the segment's primary, but there is a chance for the peer to the
 * mirror to live together with the primary one, this happends during the
 * mirror promotion.
 *
 * There are only one proxy connection between two proxies, a rule is put here
 * that the proxy on segment X connects to the one on segment Y iff X &gt; Y, not
 * the reverse.  This rule is true even if X or Y crashes and relaunches the
 * proxy bgworker.
 *
 * Peers always communicate to each other via ICProxyPkt, a connection must
 * begin with the hand shaking messages.  A hand shaking is needed for a pair
 * of peers to know the information of each other, such as the dbids.
 *
 * Clients can send packets before the peer hand shaking is finished, in such a
 * case a placeholder is registered to hold the early outgoing packets.  Once
 * the peer finishes the hand shaking it replaces the placeholder and handles
 * these early packets in the arriving order.
 *
 * Incoming packets, the one received from a remote peer, is never cached in
 * the peer, they are routed to the target clients, or their placeholders,
 * immediately.
 *
 *
 * Copyright (c) 2020-Present VMware, Inc. or its affiliates.
 *
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_pkt_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_addr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>


<comment type="block">/*
 * The peer register table, the peer with dbid is stored in [dbid].
 *
 * TODO: not using a fixed length array.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ICProxyPeer</name> <modifier>*</modifier></type><name><name>ic_proxy_peers</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ic_proxy_peer_shutdown</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ic_proxy_peer_handle_out_cache</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ic_proxy_peer_on_data_pkt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,
									  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ic_proxy_peer_send_message</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>,
									   <parameter><decl><type><name>ICProxyMessageType</name></type> <name>mtype</name></decl></parameter>,
									   <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
									   <parameter><decl><type><name>ic_proxy_sent_cb</name></type> <name>callback</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Build a delayed packet.
 *
 * We'll take the packet's ownership.
 */</comment>
<function><type><name>ICProxyDelay</name> <modifier>*</modifier></type>
<name>ic_proxy_peer_build_delay</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
						  <parameter><decl><type><name>ic_proxy_sent_cb</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyDelay</name> <modifier>*</modifier></type><name>delay</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>ic_proxy_new</name><argument_list>(<argument><expr><name>ICProxyDelay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>delay</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <ternary><condition><expr><name>peer</name></expr> ?</condition><then> <expr><name><name>peer</name><operator>-&gt;</operator><name>content</name></name></expr> </then><else>: <expr><name>IC_PROXY_INVALID_CONTENT</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>delay</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <ternary><condition><expr><name>peer</name></expr> ?</condition><then> <expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr> </then><else>: <expr><name>IC_PROXY_INVALID_DBID</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>delay</name><operator>-&gt;</operator><name>pkt</name></name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>delay</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>delay</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>

	<return>return <expr><name>delay</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize the peer register table.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_peer_table_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ic_proxy_peers</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ic_proxy_peers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ic_proxy_peer_table_uninit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * nothing to do for the peers table:
	 * - no need to clear the peers table, we will do that in init();
	 * - no need to free the peers, they should already freed themselves;
	 */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Update the peer name from the state bits.
 *
 * This function is usually called during logging, so it is good practice not
 * to generate messages in this function.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_update_name</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_storage</name></name></type> <name>peeraddr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>addrlen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>peeraddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sockname</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>peername</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sockport</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>peerport</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Show the tcp level connection information in the name, they are not very
	 * useful, though.
	 *
	 * Return codes from ic_proxy_extract_addr() are ignored, as logging should
	 * be avoided in this place.  On the other hand the failures are reflected
	 * in the hostnames and ports, as well as the peer name, so we know it
	 * happens.
	 */</comment>
	<expr_stmt><expr><call><name>uv_tcp_getsockname</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peeraddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_extract_sockaddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peeraddr</name></expr></argument>,
							  <argument><expr><name>sockname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sockname</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>sockport</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* family */</comment>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_tcp_getpeername</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peeraddr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_extract_sockaddr</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>peeraddr</name></expr></argument>,
							  <argument><expr><name>peername</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>peername</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>peerport</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* family */</comment>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"peer%s[seg%hd,dbid%hu %s:%d-&gt;%s:%d]"</literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><operator>(</operator><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_LEGACY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">".legacy"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name>sockname</name></expr></argument>, <argument><expr><name>sockport</name></expr></argument>, <argument><expr><name>peername</name></expr></argument>, <argument><expr><name>peerport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Unregister a peer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_unregister</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ic_proxy_peers</name><index>[<expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr>]</index></name> <operator>==</operator> <name>peer</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* keep the peer as a placeholder */</comment>

		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy %s: unregistered"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* reset the state */</comment>
		<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_peer_update_name</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ic_proxy_peers</name><index>[<expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * if there is already a placeholder, transfer my cached packets to it
		 */</comment>
		<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>placeholder</name> <init>= <expr><name><name>ic_proxy_peers</name><index>[<expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>placeholder</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

		<comment type="block">/* then free the peer */</comment>
		<expr_stmt><expr><call><name>ic_proxy_peer_free</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Register a peer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_register</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>placeholder</name> <init>= <expr><name><name>ic_proxy_peers</name><index>[<expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>placeholder</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * FIXME: is it possible for a new peer to come before the legacy one
		 * is ready for message?
		 */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>placeholder</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_READY_FOR_MESSAGE</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * This is not actually a placeholder, but a legacy peer, this
			 * happens due to network problem, etc..
			 */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s(state=0x%08x): found a legacy peer %s(state=0x%08x)"</literal></expr></argument>,
						 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
						 <argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>placeholder</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_LEGACY</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ic_proxy_peer_update_name</name><argument_list>(<argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ic_proxy_peer_shutdown</name><argument_list>(<argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* This is an actual placeholder */</comment>
			<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
				   <argument><expr><literal type="string">"ic-proxy: %s(state=0x%08x): found my placeholder %s(state=0x%08x)"</literal></expr></argument>,
						 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
						 <argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>placeholder</name><operator>-&gt;</operator><name>ibuf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s(state=0x%08x): my placeholder %s(state=0x%08x) has %d bytes in ibuf"</literal></expr></argument>,
							 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
							 <argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>state</name></name></expr></argument>,
							 <argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>ibuf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* TODO: verify that it's really a placeholder */</comment>

			<comment type="block">/* transfer the cached pkts */</comment>
			<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>, <argument><expr><name><name>placeholder</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>placeholder</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

			<comment type="block">/* finally free the placeholder */</comment>
			<expr_stmt><expr><call><name>ic_proxy_peer_free</name><argument_list>(<argument><expr><name>placeholder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ic_proxy_peers</name><index>[<expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr>]</index></name> <operator>=</operator> <name>peer</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: registered"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Lookup a peer with peerid.
 *
 * We require to pass both content and dbid as arguments, but only dbid is
 * used.
 */</comment>
<function><type><name>ICProxyPeer</name> <modifier>*</modifier></type>
<name>ic_proxy_peer_lookup</name><parameter_list>(<parameter><decl><type><name>int16</name></type> <name>content</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>dbid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dbid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>ic_proxy_peers</name><index>[<expr><name>dbid</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Lookup a peer with peerid, create a placeholder if not found.
 */</comment>
<function><type><name>ICProxyPeer</name> <modifier>*</modifier></type>
<name>ic_proxy_peer_blessed_lookup</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>content</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>dbid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dbid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ic_proxy_peers</name><index>[<expr><name>dbid</name></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><call><name>ic_proxy_peer_new</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><name>content</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* register as a placeholder */</comment>
		<expr_stmt><expr><call><name>ic_proxy_peer_register</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>ic_proxy_peers</name><index>[<expr><name>dbid</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Received a complete DATA or MESSAGE packet from a remote peer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_data_pkt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: received %s"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_READY_FOR_DATA</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: not ready to receive DATA yet: %s"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ic_proxy_router_route</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_dup</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Received bytes from a remote peer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_data</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><call><name>CONTAINER_OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></argument>, <argument><expr><name>ICProxyPeer</name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>!=</operator> <name>UV_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: fail to receive DATA: %s"</literal></expr></argument>,
						 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
				   <argument><expr><literal type="string">"ic-proxy: %s: received EOF while waiting for DATA"</literal></expr></argument>,
						 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ic_proxy_peer_shutdown</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* EAGAIN or EWOULDBLOCK, retry */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ic_proxy_ibuf_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>,
					   <argument><expr><name>ic_proxy_peer_on_data_pkt</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a peer.
 */</comment>
<function><type><name>ICProxyPeer</name> <modifier>*</modifier></type>
<name>ic_proxy_peer_new</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>content</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>dbid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>peer</name> <operator>=</operator> <call><name>ic_proxy_new</name><argument_list>(<argument><expr><name>ICProxyPeer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>content</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_ibuf_init_p2p</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_tcp_nodelay</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_peer_update_name</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>peer</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free a peer.
 *
 * A peer should only be used if it is really unused.  Most of the time a
 * closed peer is converted to a placeholder, so it should not be freed.  Only
 * a replaced placeholder should be freed.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_peer_free</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: freeing"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>peer-&gt;reqs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: unhandled outgoing %s, dropping it"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_ibuf_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * TODO: if a peer disconnected, should we also disconnect all the relative
	 * clients?  The concern is that some packets might already be lost.
	 *
	 * Anyway, future packets should not be cached inside the peer.
	 */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * The peer is closed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_close</name><parameter_list>(<parameter><decl><type><name>uv_handle_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><call><name>CONTAINER_OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>handle</name></expr></argument>, <argument><expr><name>ICProxyPeer</name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"%s: closed"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reset the state */</comment>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* it's unlikely that the ibuf is non-empty, but clear it for sure */</comment>
	<expr_stmt><expr><call><name>ic_proxy_ibuf_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_peer_unregister</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Close a peer.
 *
 * A peer could only be closed after its shutdown.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_close</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_CLOSING</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: closing"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_CLOSING</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_close</name><argument_list>(<argument><expr><operator>(</operator><name>uv_handle_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>ic_proxy_peer_on_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The peer is shutted down.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_shutdown</name><parameter_list>(<parameter><decl><type><name>uv_shutdown_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><call><name>CONTAINER_OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>req</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>ICProxyPeer</name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: fail to shutdown: %s"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: shutted down"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_SHUTTED</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_peer_close</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Shutdown a peer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_shutdown</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uv_shutdown_t</name> <modifier>*</modifier></type><name>req</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_SHUTTING</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: shutting down"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_SHUTTING</name></expr>;</expr_stmt>

	<comment type="block">/* disconnect all the clients */</comment>
	<expr_stmt><expr><call><name>ic_proxy_client_table_shutdown_by_dbid</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>ic_proxy_new</name><argument_list>(<argument><expr><name>uv_shutdown_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_shutdown</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>ic_proxy_peer_on_shutdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sent the HELLO ACK message.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_sent_hello_ack</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ic_proxy_peer_shutdown</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_SENT_HELLO_ACK</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: start receiving DATA"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* it's unlikely that the ibuf is non-empty, but clear it for sure */</comment>
	<expr_stmt><expr><call><name>ic_proxy_ibuf_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If there are early coming packets, make sure to route them before
	 * receiving new data, we must ensure that packets are routed in the same
	 * order as they arrive.
	 */</comment>
	<expr_stmt><expr><call><name>ic_proxy_peer_handle_out_cache</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* now it's time to receive the normal data */</comment>
	<expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>,
				  <argument><expr><name>ic_proxy_pkt_cache_alloc_buffer</name></expr></argument>, <argument><expr><name>ic_proxy_peer_on_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Received the complete HELLO message.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_hello_pkt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICProxyKey</name></type>	<name>key</name></decl>;</decl_stmt>

	<comment type="block">/* we only expect one hello message */</comment>
	<expr_stmt><expr><call><name>uv_read_stop</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_key_from_p2c_pkt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* TODO: verify that old dbid and content are both set or invalid */</comment>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>remoteContentId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>remoteDbid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_peer_update_name</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * A peer could be registered as long as it knows the peer information from
	 * the HELLO message, the client packets will still be cached until the
	 * HELLO ACK is sent out.
	 */</comment>
	<expr_stmt><expr><call><name>ic_proxy_peer_register</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG1</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: received %s, sending HELLO ACK"</literal></expr></argument>,
				 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * below two state bits can be merged into one, but it is harmless to keep
	 * them as two.
	 */</comment>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_RECEIVED_HELLO</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_SENDING_HELLO_ACK</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_key_reverse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>localPid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_peer_send_message</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>IC_PROXY_MESSAGE_PEER_HELLO_ACK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
							   <argument><expr><name>ic_proxy_peer_on_sent_hello_ack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Received some HELLO bytes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_hello_data</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
							<parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><call><name>CONTAINER_OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></argument>, <argument><expr><name>ICProxyPeer</name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>!=</operator> <name>UV_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: fail to receive HELLO: %s"</literal></expr></argument>,
						 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
				   <argument><expr><literal type="string">"ic-proxy: %s: received EOF while waiting for HELLO"</literal></expr></argument>,
						 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ic_proxy_peer_shutdown</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* EAGAIN or EWOULDBLOCK, retry */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ic_proxy_ibuf_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>,
					   <argument><expr><name>ic_proxy_peer_on_hello_pkt</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Start reading the HELLO message.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_peer_read_hello</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_RECEIVING_HELLO</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
		   <argument><expr><literal type="string">"%s: waiting for HELLO"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_RECEIVING_HELLO</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>,
				  <argument><expr><name>ic_proxy_pkt_cache_alloc_buffer</name></expr></argument>, <argument><expr><name>ic_proxy_peer_on_hello_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Received the complete HELLO ACK message.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_hello_ack_pkt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></sizeof> <operator>||</operator> <name>size</name> <operator>!=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: received incomplete HELLO ACK: size = %d"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_RECEIVED_HELLO_ACK</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * A DATA packet is sent together with the HELLO, so the ibuf push the
		 * DATA here.  I still don't know how would this happen, but this does
		 * happen on the pipeline, so at least let it work.
		 *
		 * TODO: as we can't draw a clear line between handshake and data, it
		 * would be better to merge on_hello* and on_data into one.
		 */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: early DATA: %s"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ic_proxy_peer_on_data_pkt</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ic_proxy_pkt_is</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>IC_PROXY_MESSAGE_PEER_HELLO_ACK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: received invalid HELLO ACK: %s"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name> <operator>!=</operator> <name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: %s: received invalid HELLO ACK: %s"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* we only expect one hello ack message */</comment>
	<expr_stmt><expr><call><name>uv_read_stop</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG1</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: received %s"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_RECEIVED_HELLO_ACK</name></expr>;</expr_stmt>

	<comment type="block">/* do not clear the ibuf, it could already contain incoming DATA */</comment>

	<comment type="block">/*
	 * If there are early coming packets, make sure to route them before
	 * receiving new data, we must ensure that packets are routed in the same
	 * order as they arrive.
	 */</comment>
	<expr_stmt><expr><call><name>ic_proxy_peer_handle_out_cache</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: start receiving DATA"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* now it's time to receive the normal data */</comment>
	<expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>,
				  <argument><expr><name>ic_proxy_pkt_cache_alloc_buffer</name></expr></argument>, <argument><expr><name>ic_proxy_peer_on_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Received HELLO ACK bytes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_hello_ack_data</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>,
								<parameter><decl><type><name>ssize_t</name></type> <name>nread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uv_buf_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><call><name>CONTAINER_OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>stream</name></expr></argument>, <argument><expr><name>ICProxyPeer</name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nread</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nread</name> <operator>!=</operator> <name>UV_EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"%s: fail to recv HELLO ACK: %s"</literal></expr></argument>,
						 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>nread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
				   <argument><expr><literal type="string">"ic-proxy: %s: received EOF while waiting for HELLO ACK"</literal></expr></argument>,
						 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ic_proxy_peer_shutdown</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>nread</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* EAGAIN or EWOULDBLOCK, retry */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ic_proxy_ibuf_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>ibuf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>, <argument><expr><name>nread</name></expr></argument>,
					   <argument><expr><name>ic_proxy_peer_on_hello_ack_pkt</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sent the HELLO message.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_sent_hello</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ic_proxy_peer_shutdown</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG1</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: waiting for HELLO ACK"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_SENT_HELLO</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_RECEIVING_HELLO_ACK</name></expr>;</expr_stmt>

	<comment type="block">/* wait for hello ack */</comment>
	<expr_stmt><expr><call><name>uv_read_start</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>,
				  <argument><expr><name>ic_proxy_pkt_cache_alloc_buffer</name></expr></argument>,
				  <argument><expr><name>ic_proxy_peer_on_hello_ack_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Connected to a peer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_on_connected</name><parameter_list>(<parameter><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name> <init>= <expr><call><name>CONTAINER_OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>conn</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>ICProxyPeer</name></expr></argument>, <argument><expr><name>tcp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICProxyKey</name></type>	<name>key</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* the peer might just not get ready yet, retry later */</comment>
		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: %s: fail to connect: %s"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_peer_close</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG1</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: connected, sending HELLO"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_CONNECTED</name></expr>;</expr_stmt>

	<comment type="block">/* TODO: increase ic_proxy_peer_contents[peer-&gt;content] */</comment>

	<comment type="block">/* hello packet must be the first one from a client */</comment>

	<comment type="block">/*
	 * For a peer HELLO message, the only meaningful field is localDbid,
	 * but we also set the content and pid for debugging purpose.
	 */</comment>
	<expr_stmt><expr><call><name>ic_proxy_key_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
					  <argument><expr><literal type="number">0</literal></expr></argument>						<comment type="block">/* sessionId */</comment>,
					  <argument><expr><literal type="number">0</literal></expr></argument>						<comment type="block">/* commandId */</comment>,
					  <argument><expr><literal type="number">0</literal></expr></argument>						<comment type="block">/* sendSliceIndex */</comment>,
					  <argument><expr><literal type="number">0</literal></expr></argument>						<comment type="block">/* recvSliceIndex */</comment>,
					  <argument><expr><name><name>GpIdentity</name><operator>.</operator><name>segindex</name></name></expr></argument>	<comment type="block">/* localContentId */</comment>,
					  <argument><expr><name><name>GpIdentity</name><operator>.</operator><name>dbid</name></name></expr></argument>		<comment type="block">/* localDbid */</comment>,
					  <argument><expr><name>MyProcPid</name></expr></argument>				<comment type="block">/* localPid */</comment>,
					  <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>content</name></name></expr></argument>			<comment type="block">/* remoteContentId */</comment>,
					  <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>			<comment type="block">/* remoteDbid */</comment>,
					  <argument><expr><literal type="number">0</literal></expr></argument>						<comment type="block">/* remotePid */</comment>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_SENDING_HELLO</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_peer_update_name</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_peer_send_message</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>IC_PROXY_MESSAGE_PEER_HELLO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
							   <argument><expr><name>ic_proxy_peer_on_sent_hello</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Connect to a remote peer.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_peer_connect</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uv_connect_t</name> <modifier>*</modifier></type><name>conn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>name</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_CONNECTING</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>|=</operator> <name>IC_PROXY_PEER_STATE_CONNECTING</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_ip4_name</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
		   <argument><expr><literal type="string">"%s: connecting to %s:%d"</literal></expr></argument>,
				 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reinit the tcp handle */</comment>
	<expr_stmt><expr><call><name>uv_tcp_init</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>tcp</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>uv_tcp_nodelay</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn</name> <operator>=</operator> <call><name>ic_proxy_new</name><argument_list>(<argument><expr><name>uv_connect_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_tcp_connect</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></argument>,
				   <argument><expr><name>ic_proxy_peer_on_connected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Disconnect a peer.
 *
 * The peer can be in any state, the caller only needs to ensure not to call
 * this function from a peer callback.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_peer_disconnect</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* No such a peer yet */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>peer</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* No connection is made or being made */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_CONNECTING</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
		   <argument><expr><literal type="string">"%s: disconnecting"</literal></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_peer_shutdown</name><argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Send a packet to a remote peer.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_peer_route_data</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
						 <parameter><decl><type><name>ic_proxy_sent_cb</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_READY_FOR_DATA</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyDelay</name> <modifier>*</modifier></type><name>delay</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: %s: caching outgoing %s"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>ic_proxy_peer_build_delay</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ic_proxy_router_write</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Send the peer control message, HELLO and HELLO ACK.  The client control
 * message should be sent with ic_proxy_peer_route_data().
 *
 * TODO: it's better to separate the peer messages from the client messages
 * completely.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_send_message</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>, <parameter><decl><type><name>ICProxyMessageType</name></type> <name>mtype</name></decl></parameter>,
						   <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>ic_proxy_sent_cb</name></type> <name>callback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_READY_FOR_MESSAGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					 <argument><expr><literal type="string">"ic-proxy: %s: not ready to send or receive messages"</literal></expr></argument>,
					 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pkt</name> <operator>=</operator> <call><name>ic_proxy_message_new</name><argument_list>(<argument><expr><name>mtype</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ic_proxy_router_write</name><argument_list>(<argument><expr><operator>(</operator><name>uv_stream_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peer</name><operator>-&gt;</operator><name>tcp</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This function is only called on a new peer, so it is not so expansive to
 * rebuild the cache list.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_peer_handle_out_cache</name><parameter_list>(<parameter><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>reqs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>peer</name><operator>-&gt;</operator><name>state</name></name> <operator>&amp;</operator> <name>IC_PROXY_PEER_STATE_READY_FOR_DATA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: %s: trying to consume the %d cached outgoing pkts"</literal></expr></argument>,
				 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First detach all the pkts */</comment>
	<expr_stmt><expr><name>reqs</name> <operator>=</operator> <name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<comment type="block">/* Then re-handle them one by one */</comment>
	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>reqs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyDelay</name> <modifier>*</modifier></type><name>delay</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* TODO: can we pass the delay directly? */</comment>
		<expr_stmt><expr><call><name>ic_proxy_peer_route_data</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name><name>delay</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>,
								 <argument><expr><name><name>delay</name><operator>-&gt;</operator><name>callback</name></name></expr></argument>, <argument><expr><name><name>delay</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG3</name></expr></argument>,
		   <argument><expr><literal type="string">"%s: consumed %d cached pkts"</literal></expr></argument>,
				 <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>reqs</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>peer</name><operator>-&gt;</operator><name>reqs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * the pkts ownership were transfered during ic_proxy_peer_route_data(),
	 * only need to free the list itself.
	 */</comment>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>reqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
