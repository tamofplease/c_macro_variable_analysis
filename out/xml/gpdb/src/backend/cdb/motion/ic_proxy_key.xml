<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/ic_proxy_key.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ic_proxy_key.c
 *
 *    Interconnect Proxy Key
 *
 * A key is actually a logical connection identifier, it identifies the sender,
 * the receiver, as well as the logical connection itself.
 *
 *
 * Copyright (c) 2020-Present VMware, Inc. or its affiliates.
 *
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_key.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Compares whether two keys are identical.
 *
 * Not all the attributes are compared.  Content ids are not compared as the
 * dbids are compared.  Session ids are not compared because pids are compared.
 */</comment>
<function><type><name>bool</name></type>
<name>ic_proxy_key_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>key1</name><operator>-&gt;</operator><name>localDbid</name></name>       <operator>==</operator> <name><name>key2</name><operator>-&gt;</operator><name>localDbid</name></name>
		<operator>&amp;&amp;</operator> <name><name>key1</name><operator>-&gt;</operator><name>localPid</name></name>        <operator>==</operator> <name><name>key2</name><operator>-&gt;</operator><name>localPid</name></name>
		<operator>&amp;&amp;</operator> <name><name>key1</name><operator>-&gt;</operator><name>remoteDbid</name></name>      <operator>==</operator> <name><name>key2</name><operator>-&gt;</operator><name>remoteDbid</name></name>
		<operator>&amp;&amp;</operator> <name><name>key1</name><operator>-&gt;</operator><name>remotePid</name></name>       <operator>==</operator> <name><name>key2</name><operator>-&gt;</operator><name>remotePid</name></name>
		<operator>&amp;&amp;</operator> <name><name>key1</name><operator>-&gt;</operator><name>commandId</name></name>       <operator>==</operator> <name><name>key2</name><operator>-&gt;</operator><name>commandId</name></name>
		<operator>&amp;&amp;</operator> <name><name>key1</name><operator>-&gt;</operator><name>sendSliceIndex</name></name>  <operator>==</operator> <name><name>key2</name><operator>-&gt;</operator><name>sendSliceIndex</name></name>
		<operator>&amp;&amp;</operator> <name><name>key1</name><operator>-&gt;</operator><name>recvSliceIndex</name></name>  <operator>==</operator> <name><name>key2</name><operator>-&gt;</operator><name>recvSliceIndex</name></name></expr>
		;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Hash function for keys.
 *
 * The logic is derived from CONN_HASH_VALUE(), however it is possible to build
 * a better with less collision.
 */</comment>
<function><type><name>uint32</name></type>
<name>ic_proxy_key_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>localPid</name></name> <operator>^</operator> <name><name>key</name><operator>-&gt;</operator><name>remotePid</name></name><operator>)</operator> <operator>+</operator> <name><name>key</name><operator>-&gt;</operator><name>remoteDbid</name></name> <operator>+</operator> <name><name>key</name><operator>-&gt;</operator><name>commandId</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Equal function for keys.
 *
 * Return 0 for match, otherwise for no match
 */</comment>
<function><type><name>int</name></type>
<name>ic_proxy_key_equal_for_hash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>,
							<parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>!</operator><call><name>ic_proxy_key_equal</name><argument_list>(<argument><expr><name>key1</name></expr></argument>, <argument><expr><name>key2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a key.
 *
 * All the fields are passed as arguments.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_key_init</name><parameter_list>(<parameter><decl><type><name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
				  <parameter><decl><type><name>int32</name></type> <name>sessionId</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>commandId</name></decl></parameter>,
				  <parameter><decl><type><name>int16</name></type> <name>sendSliceIndex</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>recvSliceIndex</name></decl></parameter>,
				  <parameter><decl><type><name>int16</name></type> <name>localContentId</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>localDbid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>localPid</name></decl></parameter>,
				  <parameter><decl><type><name>int16</name></type> <name>remoteContentId</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>remoteDbid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>remotePid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>sessionId</name></name> <operator>=</operator> <name>sessionId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>commandId</name></name> <operator>=</operator> <name>commandId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>sendSliceIndex</name></name> <operator>=</operator> <name>sendSliceIndex</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>recvSliceIndex</name></name> <operator>=</operator> <name>recvSliceIndex</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>localContentId</name></name> <operator>=</operator> <name>localContentId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>localDbid</name></name> <operator>=</operator> <name>localDbid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>localPid</name></name> <operator>=</operator> <name>localPid</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>remoteContentId</name></name> <operator>=</operator> <name>remoteContentId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>remoteDbid</name></name> <operator>=</operator> <name>remoteDbid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>-&gt;</operator><name>remotePid</name></name> <operator>=</operator> <name>remotePid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a key from a peer-to-client packet.
 *
 * A peer-to-client packet is to a local client, it is usually from a remote
 * peer, but it is also possible to be from a different client on the same
 * segment.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_key_from_p2c_pkt</name><parameter_list>(<parameter><decl><type><name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ic_proxy_key_init</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>commandId</name></name></expr></argument>,
					  <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>sendSliceIndex</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>recvSliceIndex</name></name></expr></argument>,
					  <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstContentId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstPid</name></name></expr></argument>,
					  <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcContentId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcDbid</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcPid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize a key from a client-to-peer packet.
 *
 * A client-to-peer packet is from a local client, it is usually to a remote
 * peer, but it is also possible to be to a different client on the same
 * segment.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_key_from_c2p_pkt</name><parameter_list>(<parameter><decl><type><name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ic_proxy_key_init</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>commandId</name></name></expr></argument>,
					  <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>sendSliceIndex</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>recvSliceIndex</name></name></expr></argument>,
					  <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcContentId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcDbid</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>srcPid</name></name></expr></argument>,
					  <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstContentId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstPid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reverse the direction of a key.
 *
 * Convert a peer-to-client packet to a client-to-peer one, or the reverse.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_key_reverse</name><parameter_list>(<parameter><decl><type><name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__swap</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { tmp = (a); (a) = (b); (b) = tmp; } while (0)</cpp:value></cpp:define>

	<decl_stmt><decl><type><name>int32</name></type>		<name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>__swap</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>localContentId</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>remoteContentId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__swap</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>localDbid</name></name></expr></argument>,      <argument><expr><name><name>key</name><operator>-&gt;</operator><name>remoteDbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>__swap</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>localPid</name></name></expr></argument>,       <argument><expr><name><name>key</name><operator>-&gt;</operator><name>remotePid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__swap</name></cpp:undef>
</block_content>}</block></function>

<comment type="block">/*
 * Build a describe string of a key.
 *
 * The string contains all the key information, can be used in log &amp; error
 * messages.
 *
 * Return the string, which must not be freed.  The string is in a static
 * buffer, so a second call to this function will overwrite the result of the
 * previous call.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ic_proxy_key_to_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>	<name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"[con%d,cmd%d,slice[%hd-&gt;%hd] seg%hd:dbid%hu:p%d-&gt;seg%hd:dbid%hu:p%d]"</literal></expr></argument>,
			 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>sessionId</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>commandId</name></name></expr></argument>,
			 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>sendSliceIndex</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>recvSliceIndex</name></name></expr></argument>,
			 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>localContentId</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>localDbid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>localPid</name></name></expr></argument>,
			 <argument><expr><name><name>key</name><operator>-&gt;</operator><name>remoteContentId</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>remoteDbid</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>remotePid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>
</unit>
