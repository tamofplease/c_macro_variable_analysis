<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/ic_proxy_router.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ic_proxy_router.c
 *
 *    Interconnect Proxy Router
 *
 * A router routes a packet to the correct target, a client or a peer.
 *
 * Copyright (c) 2020-Present VMware, Inc. or its affiliates.
 *
 *
 *-------------------------------------------------------------------------
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_router.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_packet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_pkt_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_server.h"</cpp:file></cpp:include>


<typedef>typedef <type><name><name>struct</name> <name>ICProxyWriteReq</name></name></type> <name>ICProxyWriteReq</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>ICProxyLoopback</name></name></type> <name>ICProxyLoopback</name>;</typedef>


<comment type="block">/*
 * A router write request.
 *
 * It is similar to the libuv write request, however the router will take care
 * of the common part, such as the freeing of the packet and the request, so
 * the caller can focus on the real business.
 */</comment>
<struct>struct <name>ICProxyWriteReq</name>
<block>{
	<decl_stmt><decl><type><name>uv_write_t</name></type>	<name>req</name></decl>;</decl_stmt>			<comment type="block">/* the libuv write request */</comment>

	<decl_stmt><decl><type><name>ic_proxy_sent_cb</name></type> <name>callback</name></decl>;</decl_stmt>	<comment type="block">/* the callback */</comment>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>			<comment type="block">/* the callback data */</comment>
}</block>;</struct>

<comment type="block">/*
 * The loopback packet queue.
 *
 * Loopback packets can not be routed immediately, refer to ICProxyDelay for
 * details.  They are first put in a queue, and are actually routed in a libuv
 * check callback, it is triggered after all the current I/O events are
 * handled, so there will be no misordered packets, and no reentrance to some
 * critical functions.
 */</comment>
<struct>struct <name>ICProxyLoopback</name>
<block>{
	<decl_stmt><decl><type><name>uv_check_t</name></type>	<name>check</name></decl>;</decl_stmt>					<comment type="block">/* the libuv check handle */</comment>

	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>					<comment type="block">/* List&lt;ICProxyWriteReq *&gt; */</comment>
}</block>;</struct>


<decl_stmt><decl><type><specifier>static</specifier> <name>ICProxyLoopback</name></type> <name>ic_proxy_router_loopback</name></decl>;</decl_stmt>


<comment type="block">/*
 * The loopback check is triggered.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_router_loopback_on_check</name><parameter_list>(<parameter><decl><type><name>uv_check_t</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Stop the check callback, all the queued loopback packets will be routed
	 * in this round.  This must happen before routing the packets, so if new
	 * loopback packets are queued, the check callback can be re-turned on,
	 * those packets will be handled next round.
	 *
	 * TODO: the new loopback packets can be handled in this round, too.
	 * Queueing them to next round means it will not be triggered until some
	 * I/O events happen.  In current logic there is the per second timer, so
	 * in worst case the new loopback packets are delayed for 1 second.  If the
	 * timer is paused in the future, as an optimization, then in worst case
	 * the new packets may not get a chance to be routed.  The only concern on
	 * handling them now is that if a infinite ping-pong happens, this function
	 * would never return to the mainloop.  It's unlikely to happen, though,
	 * and we could prevent that by adding a round count limit.
	 */</comment>
	<expr_stmt><expr><call><name>uv_check_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We must detach the queue before handling it, in case some new packets
	 * are queued during the process
	 */</comment>
	<expr_stmt><expr><name>queue</name> <operator>=</operator> <name><name>ic_proxy_router_loopback</name><operator>.</operator><name>queue</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>queue</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyDelay</name> <modifier>*</modifier></type><name>delay</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ICProxyClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ICProxyKey</name></type>	<name>key</name></decl>;</decl_stmt>

		<comment type="block">/* Loopback packets are always to a loopback client */</comment>
		<expr_stmt><expr><call><name>ic_proxy_key_from_p2c_pkt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>delay</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>ic_proxy_client_blessed_lookup</name><argument_list>(<argument><expr><name><name>handle</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: router: looped back %s to %s"</literal></expr></argument>,
					 <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name><name>delay</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>ic_proxy_client_get_name</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ic_proxy_client_on_p2c_data</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name><name>delay</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>,
									<argument><expr><name><name>delay</name><operator>-&gt;</operator><name>callback</name></name></expr></argument>, <argument><expr><name><name>delay</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* do not forget to call the callback */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>delay</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>delay</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>delay</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name><name>delay</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* and do not forget to free the memory */</comment>
		<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Push a loopback packet to the queue.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_router_loopback_push</name><parameter_list>(<parameter><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
							  <parameter><decl><type><name>ic_proxy_sent_cb</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyDelay</name> <modifier>*</modifier></type><name>delay</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: router: looping back %s"</literal></expr></argument>,
				 <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Enable the libuv check callback if not yet.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>queue</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>uv_check_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>check</name></name></expr></argument>,
					   <argument><expr><name>ic_proxy_router_loopback_on_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Loopback packets are always to a loopback client, so it's safe to pass
	 * NULL as the peer.
	 */</comment>
	<expr_stmt><expr><name>delay</name> <operator>=</operator> <call><name>ic_proxy_peer_build_delay</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>queue</name></name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize the router.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_router_init</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>uv_check_init</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cleanup the router.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_router_uninit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>queue</name> <operator>=</operator> <name><name>ic_proxy_router_loopback</name><operator>.</operator><name>queue</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>queue</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_check_stop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ic_proxy_router_loopback</name><operator>.</operator><name>check</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>queue</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyDelay</name> <modifier>*</modifier></type><name>delay</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * TODO: this function is only called on exiting, so it's better to
		 * drop the callbacks silently, right?
		 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
		if (delay-&gt;callback)
			delay-&gt;callback(delay-&gt;opaque, pkt, UV_ECANCELED);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name><name>delay</name><operator>-&gt;</operator><name>pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Route a packet.
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_router_route</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>, <parameter><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,
					  <parameter><decl><type><name>ic_proxy_sent_cb</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name> <operator>==</operator> <name><name>pkt</name><operator>-&gt;</operator><name>srcDbid</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * For a loopback target, we do not need to send the packet via a peer,
		 * we could pass the packet to the target client via
		 * ic_proxy_client_on_p2c_data(), however that function is not
		 * reentrantable, which happens on PAUSE &amp; RESUME messages, so we must
		 * schedule it in a libuv check callback.
		 *
		 * TODO: when callback is NULL, we could pass the packet immediately.
		 */</comment>
		<expr_stmt><expr><call><name>ic_proxy_router_loopback_push</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name> <operator>==</operator> <name><name>GpIdentity</name><operator>.</operator><name>dbid</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ICProxyKey</name></type>	<name>key</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ic_proxy_key_from_p2c_pkt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>client</name> <operator>=</operator> <call><name>ic_proxy_client_blessed_lookup</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: router: routing %s to %s"</literal></expr></argument>,
					 <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><call><name>ic_proxy_client_get_name</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ic_proxy_client_on_p2c_data</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyPeer</name> <modifier>*</modifier></type><name>peer</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>peer</name> <operator>=</operator> <call><name>ic_proxy_peer_blessed_lookup</name><argument_list>(<argument><expr><name>loop</name></expr></argument>,
											<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstContentId</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dstDbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: router: routing %s to %s"</literal></expr></argument>,
					 <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>peer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ic_proxy_peer_route_data</name><argument_list>(<argument><expr><name>peer</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The packet is written.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_router_on_write</name><parameter_list>(<parameter><decl><type><name>uv_write_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyWriteReq</name> <modifier>*</modifier></type><name>wreq</name> <init>= <expr><operator>(</operator><name>ICProxyWriteReq</name> <operator>*</operator><operator>)</operator> <name>req</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: router: fail to send %s: %s"</literal></expr></argument>,
					 <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
			   <argument><expr><literal type="string">"ic-proxy: router: sent %s"</literal></expr></argument>,
					 <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>wreq</name><operator>-&gt;</operator><name>callback</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name><name>wreq</name><operator>-&gt;</operator><name>callback</name></name><argument_list>(<argument><expr><name><name>wreq</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ic_proxy_pkt_cache_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Write a packet to a libuv stream.
 *
 * This is a simple wrapper for the uv_write() function.  The boring parts,
 * like buffer &amp; request management, are handled by this wrapper, so the caller
 * can focus on the real business.
 *
 * It can write the packet at a specific offset, this is useful when writing
 * data from the client to the backend, the backend wants headless data, so the
 * client can specify sizeof(ICProxyPkt) as the offset.
 *
 * - stream: the target stream, usually a peer or a client;
 * - pkt: the data to write, the ownership is taken;
 * - offset: the data offset to write from, usually 0 when writing to a peer,
 *   or sizeof(ICProxyPkt) when writing to a client;
 * - callback: the callback function;
 * - opaque: the callback data;
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_router_write</name><parameter_list>(<parameter><decl><type><name>uv_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>ICProxyPkt</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>offset</name></decl></parameter>,
					  <parameter><decl><type><name>ic_proxy_sent_cb</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyWriteReq</name> <modifier>*</modifier></type><name>wreq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uv_buf_t</name></type>	<name>wbuf</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_DEBUG</name></expr></argument>, <argument><expr><name>DEBUG5</name></expr></argument>,
		   <argument><expr><literal type="string">"ic-proxy: router: sending %s"</literal></expr></argument>, <argument><expr><call><name>ic_proxy_pkt_to_str</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>wreq</name> <operator>=</operator> <call><name>ic_proxy_new</name><argument_list>(<argument><expr><name>ICProxyWriteReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>req</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wreq</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>opaque</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>wbuf</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>pkt</name><operator>)</operator> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wbuf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uv_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wreq</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ic_proxy_router_on_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
