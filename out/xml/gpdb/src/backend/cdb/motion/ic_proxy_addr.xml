<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/motion/ic_proxy_addr.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ic_proxy_addr.c
 *
 *    Interconnect Proxy Addresses
 *
 * Maintain the address information of all the proxies, which is set by the GUC
 * gp_interconnect_proxy_addresses.
 *
 * FIXME: currently that GUC can not be reloaded with "gpstop -u", so we must
 * restart the cluster to update the setting.  This causes problems during
 * online expansion, when new segments are added to the cluster, we must update
 * this GUC to include their information, so until the cluster is restarted all
 * the ic-proxy mode queries will hang.
 *
 *
 * Copyright (c) 2020-Present VMware, Inc. or its affiliates.
 *
 *
 *-------------------------------------------------------------------------
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ic_proxy_addr.h"</cpp:file></cpp:include>


<comment type="block">/*
 * List&lt;ICProxyAddr *&gt;, the current addresses list.
 */</comment>
<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>ic_proxy_addrs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * List&lt;ICProxyAddr *&gt;, the previous addresses list.
 *
 * It holds the memory of all the addresses, so the classified lists can only
 * hold a ref.
 */</comment>
<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>ic_proxy_prev_addrs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * List&lt;unowned ICProxyAddr *&gt;, the classified addresses lists.
 *
 * - if an address is removed from the GUC gp_interconnect_proxy_addresses,
 *   it is put in the "removed" list;
 * - if an address is newly added to the GUC, it is in the "added" list;
 * - if an address is updated, it is in both the "removed" and "added" lists;
 *
 * The addresses of these lists must not be freed, they are actually held by
 * ic_proxy_addrs or ic_proxy_prev_addrs.
 */</comment>
<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>ic_proxy_removed_addrs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>ic_proxy_added_addrs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * List&lt;ICProxyAddr *&gt;, the addresses list that are being resolved.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>ic_proxy_unknown_addrs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * My address.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ICProxyAddr</name> <modifier>*</modifier></type><name>ic_proxy_my_addr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Compare function for list_qsort().
 *
 * The real type of the arguments is "const ListCell **".
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ic_proxy_addr_compare_dbid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr1</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ListCell</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr2</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>ListCell</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>addr1</name><operator>-&gt;</operator><name>dbid</name></name> <operator>-</operator> <name><name>addr2</name><operator>-&gt;</operator><name>dbid</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Classify the addrs as added, deleted, updated and unchanged.
 *
 * Both the old and new lists must be sorted by dbid, the caller is responsible
 * to ensure this.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_classify_addresses</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>oldaddrs</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>newaddrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lcold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lcnew</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ic_proxy_added_addrs</name> <operator>=</operator> <call><name>ic_proxy_list_free</name><argument_list>(<argument><expr><name>ic_proxy_added_addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ic_proxy_removed_addrs</name> <operator>=</operator> <call><name>ic_proxy_list_free</name><argument_list>(<argument><expr><name>ic_proxy_removed_addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lcold</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name>oldaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lcnew</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name>newaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>lcold</name> <operator>&amp;&amp;</operator> <name>lcnew</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lcold</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lcnew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>old</name><operator>-&gt;</operator><name>dbid</name></name> <operator>&lt;</operator> <name><name>new</name><operator>-&gt;</operator><name>dbid</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* the address is removed */</comment>
			<expr_stmt><expr><name>ic_proxy_removed_addrs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ic_proxy_removed_addrs</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lcold</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lcold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>old</name><operator>-&gt;</operator><name>dbid</name></name> <operator>&gt;</operator> <name><name>new</name><operator>-&gt;</operator><name>dbid</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* the address is newly added */</comment>
			<expr_stmt><expr><name>ic_proxy_added_addrs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ic_proxy_added_addrs</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lcnew</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lcnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<comment type="block">/*
		 * note that the new-&gt;sockaddr is not filled yet, so we must compare
		 * with the hostname and service as strings.
		 */</comment>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
				 <call><name>strcmp</name><argument_list>(<argument><expr><name><name>old</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>new</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* the address is updated */</comment>
			<expr_stmt><expr><name>ic_proxy_removed_addrs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ic_proxy_removed_addrs</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ic_proxy_added_addrs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ic_proxy_added_addrs</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lcold</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lcold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lcnew</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lcnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* the address is unchanged */</comment>
			<expr_stmt><expr><name>lcold</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lcold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lcnew</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lcnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* all the addresses remaining in the old list are removed */</comment>
	<for>for <control>( <init>;</init> <condition><expr><name>lcold</name></expr>;</condition> <incr><expr><name>lcold</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lcold</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lcold</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ic_proxy_removed_addrs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ic_proxy_removed_addrs</name></expr></argument>, <argument><expr><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* all the addresses remaining in the new list are newly added */</comment>
	<for>for <control>( <init>;</init> <condition><expr><name>lcnew</name></expr>;</condition> <incr><expr><name>lcnew</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>lcnew</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lcnew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>ic_proxy_added_addrs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ic_proxy_added_addrs</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Resolved one address.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ic_proxy_addr_on_getaddrinfo</name><parameter_list>(<parameter><decl><type><name>uv_getaddrinfo_t</name> <modifier>*</modifier></type><name>req</name></decl></parameter>,
							 <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>CONTAINER_OF</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>req</name></expr></argument>, <argument><expr><name>ICProxyAddr</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ic_proxy_unknown_addrs</name> <operator>=</operator> <call><name>list_delete_ptr</name><argument_list>(<argument><expr><name>ic_proxy_unknown_addrs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>UV_ECANCELED</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* the req is cancelled, nothing to do */</comment>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
						 <argument><expr><literal type="string">"ic-proxy: seg%d,dbid%d: fail to resolve the hostname \"%s\":%s: %s"</literal></expr></argument>,
						 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>,
						 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>,
						 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>

		<comment type="block">/* should we follow the logic in getDnsCachedAddress() ? */</comment>
		<for>for <control>(<init><expr><name>iter</name> <operator>=</operator> <name>res</name></expr>;</init> <condition><expr><name>iter</name></expr>;</condition> <incr><expr><name>iter</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>ai_next</name></name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>ai_family</name></name> <operator>==</operator> <name>AF_UNIX</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type>		<name><name>name</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>family</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ic_proxy_extract_sockaddr</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
								 <argument><expr><literal type="string">"ic-proxy: seg%d,dbid%d: resolved address %s:%s -&gt; %s:%d family=%d"</literal></expr></argument>,
								 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>,
								 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>,
								 <argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
								 <argument><expr><literal type="string">"ic-proxy: seg%d,dbid%d: resolved address %s:%s -&gt; %s:%d family=%d (fail to extract the address: %s)"</literal></expr></argument>,
								 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>,
								 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>,
								 <argument><expr><name>name</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>family</name></expr></argument>,
								 <argument><expr><call><name>uv_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>sockaddr</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ic_proxy_addrs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ic_proxy_addrs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>uv_freeaddrinfo</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reload the addresses from the GUC gp_interconnect_proxy_addresses.
 *
 * The caller is responsible to load the up-to-date setting of that GUC by
 * calling ProcessConfigFile().
 */</comment>
<function><type><name>void</name></type>
<name>ic_proxy_reload_addresses</name><parameter_list>(<parameter><decl><type><name>uv_loop_t</name> <modifier>*</modifier></type><name>loop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * save the old addresses to the "prev" list, it is used to know the diffs
	 * of the addresses.
	 */</comment>
	<expr_stmt><expr><name>ic_proxy_prev_addrs</name> <operator>=</operator> <call><name>ic_proxy_list_free_deep</name><argument_list>(<argument><expr><name>ic_proxy_prev_addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the value of gp_interconnect_proxy_addresses is not ordered by dbid,
	 * ic_proxy_unknown_addrs loaded from config file and sorted by dbid is
	 * different from ic_proxy_prev_addrs, some addr will be added in
	 * ic_proxy_removed_addrs, these addrs will be disconnected after reloading
	 * config file, Actually gp_interconnect_proxy_addresses is not modified.
	 * This may lead to some cases failing when reading data from QE.
	 *
	 * Though the value of gp_interconnect_proxy_addresses is ordered by dbid,
	 * uv_getaddrinfo(loop, &amp;addr-&gt;req, ic_proxy_addr_on_getaddrinfo,
						   addr-&gt;hostname, addr-&gt;service, &amp;hints);
	 * can not guarantee the addrs parsed from gp_interconnect_proxy_addresses
	 * is added sequentially to ic_proxy_addrs.
	 *
	 * before reloading the config file. we should sort ic_proxy_addrs by dbid to
	 * avoid mis-disconnecting of addrs.
	 */</comment>
	<expr_stmt><expr><name>ic_proxy_addrs</name> <operator>=</operator> <call><name>list_qsort</name><argument_list>(<argument><expr><name>ic_proxy_addrs</name></expr></argument>, <argument><expr><name>ic_proxy_addr_compare_dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ic_proxy_prev_addrs</name> <operator>=</operator> <name>ic_proxy_addrs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ic_proxy_addrs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* cancel any unfinished getaddrinfo reqs */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>ic_proxy_unknown_addrs</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>uv_cancel</name><argument_list>(<argument><expr><operator>(</operator><name>uv_req_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>ic_proxy_unknown_addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ic_proxy_unknown_addrs</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ic_proxy_my_addr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* parse the new addresses */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>gp_interconnect_proxy_addresses</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>dbid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>content</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>port</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>hostname</name><index>[<expr><name>HOST_NAME_MAX</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hints</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>AF_UNSPEC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_protocol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hints</name><operator>.</operator><name>ai_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>ic_proxy_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>gp_interconnect_proxy_addresses</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>fmemopen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * format: dbid:segid:hostname:port
		 */</comment>
		<while>while <condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%[^:]:%d,"</literal></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>dbid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>content</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>ic_proxy_new</name><argument_list>(<argument><expr><name>ICProxyAddr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <name>content</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>hostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ic_proxy_unknown_addrs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ic_proxy_unknown_addrs</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>dbid</name> <operator>==</operator> <name><name>GpIdentity</name><operator>.</operator><name>dbid</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ic_proxy_my_addr</name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
						 <argument><expr><literal type="string">"ic-proxy: seg%d,dbid%d: parsed addr: %s:%d"</literal></expr></argument>,
						 <argument><expr><name>content</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>uv_getaddrinfo</name><argument_list>(<argument><expr><name>loop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>-&gt;</operator><name>req</name></name></expr></argument>, <argument><expr><name>ic_proxy_addr_on_getaddrinfo</name></expr></argument>,
						   <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>service</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ic_proxy_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* sort the new addrs so it's easy to diff */</comment>
	<expr_stmt><expr><name>ic_proxy_unknown_addrs</name> <operator>=</operator> <call><name>list_qsort</name><argument_list>(<argument><expr><name>ic_proxy_unknown_addrs</name></expr></argument>,
										<argument><expr><name>ic_proxy_addr_compare_dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* the last thing is to classify the addrs */</comment>
	<expr_stmt><expr><call><name>ic_proxy_classify_addresses</name><argument_list>(<argument><expr><name>ic_proxy_prev_addrs</name></expr></argument> <comment type="block">/* oldaddrs */</comment>,
								<argument><expr><name>ic_proxy_unknown_addrs</name></expr></argument> <comment type="block">/* newaddrs */</comment>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the proxy addr of the current segment.
 *
 * Return NULL if cannot find the addr.
 */</comment>
<function><type><specifier>const</specifier> <name>ICProxyAddr</name> <modifier>*</modifier></type>
<name>ic_proxy_get_my_addr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ic_proxy_my_addr</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ic_proxy_my_addr</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>gp_log_interconnect</name> <operator>&gt;=</operator> <name>GPVARS_VERBOSITY_VERBOSE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"ic-proxy: cannot get my addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the port from an address.
 *
 * Return -1 if cannot find the port.
 */</comment>
<function><type><name>int</name></type>
<name>ic_proxy_addr_get_port</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ICProxyAddr</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sockaddr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin_port</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sockaddr</name><operator>.</operator><name>ss_family</name></name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>ntohs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>addr</name><operator>)</operator><operator>-&gt;</operator><name>sin6_port</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				 <argument><expr><literal type="string">"ic-proxy: invalid address family %d for seg%d,dbid%d"</literal></expr></argument>,
				 <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>sockaddr</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name><name>addr</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Extract the name and port from a sockaddr.
 *
 * - the hostname is stored in "name", the recommended size is HOST_NAME_MAX;
 * - the "namelen" is the buffer size of "name";
 * - the port is stored in "port";
 * - the address family is stored in "family" if it is not NULL;
 *
 * "name" and "port" must be provided, "family" is optional.
 *
 * Return 0 on success; otherwise return a negative value, which can be
 * translated with uv_strerror().  The __out__ fields are always filled.
 *
 * Failures from this function can be safely ignored, if the "addr" is really
 * bad, the "uv_tcp_bind()" or "uv_tcp_connect()" will fail with the actual
 * error code.
 */</comment>
<function><type><name>int</name></type>
<name>ic_proxy_extract_sockaddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
						  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>namelen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>family</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>family</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>family</name> <operator>=</operator> <name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>addr</name><operator>-&gt;</operator><name>sa_family</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>addr4</name>
					<init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_ip4_name</name><argument_list>(<argument><expr><name>addr4</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr4</name><operator>-&gt;</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>

		<case>case <expr><name>AF_INET6</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>sockaddr_in6</name></name> <modifier>*</modifier></type><name>addr6</name>
					<init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name>addr</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_ip6_name</name><argument_list>(<argument><expr><name>addr6</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>addr6</name><operator>-&gt;</operator><name>sin6_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>UV_EINVAL</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>port</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
</unit>
