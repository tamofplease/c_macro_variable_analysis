<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbdtxcontextinfo.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbdtxcontextinfo.c
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbdtxcontextinfo.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdistributedsnapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdblocaldistribxact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdtxcontextinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/session_state.h"</cpp:file></cpp:include>

<comment type="block">/*
 * process local cache used to identify "dispatch units"
 *
 * Note, this is only required because the dispatcher emits multiple statements (which will
 * correspond to multiple local-xids on the segments) under the same distributed-xid.
 *
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>syncCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>DtxContextInfo_CreateOnMaster</name><parameter_list>(<parameter><decl><type><name>DtxContextInfo</name> <modifier>*</modifier></type><name>dtxContextInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inCursor</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>txnOptions</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CommandId</name></type>	<name>curcid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>snapshot</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>curcid</name> <operator>=</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>curcid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>DtxContextInfo_Reset</name><argument_list>(<argument><expr><name>dtxContextInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>=</operator> <call><name>getDistributedTransactionId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>!=</operator> <name>InvalidDistributedTransactionId</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name> <operator>=</operator> <name>curcid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * When this is an extended query, all the dispatchs will go to
	 * the reader gangs, don't increase 'syncCount' so that all the
	 * dispatch could share the same snapshot created by 'gp_write_shared_snapshot'.
	 */</comment>
	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>segmateSync</name></name> <operator>=</operator> <ternary><condition><expr><name>inCursor</name></expr> ?</condition><then> <expr><name>syncCount</name></expr> </then><else>: <expr><operator>++</operator><name>syncCount</name></expr></else></ternary></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>segmateSync</name></name> <operator>==</operator> <operator>(</operator><operator>~</operator><operator>(</operator><name>uint32</name><operator>)</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot have more than 2^32-2 commands in a session"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>AssertImply</name><argument_list>(<argument><expr><name>inCursor</name></expr></argument>,
				<argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>!=</operator> <name>InvalidDistributedTransactionId</name> <operator>&amp;&amp;</operator>
				<name>gp_command_count</name> <operator>==</operator> <name><name>MySessionState</name><operator>-&gt;</operator><name>latestCursorCommandId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>cursorContext</name></name> <operator>=</operator> <name>inCursor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>nestingLevel</name></name> <operator>=</operator> <call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
		 <argument><expr><literal type="string">"DtxContextInfo_CreateOnMaster: created dtxcontext with dxid "</literal><name>UINT64_FORMAT</name><literal type="string">" nestingLevel %d segmateSync %u/%u (current/cached)"</literal></expr></argument>,
		 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>, <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>nestingLevel</name></name></expr></argument>,
		 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>segmateSync</name></name></expr></argument>, <argument><expr><name>syncCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>&amp;&amp;</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>haveDistribSnapshot</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DistributedSnapshot_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedSnapshot</name></name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name><name>snapshot</name><operator>-&gt;</operator><name>distribSnapshotWithLocalMapping</name><operator>.</operator><name>ds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name> <operator>=</operator> <name>txnOptions</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>DEBUG5</name> <operator>&gt;=</operator> <name>log_min_messages</name> <operator>||</operator> <name>Debug_print_full_dtm</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>gid</name><index>[<expr><name>TMGIDSIZE</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DistributedSnapshot</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedSnapshot</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>getDistributedTransactionIdentifier</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><literal type="string">"&lt;empty&gt;"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"DtxContextInfo_CreateOnMaster Gp_role is DISPATCH and have gid = %s --&gt; have distributed snapshot"</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"DtxContextInfo_CreateOnMaster distributedXid = "</literal><name>UINT64_FORMAT</name><literal type="string">", "</literal>
			 <literal type="string">"distributedSnapshotHeader (xminAllDistributedSnapshots "</literal><name>UINT64_FORMAT</name><literal type="string">", xmin = "</literal><name>UINT64_FORMAT</name><literal type="string">", xmax = "</literal><name>UINT64_FORMAT</name><literal type="string">", count = %d)"</literal></expr></argument>,
			 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>,
			 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xminAllDistributedSnapshots</name></name></expr></argument>,
			 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>,
			 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>,
			 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
				 <argument><expr><literal type="string">"....    distributedSnapshotData-&gt;xip[%d] = "</literal><name>UINT64_FORMAT</name></expr></argument>,
				 <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>inProgressXidArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"DtxContextInfo_CreateOnMaster curcid = %u"</literal></expr></argument>,
			 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"DtxContextInfo_CreateOnMaster txnOptions = 0x%x, needDtx = %s, explicitBegin = %s, isoLevel = %s, readOnly = %s."</literal></expr></argument>,
			 <argument><expr><name>txnOptions</name></expr></argument>,
			 <argument><expr><operator>(</operator><ternary><condition><expr><call><name>isMppTxOptions_NeedDtx</name><argument_list>(<argument><expr><name>txnOptions</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><ternary><condition><expr><call><name>isMppTxOptions_ExplicitBegin</name><argument_list>(<argument><expr><name>txnOptions</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><call><name>IsoLevelAsUpperString</name><argument_list>(<argument><expr><call><name>mppTxOptions_IsoLevel</name><argument_list>(<argument><expr><name>txnOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
			 <argument><expr><operator>(</operator><ternary><condition><expr><call><name>isMppTxOptions_ReadOnly</name><argument_list>(<argument><expr><name>txnOptions</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>DtxContextInfo_SerializeSize</name><parameter_list>(<parameter><decl><type><name>DtxContextInfo</name> <modifier>*</modifier></type><name>dtxContextInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DistributedTransactionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>	<comment type="block">/* distributedXid */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>!=</operator> <name>InvalidDistributedTransactionId</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>TMGIDSIZE</name></expr>;</expr_stmt>		<comment type="block">/* distributedId */</comment>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>	<comment type="block">/* curcid */</comment>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>		<comment type="block">/* segmateSync */</comment>
	<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>		<comment type="block">/* nestingLevel */</comment>
	<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>		<comment type="block">/* haveDistributedSnapshot */</comment>
	<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>		<comment type="block">/* cursorContext */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>DistributedSnapshot_SerializeSize</name><argument_list>(
												  <argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedSnapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>		<comment type="block">/* distributedTxnOptions */</comment>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
		 <argument><expr><literal type="string">"DtxContextInfo_SerializeSize is returning size = %d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DtxContextInfo_Serialize</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>DtxContextInfo</name> <modifier>*</modifier></type><name>dtxContextInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>used</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistributedSnapshot</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedSnapshot</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DistributedTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DistributedTransactionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>!=</operator> <name>InvalidDistributedTransactionId</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"DtxContextInfo_Serialize only copied InvalidDistributedTransactionId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG3</name></expr></else></ternary><operator>)</operator></expr></argument>,
		 <argument><expr><literal type="string">"DtxContextInfo_Serialize distributedXid = "</literal><name>UINT64_FORMAT</name><literal type="string">", curcid %d nestingLevel %d segmateSync %u"</literal></expr></argument>,
		 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>,
		 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>, <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>nestingLevel</name></name></expr></argument>, <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>segmateSync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>segmateSync</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>nestingLevel</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>cursorContext</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>DistributedSnapshot_Serialize</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><name>used</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>buffer</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>DEBUG5</name> <operator>&gt;=</operator> <name>log_min_messages</name> <operator>||</operator> <name>Debug_print_full_dtm</name> <operator>||</operator> <name>Debug_print_snapshot_dtm</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"DtxContextInfo_Serialize distributedXid = "</literal><name>UINT64_FORMAT</name><literal type="string">", "</literal>
			 <literal type="string">"curcid %d"</literal></expr></argument>,
			 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>,
			 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
				 <argument><expr><literal type="string">"distributedSnapshotHeader (xminAllDistributedSnapshots "</literal><name>UINT64_FORMAT</name><literal type="string">", xmin = "</literal><name>UINT64_FORMAT</name><literal type="string">", xmax = "</literal><name>UINT64_FORMAT</name><literal type="string">", count = %d)"</literal></expr></argument>,
				 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xminAllDistributedSnapshots</name></name></expr></argument>,
				 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>,
				 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>,
				 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
					 <argument><expr><literal type="string">"....    inProgressXidArray[%d] = "</literal><name>UINT64_FORMAT</name></expr></argument>,
					 <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>inProgressXidArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_snapshot_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
				 <argument><expr><literal type="string">"[Distributed Snapshot #%u] *Serialize* currcid = %d (gxid = "</literal><name>UINT64_FORMAT</name><literal type="string">", '%s')"</literal></expr></argument>,
				 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>distribSnapshotId</name></name></expr></argument>,
				 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>,
				 <argument><expr><call><name>getDistributedTransactionId</name><argument_list>()</argument_list></call></expr></argument>,
				 <argument><expr><call><name>DtxContextToString</name><argument_list>(<argument><expr><name>DistributedTransactionContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"DtxContextInfo_Serialize txnOptions = 0x%x"</literal></expr></argument>, <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"DtxContextInfo_Serialize copied %d bytes"</literal></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DtxContextInfo_Reset</name><parameter_list>(<parameter><decl><type><name>DtxContextInfo</name> <modifier>*</modifier></type><name>dtxContextInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>=</operator> <name>InvalidDistributedTransactionId</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>segmateSync</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>nestingLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DistributedSnapshot_Reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedSnapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DtxContextInfo_Copy</name><parameter_list>(
					<parameter><decl><type><name>DtxContextInfo</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,
					<parameter><decl><type><name>DtxContextInfo</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DtxContextInfo_Reset</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>distributedXid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>segmateSync</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>segmateSync</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>nestingLevel</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>nestingLevel</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>curcid</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>curcid</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>cursorContext</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>cursorContext</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>source</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>DistributedSnapshot_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><operator>-&gt;</operator><name>distributedSnapshot</name></name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name><name>source</name><operator>-&gt;</operator><name>distributedSnapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name> <operator>=</operator> <name><name>source</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
		 <argument><expr><literal type="string">"DtxContextInfo_Copy distributed {xid "</literal><name>UINT64_FORMAT</name><literal type="string">"}, "</literal>
		 <literal type="string">"command id %d"</literal></expr></argument>,
		 <argument><expr><name><name>target</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>,
		 <argument><expr><name><name>target</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"distributed snapshot {xminAllDistributedSnapshots "</literal><name>UINT64_FORMAT</name><literal type="string">", snapshot id %d, "</literal>
			 <literal type="string">"xmin "</literal><name>UINT64_FORMAT</name><literal type="string">", count %d, xmax "</literal><name>UINT64_FORMAT</name><literal type="string">"}"</literal></expr></argument>,
			 <argument><expr><name><name>target</name><operator>-&gt;</operator><name>distributedSnapshot</name><operator>.</operator><name>xminAllDistributedSnapshots</name></name></expr></argument>,
			 <argument><expr><name><name>target</name><operator>-&gt;</operator><name>distributedSnapshot</name><operator>.</operator><name>distribSnapshotId</name></name></expr></argument>,
			 <argument><expr><name><name>target</name><operator>-&gt;</operator><name>distributedSnapshot</name><operator>.</operator><name>xmin</name></name></expr></argument>,
			 <argument><expr><name><name>target</name><operator>-&gt;</operator><name>distributedSnapshot</name><operator>.</operator><name>count</name></name></expr></argument>,
			 <argument><expr><name><name>target</name><operator>-&gt;</operator><name>distributedSnapshot</name><operator>.</operator><name>xmax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>DtxContextInfo_Deserialize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>serializedDtxContextInfo</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>serializedDtxContextInfolen</name></decl></parameter>,
						   <parameter><decl><type><name>DtxContextInfo</name> <modifier>*</modifier></type><name>dtxContextInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistributedSnapshot</name> <modifier>*</modifier></type><name>ds</name> <init>= <expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedSnapshot</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>DtxContextInfo_Reset</name><argument_list>(<argument><expr><name>dtxContextInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>serializedDtxContextInfolen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>serializedDtxContextInfo</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"DtxContextInfo_Deserialize serializedDtxContextInfolen = %d."</literal></expr></argument>,
			 <argument><expr><name>serializedDtxContextInfolen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DistributedTransactionId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DistributedTransactionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>!=</operator> <name>InvalidDistributedTransactionId</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
				 <argument><expr><literal type="string">"DtxContextInfo_Deserialize distributedXid was InvalidDistributedTransactionId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>segmateSync</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>nestingLevel</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>cursorContext</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG3</name></expr></else></ternary><operator>)</operator></expr></argument>,
			 <argument><expr><literal type="string">"DtxContextInfo_Deserialize distributedXid = "</literal><name>UINT64_FORMAT</name><literal type="string">", curcid %d nestingLevel %d segmateSync %u as %s"</literal></expr></argument>,
			 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>,
			 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>, <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>nestingLevel</name></name></expr></argument>,
			 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>segmateSync</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>Gp_is_writer</name></expr> ?</condition><then> <expr><literal type="string">"WRITER"</literal></expr> </then><else>: <expr><literal type="string">"READER"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>DistributedSnapshot_Deserialize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
				 <argument><expr><literal type="string">"DtxContextInfo_Deserialize no distributed snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>DEBUG5</name> <operator>&gt;=</operator> <name>log_min_messages</name> <operator>||</operator> <name>Debug_print_full_dtm</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
				 <argument><expr><literal type="string">"DtxContextInfo_Deserialize distributedXid = "</literal><name>UINT64_FORMAT</name></expr></argument>,
				 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>haveDistributedSnapshot</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
					 <argument><expr><literal type="string">"distributedSnapshotHeader (xminAllDistributedSnapshots "</literal><name>UINT64_FORMAT</name><literal type="string">", xmin = "</literal><name>UINT64_FORMAT</name><literal type="string">", xmax = "</literal><name>UINT64_FORMAT</name><literal type="string">", count = %d)"</literal></expr></argument>,
					 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xminAllDistributedSnapshots</name></name></expr></argument>,
					 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>,
					 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>,
					 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ds</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
						 <argument><expr><literal type="string">"....    inProgressXidArray[%d] = "</literal><name>UINT64_FORMAT</name></expr></argument>,
						 <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>inProgressXidArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>

				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_snapshot_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
					 <argument><expr><literal type="string">"[Distributed Snapshot #%u] *Deserialize* currcid = %d (gxid = "</literal><name>UINT64_FORMAT</name><literal type="string">", '%s')"</literal></expr></argument>,
					 <argument><expr><name><name>ds</name><operator>-&gt;</operator><name>distribSnapshotId</name></name></expr></argument>,
					 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>curcid</name></name></expr></argument>,
					 <argument><expr><call><name>getDistributedTransactionId</name><argument_list>()</argument_list></call></expr></argument>,
					 <argument><expr><call><name>DtxContextToString</name><argument_list>(<argument><expr><name>DistributedTransactionContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
				 <argument><expr><literal type="string">"DtxContextInfo_Deserialize txnOptions = 0x%x"</literal></expr></argument>,
				 <argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedXid</name></name> <operator>==</operator> <name>InvalidDistributedTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>dtxContextInfo</name><operator>-&gt;</operator><name>distributedTxnOptions</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
