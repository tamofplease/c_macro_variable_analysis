<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbsetop.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbsetop.c
 *	  Routines to aid in planning set-operation queries for parallel
 *    execution.  This is, essentially, an extension of the file
 *    optimizer/prep/prepunion.c, although some functions are not
 *    externalized.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 1996-2008, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbsetop.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbhash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbmutate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbpath.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbsetop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Function: choose_setop_type
 *
 * Decide what type of plan to use for a set operation based on the loci of
 * the node list input to the set operation.
 *
 * See the comments in cdbsetop.h for discussion of types of setop plan.
 */</comment>
<function><type><name>GpSetOpType</name></type>
<name>choose_setop_type</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>pathlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ok_general</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ok_partitioned</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ok_single_qe</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>has_partitioned</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name> <operator>||</operator> <name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_UTILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>pathlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>subpath</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>subpath</name><operator>-&gt;</operator><name>locus</name><operator>.</operator><name>locustype</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>CdbLocusType_Hashed</name></expr>:</case>
			<case>case <expr><name>CdbLocusType_HashedOJ</name></expr>:</case>
			<case>case <expr><name>CdbLocusType_Strewn</name></expr>:</case>
				<expr_stmt><expr><name>ok_general</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>has_partitioned</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>CdbLocusType_Entry</name></expr>:</case>
				<expr_stmt><expr><name>ok_general</name> <operator>=</operator> <name>ok_partitioned</name> <operator>=</operator> <name>ok_single_qe</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>CdbLocusType_OuterQuery</name></expr>:</case>
				<return>return <expr><name>PSETOP_SEQUENTIAL_OUTERQUERY</name></expr>;</return>

			<case>case <expr><name>CdbLocusType_SingleQE</name></expr>:</case>
				<expr_stmt><expr><name>ok_general</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>CdbLocusType_SegmentGeneral</name></expr>:</case>
				<expr_stmt><expr><name>ok_general</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>CdbLocusType_General</name></expr>:</case>
				<break>break;</break>

			<case>case <expr><name>CdbLocusType_Replicated</name></expr>:</case>
				<break>break;</break>

			<case>case <expr><name>CdbLocusType_Null</name></expr>:</case>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected Null locus in set operation branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected locus type in set operation branch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>ok_general</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PSETOP_GENERAL</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>ok_partitioned</name> <operator>&amp;&amp;</operator> <name>has_partitioned</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PSETOP_PARALLEL_PARTITIONED</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>ok_single_qe</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PSETOP_SEQUENTIAL_QE</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>PSETOP_SEQUENTIAL_QD</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>adjust_setop_arguments</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>pathlist</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist_list</name></decl></parameter>, <parameter><decl><type><name>GpSetOpType</name></type> <name>setop_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>pathcell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>tlistcell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>adjusted_path</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CdbPathLocus</name></type> <name>locus</name></decl>;</decl_stmt>

	<macro><name>forboth</name><argument_list>(<argument>pathcell</argument>, <argument>pathlist</argument>, <argument>tlistcell</argument>, <argument>tlist_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>subpath</name> <init>= <expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>pathcell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>subtlist</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>tlistcell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>adjusted_path</name> <operator>=</operator> <name>subpath</name></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>setop_type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>PSETOP_GENERAL</name></expr>:</case>
				<comment type="block">/* This only occurs when all arguments are general. */</comment>
				<break>break;</break>

			<case>case <expr><name>PSETOP_PARALLEL_PARTITIONED</name></expr>:</case>
				<switch>switch <condition>(<expr><name><name>subpath</name><operator>-&gt;</operator><name>locus</name><operator>.</operator><name>locustype</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>CdbLocusType_Hashed</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_HashedOJ</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_Strewn</name></expr>:</case>
						<break>break;</break>
					<case>case <expr><name>CdbLocusType_SingleQE</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_General</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_SegmentGeneral</name></expr>:</case>
						<comment type="block">/*
						 * The setop itself will run on an N-gang, so we need
						 * to arrange for the singleton input to be separately
						 * dispatched to a 1-gang and collect its result on
						 * one of our N QEs. Hence ...
						 */</comment>
						<expr_stmt><expr><name>adjusted_path</name> <operator>=</operator> <call><name>make_motion_hash_all_targets</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>, <argument><expr><name>subtlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>CdbLocusType_Null</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_Entry</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_Replicated</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_OuterQuery</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_End</name></expr>:</case>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
										<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected argument locus to set operation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<break>break;</break>

			<case>case <expr><name>PSETOP_SEQUENTIAL_QD</name></expr>:</case>
				<switch>switch <condition>(<expr><name><name>subpath</name><operator>-&gt;</operator><name>locus</name><operator>.</operator><name>locustype</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>CdbLocusType_Hashed</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_HashedOJ</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_Strewn</name></expr>:</case>
						<expr_stmt><expr><call><name>CdbPathLocus_MakeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>adjusted_path</name> <operator>=</operator> <call><name>cdbpath_create_motion_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
																   <argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>CdbLocusType_SingleQE</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_SegmentGeneral</name></expr>:</case>
						<comment type="block">/*
						 * The input was focused on a single QE, but we need it in the QD.
						 * It's bit silly to add a Motion to just move the whole result from
						 * single QE to QD, it would be better to produce the result in the
						 * QD in the first place, and avoid the Motion. But it's too late
						 * to modify the subpath.
						 */</comment>
						<expr_stmt><expr><call><name>CdbPathLocus_MakeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>adjusted_path</name> <operator>=</operator> <call><name>cdbpath_create_motion_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
																   <argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>CdbLocusType_Entry</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_General</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_OuterQuery</name></expr>:</case>
						<break>break;</break>

					<case>case <expr><name>CdbLocusType_Null</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_Replicated</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_End</name></expr>:</case>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
										<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected argument locus to set operation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<break>break;</break>

			<case>case <expr><name>PSETOP_SEQUENTIAL_QE</name></expr>:</case>
			<case>case <expr><name>PSETOP_SEQUENTIAL_OUTERQUERY</name></expr>:</case>
				<switch>switch <condition>(<expr><name><name>subpath</name><operator>-&gt;</operator><name>locus</name><operator>.</operator><name>locustype</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>CdbLocusType_Hashed</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_HashedOJ</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_Strewn</name></expr>:</case>
						<comment type="block">/* Gather to QE.  No need to keep ordering. */</comment>
						<expr_stmt><expr><call><name>CdbPathLocus_MakeSingleQE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locus</name></expr></argument>, <argument><expr><call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>adjusted_path</name> <operator>=</operator> <call><name>cdbpath_create_motion_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
																   <argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>CdbLocusType_SingleQE</name></expr>:</case>
						<break>break;</break>

					<case>case <expr><name>CdbLocusType_OuterQuery</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_General</name></expr>:</case>
						<break>break;</break>

					<case>case <expr><name>CdbLocusType_SegmentGeneral</name></expr>:</case>
						<comment type="block">/* Gather to QE.  No need to keep ordering. */</comment>
						<expr_stmt><expr><call><name>CdbPathLocus_MakeSingleQE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locus</name></expr></argument>, <argument><expr><call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>adjusted_path</name> <operator>=</operator> <call><name>cdbpath_create_motion_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
																   <argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>CdbLocusType_Entry</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_Null</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_Replicated</name></expr>:</case>
					<case>case <expr><name>CdbLocusType_End</name></expr>:</case>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
										<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected argument locus to set operation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<break>break;</break>

			<default>default:</default>
				<comment type="block">/* Can't happen! */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected arguments to set operation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<comment type="block">/* If we made changes, inject them into the argument list. */</comment>
		<if_stmt><if>if <condition>(<expr><name>subpath</name> <operator>!=</operator> <name>adjusted_path</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>subpath</name> <operator>=</operator> <name>adjusted_path</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pathcell</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr_value</name></name> <operator>=</operator> <name>subpath</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * make_motion_hash_all_targets
 *		Add a Motion node atop the given subplath to hash collocate
 *      tuples non-distinct on the non-junk attributes.  This motion
 *      should only be applied to a non-replicated, non-root subpath.
 *
 * This will align with the sort attributes used as input to a SetOp
 * or Unique operator. This is used in path for UNION and other
 * set-operations that implicitly do a DISTINCT on the whole target
 * list.
 */</comment>
<function><type><name>Path</name> <modifier>*</modifier></type>
<name>make_motion_hash_all_targets</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>subpath</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>hashexprs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>hashopfamilies</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>hashsortrefs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CdbPathLocus</name></type> <name>locus</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>tlist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>tle</name> <init>= <expr><operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>tle</name><operator>-&gt;</operator><name>resjunk</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <call><name>cdb_default_distribution_opfamily_for_type</name><argument_list>(<argument><expr><call><name>exprType</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opfamily</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>		<comment type="block">/* not hashable */</comment>

		<expr_stmt><expr><name>hashexprs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>hashexprs</name></expr></argument>, <argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><name><name>tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashopfamilies</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>hashopfamilies</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashsortrefs</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>hashsortrefs</name></expr></argument>, <argument><expr><name><name>tle</name><operator>-&gt;</operator><name>ressortgroupref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>hashexprs</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Distribute to ALL to maximize parallelism */</comment>
		<expr_stmt><expr><name>locus</name> <operator>=</operator> <call><name>cdbpathlocus_from_exprs</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
										<argument><expr><name><name>subpath</name><operator>-&gt;</operator><name>parent</name></name></expr></argument>,
										<argument><expr><name>hashexprs</name></expr></argument>,
										<argument><expr><name>hashopfamilies</name></expr></argument>,
										<argument><expr><name>hashsortrefs</name></expr></argument>,
										<argument><expr><call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Degenerate case, where none of the columns are hashable.
		 *
		 * (If the caller knew this, it probably would have been better to
		 * produce a different plan, with Sorts in the segments, and an
		 * order-preserving gather on the top.)
		 */</comment>
		<expr_stmt><expr><call><name>CdbPathLocus_MakeSingleQE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locus</name></expr></argument>, <argument><expr><call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><call><name>cdbpath_create_motion_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>subpath</name></expr></argument>, <argument><expr><name><name>subpath</name><operator>-&gt;</operator><name>pathkeys</name></name></expr></argument>,
									  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *     Marks an Append plan with its locus based on the set operation
 *     type determined during examination of the arguments.
 */</comment>
<function><type><name>void</name></type>
<name>mark_append_locus</name><parameter_list>(<parameter><decl><type><name>Path</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>GpSetOpType</name></type> <name>optype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>optype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PSETOP_GENERAL</name></expr>:</case>
			<expr_stmt><expr><call><name>CdbPathLocus_MakeGeneral</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>locus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PSETOP_PARALLEL_PARTITIONED</name></expr>:</case>
			<expr_stmt><expr><call><name>CdbPathLocus_MakeStrewn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>locus</name></name></expr></argument>, <argument><expr><call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PSETOP_SEQUENTIAL_QD</name></expr>:</case>
			<expr_stmt><expr><call><name>CdbPathLocus_MakeEntry</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>locus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PSETOP_SEQUENTIAL_QE</name></expr>:</case>
			<expr_stmt><expr><call><name>CdbPathLocus_MakeSingleQE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>locus</name></name></expr></argument>, <argument><expr><call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PSETOP_SEQUENTIAL_OUTERQUERY</name></expr>:</case>
			<expr_stmt><expr><call><name>CdbPathLocus_MakeOuterQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>locus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PSETOP_NONE</name></expr>:</case>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
