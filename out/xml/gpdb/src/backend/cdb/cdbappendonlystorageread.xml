<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbappendonlystorageread.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbappendonlystorageread.c
 *
 * Portions Copyright (c) 2007-2009, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbappendonlystorageread.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/fcntl.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_compression.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystorage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystoragelayer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystorageformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlystorageread.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/gp_compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>


<comment type="block">/*----------------------------------------------------------------
 * Initialization
 *----------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * Initialize AppendOnlyStorageRead.
 *
 * The AppendOnlyStorageRead data structure is initialized once for a read
 * "session" and can be used to read Append-Only Storage Blocks from 1 or
 * more segment files.
 *
 * The current file to read to is opened with the
 * AppendOnlyStorageRead_OpenFile routine.
 *
 * storageRead		- data structure to initialize
 * memoryContext	- memory context to use for buffers and other memory
 *					  needs. When NULL, the current memory context is used.
 * maxBufferLen		- maximum Append-Only Storage Block length including all
 *					  storage headers.
 * relationName		- name of the relation to use in system logging and
 *					  error messages.
 * title			- A phrase that better describes the purpose of this open.
 *					  The caller manages the storage for this.
 * storageAttributes - Append-Only Storage Attributes from relation creation.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyStorageRead_Init</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
						   <parameter><decl><type><name>MemoryContext</name></type> <name>memoryContext</name></decl></parameter>,
						   <parameter><decl><type><name>int32</name></type> <name>maxBufferLen</name></decl></parameter>,
						   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relationName</name></decl></parameter>,
						   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>,
						   <parameter><decl><type><name>AppendOnlyStorageAttributes</name> <modifier>*</modifier></type><name>storageAttributes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>memory</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>memoryLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldMemoryContext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* UNDONE: Range check maxBufferLen */</comment>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>relationName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageAttributes</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* UNDONE: Range check fields in storageAttributes */</comment>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AppendOnlyStorageRead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>maxBufferLen</name></name> <operator>=</operator> <name>maxBufferLen</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>memoryContext</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>memoryContext</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>memoryContext</name></name> <operator>=</operator> <name>memoryContext</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>oldMemoryContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name></name></expr></argument>,
		   <argument><expr><name>storageAttributes</name></expr></argument>,
		   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AppendOnlyStorageAttributes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>relationName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name> <operator>=</operator>
		<call><name>AppendOnlyStorageFormat_RegularHeaderLenNeeded</name><argument_list>(
													   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize BufferedRead.
	 */</comment>
	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>largeReadLen</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>maxBufferLen</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>memoryLen</name> <operator>=</operator> <call><name>BufferedReadMemoryLen</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>maxBufferLen</name></name></expr></argument>,
									  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>largeReadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name> <operator>==</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>memory</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>memoryLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BufferedReadInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
					 <argument><expr><name>memory</name></expr></argument>,
					 <argument><expr><name>memoryLen</name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>maxBufferLen</name></name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>largeReadLen</name></name></expr></argument>,
					 <argument><expr><name>relationName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_scan</name> <operator>||</operator> <name>Debug_appendonly_print_read_block</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-Only Storage Read initialize for table '%s' "</literal>
		   <literal type="string">"(compression = %s, compression level %d, maximum buffer length %d, large read length %d)"</literal></expr></argument>,
		   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
		   <argument><expr><operator>(</operator><ternary><condition><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>compress</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
		   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>compressLevel</name></name></expr></argument>,
		   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>maxBufferLen</name></name></expr></argument>,
		   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>largeReadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return (read-only) pointer to relation name.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>AppendOnlyStorageRead_RelationName</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return (read-only) pointer to relation name.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>AppendOnlyStorageRead_SegmentFileName</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Finish using the AppendOnlyStorageRead session created with ~Init.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyStorageRead_FinishSession</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldMemoryContext</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>oldMemoryContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * UNDONE: This expects the MemoryContext to be what was used for the
	 * 'memory' in ~Init
	 */</comment>
	<expr_stmt><expr><call><name>BufferedReadFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>compression_functions</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>callCompressionDestructor</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>compression_functions</name><index>[<expr><name>COMPRESSION_DESTRUCTOR</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>compressionState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>compressionState</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>compressionState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>compressionState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>compression_functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>compression_functions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Deallocation is done.      Go back to caller memory-context. */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------------
 * Open and Close
 *----------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * Do open the next segment file to read, but don't do error processing.
 *
 * This routine is responsible for seeking to the proper location given
 * the logical EOF.
 *
 * filePathName - name of the segment file to open.
 */</comment>
<function><type><specifier>static</specifier> <name>File</name></type>
<name>AppendOnlyStorageRead_DoOpenFile</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
								 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filePathName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>fileFlags</name> <init>= <expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>filePathName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_read_block</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-Only storage read: opening table '%s', segment file '%s', fileFlags 0x%x"</literal></expr></argument>,
		   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
		   <argument><expr><name>filePathName</name></expr></argument>,
		   <argument><expr><name>fileFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Open the file for read.
	 */</comment>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>, <argument><expr><name>fileFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>file</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Finish the open by positioning the next read and saving information.
 *
 * file			- The open file.
 * filePathName - name of the segment file to open.
 * version		- AO table format version the file is in.
 * logicalEof	- snapshot version of the EOF value to use as the read end
 *				  of the segment file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendOnlyStorageRead_FinishOpenFile</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
									 <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>,
									 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filePathName</name></decl></parameter>,
									 <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
									 <parameter><decl><type><name>int64</name></type> <name>logicalEof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldMemoryContext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AORelationVersion_CheckValid</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * When reading multiple segment files, we throw away the old segment file
	 * name strings.
	 */</comment>
	<expr_stmt><expr><name>oldMemoryContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Allocation is done.  Go back to caller memory-context. */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>logicalEof</name></name> <operator>=</operator> <name>logicalEof</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BufferedReadSetFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
						<argument><expr><name>logicalEof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Open the next segment file to read.
 *
 * This routine is responsible for seeking to the proper
 * read location given the logical EOF.
 *
 * filePathName - name of the segment file to open.
 * version		- AO table format version the file is in.
 * logicalEof	- snapshot version of the EOF value to use as the read end
 *				  of the segment file.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyStorageRead_OpenFile</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
							   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filePathName</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
							   <parameter><decl><type><name>int64</name></type> <name>logicalEof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>filePathName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The EOF must be greater than 0, otherwise we risk transactionally
	 * created segment files from disappearing if a concurrent write
	 * transaction aborts.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>logicalEof</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"append-only storage read segment file '%s' EOF must be &gt; 0 for relation '%s'"</literal></expr></argument>,
						<argument><expr><name>filePathName</name></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>AppendOnlyStorageRead_DoOpenFile</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
											<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"append-Only storage read could not open segment file '%s' for relation '%s'"</literal></expr></argument>,
						<argument><expr><name>filePathName</name></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>AppendOnlyStorageRead_FinishOpenFile</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
										 <argument><expr><name>file</name></expr></argument>,
										 <argument><expr><name>filePathName</name></expr></argument>,
										 <argument><expr><name>version</name></expr></argument>,
										 <argument><expr><name>logicalEof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Try opening the next segment file to read.
 *
 * This routine is responsible for seeking to the proper read location given
 * the logical EOF.
 *
 * filePathName - name of the segment file to open
 * version		- AO table format version the file is in.
 * logicalEof	- snapshot version of the EOF value to use as the read end of
 *				  the segment file.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyStorageRead_TryOpenFile</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
								  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filePathName</name></decl></parameter>,
								  <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>,
								  <parameter><decl><type><name>int64</name></type> <name>logicalEof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>filePathName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* UNDONE: Range check logicalEof */</comment>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>AppendOnlyStorageRead_DoOpenFile</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
											<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>AppendOnlyStorageRead_FinishOpenFile</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
										 <argument><expr><name>file</name></expr></argument>,
										 <argument><expr><name>filePathName</name></expr></argument>,
										 <argument><expr><name>version</name></expr></argument>,
										 <argument><expr><name>logicalEof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set a temporary read range in the current open segment file.
 *
 * The beginFileOffset must be to the beginning of an Append-Only Storage block.
 *
 * The afterFileOffset serves as the temporary EOF.  It will cause
 * ~_GetBlockInfo to return false (no more blocks) when reached.  It must be
 * at the end of an Append-Only Storage block.
 *
 * When ~_GetBlockInfo returns false (no more blocks), the temporary read
 * range is forgotten.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyStorageRead_SetTemporaryRange</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
										<parameter><decl><type><name>int64</name></type> <name>beginFileOffset</name></decl></parameter>,
										<parameter><decl><type><name>int64</name></type> <name>afterFileOffset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>beginFileOffset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>beginFileOffset</name> <operator>&lt;=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>logicalEof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>afterFileOffset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>afterFileOffset</name> <operator>&lt;=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>logicalEof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BufferedReadSetTemporaryRange</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
								  <argument><expr><name>beginFileOffset</name></expr></argument>,
								  <argument><expr><name>afterFileOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Close the current segment file.
 *
 * No error if the current is already closed.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyStorageRead_CloseFile</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>logicalEof</name></name> <operator>=</operator> <call><name>INT64CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name><operator>.</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BufferedReadCompleteFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*----------------------------------------------------------------
 * Reading Content
 *----------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * This section describes for reading potentially long content that can be
 * up to 1 Gb long and and/or content may have been be bulk-compressed.
 *
 * The AppendOnlyStorageRead_GetBlockInfo routine is used to peek at the
 * next Append-Only Storage Block and tell the caller how to handle it.
 *
 * If the block is small and not compressed, then it may be looked at
 * directly in the read buffer.
 *
 * Otherwise, the caller must provide other buffer space to either
 * reconstruct large content and/or to decompress content into.
 */</comment>

<comment type="block">/*
 * Skip zero padding to next page boundary, if necessary.
 *
 * This function is called when the file system block we are scanning has
 * no more valid data but instead is padded with zero's from the position
 * we are currently in until the end of the block. The function will skip
 * to the end of block if skipLen is -1 or skip skipLen bytes otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendOnlyStorageRead_DoSkipPadding</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
									<parameter><decl><type><name>int32</name></type> <name>skipLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>nextReadPosition</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>nextBoundaryPosition</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>safeWriteRemainder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>doSkip</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>availableLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>safewrite</name> <init>= <expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>safeFSWriteSize</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* early exit if no pad used */</comment>
	<if_stmt><if>if <condition>(<expr><name>safewrite</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>nextReadPosition</name> <operator>=</operator>
		<call><name>BufferedReadNextBufferPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nextBoundaryPosition</name> <operator>=</operator>
		<operator>(</operator><operator>(</operator><name>nextReadPosition</name> <operator>+</operator> <name>safewrite</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>safewrite</name><operator>)</operator> <operator>*</operator> <name>safewrite</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>safeWriteRemainder</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>nextBoundaryPosition</name> <operator>-</operator> <name>nextReadPosition</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>safeWriteRemainder</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>doSkip</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>skipLen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Skip to end of page.
		 */</comment>
		<expr_stmt><expr><name>doSkip</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>doSkip</name> <operator>=</operator> <operator>(</operator><name>safeWriteRemainder</name> <operator>&lt;</operator> <name>skipLen</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>doSkip</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Read through the remainder.
		 */</comment>
		<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>BufferedReadGetNextBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
										   <argument><expr><name>safeWriteRemainder</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>availableLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Since our file EOF should always be a multiple of the file-system
		 * page, we do not expect a short read here.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>availableLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>safeWriteRemainder</name> <operator>!=</operator> <name>availableLen</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected end of file"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Expected to read %d bytes after position "</literal> <name>INT64_FORMAT</name> <literal type="string">" but found %d bytes (bufferCount  "</literal> <name>INT64_FORMAT</name> <literal type="string">")."</literal></expr></argument>,
							<argument><expr><name>safeWriteRemainder</name></expr></argument>,
							<argument><expr><name>nextReadPosition</name></expr></argument>,
							<argument><expr><name>availableLen</name></expr></argument>,
							<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * UNDONE: For verification purposes, we should verify the remainder
		 * is all zeroes.
		 */</comment>

		<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_scan</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
			   <argument><expr><literal type="string">"Append-only scan skipping zero padded remainder for table '%s' (nextReadPosition = "</literal> <name>INT64_FORMAT</name> <literal type="string">", safeWriteRemainder = %d)"</literal></expr></argument>,
			   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
			   <argument><expr><name>nextReadPosition</name></expr></argument>,
			   <argument><expr><name>safeWriteRemainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Skip zero padding to next page boundary, if necessary.
 *
 * This function is called when the file system block we are scanning has
 * no more valid data but instead is padded with zero's from the position
 * we are currently in until the end of the block. The function will skip
 * to the end of block if skipLen is -1 or skip skipLen bytes otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>AppendOnlyStorageRead_PositionToNextBlock</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
										  <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>headerOffsetInFile</name></decl></parameter>,
										  <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>header</name></decl></parameter>,
										  <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>blockLimitLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>availableLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>fileRemainderLen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>header</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Peek ahead just enough so we can see the Append-Only storage header.
	 *
	 * However, we need to honor the file-system page boundaries here since we
	 * do not let the length information cross the boundary.
	 */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageRead_DoSkipPadding</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>, <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>headerOffsetInFile</name> <operator>=</operator>
		<call><name>BufferedReadNextBufferPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <call><name>BufferedReadGetNextBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
										<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>availableLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* done reading the file */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name><operator>++</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>availableLen</name> <operator>!=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expected %d bytes and got %d bytes in table %s (segment file '%s', header offset in file = "</literal> <name>INT64_FORMAT</name> <literal type="string">", bufferCount "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name></expr></argument>,
						<argument><expr><name>availableLen</name></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
						<argument><expr><operator>*</operator><name>headerOffsetInFile</name></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * First check for zero padded page remainder.
	 */</comment>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>header</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Skip over zero padding caused when the append command left a
			 * partially full page.
			 */</comment>
			<expr_stmt><expr><call><name>AppendOnlyStorageRead_DoSkipPadding</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
												<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> <comment type="block">/* means till end of page */</comment> )</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Now try to get the peek data from the new page.
			 */</comment>
			<expr_stmt><expr><operator>*</operator><name>headerOffsetInFile</name> <operator>=</operator> <call><name>BufferedReadNextBufferPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <call><name>BufferedReadGetNextBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
												<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name>availableLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* done reading the file */</comment>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>availableLen</name> <operator>!=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expected %d bytes and found %d bytes in table %s (segment file '%s', header offset in file = "</literal> <name>INT64_FORMAT</name> <literal type="string">", bufferCount "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name></expr></argument>,
								<argument><expr><name>availableLen</name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
								<argument><expr><operator>*</operator><name>headerOffsetInFile</name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Determine the maximum boundary of the block. UNDONE: When we have a
	 * block directory, we will tighten the limit down.
	 */</comment>
	<expr_stmt><expr><name>fileRemainderLen</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name><operator>.</operator><name>fileLen</name></name> <operator>-</operator>
		<operator>*</operator><name>headerOffsetInFile</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>maxBufferLen</name></name> <operator>&gt;</operator> <name>fileRemainderLen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>blockLimitLen</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <name>fileRemainderLen</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>blockLimitLen</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>maxBufferLen</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>char</name> <modifier>*</modifier></type>
<name>AppendOnlyStorageRead_ContextStr</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>headerOffsetInFile</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>headerOffsetInFile</name> <operator>=</operator>
		<call><name>BufferedReadCurrentPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s. Append-Only segment file '%s', block header offset in file = "</literal> <name>INT64_FORMAT</name> <literal type="string">", bufferCount "</literal> <name>INT64_FORMAT</name></expr></argument>,
					<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>title</name></name></expr></argument>,
					<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
					<argument><expr><name>headerOffsetInFile</name></expr></argument>,
					<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * errcontext_appendonly_read_storage_block
 *
 * Add an errcontext() line showing the table, segment file, offset in file,
 * block count of the storage block being read.
 */</comment>
<function><type><name>int</name></type>
<name>errcontext_appendonly_read_storage_block</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>AppendOnlyStorageRead_ContextStr</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>errcontext</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>AppendOnlyStorageRead_StorageContentHeaderStr</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>BufferedReadGetCurrentBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>AppendOnlyStorageFormat_BlockHeaderStr</name><argument_list>(<argument><expr><name>header</name></expr></argument>,
												  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name></expr></argument>,
												  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * errdetail_appendonly_read_storage_content_header
 *
 * Add an errdetail() line showing the Append-Only Storage header being read.
 */</comment>
<function><type><name>int</name></type>
<name>errdetail_appendonly_read_storage_content_header</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>AppendOnlyStorageRead_StorageContentHeaderStr</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendOnlyStorageRead_LogBlockHeader</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
									 <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>contextStr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>blockHeaderStr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>contextStr</name> <operator>=</operator> <call><name>AppendOnlyStorageRead_ContextStr</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>blockHeaderStr</name> <operator>=</operator>
		<call><name>AppendOnlyStorageFormat_SmallContentHeaderStr</name><argument_list>(<argument><expr><name>header</name></expr></argument>,
													  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name></expr></argument>,
													  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s. %s"</literal></expr></argument>,
					<argument><expr><name>contextStr</name></expr></argument>,
					<argument><expr><name>blockHeaderStr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>contextStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>blockHeaderStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get information on the next Append-Only Storage Block.
 *
 * Return true if another block was found.  Otherwise, we have reached the
 * end of the current segment file.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyStorageRead_ReadNextBlock</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AOHeaderCheckError</name></type> <name>checkError</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>blockLimitLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* Shutup compiler. */</comment>
	<decl_stmt><decl><type><name>pg_crc32</name></type>	<name>storedChecksum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32</name></type>	<name>computedChecksum</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Reset current* variables.
	 */</comment>

	<comment type="block">/* For efficiency, zero out.  Comment out lines that set fields to 0. */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AppendOnlyStorageReadCurrent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*	storageRead-&gt;current.headerOffsetInFile = 0; */</comment>
	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>=</operator> <name>AoHeaderKind_None</name></expr>;</expr_stmt>
<comment type="block">/*	storageRead-&gt;current.actualHeaderLen = 0; */</comment>
<comment type="block">/*	storageRead-&gt;current.contentLen = 0; */</comment>
<comment type="block">/*	storageRead-&gt;current.overallBlockLen = 0; */</comment>
<comment type="block">/*	storageRead-&gt;current.contentOffset = 0; */</comment>
<comment type="block">/*	storageRead-&gt;current.executorBlockKind = 0; */</comment>
<comment type="block">/*	storageRead-&gt;current.hasFirstRowNum = false; */</comment>
	<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>firstRowNum</name></name> <operator>=</operator> <call><name>INT64CONST</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*	storageRead-&gt;current.rowCount = 0; */</comment>
<comment type="block">/*	storageRead-&gt;current.isLarge = false; */</comment>
<comment type="block">/*	storageRead-&gt;current.isCompressed = false; */</comment>
<comment type="block">/*	storageRead-&gt;current.compressedLen = 0; */</comment>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_datumstream</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"before AppendOnlyStorageRead_PositionToNextBlock, storageRead-&gt;current.headerOffsetInFile is"</literal> <name>INT64_FORMAT</name> <literal type="string">"storageRead-&gt;current.overallBlockLen is %d"</literal></expr></argument>,
		   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr></argument>, <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AppendOnlyStorageRead_PositionToNextBlock</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
												   <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr></argument>,
												   <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>,
												   <argument><expr><operator>&amp;</operator><name>blockLimitLen</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Done reading the file */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_datumstream</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"after AppendOnlyStorageRead_PositionToNextBlock, storageRead-&gt;current.headerOffsetInFile is"</literal> <name>INT64_FORMAT</name> <literal type="string">"storageRead-&gt;current.overallBlockLen is %d"</literal></expr></argument>,
		   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr></argument>, <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*----------
	 * Proceed very carefully:
	 * [ 1. Verify header checksum ]
	 *	 2. Examine (basic) header.
	 *	 3. Examine specific header.
	 * [ 4. Verify the block checksum ]
	 *----------
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name> <operator>&amp;&amp;</operator>
		<name>gp_appendonly_verify_block_checksums</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AppendOnlyStorageFormat_VerifyHeaderChecksum</name><argument_list>(<argument><expr><name>header</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name>storedChecksum</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name>computedChecksum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"header checksum does not match, expected 0x%08X and found 0x%08X"</literal></expr></argument>,
							<argument><expr><name>storedChecksum</name></expr></argument>, <argument><expr><name>computedChecksum</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check the (basic) header information.
	 */</comment>
	<expr_stmt><expr><name>checkError</name> <operator>=</operator> <call><name>AppendOnlyStorageFormat_GetHeaderInfo</name><argument_list>(<argument><expr><name>header</name></expr></argument>,
													   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>checkError</name> <operator>!=</operator> <name>AOHeaderCheckOk</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"bad append-only storage header, header check error %d, detail '%s'"</literal></expr></argument>,
						<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>checkError</name></expr></argument>,
						<argument><expr><call><name>AppendOnlyStorageFormat_GetHeaderCheckErrorStr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Get more header since AppendOnlyStorageRead_PositionToNextBlock only
	 * gets minimum.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>minimumHeaderLen</name></name> <operator>&lt;</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>availableLen</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>BufferedReadGrowBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
										<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>availableLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name>availableLen</name> <operator>!=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expected %d bytes and found %d bytes in table %s (segment file '%s', header offset in file = "</literal> <name>INT64_FORMAT</name> <literal type="string">", bufferCount "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
							<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr></argument>,
							<argument><expr><name>availableLen</name></expr></argument>,
							<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
							<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
							<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr></argument>,
							<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Based on the kind of header, we either have small or large content.
	 */</comment>
	<switch>switch <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AoHeaderKind_SmallContent</name></expr>:</case>

			<comment type="block">/*
			 * Check the SmallContent header information.
			 */</comment>
			<expr_stmt><expr><name>checkError</name> <operator>=</operator> <call><name>AppendOnlyStorageFormat_GetSmallContentHeaderInfo</name>
				<argument_list>(<argument><expr><name>header</name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name></expr></argument>,
				 <argument><expr><name>blockLimitLen</name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>contentOffset</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>executorBlockKind</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>hasFirstRowNum</name></name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>firstRowNum</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>rowCount</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isCompressed</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>compressedLen</name></name></expr></argument>
				)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>checkError</name> <operator>!=</operator> <name>AOHeaderCheckOk</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"bad append-only storage header of type small content, header check error %d, detail '%s'"</literal></expr></argument>,
								<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>checkError</name></expr></argument>,
								<argument><expr><call><name>AppendOnlyStorageFormat_GetHeaderCheckErrorStr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>AoHeaderKind_LargeContent</name></expr>:</case>

			<comment type="block">/*
			 * Check the LargeContent metadata header information.
			 */</comment>
			<expr_stmt><expr><name>checkError</name> <operator>=</operator> <call><name>AppendOnlyStorageFormat_GetLargeContentHeaderInfo</name>
				<argument_list>(<argument><expr><name>header</name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>executorBlockKind</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>hasFirstRowNum</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>firstRowNum</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>rowCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>checkError</name> <operator>!=</operator> <name>AOHeaderCheckOk</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"bad append-only storage header of type large content, header check error %d, detail '%s'"</literal></expr></argument>,
								<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>checkError</name></expr></argument>,
								<argument><expr><call><name>AppendOnlyStorageFormat_GetHeaderCheckErrorStr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isLarge</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>AoHeaderKind_NonBulkDenseContent</name></expr>:</case>

			<comment type="block">/*
			 * Check the NonBulkDense header information.
			 */</comment>
			<expr_stmt><expr><name>checkError</name> <operator>=</operator>
				<call><name>AppendOnlyStorageFormat_GetNonBulkDenseContentHeaderInfo</name>
				<argument_list>(<argument><expr><name>header</name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name></expr></argument>,
				 <argument><expr><name>blockLimitLen</name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>contentOffset</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>executorBlockKind</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>hasFirstRowNum</name></name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>firstRowNum</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>rowCount</name></name></expr></argument>
				)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>checkError</name> <operator>!=</operator> <name>AOHeaderCheckOk</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"bad append-only storage header of type non-bulk dense content, header check error %d, detail '%s'"</literal></expr></argument>,
								<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>checkError</name></expr></argument>,
								<argument><expr><call><name>AppendOnlyStorageFormat_GetHeaderCheckErrorStr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>AoHeaderKind_BulkDenseContent</name></expr>:</case>

			<comment type="block">/*
			 * Check the BulkDenseContent header information.
			 */</comment>
			<expr_stmt><expr><name>checkError</name> <operator>=</operator>
				<call><name>AppendOnlyStorageFormat_GetBulkDenseContentHeaderInfo</name>
				<argument_list>(<argument><expr><name>header</name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>actualHeaderLen</name></name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name></expr></argument>,
				 <argument><expr><name>blockLimitLen</name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>contentOffset</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>executorBlockKind</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>hasFirstRowNum</name></name></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>formatVersion</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>firstRowNum</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>rowCount</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isCompressed</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>compressedLen</name></name></expr></argument>
				)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>checkError</name> <operator>!=</operator> <name>AOHeaderCheckOk</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"bad append-only storage header of type bulk dense content, header check error %d, detail '%s'"</literal></expr></argument>,
								<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>checkError</name></expr></argument>,
								<argument><expr><call><name>AppendOnlyStorageFormat_GetHeaderCheckErrorStr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected append-only header kind %d"</literal></expr></argument>,
				 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_storage_headers</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendOnlyStorageRead_LogBlockHeader</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>hasFirstRowNum</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* UNDONE: Grow buffer and read the value into firstRowNum. */</comment>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>==</operator> <name>AoHeaderKind_LargeContent</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* UNDONE: Finish the read for the information only header. */</comment>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get information on the next Append-Only Storage Block.
 *
 * Return true if another block was found.  Otherwise, when we have reached
 * the end of the current segment file.
 *
 * OUTPUTS:
 *
 * contentLen	- total byte length of the content.
 * executorBlockKind - executor supplied value stored in the Append-Only
 *				  Storage Block header
 * firstRowNum	- When the first row number for this block was explicitly set,
 *				  that value is returned here.  Otherwise, INT64CONST(-1) is
 *				  returned.
 * rowCount		- number of rows in the content
 * isLarge		- When true, the content was longer than the maxBufferLen
 *				  (i.e. blocksize) minus Append-Only Storage Block header and
 *				  had to be stored in more than one storage block.
 * isCompressed - When true, the content is compressed and cannot be looked at
 *				  directly in the buffer.
 */</comment>
<function><type><name>bool</name></type>
<name>AppendOnlyStorageRead_GetBlockInfo</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
								   <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>contentLen</name></decl></parameter>,
								   <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>executorBlockKind</name></decl></parameter>,
								   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>firstRowNum</name></decl></parameter>,
								   <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>rowCount</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isLarge</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isCompressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>isNext</name> <operator>=</operator> <call><name>AppendOnlyStorageRead_ReadNextBlock</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The current* variables have good values even when there is no next
	 * block.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>contentLen</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>executorBlockKind</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>executorBlockKind</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>firstRowNum</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>firstRowNum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>rowCount</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>rowCount</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>isLarge</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isLarge</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>isCompressed</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isCompressed</name></name></expr>;</expr_stmt>

	<return>return <expr><name>isNext</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the file offset of the current Append-Only Storage Block.
 */</comment>
<function><type><name>int64</name></type>
<name>AppendOnlyStorageRead_CurrentHeaderOffsetInFile</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the compressed length of the content of the current Append-Only
 * Storage Block.
 */</comment>
<function><type><name>int64</name></type>
<name>AppendOnlyStorageRead_CurrentCompressedLen</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>compressedLen</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the overall block length of the current Append-Only Storage Block.
 */</comment>
<function><type><name>int64</name></type>
<name>AppendOnlyStorageRead_OverallBlockLen</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Internal routine to grow the BufferedRead buffer to be the whole current
 * block and to get header and content pointers of current block.
 *
 * Since we are growing the BufferedRead buffer to the whole block, old
 * pointers to the header must be abandoned.
 *
 * Header to current block was read and verified by
 * AppendOnlyStorageRead_ReadNextBlock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendOnlyStorageRead_InternalGetBuffer</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
										<parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>content</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>availableLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32</name></type>	<name>storedChecksum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32</name></type>	<name>computedChecksum</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Verify next block is type Block.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>==</operator> <name>AoHeaderKind_SmallContent</name> <operator>||</operator>
		   <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>==</operator> <name>AoHeaderKind_NonBulkDenseContent</name> <operator>||</operator>
		   <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>==</operator> <name>AoHeaderKind_BulkDenseContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Grow the buffer to the full block length to avoid any unnecessary
	 * copying by BufferedRead.
	 *
	 * Since the BufferedRead module may have to copy information around, we
	 * do not save any pointers to the prior buffer call.  This why
	 * AppendOnlyStorageFormat_GetHeaderInfo passes back the offset to the
	 * data, not a pointer.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>header</name> <operator>=</operator> <call><name>BufferedReadGrowBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
									 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>availableLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name> <operator>!=</operator> <name>availableLen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"wrong buffer length, expected %d byte length buffer and got %d"</literal></expr></argument>,
						<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>,
						<argument><expr><name>availableLen</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>storageAttributes</name><operator>.</operator><name>checksum</name></name> <operator>&amp;&amp;</operator>
		<name>gp_appendonly_verify_block_checksums</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Now that the header has been verified, verify the block checksum in
		 * the header with the checksum of the data portion.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AppendOnlyStorageFormat_VerifyBlockChecksum</name><argument_list>(<argument><expr><operator>*</operator><name>header</name></expr></argument>,
														 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>,
														 <argument><expr><operator>&amp;</operator><name>storedChecksum</name></expr></argument>,
														 <argument><expr><operator>&amp;</operator><name>computedChecksum</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"block checksum does not match, expected 0x%08X and found 0x%08X"</literal></expr></argument>,
							<argument><expr><name>storedChecksum</name></expr></argument>,
							<argument><expr><name>computedChecksum</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>content</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>*</operator><name>header</name><operator>)</operator><index>[<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>contentOffset</name></name></expr>]</index><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get a pointer to the *small* non-compressed content.
 *
 * This interface provides a pointer directly into the read buffer for
 * efficient data use.
 */</comment>
<function><type><name>uint8</name> <modifier>*</modifier></type>
<name>AppendOnlyStorageRead_GetBuffer</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Verify next block is a "small" non-compressed block.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>==</operator> <name>AoHeaderKind_SmallContent</name> <operator>||</operator>
		   <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>==</operator> <name>AoHeaderKind_NonBulkDenseContent</name> <operator>||</operator>
		   <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>==</operator> <name>AoHeaderKind_BulkDenseContent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isLarge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isCompressed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fetch pointers to content.
	 */</comment>
	<expr_stmt><expr><call><name>AppendOnlyStorageRead_InternalGetBuffer</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>content</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Copy the large and/or decompressed content out.
 *
 * The contentOutLen parameter value must match the contentLen from the
 * AppendOnlyStorageReadGetBlockInfo call.
 *
 * Note this routine will work for small non-compressed content, too.
 *
 * contentOut	- memory to receive the contiguous content.
 * contentOutLen - byte length of the contentOut buffer.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyStorageRead_Content</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>,
							  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>contentOut</name></decl></parameter>,
							  <parameter><decl><type><name>int32</name></type> <name>contentOutLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>contentOutLen</name> <operator>==</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isLarge</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type>		<name>largeContentPosition</name></decl>;</decl_stmt>	<comment type="block">/* Position of the large content
											 * metadata block. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>largeContentLen</name></decl>;</decl_stmt>	<comment type="block">/* Total length of the large content. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>remainingLargeContentLen</name></decl>;</decl_stmt>	<comment type="block">/* The remaining number of
												 * bytes to read for the large
												 * content. */</comment>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>contentNext</name></decl>;</decl_stmt>	<comment type="block">/* Pointer inside the contentOut buffer to
									 * put the next byte. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>regularBlockReadCount</name></decl>;</decl_stmt>	<comment type="block">/* Number of regular blocks read
											 * after the metadata block. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>regularContentLen</name></decl>;</decl_stmt>	<comment type="block">/* Length of the current regular
										 * block's content. */</comment>

		<comment type="block">/*
		 * Large content.
		 *
		 * We have the LargeContent "metadata" AO block with the total length
		 * (already read) followed by N SmallContent blocks with the fragments
		 * of the large content.
		 */</comment>


		<comment type="block">/*
		 * Save any values needed from the current* members since they will be
		 * modifed as we read the regular blocks.
		 */</comment>
		<expr_stmt><expr><name>largeContentPosition</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>largeContentLen</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Loop to read regular blocks.
		 */</comment>
		<expr_stmt><expr><name>contentNext</name> <operator>=</operator> <name>contentOut</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>remainingLargeContentLen</name> <operator>=</operator> <name>largeContentLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>regularBlockReadCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>true</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Read next regular block.
			 */</comment>
			<expr_stmt><expr><name>regularBlockReadCount</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AppendOnlyStorageRead_ReadNextBlock</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Unexpected end of file.
				 */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected end of file trying to read block %d of large content in segment file '%s' of table '%s'"</literal></expr></argument>,
								<argument><expr><name>regularBlockReadCount</name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Large content metadata block is at position "</literal> <name>INT64_FORMAT</name> <literal type="string">" Large content length %d"</literal></expr></argument>,
								   <argument><expr><name>largeContentPosition</name></expr></argument>,
								   <argument><expr><name>largeContentLen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>!=</operator> <name>AoHeaderKind_SmallContent</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Unexpected headerKind.
				 */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expected header kind 'Block' for block %d of large content in segment file '%s' of table '%s'"</literal></expr></argument>,
								<argument><expr><name>regularBlockReadCount</name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Large content metadata block is at position "</literal> <name>INT64_FORMAT</name> <literal type="string">" Large content length %d"</literal></expr></argument>,
								   <argument><expr><name>largeContentPosition</name></expr></argument>,
								   <argument><expr><name>largeContentLen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isLarge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>regularContentLen</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>remainingLargeContentLen</name> <operator>-=</operator> <name>regularContentLen</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>remainingLargeContentLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Too much data found???
				 */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"too much data found after reading %d blocks for large content in segment file '%s' of table '%s'"</literal></expr></argument>,
								<argument><expr><name>regularBlockReadCount</name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Large content metadata block is at position "</literal> <name>INT64_FORMAT</name> <literal type="string">" Large content length %d; extra data length %d"</literal></expr></argument>,
								<argument><expr><name>largeContentPosition</name></expr></argument>,
								<argument><expr><name>largeContentLen</name></expr></argument>,
								<argument><expr><operator>-</operator><name>remainingLargeContentLen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * We can safely recurse one level here.
			 */</comment>
			<expr_stmt><expr><call><name>AppendOnlyStorageRead_Content</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
										  <argument><expr><name>contentNext</name></expr></argument>,
										  <argument><expr><name>regularContentLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>remainingLargeContentLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Advance our pointer inside the contentOut buffer to put the
			 * next bytes.
			 */</comment>
			<expr_stmt><expr><name>contentNext</name> <operator>+=</operator> <name>regularContentLen</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * "Small" content in one regular block.
		 */</comment>

		<comment type="block">/*
		 * Fetch pointers to content.
		 */</comment>
		<expr_stmt><expr><call><name>AppendOnlyStorageRead_InternalGetBuffer</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isCompressed</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Not compressed.
			 */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>contentOut</name></expr></argument>,
				   <argument><expr><name>content</name></expr></argument>,
				   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					 <argument><expr><literal type="string">"Append-only Storage Read non-compressed block for table '%s' "</literal>
					 <literal type="string">"(length = %d, segment file '%s', header offset in file = "</literal>
					 <name>INT64_FORMAT</name> <literal type="string">", block count "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Compressed.
			 */</comment>
			<decl_stmt><decl><type><name>PGFunction</name></type>	<name>decompressor</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PGFunction</name> <modifier>*</modifier></type><name>cfns</name> <init>= <expr><name><name>storageRead</name><operator>-&gt;</operator><name>compression_functions</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>cfns</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"decompression information missing"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>decompressor</name> <operator>=</operator> <name><name>cfns</name><index>[<expr><name>COMPRESSION_DECOMPRESS</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>gp_decompress</name><argument_list>(<argument><expr><name>content</name></expr></argument>,    <comment type="block">/* Compressed data in block. */</comment>
						  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>compressedLen</name></name></expr></argument>,
						  <argument><expr><name>contentOut</name></expr></argument>,
						  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>,
						  <argument><expr><name>decompressor</name></expr></argument>,
						  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>compressionState</name></name></expr></argument>,
						  <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>Debug_appendonly_print_scan</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					 <argument><expr><literal type="string">"Append-only Storage Read decompressed block for table '%s' "</literal>
					 <literal type="string">"(compressed length %d, uncompressed length = %d, segment file '%s', "</literal>
					 <literal type="string">"header offset in file = "</literal> <name>INT64_FORMAT</name> <literal type="string">", block count "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
					 <argument><expr><call><name>AppendOnlyStorageFormat_GetCompressedLen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr></argument>,
					 <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>bufferCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Skip the current block found with ~_GetBlockInfo.
 *
 * Do not decompress the block contents.
 *
 * Call this routine instead of calling ~_GetBuffer or ~_Contents that look at
 * contents. Useful when the desired row(s) are not within the row range of
 * the current block.
 */</comment>
<function><type><name>void</name></type>
<name>AppendOnlyStorageRead_SkipCurrentBlock</name><parameter_list>(<parameter><decl><type><name>AppendOnlyStorageRead</name> <modifier>*</modifier></type><name>storageRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>storageRead</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>isActive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isLarge</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int64</name></type>		<name>largeContentPosition</name></decl>;</decl_stmt>	<comment type="block">/* Position of the large content
											 * metadata block. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>largeContentLen</name></decl>;</decl_stmt>	<comment type="block">/* Total length of the large content. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>remainingLargeContentLen</name></decl>;</decl_stmt>	<comment type="block">/* Remaining number of bytes
												 * to read for the large
												 * content. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>regularBlockReadCount</name></decl>;</decl_stmt>	<comment type="block">/* Number of regular blocks read
											 * after the metadata block. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>regularContentLen</name></decl>;</decl_stmt>	<comment type="block">/* Length of the current regular
										 * block's content. */</comment>
		<decl_stmt><decl><type><name>int32</name></type>		<name>availableLen</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Large content.
		 *
		 * We have the LargeContent "metadata" AO block with the total length
		 * (already read) followed by N SmallContent blocks with the fragments
		 * of the large content.
		 */</comment>


		<comment type="block">/*
		 * Save any values needed from the current* members since they will be
		 * modifed as we read the regular blocks.
		 */</comment>
		<expr_stmt><expr><name>largeContentPosition</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerOffsetInFile</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>largeContentLen</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Loop to read regular blocks.
		 */</comment>
		<expr_stmt><expr><name>remainingLargeContentLen</name> <operator>=</operator> <name>largeContentLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>regularBlockReadCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>true</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Read next regular block.
			 */</comment>
			<expr_stmt><expr><name>regularBlockReadCount</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AppendOnlyStorageRead_ReadNextBlock</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Unexpected end of file.
				 */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected end of file trying to read block %d of large content in segment file '%s' of table '%s'"</literal></expr></argument>,
								<argument><expr><name>regularBlockReadCount</name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Large content metadata block is at position "</literal> <name>INT64_FORMAT</name> <literal type="string">" Large content length %d"</literal></expr></argument>,
								   <argument><expr><name>largeContentPosition</name></expr></argument>, <argument><expr><name>largeContentLen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>headerKind</name></name> <operator>!=</operator> <name>AoHeaderKind_SmallContent</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Unexpected headerKind.
				 */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expected header kind 'Block' for block %d of large content in segment file '%s' of table '%s'"</literal></expr></argument>,
								<argument><expr><name>regularBlockReadCount</name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Large content metadata block is at position "</literal> <name>INT64_FORMAT</name> <literal type="string">" Large content length %d"</literal></expr></argument>,
								   <argument><expr><name>largeContentPosition</name></expr></argument>, <argument><expr><name>largeContentLen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>isLarge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>BufferedReadGrowBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>storageRead</name><operator>-&gt;</operator><name>bufferedRead</name></name></expr></argument>,
								   <argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>availableLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name> <operator>!=</operator> <name>availableLen</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"wrong buffer length, expected %d byte length buffer and got %d"</literal></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>overallBlockLen</name></name></expr></argument>,
								<argument><expr><name>availableLen</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail_appendonly_read_storage_content_header</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errcontext_appendonly_read_storage_block</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>regularContentLen</name> <operator>=</operator> <name><name>storageRead</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>uncompressedLen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>remainingLargeContentLen</name> <operator>-=</operator> <name>regularContentLen</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>remainingLargeContentLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Too much data found???
				 */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"too much data found after reading %d blocks for large content in segment file '%s' of table '%s'"</literal></expr></argument>,
								<argument><expr><name>regularBlockReadCount</name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>segmentFileName</name></name></expr></argument>,
								<argument><expr><name><name>storageRead</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Large content metadata block is at position "</literal> <name>INT64_FORMAT</name> <literal type="string">" Large content length %d; extra data length %d"</literal></expr></argument>,
								   <argument><expr><name>largeContentPosition</name></expr></argument>,
								   <argument><expr><name>largeContentLen</name></expr></argument>,
								   <argument><expr><operator>-</operator><name>remainingLargeContentLen</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Since we are skipping, we do not use the compressed or
			 * uncompressed content.
			 */</comment>

			<if_stmt><if>if <condition>(<expr><name>remainingLargeContentLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * "Small" content in one regular block.
		 */</comment>

		<comment type="block">/*
		 * Fetch pointers to content.
		 *
		 * Since we are skipping, we do not look at the content.
		 */</comment>
		<expr_stmt><expr><call><name>AppendOnlyStorageRead_InternalGetBuffer</name><argument_list>(<argument><expr><name>storageRead</name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>,
												<argument><expr><operator>&amp;</operator><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
