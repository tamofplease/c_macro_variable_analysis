<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbtimer.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbtimer.c
 *	  Functions to manipulate timers used in a backend.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbtimer.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbtimer.h"</cpp:file></cpp:include>


<comment type="block">/*
 * resetTimers - disable process interval timers
 *
 * Testing has shown that fork on some systems doesn't clear timers as it should and
 * exec is subjected to *fatal* interruption by timers so the timers are disabled
 * before the fork is done.  Before resetting the interval timers, the all signals
 * are blocked.  After resetting the interval timers, the signal mask is restored.
 *
 * otimers: a pointer to an itmers struct to contain the old timer values.  If
 * 		NULL, the old timer valuess are not preserved.
 *
 * Errors from setitimer are not expected and are handled using Assert (as in
 * PGSempahoreLockTimed).
 */</comment>
<function><type><name>void</name></type>
<name>resetTimers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>itimers</name></name> <modifier>*</modifier></type><name>otimers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>xtimer</name></decl>;</decl_stmt>	<comment type="block">/* Zero timer for disabling */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>p_rtimer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* ITIMER_REAL */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>p_vtimer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* ITIMER_VIRTUAL */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>p_ptimer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* ITIMER_PROF */</comment>

	<if_stmt><if>if <condition>(<expr><name>otimers</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>p_rtimer</name> <operator>=</operator> <operator>&amp;</operator><name><name>otimers</name><operator>-&gt;</operator><name>rtimer</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p_vtimer</name> <operator>=</operator> <operator>&amp;</operator><name><name>otimers</name><operator>-&gt;</operator><name>vtimer</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p_ptimer</name> <operator>=</operator> <operator>&amp;</operator><name><name>otimers</name><operator>-&gt;</operator><name>ptimer</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Block signals while capturing timers.
	 */</comment>
	<expr_stmt><expr><call><name>PG_SETMASK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BlockSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Disable all process interval timers preserving the old values if
	 * requested.
	 */</comment>
	<expr_stmt><expr><call><name>timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xtimer</name><operator>.</operator><name>it_interval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>timerclear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>xtimer</name><operator>.</operator><name>it_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_REAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xtimer</name></expr></argument>, <argument><expr><name>p_rtimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_VIRTUAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xtimer</name></expr></argument>, <argument><expr><name>p_vtimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_REAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xtimer</name></expr></argument>, <argument><expr><name>p_ptimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Restore signal mask.
	 */</comment>
	<expr_stmt><expr><call><name>PG_SETMASK</name><argument_list>(<argument><expr><operator>&amp;</operator><name>UnBlockSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * restoreTimers - restore timers from itimers struct.
 *
 * Restores the process interval timers stored in the itimers struct
 * by resetTimers.
 *
 * timers: a reference to the itimers struct passed to the resetTimers
 * 		function.
 *
 * Errors from setitimer are not expected and are handled using Assert (as in
 * PGSempahoreLockTimed).
 */</comment>
<function><type><name>void</name></type>
<name>restoreTimers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>itimers</name></name> <modifier>*</modifier></type><name>timers</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>timers</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Coding error! */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Old timer values not provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Restore any active timers.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>rtimer</name><operator>.</operator><name>it_interval</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>rtimer</name><operator>.</operator><name>it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_REAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>rtimer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>vtimer</name><operator>.</operator><name>it_interval</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>vtimer</name><operator>.</operator><name>it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_VIRTUAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>vtimer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>ptimer</name><operator>.</operator><name>it_interval</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>timerisset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>ptimer</name><operator>.</operator><name>it_value</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>setitimer</name><argument_list>(<argument><expr><name>ITIMER_PROF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>timers</name><operator>-&gt;</operator><name>ptimer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>err</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
