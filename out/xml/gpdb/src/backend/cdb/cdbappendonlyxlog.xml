<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbappendonlyxlog.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbappendonlyxlog.c
 *
 * Portions Copyright (c) 2009-2010, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbappendonlyxlog.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/aomd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlyxlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector_lists.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Insert an AO XLOG/AOCO record.
 *
 * This is also used with 0 length, to mark creation of a new segfile.
 */</comment>
<function><type><name>void</name></type>
<name>xlog_ao_insert</name><parameter_list>(<parameter><decl><type><name>RelFileNode</name></type> <name>relFileNode</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>segmentFileNum</name></decl></parameter>,
			   <parameter><decl><type><name>int64</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>bufferLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_ao_insert</name></type>	<name>xlaoinsert</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>xlaoinsert</name><operator>.</operator><name>target</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>relFileNode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xlaoinsert</name><operator>.</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name> <operator>=</operator> <name>segmentFileNum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xlaoinsert</name><operator>.</operator><name>target</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlaoinsert</name></expr></argument>, <argument><expr><name>SizeOfAOInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bufferLen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>buffer</name></expr></argument>, <argument><expr><name>bufferLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"xlog_ao_insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_APPEND_ONLY_ID</name></expr></argument>, <argument><expr><name>XLOG_APPENDONLY_INSERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>wait_to_avoid_large_repl_lag</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ao_insert_replay</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dbPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>written_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fileFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xl_ao_insert</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_ao_insert</name> <operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>xlrec</name> <operator>+</operator> <name>SizeOfAOInsert</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>len</name> <init>= <expr><call><name>XLogRecGetDataLen</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>SizeOfAOInsert</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>dbPath</name> <operator>=</operator> <call><name>GetDatabasePath</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
							 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name><operator>.</operator><name>spcNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%u"</literal></expr></argument>, <argument><expr><name>dbPath</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%u.%u"</literal></expr></argument>, <argument><expr><name>dbPath</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dbPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fileFlags</name> <operator>=</operator> <name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name></expr>;</expr_stmt>

	<comment type="block">/* When writing from the beginning of the file, it might not exist yet. Create it. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fileFlags</name> <operator>|=</operator> <name>O_CREAT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fileFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>XLogAOSegmentFile</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>written_len</name> <operator>=</operator> <call><name>FileWrite</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>offset</name></name></expr></argument>,
							<argument><expr><name>WAIT_EVENT_COPY_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>written_len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>written_len</name> <operator>!=</operator> <name>len</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to write %d bytes in file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>len</name></expr></argument>,
						<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>register_dirty_segment_ao</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name></name></expr></argument>,
							  <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name></expr></argument>,
							  <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * AO/CO truncate xlog record insertion.
 */</comment>
<function><type><name>void</name></type> <name>xlog_ao_truncate</name><parameter_list>(<parameter><decl><type><name>RelFileNode</name></type> <name>relFileNode</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>segmentFileNum</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xl_ao_truncate</name></type>	<name>xlaotruncate</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>xlaotruncate</name><operator>.</operator><name>target</name><operator>.</operator><name>node</name></name> <operator>=</operator> <name>relFileNode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xlaotruncate</name><operator>.</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name> <operator>=</operator> <name>segmentFileNum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xlaotruncate</name><operator>.</operator><name>target</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XLogBeginInsert</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>XLogRegisterData</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>xlaotruncate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xl_ao_truncate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>XLogInsert</name><argument_list>(<argument><expr><name>RM_APPEND_ONLY_ID</name></expr></argument>, <argument><expr><name>XLOG_APPENDONLY_TRUNCATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ao_truncate_replay</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dbPath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type>		<name>file</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>xl_ao_truncate</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_ao_truncate</name><operator>*</operator><operator>)</operator> <call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>dbPath</name> <operator>=</operator> <call><name>GetDatabasePath</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name><operator>.</operator><name>dbNode</name></name></expr></argument>,
							 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name><operator>.</operator><name>spcNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%u"</literal></expr></argument>, <argument><expr><name>dbPath</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name><operator>.</operator><name>relNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%u.%u"</literal></expr></argument>, <argument><expr><name>dbPath</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name><operator>.</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>dbPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dbPath</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Primary creates the file first and then writes the xlog record for
		 * the creation for AO tables similar to heap.  Hence, file can get
		 * created on primary without writing xlog record if failure happens
		 * on primary just after creating the file. This creates situation
		 * where VACUUM can generate truncate record based on aoseg entry with
		 * eof 0 and file present on primary. Then during replay mirror may
		 * not have the file, as was never created on mirror. So, avoid adding
		 * the entry to invalid hash table for truncate at offset zero
		 * (EOF=0).  This avoids mirror PANIC, as anyways truncate to zero is
		 * same as file not present.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>offset</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>XLogAOSegmentFile</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>segment_filenum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FileTruncate</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name>WAIT_EVENT_DATA_FILE_TRUNCATE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to truncate file \"%s\" to offset:"</literal> <name>INT64_FORMAT</name> <literal type="string">" : %m"</literal></expr></argument>,
						<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>target</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>appendonly_redo</name><parameter_list>(<parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>         <name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Do not perform redo of AO XLOG records for crash recovery mode. We do
	 * not need to replay AO XLOG records in this case because fsync
	 * is performed on file close.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsCrashRecoveryOnly</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>info</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_APPENDONLY_INSERT</name></expr>:</case>
			<expr_stmt><expr><call><name>ao_insert_replay</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_APPENDONLY_TRUNCATE</name></expr>:</case>
			<expr_stmt><expr><call><name>ao_truncate_replay</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"appendonly_redo: unknown code %u"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
