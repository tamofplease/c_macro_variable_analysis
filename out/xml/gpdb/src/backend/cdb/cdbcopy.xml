<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbcopy.c"><comment type="block">/*--------------------------------------------------------------------------
 *
 * cdbcopy.c
 * 	 Provides routines that executed a COPY command on an MPP cluster. These
 * 	 routines are called from the backend COPY command whenever MPP is in the
 * 	 default dispatch mode.
 *
 * Usage:
 *
 * CdbCopy cdbCopy = makeCdbCopy();
 *
 * PG_TRY();
 * {
 *     cdbCopyStart(cdbCopy, ...);
 *
 *     // process each row
 *     while (...)
 *     {
 *         cdbCopyGetData(cdbCopy, ...)
 *         or
 *         cdbCopySendData(cdbCopy, ...)
 *     }
 *     cdbCopyEnd(cdbCopy);
 * }
 * PG_CATCH();
 * {
 *     cdbCopyAbort(cdbCopy);
 * }
 * PG_END_TRY();
 *
 *
 * makeCdbCopy() creates a struct to hold information about the on-going COPY.
 * It does not change the state of the connection yet.
 *
 * cdbCopyStart() puts the connections in the gang into COPY mode. If an error
 * occurs during or after cdbCopyStart(), you must call cdbCopyAbort() to reset
 * the connections to normal state!
 *
 * cdbCopyGetData() and cdbCopySendData() call libpq's PQgetCopyData() and
 * PQputCopyData(), respectively. If an error occurs, it is thrown with ereport().
 *
 * When you're done, call cdbCopyEnd().
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbcopy.c
*
*--------------------------------------------------------------------------
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbconn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbcopy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdisp_query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbdispatchresult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbfts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbgang.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pmsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cdbCopyEndInternal</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>abort_msg</name></decl></parameter>,
				   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>total_rows_completed_p</name></decl></parameter>,
				   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>total_rows_rejected_p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>Gang</name> <modifier>*</modifier></type>
<name>getCdbCopyPrimaryGang</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>dispatcherState</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>Gang</name> <operator>*</operator><operator>)</operator><call><name>linitial</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>dispatcherState</name><operator>-&gt;</operator><name>allocatedGangs</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create a cdbCopy object that includes all the cdb
 * information and state needed by the backend COPY.
 */</comment>
<function><type><name>CdbCopy</name> <modifier>*</modifier></type>
<name>makeCdbCopy</name><parameter_list>(<parameter><decl><type><name>CopyState</name></type> <name>cstate</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_copy_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CdbCopy</name>		<modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GpPolicy</name>	<modifier>*</modifier></type><name>policy</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>policy</name> <operator>=</operator> <name><name>cstate</name><operator>-&gt;</operator><name>rel</name><operator>-&gt;</operator><name>rd_cdbpolicy</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CdbCopy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* fresh start */</comment>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>total_segs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>copy_in</name></name> <operator>=</operator> <name>is_copy_in</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seglist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dispatcherState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>copy_out_buf</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * COPY replicated table TO file, pick only one replica, otherwise, duplicate
	 * rows will be copied.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_copy_in</name> <operator>&amp;&amp;</operator> <call><name>GpPolicyIsReplicated</name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cstate</name><operator>-&gt;</operator><name>on_segment</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>total_segs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seglist</name></name> <operator>=</operator> <call><name>list_make1_int</name><argument_list>(<argument><expr><name>gp_session_id</name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>total_segs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>total_segs</name></name> <operator>=</operator> <name><name>policy</name><operator>-&gt;</operator><name>numsegments</name></name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>total_segs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seglist</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>seglist</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>cstate</name><operator>-&gt;</operator><name>cdbCopy</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

	<return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * starts a copy command on a specific segment database.
 *
 * may pg_throw via elog/ereport.
 */</comment>
<function><type><name>void</name></type>
<name>cdbCopyStart</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>CopyStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>file_encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>flags</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the output needs to be in a different encoding, tell the segment.
	 * Normally, when we run normal queries, we keep the segment connections
	 * in database encoding, and do the encoding conversions in the QD, just
	 * before sending results to the client. But in COPY TO, we don't do
	 * any conversions to the data we receive from the segments, so they
	 * must produce the output in the correct encoding.
	 *
	 * We do this by adding "ENCODING 'xxx'" option to the options list of
	 * the CopyStmt that we dispatch.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>file_encoding</name> <operator>!=</operator> <call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>option</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * But first check if the encoding option is already in the options
		 * list (i.e the user specified it explicitly in the COPY command)
		 */</comment>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>option</argument>, <argument>stmt-&gt;options</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * The 'file_encoding' came from the options, so they should match, but
				 * let's sanity-check.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>pg_char_to_encoding</name><argument_list>(<argument><expr><call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>file_encoding</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"encoding option in original COPY command does not match encoding being dispatched"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>encname</name> <init>= <expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name>file_encoding</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name></expr></argument>,
									<argument><expr><call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"encoding"</literal></expr></argument>,
												<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>encname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>flags</name> <operator>=</operator> <name>DF_WITH_SNAPSHOT</name> <operator>|</operator> <name>DF_CANCEL_ON_ERROR</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>copy_in</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>DF_NEED_TWO_PHASE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>CdbDispatchCopyStart</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"cdb_copy_start_after_dispatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * sends data to a copy command on all segments.
 */</comment>
<function><type><name>void</name></type>
<name>cdbCopySendDataToAll</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Gang</name>	   <modifier>*</modifier></type><name>gp</name> <init>= <expr><call><name>getCdbCopyPrimaryGang</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gp</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>seg</name> <init>= <expr><name><name>gp</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>segindex</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>cdbCopySendData</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * sends data to a copy command on a specific segment (usually
 * the hash result of the data value).
 */</comment>
<function><type><name>void</name></type>
<name>cdbCopySendData</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target_seg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,
				<parameter><decl><type><name>int</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Gang</name>	   <modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * NOTE!! note that another DELIM was added, for the buf_converted in the
	 * code above. I didn't do it because it's broken right now
	 */</comment>

	<expr_stmt><expr><name>gp</name> <operator>=</operator> <call><name>getCdbCopyPrimaryGang</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>gp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getSegmentDescriptorFromGang</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>target_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* transmit the COPY data */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PQputCopyData</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* We don't use blocking mode, so this shouldn't happen */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_IO_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not send COPY data to segment %d, attempt blocked"</literal></expr></argument>,
							<argument><expr><name>target_seg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_IO_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not send COPY data to segment %d: %s"</literal></expr></argument>,
							<argument><expr><name>target_seg</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * gets a chunk of rows of data from a copy command.
 * returns boolean true if done. Caller should still
 * empty the leftovers in the outbuf in that case.
 */</comment>
<function><type><name>bool</name></type>
<name>cdbCopyGetData</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>copy_cancel</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>rows_processed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Gang</name>	   <modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nbytes</name></decl>;</decl_stmt>

	<comment type="block">/* clean out buf data */</comment>
	<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>copy_out_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>gp</name> <operator>=</operator> <call><name>getCdbCopyPrimaryGang</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * MPP-7712: we used to issue the cancel-requests for each *row* we got
	 * back from each segment -- this is potentially millions of
	 * cancel-requests. Cancel requests consist of an out-of-band connection
	 * to the segment-postmaster, this is *not* a lightweight operation!
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>copy_cancel</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

		<comment type="block">/* iterate through all the segments that still have data to give */</comment>
		<macro><name>foreach</name><argument_list>(<argument>cur</argument>, <argument>c-&gt;seglist</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>source_seg</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getSegmentDescriptorFromGang</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>source_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* send a query cancel request to that segdb */</comment>
			<expr_stmt><expr><call><name>PQrequestCancel</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Collect data rows from the segments that still have rows to give until
	 * chunk minimum size is reached
	 */</comment>
	<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>copy_out_buf</name><operator>.</operator><name>len</name></name> <operator>&lt;</operator> <name>COPYOUT_CHUNK_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

		<comment type="block">/* iterate through all the segments that still have data to give */</comment>
		<macro><name>foreach</name><argument_list>(<argument>cur</argument>, <argument>c-&gt;seglist</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>source_seg</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>getSegmentDescriptorFromGang</name><argument_list>(<argument><expr><name>gp</name></expr></argument>, <argument><expr><name>source_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* get 1 row of COPY data */</comment>
			<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>PQgetCopyData</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * SUCCESS -- got a row of data
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>buffer</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* append the data row to the data chunk */</comment>
				<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>copy_out_buf</name></name><operator>)</operator></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* increment the rows processed counter for the end tag */</comment>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>rows_processed</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>

			<comment type="block">/*
			 * DONE -- Got all the data rows from this segment, or a cancel
			 * request.
			 *
			 * Remove the segment that completed sending data, from the list
			 * of in-progress segments.
			 *
			 * Note: After PQgetCopyData() returns -1, you need to call
			 * PGgetResult() to get any possible errors. But we don't do that
			 * here. That's done later, in the call to cdbCopyEnd() (or
			 * cdbCopyAbort(), if something went wrong.)
			 */</comment>
			<if type="elseif">else if <condition>(<expr><name>nbytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>seglist</name></name> <operator>=</operator> <call><name>list_delete_int</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>seglist</name></name></expr></argument>, <argument><expr><name>source_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>seglist</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* all segments are done */</comment>

				<comment type="block">/* start over from first seg as we just changed the seg list */</comment>
				<break>break;</break>
			</block_content>}</block></if>
			<comment type="block">/*
			 * ERROR!
			 */</comment>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * should never happen since we are blocking. Don't bother to
				 * try again, exit with error.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_IO_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not send COPY data to segment %d, attempt blocked"</literal></expr></argument>,
									<argument><expr><name>source_seg</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_IO_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not receive COPY data from segment %d: %s"</literal></expr></argument>,
									<argument><expr><name>source_seg</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block>

		<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>copy_out_buf</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>COPYOUT_CHUNK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Commands to end the cdbCopy.
 *
 * If an error occurrs, or if an error is reported by one of the segments,
 * cdbCopyEnd() throws it with ereport(), after closing the COPY and cleaning
 * up any resources associated with it.
 *
 * cdbCopyAbort() usually does not throw an error. It is used in error-recovery
 * codepaths, typically in a PG_CATCH() block, and the caller is about to
 * re-throw the original error that caused the abortion.
 */</comment>
<function><type><name>void</name></type>
<name>cdbCopyAbort</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>cdbCopyEndInternal</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="string">"aborting COPY in QE due to error in QD"</literal></expr></argument>,
					   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * End the copy command on all segment databases,
 * and fetch the total number of rows completed by all QEs
 */</comment>
<function><type><name>void</name></type>
<name>cdbCopyEnd</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,
		   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>total_rows_completed_p</name></decl></parameter>,
		   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>total_rows_rejected_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cdbCopyEndInternal</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					   <argument><expr><name>total_rows_completed_p</name></expr></argument>,
					   <argument><expr><name>total_rows_rejected_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cdbCopyEndInternal</name><parameter_list>(<parameter><decl><type><name>CdbCopy</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>abort_msg</name></decl></parameter>,
				   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>total_rows_completed_p</name></decl></parameter>,
				   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>total_rows_rejected_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Gang</name>	   <modifier>*</modifier></type><name>gp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_bad_connections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>total_rows_completed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* total num rows completed by all
											 * QEs */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>total_rows_rejected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* total num rows rejected by all
											 * QEs */</comment>
	<decl_stmt><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>first_error</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name>	<modifier>*</modifier></type><name>pollRead</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>io_errors</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>io_err_msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>           <modifier>*</modifier></type><name>oidList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>				<name>nest_level</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"cdb_copy_end_internal_start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io_err_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Don't try to end a copy that already ended with the destruction of the
	 * writer gang. We know that this has happened if the CdbCopy's
	 * primary_writer is NULL.
	 *
	 * GPDB_91_MERGE_FIXME: ugh, this is nasty. We shouldn't be calling
	 * cdbCopyEnd twice on the same CdbCopy in the first place!
	 */</comment>
	<expr_stmt><expr><name>gp</name> <operator>=</operator> <call><name>getCdbCopyPrimaryGang</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gp</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>total_rows_completed_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>total_rows_completed_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>total_rows_rejected_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>total_rows_completed_p</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * In COPY in mode, call PQputCopyEnd() to tell the segments that we're done.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>copy_in</name></name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>seg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>seg</name> <operator>&lt;</operator> <name><name>gp</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>seg</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>gp</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>seg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"PQputCopyEnd seg %d    "</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* end this COPY command */</comment>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PQputCopyEnd</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>abort_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* get command end status */</comment>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* error */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io_err_msg</name></expr></argument>,
								 <argument><expr><literal type="string">"Failed to send end-of-copy to segment %d: %s"</literal></expr></argument>,
								 <argument><expr><name>seg</name></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>io_errors</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* attempt blocked */</comment>

				<comment type="block">/*
				 * CDB TODO: Can this occur?  The libpq documentation says, "this
				 * case is only possible if the connection is in nonblocking
				 * mode... wait for write-ready and try again", i.e., the proper
				 * response would be to retry, not error out.
				 */</comment>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io_err_msg</name></expr></argument>,
								 <argument><expr><literal type="string">"primary segment %d, dbid %d, attempt blocked\n"</literal></expr></argument>,
								 <argument><expr><name>seg</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>segment_database_info</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>io_errors</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>nest_level</name> <operator>=</operator> <call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pollRead</name> <operator>=</operator> <operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>seg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>seg</name> <operator>&lt;</operator> <name><name>gp</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>seg</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SegmentDatabaseDescriptor</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name><name>gp</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>seg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>segment_rows_completed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* # of rows completed by this QE */</comment>
		<decl_stmt><decl><type><name>int64</name></type>		<name>segment_rows_rejected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* # of rows rejected by this QE */</comment>

		<expr_stmt><expr><name><name>pollRead</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pollRead</name><operator>-&gt;</operator><name>events</name></name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pollRead</name><operator>-&gt;</operator><name>revents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<while>while <condition>(<expr><call><name>PQisBusy</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>PQstatus</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_OK</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>CancelRequested</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>PQrequestCancel</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>poll</name><argument_list>(<argument><expr><name>pollRead</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>forwardQENotices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Fetch any error status existing on completion of the COPY command.
		 * It is critical that for any connection that had an asynchronous
		 * command sent thru it, we call PQgetResult until it returns NULL.
		 * Otherwise, the next time a command is sent to that connection, it
		 * will return an error that there's a command pending.
		 */</comment>
		<expr_stmt><expr><call><name>HOLD_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>PQgetResult</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>PQstatus</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_BAD</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"PQgetResult got status %d seg %d    "</literal></expr></argument>,
				 <argument><expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>forwardQENotices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* if the COPY command had a data error */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_FATAL_ERROR</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Always append error from the primary. Append error from
				 * mirror only if its primary didn't have an error.
				 *
				 * For now, we only report the first error we get from the
				 * QE's.
				 *
				 * We get the error message in pieces so that we could append
				 * whoami to the primary error message only.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_error</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>first_error</name> <operator>=</operator> <call><name>cdbdisp_get_PQerror</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>pgstat_combine_one_qe_result</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oidList</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>nest_level</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>segindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>wrote_xlog</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>MarkTopTransactionWriteXLogOnExecutor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				* Reset the worte_xlog here. Since if the received pgresult not process
				* the xlog write message('x' message sends from QE in ReadyForQuery),
				* the value may still refer to previous dispatch statement. Which may
				* always mark current top transaction has wrote xlog on executor.
				*/</comment>
				<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name><operator>-&gt;</operator><name>wrote_xlog</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * If we are still in copy mode, tell QE to stop it.  COPY_IN
			 * protocol has a way to say 'end of copy' but COPY_OUT doesn't.
			 * We have no option but sending cancel message and consume the
			 * output until the state transition to non-COPY.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_COPY_IN</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Segment still in copy in, retrying the putCopyEnd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PQputCopyEnd</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_COPY_OUT</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Segment still in copy out, canceling QE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * I'm a bit worried about sending a cancel, as if this is a
				 * success case the QE gets inconsistent state than QD.  But
				 * this code path is mostly for error handling and in a
				 * success case we wouldn't see COPY_OUT here. It's not clear
				 * what to do if this cancel failed, since this is not a path
				 * we can error out.  FATAL maybe the way, but I leave it for
				 * now.
				 */</comment>
				<expr_stmt><expr><call><name>PQrequestCancel</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Need to consume data from the QE until cancellation is
				 * recognized. PQgetCopyData() returns -1 when the COPY is
				 * done, a non-zero result indicates data was returned and in
				 * that case we'll drop it immediately since we aren't
				 * interested in the contents.
				 */</comment>
				<while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>PQgetCopyData</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/* An error occurred, log the error and break out */</comment>
					<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error during cancellation: \"%s\""</literal></expr></argument>,
										<argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></while>
				<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* in SREH mode, check if this seg rejected (how many) rows */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>numRejected</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>segment_rows_rejected</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>numRejected</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * When COPY FROM, need to calculate the number of this
			 * segment's completed rows
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>numCompleted</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>segment_rows_completed</name> <operator>=</operator> <name><name>res</name><operator>-&gt;</operator><name>numCompleted</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* free the PGresult object */</comment>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>RESUME_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * add up the number of rows completed and rejected from this segment
		 * to the totals. Only count from primary segs.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>segment_rows_rejected</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>total_rows_rejected</name> <operator>+=</operator> <name>segment_rows_rejected</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>segment_rows_completed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>total_rows_completed</name> <operator>+=</operator> <name>segment_rows_completed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Lost the connection? */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* command error */</comment>
			<expr_stmt><expr><name>io_errors</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io_err_msg</name></expr></argument>,
							 <argument><expr><literal type="string">"Primary segment %d, dbid %d, with error: %s\n"</literal></expr></argument>,
							 <argument><expr><name>seg</name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>segment_database_info</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>,
							 <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Free the PGconn object. */</comment>
			<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<comment type="block">/* Let FTS deal with it! */</comment>
			<expr_stmt><expr><name>num_bad_connections</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>CdbDispatchCopyEnd</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If lost contact with segment db, try to reconnect. */</comment>
	<if_stmt><if>if <condition>(<expr><name>num_bad_connections</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"error occurred while ending COPY: %s"</literal></expr></argument>, <argument><expr><name><name>io_err_msg</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"COPY signals FTS to probe segments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SendPostmasterSignal</name><argument_list>(<argument><expr><name>PMSIGNAL_WAKEN_FTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * Before error out, we need to reset the session. Gang will be cleaned up
		 * when next transaction start, since it will find FTS version bump and
		 * call cdbcomponent_updateCdbComponents().
		 */</comment>
		<expr_stmt><expr><call><name>resetSessionForPrimaryGangLoss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_GP_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"MPP detected %d segment failures, system is reconnected"</literal></expr></argument>,
						 <argument><expr><name>num_bad_connections</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Unless we are aborting the COPY, report any errors with ereport()
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>abort_msg</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* errors reported by the segments */</comment>
		<if_stmt><if>if <condition>(<expr><name>first_error</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ReThrowError</name><argument_list>(<argument><expr><name>first_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* errors that occurred in the COPY itself */</comment>
		<if_stmt><if>if <condition>(<expr><name>io_errors</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_IO_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not complete COPY on some segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>io_err_msg</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>total_rows_completed_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>total_rows_completed_p</name> <operator>=</operator> <name>total_rows_completed</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>total_rows_rejected_p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>total_rows_rejected_p</name> <operator>=</operator> <name>total_rows_rejected</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return;</return>
</block_content>}</block></function>
</unit>
