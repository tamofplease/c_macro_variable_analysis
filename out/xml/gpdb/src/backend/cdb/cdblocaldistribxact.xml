<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdblocaldistribxact.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdblocaldistribxact.c
 *
 * Maintains state of current distributed transactions on each (local)
 * database instance.  Driven by added GP code in the xact.c module.
 *
 * Also support a cache of recently seen committed transactions found by the
 * visibility routines for better performance.  Used to avoid reading the
 * distributed log SLRU files too frequently.
 *
 * Portions Copyright (c) 2007-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdblocaldistribxact.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/twophase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdblocaldistribxact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/ilist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/*  ***************************************************************************** */</comment>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>LocalDistribXactStateToString</name><parameter_list>(<parameter><decl><type><name>LocalDistribXactState</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>LOCALDISTRIBXACT_STATE_ACTIVE</name></expr>:</case>
			<return>return <expr><literal type="string">"Active"</literal></expr>;</return>

		<case>case <expr><name>LOCALDISTRIBXACT_STATE_COMMITTED</name></expr>:</case>
			<return>return <expr><literal type="string">"Committed"</literal></expr>;</return>

		<case>case <expr><name>LOCALDISTRIBXACT_STATE_ABORTED</name></expr>:</case>
			<return>return <expr><literal type="string">"Aborted"</literal></expr>;</return>

		<case>case <expr><name>LOCALDISTRIBXACT_STATE_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Prepared"</literal></expr>;</return>

		<default>default:</default>
			<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*  ***************************************************************************** */</comment>
<function><type><name>void</name></type>
<name>LocalDistribXact_ChangeState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pgprocno</name></decl></parameter>,
							 <parameter><decl><type><name>LocalDistribXactState</name></type> <name>newState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGPROC</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>&amp;</operator><name><name>ProcGlobal</name><operator>-&gt;</operator><name>allProcs</name><index>[<expr><name>pgprocno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXACT</name> <modifier>*</modifier></type><name>pgxact</name> <init>= <expr><operator>&amp;</operator><name><name>ProcGlobal</name><operator>-&gt;</operator><name>allPgXact</name><index>[<expr><name>pgprocno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LocalDistribXactState</name></type> <name>oldState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>distribXid</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>proc</name><operator>-&gt;</operator><name>localDistribXactData</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>LOCALDISTRIBXACT_STATE_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldState</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>localDistribXactData</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>distribXid</name> <operator>=</operator> <name><name>proc</name><operator>-&gt;</operator><name>localDistribXactData</name><operator>.</operator><name>distribXid</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Validate current state given new state.
	 */</comment>
	<switch>switch <condition>(<expr><name>newState</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>LOCALDISTRIBXACT_STATE_PREPARED</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>oldState</name> <operator>!=</operator> <name>LOCALDISTRIBXACT_STATE_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
					 <argument><expr><literal type="string">"Expected distributed transaction xid = "</literal><name>UINT64_FORMAT</name><literal type="string">" to local element to be in state \"Active\" and "</literal>
					 <literal type="string">"found state \"%s\""</literal></expr></argument>,
					 <argument><expr><name>distribXid</name></expr></argument>,
					 <argument><expr><call><name>LocalDistribXactStateToString</name><argument_list>(<argument><expr><name>oldState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>LOCALDISTRIBXACT_STATE_COMMITTED</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>oldState</name> <operator>!=</operator> <name>LOCALDISTRIBXACT_STATE_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
					 <argument><expr><literal type="string">"Expected distributed transaction xid = "</literal><name>UINT64_FORMAT</name><literal type="string">" to local element to be in state \"Active\" or \"Commit Delivery\" and "</literal>
					 <literal type="string">"found state \"%s\""</literal></expr></argument>,
					 <argument><expr><name>distribXid</name></expr></argument>,
					 <argument><expr><call><name>LocalDistribXactStateToString</name><argument_list>(<argument><expr><name>oldState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>LOCALDISTRIBXACT_STATE_ABORTED</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>oldState</name> <operator>!=</operator> <name>LOCALDISTRIBXACT_STATE_ACTIVE</name> <operator>&amp;&amp;</operator>
				<name>oldState</name> <operator>!=</operator> <name>LOCALDISTRIBXACT_STATE_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
					 <argument><expr><literal type="string">"Expected distributed transaction xid = "</literal><name>UINT64_FORMAT</name><literal type="string">" to local element to be in state \"Active\" or \"Abort Delivery\" and "</literal>
					 <literal type="string">"found state \"%s\""</literal></expr></argument>,
					 <argument><expr><name>distribXid</name></expr></argument>,
					 <argument><expr><call><name>LocalDistribXactStateToString</name><argument_list>(<argument><expr><name>oldState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>LOCALDISTRIBXACT_STATE_ACTIVE</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Unexpected distributed to local transaction new state: '%s'"</literal></expr></argument>,
				 <argument><expr><call><name>LocalDistribXactStateToString</name><argument_list>(<argument><expr><name>newState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized distributed to local transaction state: %d"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>proc</name><operator>-&gt;</operator><name>localDistribXactData</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>newState</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>Debug_print_full_dtm</name></expr> ?</condition><then> <expr><name>LOG</name></expr> </then><else>: <expr><name>DEBUG5</name></expr></else></ternary><operator>)</operator></expr></argument>,
		 <argument><expr><literal type="string">"Moved distributed transaction xid = "</literal><name>UINT64_FORMAT</name><literal type="string">" (local xid = %u) from \"%s\" to \"%s\""</literal></expr></argument>,
		 <argument><expr><name>distribXid</name></expr></argument>,
		 <argument><expr><name><name>pgxact</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>,
		 <argument><expr><call><name>LocalDistribXactStateToString</name><argument_list>(<argument><expr><name>oldState</name></expr></argument>)</argument_list></call></expr></argument>,
		 <argument><expr><call><name>LocalDistribXactStateToString</name><argument_list>(<argument><expr><name>newState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LOCAL_DISTRIB_DISPLAY_BUFFER</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>LocalDistribDisplayBuffer</name><index>[<expr><name>MAX_LOCAL_DISTRIB_DISPLAY_BUFFER</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>LocalDistribXact_DisplayString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pgprocno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGPROC</name> <modifier>*</modifier></type><name>proc</name> <init>= <expr><operator>&amp;</operator><name><name>ProcGlobal</name><operator>-&gt;</operator><name>allProcs</name><index>[<expr><name>pgprocno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGXACT</name> <modifier>*</modifier></type><name>pgxact</name> <init>= <expr><operator>&amp;</operator><name><name>ProcGlobal</name><operator>-&gt;</operator><name>allPgXact</name><index>[<expr><name>pgprocno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>snprintfResult</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>snprintfResult</name> <operator>=</operator>
		<call><name>snprintf</name><argument_list>(
				 <argument><expr><name>LocalDistribDisplayBuffer</name></expr></argument>,
				 <argument><expr><name>MAX_LOCAL_DISTRIB_DISPLAY_BUFFER</name></expr></argument>,
				 <argument><expr><literal type="string">"distributed transaction {gxid "</literal><name>UINT64_FORMAT</name><literal type="string">" for local xid %u"</literal></expr></argument>,
				 <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>localDistribXactData</name><operator>.</operator><name>distribXid</name></name></expr></argument>,
				 <argument><expr><name><name>pgxact</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>snprintfResult</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>snprintfResult</name> <operator>&lt;</operator> <name>MAX_LOCAL_DISTRIB_DISPLAY_BUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>LocalDistribDisplayBuffer</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*  ***************************************************************************** */</comment>

<comment type="block">/* Memory context for long-lived local-distributed commit pairs. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>LocalDistribCacheMemCxt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Hash table for the long-lived local-distributed commit pairs. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>LocalDistribCacheHtab</name></decl>;</decl_stmt>

<comment type="block">/*
 * A cached local-distributed transaction pair.
 *
 * We also cache just local-only transactions, so in that case distribXid
 * will be InvalidDistributedTransactionId.
 */</comment>
<typedef>typedef <type><struct>struct <name>LocalDistribXactCacheEntry</name>
<block>{
	<comment type="block">/*
	 * Distributed and local xids.
	 */</comment>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>localXid</name></decl>;</decl_stmt>
	<comment type="block">/* MUST BE FIRST: Hash table key. */</comment>

	<decl_stmt><decl><type><name>DistributedTransactionId</name></type> <name>distribXid</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int64</name></type>		<name>visits</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>dlist_node</name></type>	<name>lruDoubleLinks</name></decl>;</decl_stmt>
	<comment type="block">/* list link for LRU */</comment>

}</block></struct></type> <name>LocalDistribXactCacheEntry</name>;</typedef>

<comment type="block">/*
 * Globals for local-distributed cache.
 */</comment>
<struct><specifier>static</specifier> struct <name>LocalDistribXactCache</name>
<block>{
	<decl_stmt><decl><type><name>int32</name></type>		<name>count</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>dlist_head</name></type>	<name>lruDoublyLinkedHead</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int64</name></type>		<name>hitCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>totalCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>addCount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>removeCount</name></decl>;</decl_stmt>

}</block>			<decl><name>LocalDistribXactCache</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><call><name>DLIST_STATIC_INIT</name><argument_list>(<argument><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>lruDoublyLinkedHead</name></name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>


<function><type><name>bool</name></type>
<name>LocalDistribXactCache_CommittedFind</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>localXid</name></decl></parameter>,
									<parameter><decl><type><name>DistributedTransactionId</name> <modifier>*</modifier></type><name>distribXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LocalDistribXactCacheEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<comment type="block">/* Before doing anything, see if we are enabled. */</comment>
	<if_stmt><if>if <condition>(<expr><name>gp_max_local_distributed_cache</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>LocalDistribCacheMemCxt</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>hash_ctl</name></decl>;</decl_stmt>

		<comment type="block">/* Create the memory context where cross-transaction state is stored */</comment>
		<expr_stmt><expr><name>LocalDistribCacheMemCxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
														<argument><expr><literal type="string">"Local-distributed commit cache context"</literal></expr></argument>,
														<argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
														<argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
														<argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>LocalDistribCacheHtab</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Create the hashtable proper */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LocalDistribXactCacheEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>tag_hash</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>LocalDistribCacheMemCxt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>LocalDistribCacheHtab</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Local-distributed commit cache"</literal></expr></argument>,
											<argument><expr><literal type="number">25</literal></expr></argument>, <comment type="block">/* start small and extend */</comment>
											<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>,
											<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_FUNCTION</name> <operator>|</operator> <name>HASH_CONTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>LocalDistribXactCache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LocalDistribXactCache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dlist_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LocalDistribXactCache</name><operator>.</operator><name>lruDoublyLinkedHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>LocalDistribXactCacheEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(
													   <argument><expr><name>LocalDistribCacheHtab</name></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name>localXid</name></expr></argument>,
													   <argument><expr><name>HASH_FIND</name></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Maintain LRU ordering.
		 */</comment>
		<expr_stmt><expr><call><name>dlist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>lruDoubleLinks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dlist_push_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LocalDistribXactCache</name><operator>.</operator><name>lruDoublyLinkedHead</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>lruDoubleLinks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>distribXid</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>distribXid</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>visits</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>hitCount</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>totalCount</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>LocalDistribXactCache_AddCommitted</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>localXid</name></decl></parameter>,
								   <parameter><decl><type><name>DistributedTransactionId</name></type> <name>distribXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LocalDistribXactCacheEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<comment type="block">/* Before doing anything, see if we are enabled. */</comment>
	<if_stmt><if>if <condition>(<expr><name>gp_max_local_distributed_cache</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>LocalDistribCacheMemCxt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>LocalDistribCacheHtab</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>count</name></name> <operator>&gt;=</operator> <name>gp_max_local_distributed_cache</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LocalDistribXactCacheEntry</name> <modifier>*</modifier></type><name>lastEntry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LocalDistribXactCacheEntry</name> <modifier>*</modifier></type><name>removedEntry</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>count</name></name> <operator>==</operator> <name>gp_max_local_distributed_cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Remove oldest.
		 */</comment>
		<expr_stmt><expr><name>lastEntry</name> <operator>=</operator> <operator>(</operator><name>LocalDistribXactCacheEntry</name> <operator>*</operator><operator>)</operator>
			<call><name>dlist_container</name><argument_list>(<argument><expr><name>LocalDistribXactCacheEntry</name></expr></argument>,
							<argument><expr><name>lruDoubleLinks</name></expr></argument>,
							<argument><expr><call><name>dlist_tail_node</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LocalDistribXactCache</name><operator>.</operator><name>lruDoublyLinkedHead</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lastEntry</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dlist_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lastEntry</name><operator>-&gt;</operator><name>lruDoubleLinks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>removedEntry</name> <operator>=</operator> <operator>(</operator><name>LocalDistribXactCacheEntry</name> <operator>*</operator><operator>)</operator>
			<call><name>hash_search</name><argument_list>(<argument><expr><name>LocalDistribCacheHtab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lastEntry</name><operator>-&gt;</operator><name>localXid</name></name></expr></argument>,
						<argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lastEntry</name> <operator>==</operator> <name>removedEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>removeCount</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Now we can add entry to hash table */</comment>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>LocalDistribXactCacheEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(
													   <argument><expr><name>LocalDistribCacheHtab</name></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name>localXid</name></expr></argument>,
													   <argument><expr><name>HASH_ENTER</name></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Add should not have found local xid = %x"</literal></expr></argument>, <argument><expr><name>localXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>dlist_push_head</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LocalDistribXactCache</name><operator>.</operator><name>lruDoublyLinkedHead</name></name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>lruDoubleLinks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>localXid</name></name> <operator>=</operator> <name>localXid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>distribXid</name></name> <operator>=</operator> <name>distribXid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>visits</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>addCount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type>
<name>LocalDistribXactCache_ShowStats</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nameStr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s: Local-distributed cache counts "</literal>
		 <literal type="string">"(hits "</literal> <name>INT64_FORMAT</name> <literal type="string">", total "</literal> <name>INT64_FORMAT</name> <literal type="string">", adds "</literal> <name>INT64_FORMAT</name> <literal type="string">", removes "</literal> <name>INT64_FORMAT</name> <literal type="string">")"</literal></expr></argument>,
		 <argument><expr><name>nameStr</name></expr></argument>,
		 <argument><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>hitCount</name></name></expr></argument>,
		 <argument><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>totalCount</name></name></expr></argument>,
		 <argument><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>addCount</name></name></expr></argument>,
		 <argument><expr><name><name>LocalDistribXactCache</name><operator>.</operator><name>removeCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
