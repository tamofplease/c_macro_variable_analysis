<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbpathtoplan.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbpathtoplan.c
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbpathtoplan.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbpathlocus.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbllize.h"</cpp:file></cpp:include>		<comment type="block">/* makeFlow() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbpathtoplan.h"</cpp:file></cpp:include>	<comment type="block">/* me */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pathnodes.h"</cpp:file></cpp:include>

<comment type="block">/*
 * cdbpathtoplan_create_flow
 */</comment>
<function><type><name>Flow</name> <modifier>*</modifier></type>
<name>cdbpathtoplan_create_flow</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
						  <parameter><decl><type><name>CdbPathLocus</name></type> <name>locus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Flow</name>	   <modifier>*</modifier></type><name>flow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Distribution */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>CdbPathLocus_IsEntry</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_SINGLETON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>CdbPathLocus_IsSingleQE</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_SINGLETON</name></expr></argument>, <argument><expr><name><name>locus</name><operator>.</operator><name>numsegments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>CdbPathLocus_IsGeneral</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_DISPATCH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_SINGLETON</name></expr></argument>, <argument><expr><call><name>getgpsegmentCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_SINGLETON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* dummy flow */</comment>
		<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>CdbPathLocus_IsSegmentGeneral</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_SINGLETON</name></expr></argument>, <argument><expr><name><name>locus</name><operator>.</operator><name>numsegments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>segindex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>CdbPathLocus_IsReplicated</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_REPLICATED</name></expr></argument>, <argument><expr><name><name>locus</name><operator>.</operator><name>numsegments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>CdbPathLocus_IsHashed</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>CdbPathLocus_IsHashedOJ</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_PARTITIONED</name></expr></argument>, <argument><expr><name><name>locus</name><operator>.</operator><name>numsegments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * hashExpr can be NIL if the rel is partitioned on columns that
		 * aren't projected (i.e. are not present in the result of this Path
		 * operator).
		 */</comment>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>CdbPathLocus_IsStrewn</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_PARTITIONED</name></expr></argument>, <argument><expr><name><name>locus</name><operator>.</operator><name>numsegments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>CdbPathLocus_IsOuterQuery</name><argument_list>(<argument><expr><name>locus</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * A plan that's attached to the outer query later on will run on
		 * the same segments as the outer query. We don't know what the
		 * locus of the outer query is yet, so just mark the plan with a
		 * dummy Flow. It's good enough for the rest of the planner.
		 */</comment>
		<expr_stmt><expr><name>flow</name> <operator>=</operator> <call><name>makeFlow</name><argument_list>(<argument><expr><name>FLOW_SINGLETON</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrect locus type %d to create flow"</literal></expr></argument>, <argument><expr><name><name>locus</name><operator>.</operator><name>locustype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>flow</name><operator>-&gt;</operator><name>locustype</name></name> <operator>=</operator> <name><name>locus</name><operator>.</operator><name>locustype</name></name></expr>;</expr_stmt>
	<return>return <expr><name>flow</name></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* cdbpathtoplan_create_flow */</comment>
</unit>
