<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbtmutils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbtmutils.c
 *	  Provides routines for help performing distributed transaction
 *    management
 *
 * Unlike cdbtm.c, this file deals mainly with packing and unpacking
 * structures, converting values to strings, etc.
 *
 * Portions Copyright (c) 2005-2009, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbtmutils.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbtm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbvars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Crack open the gid to get the DTM start time and distributed
 * transaction id.
 */</comment>
<function><type><name>void</name></type>
<name>dtxDeformGid</name><parameter_list>(
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>,
				<parameter><decl><type><name>DistributedTransactionId</name> <modifier>*</modifier></type><name>distribXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>itemsScanned</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>itemsScanned</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>distribXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>itemsScanned</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Returning without an error here allows tests inheritied from
		 * upstream PostgreSQL to run without errors.  These tests execute
		 * PREPARE TRANSACTION command with a GID that doesn't conform to the
		 * Greenplum specific format.  Note that DTM messages sent from QD
		 * cannot be processed in utility mode.  Therefore, we can safely
		 * allow non-Greenplum GIDs only in utility mode.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>Gp_role</name> <operator>==</operator> <name>GP_ROLE_UTILITY</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>distribXid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bad distributed transaction identifier \"%s\""</literal></expr></argument>, <argument><expr><name>gid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>dtxFormGid</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>gid</name></decl></parameter>, <parameter><decl><type><name>DistributedTransactionId</name></type> <name>gxid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>gid</name></expr></argument>, <argument><expr><name>UINT64_FORMAT</name></expr></argument>, <argument><expr><name>gxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* gxid is unsigned int64 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>gid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>TMGIDSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>DtxStateToString</name><parameter_list>(<parameter><decl><type><name>DtxState</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DTX_STATE_NONE</name></expr>:</case>
			<return>return <expr><literal type="string">"None"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_ACTIVE_DISTRIBUTED</name></expr>:</case>
			<return>return <expr><literal type="string">"Active Distributed"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_ONE_PHASE_COMMIT</name></expr>:</case>
			<return>return <expr><literal type="string">"One Phase Commit (Before Notifying)"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_NOTIFYING_ONE_PHASE_COMMIT</name></expr>:</case>
			<return>return <expr><literal type="string">"Notifying One Phase"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_PREPARING</name></expr>:</case>
			<return>return <expr><literal type="string">"Preparing"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_INSERTING_COMMITTED</name></expr>:</case>
			<return>return <expr><literal type="string">"Inserting Committed"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_INSERTED_COMMITTED</name></expr>:</case>
			<return>return <expr><literal type="string">"Inserted Committed"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_NOTIFYING_COMMIT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Notifying Commit Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_INSERTING_FORGET_COMMITTED</name></expr>:</case>
			<return>return <expr><literal type="string">"Inserting Forget Committed"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_INSERTED_FORGET_COMMITTED</name></expr>:</case>
			<return>return <expr><literal type="string">"Inserted Forget Committed"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_NOTIFYING_ABORT_NO_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Notifying Abort (No Prepared)"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_NOTIFYING_ABORT_SOME_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Notifying Abort (Some Prepared)"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_NOTIFYING_ABORT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Notifying Abort Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_RETRY_COMMIT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Retry Commit Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_STATE_RETRY_ABORT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Retry Abort Prepared"</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>DtxProtocolCommandToString</name><parameter_list>(<parameter><decl><type><name>DtxProtocolCommand</name></type> <name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>command</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_NONE</name></expr>:</case>
			<return>return <expr><literal type="string">"None"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_ABORT_NO_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Distributed Abort (No Prepared)"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_PREPARE</name></expr>:</case>
			<return>return <expr><literal type="string">"Distributed Prepare"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_ABORT_SOME_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Distributed Abort (Some Prepared)"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_COMMIT_ONEPHASE</name></expr>:</case>
			<return>return <expr><literal type="string">"Distributed Commit (one-phase)"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_COMMIT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Distributed Commit Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_ABORT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Distributed Abort Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_RETRY_COMMIT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Retry Distributed Commit Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_RETRY_ABORT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Retry Distributed Abort Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_RECOVERY_COMMIT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Recovery Commit Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_RECOVERY_ABORT_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Recovery Abort Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_SUBTRANSACTION_BEGIN_INTERNAL</name></expr>:</case>
			<return>return <expr><literal type="string">" Begin Internal Subtransaction"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_SUBTRANSACTION_RELEASE_INTERNAL</name></expr>:</case>
			<return>return <expr><literal type="string">"Release Current Subtransaction"</literal></expr>;</return>
		<case>case <expr><name>DTX_PROTOCOL_COMMAND_SUBTRANSACTION_ROLLBACK_INTERNAL</name></expr>:</case>
			<return>return <expr><literal type="string">"Rollback Current Subtransaction"</literal></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>DtxContextToString</name><parameter_list>(<parameter><decl><type><name>DtxContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>context</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DTX_CONTEXT_LOCAL_ONLY</name></expr>:</case>
			<return>return <expr><literal type="string">"Local Only"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QD_DISTRIBUTED_CAPABLE</name></expr>:</case>
			<return>return <expr><literal type="string">"Master Distributed-Capable"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QD_RETRY_PHASE_2</name></expr>:</case>
			<return>return <expr><literal type="string">"Master Retry Phase 2"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QE_ENTRY_DB_SINGLETON</name></expr>:</case>
			<return>return <expr><literal type="string">"Segment Entry DB Singleton"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QE_AUTO_COMMIT_IMPLICIT</name></expr>:</case>
			<return>return <expr><literal type="string">"Segment Auto-Commit Implicit"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QE_TWO_PHASE_EXPLICIT_WRITER</name></expr>:</case>
			<return>return <expr><literal type="string">"Segment Two-Phase Explicit Writer"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QE_TWO_PHASE_IMPLICIT_WRITER</name></expr>:</case>
			<return>return <expr><literal type="string">"Segment Two-Phase Implicit Writer"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QE_READER</name></expr>:</case>
			<return>return <expr><literal type="string">"Segment Reader"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QE_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Segment Prepared"</literal></expr>;</return>
		<case>case <expr><name>DTX_CONTEXT_QE_FINISH_PREPARED</name></expr>:</case>
			<return>return <expr><literal type="string">"Segment Finish Prepared"</literal></expr>;</return>
		<default>default:</default>
			<return>return <expr><literal type="string">"Unknown"</literal></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
