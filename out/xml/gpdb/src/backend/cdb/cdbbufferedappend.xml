<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdbbufferedappend.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * cdbbufferedappend.c
 *	  Write buffers to the end of a file efficiently.
 *
 * (See .h file for usage comments)
 *
 * Portions Copyright (c) 2007, greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdbbufferedappend.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>				<comment type="block">/* for write() */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbappendonlyxlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbbufferedappend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BufferedAppendWrite</name><parameter_list>(
					<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>,
					<parameter><decl><type><name>bool</name></type> <name>needsWAL</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Determines the amount of memory to supply for
 * BufferedAppend given the desired buffer and
 * large write lengths.
 */</comment>
<function><type><name>int32</name></type>
<name>BufferedAppendMemoryLen</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>maxBufferWithCompressionOverrrunLen</name></decl></parameter>,
						<parameter><decl><type><name>int32</name></type> <name>maxLargeWriteLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>maxBufferWithCompressionOverrrunLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>maxLargeWriteLen</name> <operator>&gt;=</operator> <name>maxBufferWithCompressionOverrrunLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Large write memory areas plus adjacent extra memory for 1 buffer. */</comment>
	<return>return <expr><operator>(</operator><name>maxLargeWriteLen</name> <operator>+</operator> <name>maxBufferWithCompressionOverrrunLen</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize BufferedAppend.
 *
 * Use the BufferedAppendMemoryLen procedure to
 * determine the amount of memory to supply.
 */</comment>
<function><type><name>void</name></type>
<name>BufferedAppendInit</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>,
				   <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>memory</name></decl></parameter>,
				   <parameter><decl><type><name>int32</name></type> <name>memoryLen</name></decl></parameter>,
				   <parameter><decl><type><name>int32</name></type> <name>maxBufferWithCompressionOverrrunLen</name></decl></parameter>,
				   <parameter><decl><type><name>int32</name></type> <name>maxLargeWriteLen</name></decl></parameter>,
				   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>relationName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>memory</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>maxBufferWithCompressionOverrrunLen</name><operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>maxLargeWriteLen</name> <operator>&gt;=</operator> <name>maxBufferWithCompressionOverrrunLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>memoryLen</name> <operator>&gt;=</operator> <call><name>BufferedAppendMemoryLen</name><argument_list>(<argument><expr><name>maxBufferWithCompressionOverrrunLen</name></expr></argument>, <argument><expr><name>maxLargeWriteLen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bufferedAppend</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferedAppend</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Init level.
	 */</comment>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relationName</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>relationName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Large-read memory level members.
	 */</comment>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxBufferWithCompressionOverrrunLen</name></name> <operator>=</operator> <name>maxBufferWithCompressionOverrrunLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name> <operator>=</operator> <name>maxLargeWriteLen</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>memory</name></name> <operator>=</operator> <name>memory</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>memoryLen</name></name> <operator>=</operator> <name>memoryLen</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteMemory</name></name> <operator>=</operator> <name>memory</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>afterBufferMemory</name></name> <operator>=</operator>
		<operator>&amp;</operator><name><name>memory</name><index>[<expr><name>maxLargeWriteLen</name></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Buffer level members.
	 */</comment>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>bufferLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * File level members.
	 */</comment>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>filePathName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Takes an open file handle for the next file.
 *
 * Note that eof_uncompressed is used only for storing the
 * uncompressed file size in the catalog, so that the compression
 * ratio could be calculated at the user's request.
 */</comment>
<function><type><name>void</name></type>
<name>BufferedAppendSetFile</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>,
					  <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>,
					  <parameter><decl><type><name>RelFileNodeBackend</name></type> <name>relFileNode</name></decl></parameter>,
					  <parameter><decl><type><name>int32</name></type> <name>segmentFileNum</name></decl></parameter>,
					  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filePathName</name></decl></parameter>,
					  <parameter><decl><type><name>int64</name></type> <name>eof</name></decl></parameter>,
					  <parameter><decl><type><name>int64</name></type> <name>eof_uncompressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>bufferLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen_uncompressed</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>file</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>eof</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relFileNode</name></name> <operator>=</operator> <name>relFileNode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>segmentFileNum</name></name> <operator>=</operator> <name>segmentFileNum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>filePathName</name></name> <operator>=</operator> <name>filePathName</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen_uncompressed</name></name> <operator>=</operator> <name>eof_uncompressed</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Perform a large write i/o.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BufferedAppendWrite</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>needsWAL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>bytesleft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>bytestotal</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>largeWriteMemory</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>largeWriteMemory</name> <operator>=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteMemory</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>bytestotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bytesleft</name> <operator>=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>bytesleft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type>		<name>byteswritten</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>byteswritten</name> <operator>=</operator> <call><name>FileWrite</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,
								 <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>largeWriteMemory</name> <operator>+</operator> <name>bytestotal</name></expr></argument>,
								 <argument><expr><name>bytesleft</name></expr></argument>,
								 <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name> <operator>+</operator> <name>bytestotal</name></expr></argument>,
								 <argument><expr><name>WAIT_EVENT_DATA_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>byteswritten</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write in table \"%s\" to segment file \"%s\": %m"</literal></expr></argument>,
							<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
							<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>filePathName</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>bytesleft</name> <operator>-=</operator> <name>byteswritten</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>bytestotal</name> <operator>+=</operator> <name>byteswritten</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>file_extend_hook</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call>(<modifier>*</modifier><name>file_extend_hook</name>)<argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relFileNode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>elogif</name><argument_list>(<argument><expr><name>Debug_appendonly_print_append_block</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>,
		   <argument><expr><literal type="string">"Append-Only storage write: table \"%s\", segment file \"%s\", write position "</literal> <name>INT64_FORMAT</name> <literal type="string">", bytes written %d"</literal></expr></argument>,
		   <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
		   <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>filePathName</name></name></expr></argument>,
		   <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name></expr></argument>,
		   <argument><expr><name>bytestotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Log each varblock to the XLog. Write to the file first, before
	 * writing the WAL record, to avoid trouble if you run out of disk
	 * space. If WAL record is written first, and then the FileWrite()
	 * fails, there's no way to "undo" the WAL record. If crash
	 * happens, crash recovery will also try to replay the WAL record,
	 * and will also run out of disk space, and will fail. As EOF
	 * controls the visibility of data in AO / CO files, writing xlog
	 * record after writing to file works fine.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>needsWAL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>xlog_ao_insert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relFileNode</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>segmentFileNum</name></name></expr></argument>,
					   <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name></expr></argument>, <argument><expr><name>largeWriteMemory</name></expr></argument>, <argument><expr><name>bytestotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name> <operator>+=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return the position of the current write buffer in bytes.
 */</comment>
<function><type><name>int64</name></type>
<name>BufferedAppendCurrentBufferPosition</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the position of the next write buffer in bytes.
 */</comment>
<function><type><name>int64</name></type>
<name>BufferedAppendNextBufferPosition</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name> <operator>+</operator>
		<name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the next buffer space for appending with a specified length.
 *
 * Returns NULL when the current file does not have enough
 * room for another buffer.
 */</comment>
<function><type><name>uint8</name> <modifier>*</modifier></type>
<name>BufferedAppendGetBuffer</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>,
						<parameter><decl><type><name>int32</name></type> <name>bufferLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>currentLargeWriteLen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>bufferLen</name> <operator>&gt;</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxBufferWithCompressionOverrrunLen</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"bufferLen %d greater than maxBufferLen %d at position "</literal> <name>INT64_FORMAT</name> <literal type="string">" in table \"%s\" in file \"%s\""</literal></expr></argument>,
			 <argument><expr><name>bufferLen</name></expr></argument>, <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxBufferWithCompressionOverrrunLen</name></name></expr></argument>, <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name></expr></argument>,
			 <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
			 <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>filePathName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Let next buffer carry-over into the extra buffer space after the large
	 * write buffer.
	 */</comment>
	<expr_stmt><expr><name>currentLargeWriteLen</name> <operator>=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>currentLargeWriteLen</name> <operator>+</operator> <name>bufferLen</name> <operator>&lt;=</operator>
		   <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name> <operator>+</operator>
		   <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxBufferWithCompressionOverrrunLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>bufferLen</name></name> <operator>=</operator> <name>bufferLen</name></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteMemory</name><index>[<expr><name>currentLargeWriteLen</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the address of the current buffer space being used appending.
 */</comment>
<function><type><name>uint8</name> <modifier>*</modifier></type>
<name>BufferedAppendGetCurrentBuffer</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteMemory</name><index>[<expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the next maximum length buffer space for appending.
 *
 * Returns NULL when the current file does not have enough
 * room for another buffer.
 */</comment>
<function><type><name>uint8</name> <modifier>*</modifier></type>
<name>BufferedAppendGetMaxBuffer</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>BufferedAppendGetBuffer</name><argument_list>(
								   <argument><expr><name>bufferedAppend</name></expr></argument>,
								   <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxBufferWithCompressionOverrrunLen</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>BufferedAppendCancelLastBuffer</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>bufferLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Indicate the current buffer is finished.
 */</comment>
<function><type><name>void</name></type>
<name>BufferedAppendFinishBuffer</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>,
						   <parameter><decl><type><name>int32</name></type> <name>usedLen</name></decl></parameter>,
						   <parameter><decl><type><name>int32</name></type> <name>usedLen_uncompressed</name></decl></parameter>,
						   <parameter><decl><type><name>bool</name></type> <name>needsWAL</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>newLen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>usedLen</name> <operator>&gt;</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>bufferLen</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"Used length %d greater than bufferLen %d at position "</literal> <name>INT64_FORMAT</name> <literal type="string">" in table \"%s\" in file \"%s\""</literal></expr></argument>,
			 <argument><expr><name>usedLen</name></expr></argument>, <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>bufferLen</name></name></expr></argument>, <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name></expr></argument>,
			 <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>,
			 <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>filePathName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<expr_stmt><expr><name>newLen</name> <operator>=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>+</operator> <name>usedLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>newLen</name> <operator>&lt;=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name> <operator>+</operator>
		   <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxBufferWithCompressionOverrrunLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>newLen</name> <operator>&gt;=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Current large-write memory is full.
		 */</comment>
		<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>BufferedAppendWrite</name><argument_list>(<argument><expr><name>bufferedAppend</name></expr></argument>, <argument><expr><name>needsWAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>newLen</name> <operator>&gt;</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int32</name></type>		<name>excessLen</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * We have carry-over in the extra buffer.  Write and then copy
			 * the extra to the front of the large write buffer.
			 */</comment>
			<expr_stmt><expr><name>excessLen</name> <operator>=</operator> <name>newLen</name> <operator>-</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteMemory</name></name></expr></argument>,
				   <argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>afterBufferMemory</name></name></expr></argument>,
				   <argument><expr><name>excessLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>=</operator> <name>excessLen</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Exactly fits.
			 */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>newLen</name> <operator>==</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>maxLargeWriteLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Normal case -- added more data to current buffer.
		 */</comment>
		<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>=</operator> <name>newLen</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>+=</operator> <name>usedLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen_uncompressed</name></name> <operator>+=</operator> <name>usedLen_uncompressed</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Flushes the current file for append.  Caller is resposible for closing
 * the file afterwards.  That close will flush any buffered writes for the
 * file.
 *
 * Returns the file length.
 */</comment>
<function><type><name>void</name></type>
<name>BufferedAppendCompleteFile</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>,
						   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>fileLen</name></decl></parameter>,
						   <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>fileLen_uncompressed</name></decl></parameter>,
						   <parameter><decl><type><name>bool</name></type> <name>needsWAL</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>BufferedAppendWrite</name><argument_list>(<argument><expr><name>bufferedAppend</name></expr></argument>, <argument><expr><name>needsWAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>fileLen</name> <operator>=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>fileLen_uncompressed</name> <operator>=</operator> <name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen_uncompressed</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWritePosition</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>largeWriteLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>bufferLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen_uncompressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>filePathName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Finish with writing all together.
 */</comment>
<function><type><name>void</name></type>
<name>BufferedAppendFinish</name><parameter_list>(<parameter><decl><type><name>BufferedAppend</name> <modifier>*</modifier></type><name>bufferedAppend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bufferedAppend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>bufferLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>fileLen_uncompressed</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relationName</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relationName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufferedAppend</name><operator>-&gt;</operator><name>relationName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
