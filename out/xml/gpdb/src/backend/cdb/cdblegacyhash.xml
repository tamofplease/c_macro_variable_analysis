<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/gpdb/src/backend/cdb/cdblegacyhash.c"><comment type="block">/*--------------------------------------------------------------------------
 *
 * cdblegacyhash.c
 *	  Hash opclass implementations compatible with legacy DISTRIBUTED BY
 *	  hashing.
 *
 * These are compatibility routines, which implement a hashing that's
 * compatible with the "cdbhash" functions in GPDB 5 and below.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 *
 *
 * IDENTIFICATION
 *	    src/backend/cdb/cdblegacyhash.c
 *
 *--------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cdb/cdbhash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/cash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/complex_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datetime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/uuid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varbit.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_GETARG_ITEMPOINTER</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DatumGetItemPointer(PG_GETARG_DATUM(n))</cpp:value></cpp:define>

<comment type="block">/*
 * FNV1_32_INIT is defined in cdbhash.h, so that it can be used directly
 * from cdbhash.c
 */</comment>

<comment type="block">/* Constant prime value used for an FNV1 hash */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FNV_32_PRIME</name></cpp:macro> <cpp:value>((uint32)0x01000193)</cpp:value></cpp:define>

<comment type="block">/* Constant used for hashing a NULL value */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NULL_VAL</name></cpp:macro> <cpp:value>((uint32)0XF0F0F0F1)</cpp:value></cpp:define>

<comment type="block">/* Constant used for hashing a NAN value  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN_VAL</name></cpp:macro> <cpp:value>((uint32)0XE0E0E0E1)</cpp:value></cpp:define>

<comment type="block">/* Constant used for hashing an invalid value  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INVALID_VAL</name></cpp:macro> <cpp:value>((uint32)0XD0D0D0D1)</cpp:value></cpp:define>

<comment type="block">/* local function declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>fnv1_32_buf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>inet_getkey</name><parameter_list>(<parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inet_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>ignoreblanks</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * The normal PostgreSQL hash functions take one value as argument, and
 * return a hashcode, i.e. hashcode = hashfunc(arg). When multiple columns
 * need to be hashed together, the hash function is called separately for
 * each column, and the results are combined, with a 1 bit rotation to for
 * better mixing:
 *
 * hashcode =  hashfunc2(col2) ^ rot(hashfunc1(col1))
 *
 * The legacy hashing scheme, however, uses the already-computed hash code
 * as part of the computation:
 *
 * hashcode = hashfunc1(col2, hashfunc(col1, FNV1_32_INIT))
 *
 * Note that the hash function effectively has two arguments: the new
 * datum to be hashed, and the hash code computed so far. That's incompatible
 * with Postgres hash functions, which only have one column.
 *
 * We could represent the legacy hash functions as two-argument functions,
 * and store them in pg_amproc entries with a different strategy number than
 * the normal hash functions use (they use HASHPROC, which is 1). But that
 * seems like it might cause different problems. So instead, we pass the
 * "previous" hash value in this global variable, 'magic_hash_stash'. That
 * way, the legacy hash opclasses work like any other hash opclass, except
 * when the hash function is called from cdbhash.c. cdbhash.c needs to treat
 * them specially anyway, since the "reduction" algorithm used to derive the
 * segment number from the hash code is different too. (We could represent the
 * reduction algorithm as yet another support function, but we don't need the
 * flexibility, so let's not make things more complicated for the sake of it.)
 *
 * The 'magic_hash_stash' is initialized at FNV1_32_INIT, and reset back to
 * that value after any hash computation in cdbhash.c. That way, the result
 * you get if you call one of the legacy functions directly, is the same as
 * cdbhash would compute for a single column.
 */</comment>
<decl_stmt><decl><type><name>uint32</name></type>	<name>magic_hash_stash</name> <init>= <expr><name>FNV1_32_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>hashFn</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>fnv1_32_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>magic_hash_stash</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_int2</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_int4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_int8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_float4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_float8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_numeric</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_char</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_text</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_bpchar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_bytea</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_name</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_oid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_tid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_timestamp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_timestamptz</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_date</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_time</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_timetz</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_interval</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_inet</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_macaddr</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_bit</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_bool</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_array</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_oidvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_cash</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_uuid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_complex</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>cdblegacyhash_anyenum</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Oid</name></type>
<name>get_legacy_cdbhash_opclass_for_base_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>orig_typid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opclass_name</name></decl>;</decl_stmt>

	<comment type="block">/* look through domains */</comment>
	<expr_stmt><expr><name>typid</name> <operator>=</operator> <call><name>getBaseType</name><argument_list>(<argument><expr><name>orig_typid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * These are the datatypes that were "GPDB-hashable" in GPDB 5.
	 *
	 * NOTE: We don't support array types, even though GPDB 5 used to implement
	 * hashing for them. The reason is that the hash function for those was
	 * actually broken, see https://github.com/greenplum-db/gpdb/issues/5467.
	 */</comment>
	<switch>switch <condition>(<expr><name>typid</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_int2_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_int4_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_int8_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_float4_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_float8_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NUMERICOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_numeric_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHAROID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_char_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BPCHAROID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_bpchar_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TEXTOID</name></expr>:</case>
		<case>case <expr><name>VARCHAROID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_text_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BYTEAOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_bytea_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NAMEOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_name_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_oid_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIDOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_tid_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGPROCOID</name></expr>:</case>
		<case>case <expr><name>REGPROCEDUREOID</name></expr>:</case>
		<case>case <expr><name>REGOPEROID</name></expr>:</case>
		<case>case <expr><name>REGOPERATOROID</name></expr>:</case>
		<case>case <expr><name>REGCLASSOID</name></expr>:</case>
		<case>case <expr><name>REGTYPEOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_oid_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_timestamp_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_timestamptz_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_date_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMEOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_time_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMETZOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_timetz_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INTERVALOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_interval_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INETOID</name></expr>:</case>
		<case>case <expr><name>CIDROID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_inet_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MACADDROID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_macaddr_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BITOID</name></expr>:</case>
		<case>case <expr><name>VARBITOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_bit_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BOOLOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_bool_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDVECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_oidvector_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CASHOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_cash_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UUIDOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_uuid_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>COMPLEXOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_complex_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>ANYENUMOID</name></expr>:</case>
			<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_enum_ops"</literal></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<comment type="block">/* Is it an an enum? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>type_is_enum</name><argument_list>(<argument><expr><name>typid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <literal type="string">"cdbhash_enum_ops"</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>opclass_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opclass_name</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>get_opclass_oid</name><argument_list>(<argument><expr><name>HASH_AM_OID</name></expr></argument>,
						   <argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"pg_catalog"</literal></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name>opclass_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>isLegacyCdbHashFunction</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>funcid</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>F_CDBLEGACYHASH_INT2</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_INT4</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_INT8</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_FLOAT4</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_FLOAT8</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_NUMERIC</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_CHAR</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_TEXT</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_BPCHAR</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_BYTEA</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_NAME</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_OID</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_TID</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_TIMESTAMP</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_TIMESTAMPTZ</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_DATE</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_TIME</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_TIMETZ</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_INTERVAL</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_INET</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_MACADDR</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_BIT</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_BOOL</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_ARRAY</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_OIDVECTOR</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_CASH</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_UUID</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_COMPLEX</name></expr>:</case>
		<case>case <expr><name>F_CDBLEGACYHASH_ANYENUM</name></expr>:</case>
			<return>return <expr><name>true</name></expr>;</return>

		<default>default:</default>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_int2</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* an 8 byte buffer for all integer sizes */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>intbuf</name> <init>= <expr><operator>(</operator><name>int64</name><operator>)</operator>  <call><name>PG_GETARG_INT16</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* do the hash using the selected algorithm */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>intbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_int4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* an 8 byte buffer for all integer sizes */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>intbuf</name> <init>= <expr><operator>(</operator><name>int64</name><operator>)</operator>  <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* do the hash using the selected algorithm */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>intbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_int8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* an 8 byte buffer for all integer sizes */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>intbuf</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* do the hash using the selected algorithm */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>intbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_float4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float4</name></type>		<name>buf_f4</name> <init>= <expr><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * On IEEE-float machines, minus zero and zero have different bit
	 * patterns but should compare as equal.  We must ensure that they
	 * have the same hash value, which is most easily done this way:
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>buf_f4</name> <operator>==</operator> <operator>(</operator><name>float4</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf_f4</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>buf_f4</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_f4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_float8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type>		<name>buf_f8</name> <init>= <expr><call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * On IEEE-float machines, minus zero and zero have different bit
	 * patterns but should compare as equal.  We must ensure that they
	 * have the same hash value, which is most easily done this way:
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>buf_f8</name> <operator>==</operator> <operator>(</operator><name>float8</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf_f8</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>buf_f8</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf_f8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_numeric</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Numeric</name></type>		<name>num</name> <init>= <expr><call><name>PG_GETARG_NUMERIC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name></decl>;</decl_stmt>		<comment type="block">/* length for the data buffer */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hash</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>numeric_is_nan</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name>nanbuf</name> <init>= <expr><name>NAN_VAL</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>nanbuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>nanbuf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
		<comment type="block">/* not a nan */</comment>
	<block>{<block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>numeric_digits</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>numeric_len</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* do the hash using the selected algorithm */</comment>
	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Avoid leaking memory for toasted inputs */</comment>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_char</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>char_buf</name> <init>= <expr><call><name>PG_GETARG_CHAR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>char_buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* also for BPCHAR and VARCHAR */</comment>
<function><type><name>Datum</name></type>
<name>cdblegacyhash_text</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>text_buf</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hash</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>text_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>text_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* adjust length to not include trailing blanks */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ignoreblanks</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Avoid leaking memory for toasted inputs */</comment>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>text_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_bpchar</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>cdblegacyhash_text</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_bytea</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>bytea_buf</name> <init>= <expr><call><name>PG_GETARG_BYTEA_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hash</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>bytea_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>bytea_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Avoid leaking memory for toasted inputs */</comment>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>bytea_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_name</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>namebuf</name> <init>= <expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<comment type="block">/* adjust length to not include trailing blanks */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>ignoreblanks</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>namebuf</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><name>namebuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_oid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* an 8 byte buffer for all integer sizes */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>intbuf</name> <init>= <expr><operator>(</operator><name>int64</name><operator>)</operator>  <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* do the hash using the selected algorithm */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>intbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_tid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ItemPointer</name></type>	<name>tid</name> <init>= <expr><call><name>PG_GETARG_ITEMPOINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* See hashtid() for why we're not using sizeof(ItemPointerData) here */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>tid</name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BlockIdData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OffsetNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_timestamp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Timestamp</name></type> <name>tsbuf</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tsbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tsbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_timestamptz</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>tstzbuf</name> <init>= <expr><call><name>PG_GETARG_TIMESTAMPTZ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>tstzbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tstzbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_date</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type>	<name>datebuf</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>datebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>datebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_time</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimeADT</name></type> <name>timebuf</name> <init>= <expr><call><name>PG_GETARG_TIMEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>timebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_timetz</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimeTzADT</name> <modifier>*</modifier></type><name>timetzptr</name> <init>= <expr><call><name>PG_GETARG_TIMETZADT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>

	<comment type="block">/*
	 * will not compare to TIMEOID on equal values. Postgres never
	 * attempts to compare the two as well.
	 */</comment>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>timetzptr</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Specify hash length as sizeof(double) + sizeof(int4), not as
	 * sizeof(TimeTzADT), so that any garbage pad bytes in the
	 * structure won't be included in the hash!
	 */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>timetzptr</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>timetzptr</name><operator>-&gt;</operator><name>zone</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_interval</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Interval</name> <modifier>*</modifier></type><name>intervalptr</name> <init>= <expr><call><name>PG_GETARG_INTERVAL_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>intervalptr</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Specify hash length as sizeof(double) + sizeof(int4), not as
	 * sizeof(Interval), so that any garbage pad bytes in the
	 * structure won't be included in the hash!
	 */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>intervalptr</name><operator>-&gt;</operator><name>time</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>intervalptr</name><operator>-&gt;</operator><name>month</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_inet</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* inet/cidr */</comment>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>inetptr</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>inet_hkey</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet_struct</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hash</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>inet_getkey</name><argument_list>(<argument><expr><name>inetptr</name></expr></argument>, <argument><expr><name>inet_hkey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet_hkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* fill-in inet_key &amp;
																 * get len */</comment>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>inet_hkey</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Avoid leaking memory for toasted inputs */</comment>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>inetptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_macaddr</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>macaddr</name> <modifier>*</modifier></type><name>macptr</name> <init>= <expr><call><name>PG_GETARG_MACADDR_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>macptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>macaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_bit</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Note that these are essentially strings. we don't need to worry
	 * about '10' and '010' to compare, b/c they will not, by design.
	 * (see SQL standard, and varbit.c)
	 */</comment>
	<decl_stmt><decl><type><name>VarBit</name> <modifier>*</modifier></type><name>vbitptr</name> <init>= <expr><call><name>PG_GETARG_VARBIT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hash</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARBITBYTES</name><argument_list>(<argument><expr><name>vbitptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARBITS</name><argument_list>(<argument><expr><name>vbitptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>hash</name> <operator>=</operator> <call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Avoid leaking memory for toasted inputs */</comment>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>vbitptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_bool</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>bool_buf</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bool_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_array</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>arrbuf</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>arrbuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>arrbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_oidvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>oidvector</name>  <modifier>*</modifier></type><name>oidvec_buf</name> <init>= <expr><operator>(</operator><name>oidvector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>		<comment type="block">/* pointer to the data */</comment>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>oidvec_buf</name><operator>-&gt;</operator><name>dim1</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>oidvec_buf</name><operator>-&gt;</operator><name>values</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_cash</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Cash</name></type>		<name>cash_buf</name> <init>= <expr><call><name>PG_GETARG_CASH</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cash_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Cash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_uuid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_uuid_t</name>  <modifier>*</modifier></type><name>uuid_buf</name> <init>= <expr><call><name>PG_GETARG_UUID_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>uuid_buf</name></expr></argument>, <argument><expr><name>UUID_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_complex</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Complex</name> <modifier>*</modifier></type><name>complex_ptr</name> <init>= <expr><call><name>PG_GETARG_COMPLEX_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>complex_real</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>complex_imag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Complex</name></type>		<name>complex_buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>complex_real</name> <operator>=</operator> <call><name>re</name><argument_list>(<argument><expr><name>complex_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>complex_imag</name> <operator>=</operator> <call><name>im</name><argument_list>(<argument><expr><name>complex_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * On IEEE-float machines, minus zero and zero have different bit
	 * patterns but should compare as equal.  We must ensure that they
	 * have the same hash value, which is most easily done this way:
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>complex_real</name> <operator>==</operator> <operator>(</operator><name>float8</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>complex_real</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>complex_imag</name> <operator>==</operator> <operator>(</operator><name>float8</name><operator>)</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>complex_imag</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>INIT_COMPLEX</name><argument_list>(<argument><expr><operator>&amp;</operator><name>complex_buf</name></expr></argument>, <argument><expr><name>complex_real</name></expr></argument>, <argument><expr><name>complex_imag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>complex_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Complex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cdblegacyhash_anyenum</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* an 8 byte buffer for all integer sizes */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>intbuf</name> <init>= <expr><operator>(</operator><name>int64</name><operator>)</operator>  <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* do the hash using the selected algorithm */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_UINT32</name><argument_list>(<argument><expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>intbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Update the hash value for a null Datum, for any datatype.
 */</comment>
<function><type><name>uint32</name></type>
<name>cdblegacyhash_null</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>nullbuf</name> <init>= <expr><name>NULL_VAL</name></expr></init></decl>;</decl_stmt> <comment type="block">/* stores the constant value that
									 * represents a NULL */</comment>
	<return>return <expr><call><name>hashFn</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>nullbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nullbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * fnv1_32_buf - perform a 32 bit FNV 1 hash on a buffer
 *
 * input:
 *	buf - start of buffer to hash
 *	len - length of buffer in octets (bytes)
 *	hval	- previous hash value or FNV1_32_INIT if first call.
 *
 * returns:
 *	32 bit hash as a static hash type
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>fnv1_32_buf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>bp</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* start of buffer */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>be</name> <init>= <expr><name>bp</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* beyond end of buffer */</comment>

	<comment type="block">/*
	 * FNV-1 hash each octet in the buffer
	 */</comment>
	<while>while <condition>(<expr><name>bp</name> <operator>&lt;</operator> <name>be</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* multiply by the 32 bit FNV magic prime mod 2^32 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_FNV_GCC_OPTIMIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><name>hval</name> <operator>*=</operator> <name>FNV_32_PRIME</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>hval</name> <operator>+=</operator> <operator>(</operator><name>hval</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hval</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hval</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hval</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>hval</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* xor the bottom with the current octet */</comment>
		<expr_stmt><expr><name>hval</name> <operator>^=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <operator>*</operator><name>bp</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* return our new hash value */</comment>
	<return>return <expr><name>hval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Support function for hashing on inet/cidr (see network.c)
 *
 * Since network_cmp considers only ip_family, ip_bits, and ip_addr,
 * only these fields may be used in the hash; in particular don't use type.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>inet_getkey</name><parameter_list>(<parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>inet_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>addrsize</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><operator>(</operator><operator>(</operator><name>inet_struct</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>family</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGSQL_AF_INET</name></expr>:</case>
			<expr_stmt><expr><name>addrsize</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGSQL_AF_INET6</name></expr>:</case>
			<expr_stmt><expr><name>addrsize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>addrsize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>addrsize</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>key_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inet_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>inet_struct</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>family</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>inet_key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>inet_struct</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>bits</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>inet_key</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>inet_struct</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>ipaddr</name></expr></argument>, <argument><expr><name>addrsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>addrsize</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*================================================================
 *
 * GENERAL PURPOSE UTILS
 *
 *================================================================
 */</comment>

<comment type="block">/*
 * Given the original length of the data array this function is
 * recalculating the length after ignoring any trailing blanks. The
 * actual data remains unmodified.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ignoreblanks</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* look for trailing blanks and skip them in the hash calculation */</comment>
	<while>while <condition>(<expr><name><name>data</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

		<comment type="block">/*
		 * If only 1 char is left, leave it alone! The string is either empty
		 * or has 1 char
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
</unit>
